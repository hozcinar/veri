Abstract;Year
Computational Thinking [1] is a universal metaphor of reasoning used by both mankind and machines. From this perspective it has the potential to be a comprehensive umbrella for capturing the intrinsic nature of computing and conveying this in an understandable way to students and the general public. It represents a broad spectrum of reasoning across time and disciplines. Learning to count is a beginning of human computational thinking, followed naturally by arithmetic computation and abstract levels of symbol based thinking, often starting with algebra. Counting, arithmetic, symbols and abstract thinking are fundamental to the study of computing. Computational reasoning is the core of all modern Science, Technology, Engineering and Mathematics (STEM) disciplines and is intrinsic to all other disciplines from A to Z. It is used in our everyday lives from baking a cake, changing a tire or brushing our teeth. The human brain is wired to think computationally, as are modem computing devices. As educators, a Computational Thinking perspective can help us to convey fundamental computing ideas to all students. This special session will outline the principles of Computational Thinking, offer suggestions on ways to promote Computational Thinking at all educational levels, and provide ample time for audience participation and discussion.;2007
In this paper, the design and implementation of a novel introductory computer science course for non-majors is presented. This course focuses on the major contributions in computer science from the perspective of the process of computation. This course differs from most introductory courses in computer science in that it does not include programming using a computer programming language. Students focus on algorithms and the principle of computational thinking, and use a flowchart simulator to experiment with various short algorithms and build simple computer games without dealing with programming language syntax. Steadily increasing enrollments and interest from various departments on campus indicate that this course has become a successful addition to our introductory CS offerings.;2007
In this paper, we describe a pilot summer workshop (CS4HS) held at Carnegie Mellon University in July 2006 for high school CS teachers to provide compelling material that the teachers can use in their classes to emphasize computational thinking and the many possibilities of computer science. Diversity and broadening participation was explicitly addressed throughout the workshop. We focused on broadening the image of what CS is - and who computer scientists are - since the reasons for under-representation in the field are very much the same as the reasons for the huge decline in interest. We describe the design of the workshop along with results from initial surveys and evaluations. Short-term evaluations show that this workshop was successful in changing the perception of CS for these teachers and giving them the impetus to include broader topics in their programming courses for the upcoming school year. Future surveys will track the long-term effect of this workshop.;2007
The exhibition Speculative Data and the Creative Imaginary: shared innovative visions between art and technology will bring together examples of best practices in creative digital media art and design that foster strong ties to current research trends in computer science and engineering. Exhibited works align with the 2007 ACM Creativity and Cognition conference themes: cultivating creative minds, sustaining creative communities and promoting creative engagement as they demonstrate innovative, novel, sometimes provocative and other times promising models for research in the design of interactive human centered applications, technology innovation, aesthetic expression, and social critique. [1] This is a timeless opportunity to connect the larger ACM Creativity and Cognition conference community of researchers and university faculty with a community of creative thinkers who share research interests across human centered computing, technology development, and scientific discoveries. The exhibition is hosted by the National Academy of Sciences Exhibitions and Cultural Programs and will be held at the National Academy of Sciences Rotunda Gallery, 2100 C Street NW, Washington D.C. from June 4(th) to August 24(th), 2007.;2007
The fifth annual graduate consortium at VL/HCC addresses the question: How can researchers and designers of end-user development environments better address the needs of an increasingly diverse population?.;2007
The human culture and cognition are consequence of the thinking capability of human, and thinking is a social activity. People have similar idea and opinion interacts, and interactions force people to have similar idea and interaction take place locally. However, its effect is global. In this study, we try to determine / define the computational thinking for Saplings Growing up Algorithm (SGuA) which belongs to evolutionary algorithms. Thinking capability can be defined based on the process interaction for similar solutions. SGuA has four operators: mating, branching, vaccinating and surviving. We determined the computational thinking capability for each operator. Finally, we determined computational thinking capability of SGuA.;2007
Computational thinking (CT) is a way to solve problems and understand complex systems that draws on concepts fundamental to computer science and is well suited to the challenges that face researchers of complex, linked social-ecological systems. This paper explores CT's usefulness to sustainability science through the application of the services-oriented architecture (SOA). The SOA is a popular organizational framework in information technology that enables businesses to describe the services they offer, including how, where, to whom, and under what terms these services are available to consumers. It provides a straightforward, scalable, and portable way to describe and organize complex business systems, with an emphasis on system controls and component interactions rather than on the system components themselves. Here, we present the SOA as a path to a more mature ecosystem services concept, in support of integrated assessment frameworks such as the Millennium Ecosystem Assessment (MA). With the SOA we capture important interrelationships among ecosystems, ecosystem service consumers, and ecosystem service governance authorities, particularly the effects of their interactions on the viability of ecosystem services. By standardizing the description and relationships involving ecosystem services, the SOA supports a diagnostic approach for evaluating stability and change in ecosystem service use across both space and time, when influenced by drivers of social, political, and/or ecological change, whether directional or stochastic, planned or otherwise. We present here a prototype of the SOA and illustrate its utility with an example from rural Alaskan communities.;2008
Computational thinking will influence everyone in every field of endeavour. This vision poses a new educational challenge for our society, especially for our children. In thinking about computing, we need to be attuned to the three drivers of our field: science, technology and society. Accelerating technological advances and monumental societal demands force us to revisit the most basic scientific questions of computing.;2008
In many introductory programming courses, the surface features of the programming language can distract and intimidate students so much that they fail to concentrate on what is really the brainy task: solving the problem conceptually. To counter this, we devised a form of structured pseudocode, designed to highlight and facilitate algorithmic construction so that the complexities of the programming language can be deferred until proficiency in design has been reached. Students taught with this experimental approach are not introduced to the language itself, or the compiler, until the last few weeks of the semester. A controlled experiment comparing this approach with a traditional language-based pedagogy has revealed that by the end of the course, students' programming skills, even on language-specific tasks, is every bit as strong as students taught traditionally, and that their comfort level with modularity (writing functions) is increased. Additionally, we found that students appear to strongly prefer such an approach, citing mostly emotive benefits, and that these effects may be particularly strong among women.;2008
In this paper, a learning and teaching framework is described which is aimed at increasing student interest in studying computer science as a discipline, or at least in better understanding how a computer and its tools work and can be used in solving problems which may occur in different areas. In the beginning of information education in Poland, in the mid 80's, the informatics curricula for schools and teaching were focused on computer science. Then, in the beginning of the 90's, with the growing popularity and wide use of end-user friendly software, the emphasis in education has moved from computer science to information technology, from constructing computer solutions to using ready-made tools, from computer science for some students to information technology for all. We demonstrate here, however, how teaching and learning information technology can be used to enhance algorithmic and computational thinking in solving with computers, problems which arise in various school subjects, learning disciplines and in real life. We strongly believe that the learning methodology presented here, about computer use by students and applying computers and information technology to solving problems, would be a good motivation and preparation for their future decisions to study computing and become computer specialists.;2008
My vision for the 21st Century: Computational thinking will be a fundamental skill used by everyone in the world. To reading, writing, and arithmetic, let's add computational thinking to every child's analytical ability. Computational thinking has already influenced other disciplines, from the sciences to the arts. The new NSF Cyber-enabled Discovery and Innovation initiative in a nutshell is computational thinking for science and engineering. Realizing this vision gives the field of computing both exciting research opportunities and novel educational challenges. The field of computing is driven by technology innovation, societal demands, and scientific questions. We are often too easily swept up with the rapid progress in technology and the surprising uses by society of our technology, that we forget about the science that underlies our field. In thinking about computing, I have started a list of Deep Questions in Computing, with the hope of encouraging the community to think about the scientific drivers of our field.;2008
Programming is always a fundamental and important part of computer science curriculums, and most Computer Science programs offer an introductory programming methodology course (CS1) for freshmen. This paper describes our teaching philosophy and instructional design of the introductory programming course in detail, which emphasizes computational thinking, abstract thinking and problem-solving ability instead of programming language syntax. Also the course is carefully designed to make each student beneficial whether he has stronger foundation or weaker one.;2008
"Students in sophomore computer science (CS 2) are required to study the properties of a number of standard data structures; that is, common patterns of organizing data in a computer program. Typically, students are first presented with diagrams that graphically depict the data structure, and then shown sample code that actually implements it. We have observed, however, that there is a sizable gap between these two representations, and that many students who master the former have great difficulty translating that knowledge into the latter. We suspect that our pedagogy could be made more effective by treating diagrams themselves as formal entities, and providing students with a way of mapping operations on the easy (pictorial) domain into the hard (programmatic) domain. To help develop this technique, we carried out a semester-long experiment in which students demonstrated their understanding of the material both in diagrams and in code. The goal was to ascertain the kinds of mistakes that are often made, and how a technique like this could be most effective.";2008
The sixth annual graduate consortium at VL/HCC addresses the question: How can researchers and designers of end-user development environments support computational problem-solving and information manipulation by diverse user populations?;2008
3D game development can be an enticing way to attract K-12 students to computer science, but designing and programming 3D games is far from trivial. Students need to achieve a certain level of 3D fluency in modeling, animation, and programming to be able to create compelling 3D content. The combination of innovative end-user development tools and standards-based curriculum that promotes IT fluency by shifting the pedagogical focus from programming to design, can address motivational aspects without sacrificing principled educational goals. The AgentCubes 3D game-authoring environment raises the ceiling of end-user development without raising the threshold. Our formal user study shows that with Incremental 3D, the gradual approach to transition from 2D to 3D authoring, middle school students can build sophisticated 3D games including 3D models, animations, and programming. (C) 2009 Elsevier Ltd. All rights reserved.;2009
Computational and mathematical methods arguably have an enormous potential for serving practical needs in crime analysis and prevention by offering novel tools for crime investigations and experimental platforms for evidence-based policy making. We present a comprehensive formal framework and tool support for mathematical and computational modeling of criminal behavior to facilitate systematic experimental studies of a wide range of criminal activities in urban environments. The focus is on spatial and temporal aspects of different forms of crime, including opportunistic and serial violent crimes. However, the proposed framework provides a basis to push beyond conventional empirical research and engage the use of computational thinking and social simulations in the analysis of terrorism and counter-terrorism.;2009
Computational thinking is taken for the fundamental skills for everyone, not just computer scientist, to learn and use. It remains to be explored in many aspects how to understand the essence of computational thinking and how cultivate the computational thinking ability of students. In the view of course teaching of computer science, this paper discusses the perception of the essence of computational thinking and presents a method for the cultivation of the computational thinking ability by using courses as carrier, and a case study of the course Data Structures and Algorithms.;2009
In this paper, we describe a computer science curricular framework for creating innovative, four-year computer science programs for high school computer science courses. Based on a suggested set of great principles of computing by Peter Denning, the framework is structured as a stack of four curricular layers. The result is a framework design that provides a high degree of curricular and pedagogical flexibility, particularly suited for the rapidly changing discipline of computer science. This report describes the computer science curricular framework, the implementation of the framework and the deployment of a four-year curriculum from the implemented framework. Initial classroom experiences are reported.;2009
Many prominent computer scientists have proposed that every student should learn computational thinking. Computational thinking involves learning how to use computers to solve problems. It involves learning how to choose and design algorithms tailored to the problem, and how to build computer systems that implement these algorithms. How does visual thinking fit into this broader effort? In this talk I will argue that both computational and visual thinking are examples of different systems of thought. A system of thought is a set of ideas and representations that help us efficiently structure our thinking. Others examples of systems of thought include logic, mathematics, and language. Each of these systems of thought has strengths and weaknesses. There are problems where a visual representation immediately leads to the right answer. Unfortunately, many proponents of visualization advocate its use even though there are better approaches to solving the same problem. Furthermore, even if visualization is the appropriate tool, the most important first step is deciding how to depict the information. There are many subtle trade-offs in the choice of visual representation. Finally, experts often use multiple systems of thought synergistically. Many of the best examples of visualization occur when it is coupled with other ways of thinking.;2009
"Software talents should have the engineering ability, a common sense in IT industry, which is characterized by the fact that design plays a very important role in software engineering. Basis on the enhancement of computational thinking, the reform ideas of the development of the student's engineering ability are introduced. The detailed approaches include: 1) Extraction of fundamental discipline concept of engineering ability development; 2) Problem solving-centered organization of courses of software development tools; 3) Initiate the courses of software engineering as soon as possible; 4) Continual training of abstract logical thinking for the purpose of software abstract thinking.";2009
The appearance and innovation of computational tools depends on human thinking and initiative, and on the other hand, human thinking is affected by computational tools. The strong function of computational tools in some aspect is superior to that of human brains. It is the application of such strong function that changes the face of human society. At the same time, it presents new methods for scientific research and new perspective for solving problems, promotes human thinking to a higher level, and presents new means for people to understand and change the world. The advantage of computational tools over human brains is the speed, while the initiative ability of human brains is not owned by computational tools. Perfect combination of thinking and computing gives birth to a series of achievements, and lays the foundation of science.;2009
The computational thinking view recognizes that underlying computing concepts are integral to our everyday lives and pervasive in many disciplines of study.;2009
The essence of computational thinking is thinking about data and ideas, and using and combining these resources to solve problems. The internal requirement of the programming courses is to cultivate the student's the ability to use programming language for problem analysis and problem solving. According to the characteristics of the courses themselves, this paper proposes a course teaching system built on the core of computational thinking ability cultivation and related reform method, which emphasizes the problem solving and algorithm design and determines the relationship between object-oriented method and procedure-oriented method in theoretical teaching, and designs multi-layer experiments and project-based experiment organization. This teaching strategy proves effective through teaching practice.;2009
"This abstract describes design-based research on building tools that support the development of skills which will allow learners to become producers rather than simply consumers of computational tools. Game creation is an activity which has good potential for learning skills such as multimodal writing and Computational thinking skills. Existing tools make the creation of commercial quality games possible, but fall short of fulfilling the potential for skills development Learner-centred design of a suite of tools which it;ill guide learners towards activities with potential for the desired skills development is underway Current progress on the design and development of tools is reported and future activities are outlined.";2009
This paper discusses and analyzes the impact of computational thinking in scientific discovery. This paper holds the view point that the appearance and innovation of computational tools depends on human thinking and initiative, and on the other hand, human thinking is affected by computational tools. The strong function of computational tools in some aspect is superior to that of human brains. It is the application of such strong function that changes the face of human society. At the same time, it presents new methods for scientific research and new perspective for solving problems, promotes human thinking to a higher level, and presents new means for people to understand and change the world. The advantage of computational tools over human brains is the speed, while the initiative ability of human brains is not owned by computational tools. Perfect combination of thinking and computing gives birth to a series of achievements, and lays the foundation of science.;2009
This paper explores the potential for simplified programming languages to support the development of computational thinking skills in non-programmers We suggest that novice programming languages might offer a starting point for non-programmers to engage with a substantial subset of computational thinking concepts, and assess a number of languages from this perspective We outline four key computational thinking skills and examine the support provided by existing languages We then de scribe additional characteristics which would be important for a new language aimed specifically at developing computational thinking skills;2009
This project tries to provide a clarified and comprehensive understanding of the computing disciplines that allows shared experiences and expertise within and across the community. This collective sharing enables computing faculty to collaborate with other disciplines that use computing to enhance groups, and to create new cross-disciplinary areas of study and research. This involves the integration of computing with other disciplines like engineering, sciences, business, and arts and explores the challenge by bringing together instructors and researchers across the disciplinary boundaries. Distributed Expertise enhances teaching and learning experiences for students of computing and other disciplines in which computational thinking and computing models contribute to a variety of applications. This project is a collaboration by Villanova University, Virginia Technology University, and The College of New Jersey (TCNJ).;2009
Three of: the most important skills for advancing modern mathematics and science are quantitative reasoning, computational thinking, and multi-scale modeling. The SUCCEED Apprenticeship program gives students the opportunity of exploring all three of these areas. The SUCCEED Apprenticeship program uses innovative approaches to get students excited about computational science. The overall goal of this program is to provide middle and high school students with authentic experiences in the techniques and tools of information technology with a particular focus on computational science. The program combines appropriate structure (classroom-style training and project-based work experience) with meaningful work content, giving students a wide variety of technical and communication skills. The program provides middle and high students from ethnically and economically diverse backgrounds with training and authentic experience,, in using computational science.;2009
A variety of approaches exist to teach computer science concepts to students from K-12 to graduate school. One such approach involves using the mass appeal of game design and creation to introduce students to programming and computational thinking. Specifically, Scalable Game Design enables students with varying levels of expertise to learn important concepts relative to their experience. This paper presents our observations using Scalable Game Design over multiple years to teach middle school students, college level students, graduate students, and even middle school teachers fundamental to complex computer science and education concepts. Results indicate that Scalable Game Design appeals broadly to students, regardless of background, and is a powerful teaching tool in getting students of all ages exposed and interested in computer science. Furthermore, it is observed that many student projects exhibit transfer enabling their games to explain complex ideas, from all disciplines, to the general public.;2010
Compelling experiences in introductory courses make a key difference in whether non-majors develop an interest in computer science, possibly even converting them into undergraduate majors or minors. In this paper we advocate integrated hands-on laboratory style activities to provide such pivotal experiences. In the lab activities we describe, students do not engage in programming, yet they learn to think computationally by engaging in computational activities. The course in which these labs are implemented is oriented around three aspects of the the internee's underside: its techno-scientific underpinnings, environmental and energy problems and promise brought on by its rapid growth, and security threats associated with its use. We describe the goals and content of the lab activities, as well as various challenges encountered through their implementation. We also discuss student responses and future directions.;2010
Computational Thinking (CT) has been articulated as a fundamental skill for everyone, not just for computer scientists [10]. Almost all agree with the lofty goals of the initiative, to teach humanity the ability to see the world through the sharpened eyes of a computer scientist. Others have shared their vision of what CT is, how to pave the way [7], weave it into a curriculum [1, 2, 9], and what the effects might be [8]. However, what does it really mean to be a computational thinker? While it is helpful to see examples that show we're already engaged in CT (e.g., using a backpack is pre-fetching and caching), it is perhaps more valuable to see everyday situations that are transformed when viewed through a computational thinker's trained eyes (e.g., writing dates as YYYY-MM-DD so they'll sort correctly). We hope to present enough examples to satisfy a growing chorus of those who need more grounding, using a unique delivery format. Jeff Foxworthy is a popular and successful stand-up comedian, especially in rural areas of the southern United States [5]. His signature bit is to find subtle aspects of life that are common to rednecks, a term used to describe uneducated white farm laborers (whose neck is red from sunburn) [3]. These observations are never meant to be mean-spirited, are told with acute comic timing, and audiences love them. Here are some of his best [4], using his template: If, you might be a redneck! you think the last words to the Star Spangled Banner are 'Gentlemen, start your engines '... you get stopped by a state trooper, and when he asks you if you have an I.D. and you say, 'Bout what?'... you carried a fishing pole into Sea World... We will use a similar template and each of the four stand up computational thinkers will riff on observations of life as seen through CT eyes. We hope to provide enough examples that the (mostly CT) audience will feel compelled to join us in an open mike format and share their experiences. Whenever possible, we will channel Mr. Foxworthy and aim for the funny bone.;2010
"Cyberlearning infrastructures are increasingly being integrated into physical classrooms and are often used by online classes as an outright replacement for the physical classroom. In Spring 2009, The Educational Game Design Class, taught at the University of Colorado Boulder, employed a cyberlearning infrastructure enabling students to run and even download classmate assignment submissions before the homework deadline. This cyberlearning infrastructure, called the Scalable Game Design Arcade, also allowed students to give feedback on other students' assignments. Analysis of data from the Scalable Game Design Arcade indicates that students used the online infrastructure to play and appraise fellow students' games. Interestingly however, data suggests that most students preferred to give feedback verbally in-person during class; data also indicates that in-class feedback was the most effective in terms of getting students to improve and resubmit their assignments.";2010
Educators recommend that students become acquainted with different programming paradigms in order to acquire alternative ways of computational thinking [3] and various approaches for problem solving [2]. Since students, learning different paradigms show both, positive and negative transfer effects, instructors should address it directly in the study track by relating to the characteristics of each paradigm, and specifically to the differences and similarities between them. In this poster, we investigate two programming paradigms- object-oriented programming and logic programming in the context of using inheritance for knowledge representation and problem solving.;2010
For a variety of reasons there has been a renewed interest in non-major level computer science courses. One reason for this is that non-major courses are seen as potentially increasing both interest and enrollment in computer science courses. Another reason is the rising popularity of computational thinking. Furthermore, as computation becomes the cornerstone of research methodologies, if not professional practice, in the natural, physical and social sciences, including, as well, a growing influence in the humanities, the demand from external departments/programs for non-major level service courses has began to rise, albeit slowly. This raises some interesting questions to the CSE community. Given that one offers a single non-major level course, what should be the topics covered as distinct from the technologies used to convey those topics? What learning outcomes are most desired? Finally, the competency, or at least serious introduction of which technological skills, if any, should be considered mandatory (e.g. programming). In short, what should a non-major/minor student who takes one course in computer science come away with knowing and being able to do? Possibly orthogonal to this is the question: What should any liberally (college) educated person know about computation at this point in time? This panel will outline four different perspectives on this important question in addition to engaging the audience in a discussion regarding the answers to the questions raised.;2010
Game design appears to be a promising approach to interest K-12 students in Computer Science. Unfortunately, balancing motivational and educational concerns is truly challenging. Over a number of years, we have explored how to achieve a functional balance by creating a curriculum that combines increasingly complex game designs, computational thinking patterns and authoring tools. Scalable Game Design is a research project exploring new strategies of how to scale up from after school and summer programs into required curriculum of public schools through game design approaches. The project includes inner city schools, remote rural areas and Native American communities. A requirement checklist of computational thinking tools regarding curriculum, teacher training, standards and authoring tools has been developed and is being tested with thousands of students.;2010
In March 2005, at the occasion of his 50th birthday, Bill Gates went public with his Virtual Earth Vision for local search in the Internet and stated: You'll be walking around in downtown London and be able to see the shops, the stores, see what the traffic is like. Walk in a shop and navigate the merchandise. Not in the flat, 2D interface that we have on the web today, but in a virtual reality walkthrough. This implies optimism that an enormous advance will be achieved in computing power, communications bandwidth, miniaturization of computing, increase of storage capacity and in the ability to model the human habitat (the Earth) in great detail in 3 dimensions, with photographic realism and at very low cost per data unit. Action followed this declaration by Bill Gates, and the transition of a then-10-year old Microsoft business segment called Map Point into a new Virtual Earth Business Unit was kicked off (recently renamed Bing Maps). The Microsoft initiative, along with similar initiatives by other Internet-providers, most visibly Google, can serve as an example and actually also as a driver for the future of computing and of computational thinking. Research in the complete automatic creation of 3D models of urban spaces has become greatly inspired and now is a very active field of innovation. The level of automation in creating 3D city models has benefited from an increase in the redundancy of the source data in the form of highly overlapping imagery either from the air or from the street. We explain in this paper that it is possible to create 3D models of an entire city from aerial photography fully automatically, and thus at a commercially acceptable cost. Using this as a geometric framework, detail can be added from street-level and indoor imagery or laser scanner data. Such data can be produced either systematically or by us, the anonymous community of users. The result is a global geo-data base consisting of a combination of aerial data at perhaps 10 to 15 cm pixel size, street side data at perhaps 2 cm and indoor data of important or commercially relevant spaces at 0.5 cm pixel size. This will add up to a data base of thousands of cities, perhaps also of smaller communities, with more than I Exabyte to be created and maintained.;2010
In recent years, several groups of Computer Science educators have made a sustained effort to capture the essence of CS apart from programming. Three of these approaches are Mathematical Thinking, Abstract Thinking, and Computational Thinking. Each approach tries to clarify areas of CS that are not directly tied to writing computer programs. In a separate line of research, the current authors have been examining different ways to teach mathematics to CS students. We developed a Computational Math scale that measures the level of problem-solving gestalt exhibited by textbook authors. In this study, we relate our Computational Math framework to current research on Mathematical, Abstract, and Computational (MAC) Thinking. We counted words used frequently in research articles and compared them to words that form the Computational Math scale. Our results suggest an overall MAC Thinking framework that integrates a wide range of topics relevant to computing and programming.;2010
In the past few years sustainability and green computing have received tremendous interest across the world. Computing plays a critical role in our society, thus it has a special responsibility for sustainability and green movement. In this paper, we advocate sustainability integration into undergraduate computing education. We present three sustainability integration strategies, our efforts to develop a green computing course and learning modules, and course evaluation. We believe that sustainability integration will help prepare our graduates with computing competencies, multi-disciplinary knowledge, and computational thinking to create a sustainable future.;2010
In this article, we share our experiences offering an original course entitled Intelligent Systems targeted at undergraduate social and behavioral science students. Intelligent Systems provides a rigorous introduction to robotics and surveys selected topics in artificial intelligence. This course is tailored to students with little mathematical background and no programming experience. We offer best practices and information from successful course components and ideas for tailoring course content to social and behavioral science students. The motivation for this course comes from the wide interdisciplinary appeal of robotics and artificial intelligence. They have been leveraged to improve recruitment to the major and to expose students in other disciplines to computational thinking. However, no offerings of CS0 that exclusively cater to the large social and behavioral science population are available that focus on intelligent systems. Robots and AT systems are affordable and accessible to this group of students. We propose our solution to this problem and argue for offering multiple, interdisciplinary CS0 offerings.;2010
Media-Propelled Computational Thinking (MPCT pronounced impact) is a course designed to introduce programming in the context of engaging problems in media computation, math, and physics. Programming concepts are introduced as incremental steps needed to solve pragmatic problems students already understand. The problems, graphical API, and hands-on program features are intended to expose fundamental concepts in mathematics and quantitative science. MPCT is offered in an entering students program for freshmen who plan to specialize in a variety of STEM (science, technology, engineering and math) and non-STEM subjects. The curriculum is intended to strengthen student intuition and interest in mathematical modeling and programming by engaging students in the direct manipulation of simple mathematical systems that model and display familiar physical phenomena. MPCT uses programs as concrete and manipulatable examples of fundamental concepts to engage a diverse range of students including women and underrepresented minorities. Variants of MPCT are being developed for high schools, and as a means to introduce computational science to upper division undergraduates studying non-computational STEM disciplines. This paper provides an overview of MPCT and representative problem studies including models of ballistics and resonant systems. The evaluation plan is described and very preliminary results are presented.;2010
Students and faculty at all education levels are clearly spending much more of their days interacting with computing and communication tools than with each other. Is this good? Are all uses of technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how technology enables dynamic representation in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. A world-class education requires world-class resources, and all math and science teachers should be able to bring interactive modeling environments to their own teaching practice. We will explore a variety of free and low-cost sources for modeling tools from the Computational Science Education Reference Desk, a pathway project of the U.S. National Science Digital Library (http://www.nsdl.org).;2010
Students and faculty at all education levels are clearly spending much more of their days interacting with computing and communication tools than with each other. Is this good? Are all uses of technology in education helpful, and if not, how does one separate the benefits from the burdens? We will explore how technology enables dynamic representation in the sciences, arts, and humanities, giving us the opportunity to be more fully human as we seek new knowledge in service to society. A world-class education requires world-class resources, and all math and science teachers should be able to bring interactive modeling environments to their own teaching practice. We will explore a variety of free and low-cost sources for modeling tools from the Computational Science Education Reference Desk, a pathway project of the U.S. National Science Digital Library (http://www.nsdl.org).;2010
Thanks to recent advances in computing power and speed, designers can now generate a wealth of data on demand to support engineering design decision-making. Unfortunately, while the ability to generate and store new data continues to grow, methods and tools to support multi-dimensional data exploration have evolved at a much slower pace. Moreover, current methods and tools are often ill-equipped at accommodating evolving knowledge sources and expert-driven exploration that is being enabled by computational thinking. In this paper, we discuss ongoing research that seeks to transform decades-old decision-making paradigms rooted in operations research by considering how to effectively convert data into knowledge that enhances decision-making and leads to better designs. Specifically, we address decision-making within the area of trade space exploration by conducting human-computer interaction studies using multi-dimensional data visualization software that we have been developing. We first discuss a Pilot Study that was conducted to gain insight into expected differences between novice and expert decision-makers using a small test group. We then present the results of two Preliminary Experiments designed to gain insight into procedural differences in how novices and experts use multidimensional data visualization and exploration tools and to measure their ability to use these tools effectively when solving an engineering design problem. This work supports our goal of developing training protocols that support efficient and effective trade space exploration.;2010
The notions of as if and don't care are essential notions in computational thinking. The former appears in the reformulation of tasks, reduction between tasks, auxiliary variables, and more. The latter is the core of non-determinism, asynchronous execution, and arbitrary choices in deterministic algorithms. The two notions are not intuitive, and require abstraction. We expect computer science (CS) graduates, who developed computational thinking during their studies, to demonstrate comprehension of these notions. Unfortunately, this may not be the case. In this paper we present a study of CS graduates, which reveals difficulties of limited comprehension and acceptance of these notions. We characterize the difficulties, relate them to cognitive aspects of abstraction, and offer some didactic suggestions.;2010
"The number of undergraduates entering computer science has declined in recent years. This is paralleled by a drop in the number of high school students taking the CS AP exam and the number of high schools offering computer science courses. The declines come at a time when career opportunities in CS continue to grow and computer science graduates are seen as crucial in building a globally competitive workforce for the 21(st) century. Efforts aimed at reversing the declining interest in computer science include curriculum revisions at the undergraduate level at many institutions, a re-design of computer science AP courses [I], and the inclusion of computational thinking into disciplines outside computer science [3]. This panel discusses four projects of computer science researchers collaborating with high school teachers on integrating computing and computational thinking into their courses. The majority of the high school teachers involved is teaching science and math courses. They are teaching a diverse group of talented and college-bound students. The goal of all projects is to integrate computing into disciplines represented in the high school curriculum and to raise the awareness of computer science as an exciting and intellectually rewarding field. This panel will outline recent and on-going activities and interaction with high school teachers. Each panelist will describe how he/she got involved and the nature of the interaction. The panelists will talk about their individual projects, outline their visions for future interactions, and how their effort can be replicated by others. The session will briefly describe NSF's RET program which provided teacher support for three of the four projects. The session will then be opened for discussion; the audience will be encouraged to ask questions and contribute additional ideas for the inclusion of computational thinking in high school courses.";2010
The purpose of the REACH (REmote ACcess to smart Home facility) platform is to allow students to learn about basic principles of computer science and software engineering practices, and gain hands-on experience through observable effects of the computing systems in a familiar setting (home). It utilizes virtualization to encourage group collaboration and grants anytime, anywhere access to the smart home facility. It incorporates dynamic binding capability that allows students to either use the sensors and actuators hardware they check out and install locally for development, or to conduct experiments in the smart home facility. Once the development is completed, the programs can be deployed remotely, and students can make observations through web cams strategically situated in the smart home facility and the logs of the system's operations and users' activities. The REACH platform is designed to support a large spectrum of computer science courses, from the equivalence of computer science lab 101, interdisciplinary projects, all the way to research projects in artificial intelligence, pervasive computing, and human computer interactions.;2010
The use of video scenarios is an active learning approach designed to aid in the development of computational and entrepreneurial thinking skills. Video scenarios present problems in the context of lifelike settings in order to emphasize the complexity as well as creative potential presented by problems which are diverse, multi-layered and frequently ill-defined. Students must carefully observe and critically listen to the characters in the videos in order to understand the problems they are experiencing. Through discussion, design or implementation, students explore potential ways in which computing can be used to help the characters solve their problems. The approach is designed to develop creative problem solving skills, while also encouraging students to view themselves as capable of entrepreneurship and innovation in computing. The videos are freely available on the website www.virt-u.org, and can be used for a wide range of learning activities.;2010
There has been a decline in the number of students studying mathematics, science and computing at third-level in Ireland. This may be because Ireland does not have a computing curriculum. However, in the UK higher education computing students fell in spite of the existence of such curriculum. According to teachers, student engagement and having a fun and exciting experience are essential ingredients when teaching computing to second-level students through a computing curriculum or other interventions. The Lero Education and Outreach program has developed a set of materials Having fun with Computer Programming and Games for second-level students aged 15-16. The goal is to engage students in computing and to offer them an enjoyable and positive experience. Working with two second-level ICT teachers, we designed a set of materials during summer 2008 that have been deployed in a number of schools.;2010
This paper addresses the need for new pedagogical strategies facilitating design thinking in parallel to computational thinking, for increasing new media literacy in new media education and engineering. The paper describes the design practice in contemporary context, and provides a definition of design in interdisciplinary context. The concept of pedagogical installation will be introduced and linked to scaffolding theory. The installation can be considered as an open ended tangible sketch in order to provide a signature problem space for project-based learning and instructional models. Use and use case abstraction will be presented as a methodology in order to establish a pivotal point linking deeper understanding of human needs and design necessity to emerging practice in new media. The paper draws upon methodologies from the fields of engineering design, interaction design, and Human Computer Interaction to formalize needs and necessity and apply them to new media, in order to establish vital principles relating basic inquiry to emerging practices.;2010
This paper describes Computational Thinking for the Sciences, a 3-day summer workshop for high school science and mathematics teachers. Our workshop emphasizes the deep connections between the natural sciences, mathematics and computer science through activities and simulation development appropriate for scientific explorations. Teachers were exposed to simulation development in VPython, a visual extension to the popular Python programming language. By broadening exposure of computational thinking to the natural sciences and developing activities specifically for science domains, we hope to attract new students into computer science and better prepare natural science students to employ the computational tools they will utilize in the future.;2010
This paper discusses our ongoing experiences in developing an interdisciplinary general education course called Sound Thinking that is offered jointly by our Dept. of Computer Science and Dept. of Music. It focuses on the student outcomes we are trying to achieve and the projects we are using to help students realize those outcomes. It explains why we are moving from a web-based environment using HTML and Java Script to Scratch and discusses the potential for Scratch's musical live coding capability to reinforce those concepts even more strongly.;2010
This session will be conducted by panelists who have carried out funded interdisciplinary research and education, and who have funded and managed interdisciplinary programs. They will provide an opportunity for computing educators to engage in a conversation to assess what is needed to better educate the next generation of students to participate and contribute actively in resolving emerging and future interdisciplinary challenges. Many of the computing education discussions have recently been around computational thinking and how this might prepare students in all disciplines, including computing, to formulate and solve problems with other disciplinary partners. The difficult question is how to prepare students to engage in these activities without eroding the depth that is also needed to tackle the deepest and most difficult problems.;2010
To address the critical shortage of students entering computing fields, as well as broaden participation in computing, we present a summer and afterschool program in Interactive Journalism through which middle school students and their teachers develop an appreciation for and competence in computational thinking. We report on the outcomes of our first year in which three middle school language arts teachers, a technology teacher and a guidance counselor collaborate with college faculty to publish a school magazine of the future. Students and their teachers research and conduct interviews to develop news stories that are then presented as story packages with text, video, and procedural animations in Scratch. Results of formal data collection show changes in students' perceptions of what it means to program, as well as their emerging confidence in their ability to design computational solutions and to program.;2010
To evaluate the effectiveness of an instructional unit for game design and computer programming, we designed an authentic assessment with five troubleshooting scenarios. This assessment was completed by 24 middle grades students (age 12 - 14 years) after 10 hours of instruction using a visual programming environment. Students successfully completed most of the tasks in 45 minutes. Results from the Troubleshooting Assessment demonstrated that students developed sufficient fluency with programming to be able to apply their knowledge to new problems. These results suggest that troubleshooting scenarios can be used to assess student fluency in computer programming and computer-based problem solving. (C) 2010 Published by Elsevier Ltd.;2010
We describe a framework for implementing computational thinking in a broad variety of general education courses. The framework is designed to be used by faculty without formal training in information technology in order to understand and integrate computational thinking into their own general education courses. The framework includes examples of computational thinking in a variety of general education courses, as well as sample in-class activities, assignments, and other assessments for the courses. The examples in the different courses are related and differentiated using categories taken from Denning Great Principles of Computing, so that similar types of computational thinking appearing in different contexts are brought together. This aids understanding of the computational thinking found in the courses and provides a template for future work on new course materials. Specific examples of computational thinking in the design category are provided in the context of three distinct courses.;2010
We describe a new course designed to introduce engineering students to computational thinking. One of the most significant challenges in teaching an introductory-level applied computing course is that students are not expected to have substantial math and science experience. To address this, we have developed exercises which use edge detection and basic image processing to motivate the use of programming MATLAB in a non-trivial scientific application. MATLAB is a popular high-level programming language and environment which supports a wide range of computational science applications. MATLAB has strong support for operating on image data, which allows us to balance solving practical engineering problems with basic core concepts of computer science such as functional abstraction, conditional execution, and iteration. (C) 2010 Published by Elsevier Ltd.;2010
We describe our early investigation of the integration of educational modules originally developed for a college-level entering students program (ESP) titled Media Propelled Computational Thinking (MPCT) into high school science, math, and engineering/technology courses. Primary objectives of MPCT include introducing students to imperative programming and reinforcement of foundational mathematical concepts. This report describes this evolving integration including early informal experiments and potential extensions using programming functions of ubiquitous graphing calculators.;2010
"We describe our experiences with curriculum development and learning assessment in a new undergraduate computational science program. We report on the development and pilot testing of assessment tools in both core and cognate courses. Specifically, we detail a diagnostic assessment that predicted success in our introductory computational science course with reasonable reliability; we give an account of our use of an existing assessment tool to investigate how introducing computational thinking in a cognate course influences learning of the traditional course material; and we discuss developing a pancurriculum rubric for scoring computational science projects. (C) 2010 Published by Elsevier Ltd.";2010
"We describe our experiences with learning assessment in a new computational science program. We report on the development and pilot testing of assessment tools in both core and cognate courses. Specifically, we detail a diagnostic assessment that predicted success in our introductory computational science course with reasonable reliability; we give an account of our use of an existing assessment tool to investigate how introducing computational thinking in a cognate course influences learning of the traditional course material; and we discuss rubric development for project evaluation. (C) 2010 Elsevier B.V. All rights reserved.";2010
We study student understanding of the use of a tree structure in the context of an introductory web development course. In particular, we analyze student answers as they use a tree structure to construct file references in web pages. More fundamentally, our study initiates a bottom-up study of computational thinking by identifying the computational thinking mistakes that students make when they are learning resource referencing for web development. Our preliminary results suggest that students do not necessarily learn abstract concepts (like trees) and abstract rules of reasoning (composing relative and absolute tree paths) by just working with folders and composing file references alone.;2010
A computational thinking under simulated environment with amendable properties is promoted. It is exemplified on a real drum boiler multi-loop linear control. The model is based on the boiler-turbine plant P16/G16, which is oil-fired and the rated power is 160 MW, at the Sydvenska Kraft AB Plant in Malmo, Sweden. A proficient symbolic and numerical combination points out a fast and very efficient automatic engineering calculation. This contribution aims at tailor-made small simulators on Matlab for those industrial processes which are linked by heat energy. A first application at drum boiler with linear control meets a useful know-how to guide thoughts on how to translate physical fundamentals to Matlab codes for other industrial cases. Some comments relating to industrial practice are offered in this context.;2011
A fundamental challenge to computer science education is the difficulty of broadening participation of women and underserved communities. The idea of game design and game programming as an activity to introduce children at an early age to computational thinking in a motivational way is quickly gaining momentum. A pedagogical approach called Project First has allowed the Scalable Game Design project to reach a large group of middle schools students including a large percentage of female (45%) and underrepresented (48%) students. With over 4000 students in inner city, remote rural, and Native American communities Scalable Game Design has investigated the impact on students' interest level of pedagogical approaches employed by teachers such as mediation and scaffolding. Findings suggest strong gender effects based on classroom scaffolding approaches. For instance, girls are substantially less likely to be motivated through scaffolding based on direct instruction. Conversely, guided discovery scaffolding approaches are highly motivating to the point where they can even overcome other negative predictors such as small girls to boys class participation ratios. This paper introduces the project, discusses different scaffolding approaches and presents data connecting gender specific motivational levels with scaffolding approaches.;2011
Accelerated by the Do-It-Yourself mindset of the Web 2.0 culture, end-user programming, which is programming by end users with limited, if any, formal programming background, is growing rapidly. Especially in educational settings, children are exposed to computational thinking by making games, building scientific simulations and creating stories. Early educational programming languages such as Logo have made programming substantially more accessible to end users. More recent approaches include visual programming with drag-and-drop style of programming making it nearly impossible to compose syntactically incorrect programs. However, as the syntactic challenges of end-user programming are gradually fading into the past, the new frontier of semantic programming support emerges. This demonstration introduces Future Trace, a system to make programming more conversational. A conversational programming agent runs programs one step into the future in order to visualize discrepancies between the programs users intended to write and the actual programs.;2011
Accelerated by the Do-It-Yourself mindset of the Web 2.0 culture, end-user programming-programming by end users with limited or even no formal programming background-is growing rapidly. Especially in educational settings, children are exposed to computational thinking by making games, building scientific simulations and creating stories. Early educational programming languages such as Logo have made programming substantially more accessible to end-users. More recent approaches include visual programming with a drag-and-drop style of programming that makes it nearly impossible to compose syntactically incorrect programs. However, as the syntactic challenges of end-user programming are gradually fading into the past, the new frontier of semantic programming support emerges. This demonstration introduces Conversational Programming, a system to make programming more conversational. A conversational programming agent runs programs one step into the future in order to help end-users visualize discrepancies between the programs they intended to write and their actual programming results.;2011
"Advances in technology are leading high schools to update computer science curricula; however there has been little analogous attention to technology-related education in middle schools. Middle school students are at a critical phase in life, when they are exploring more custom education options and starting to wonder What do I want to be when I grow up? My research is investigating whether and how computing skills can be integrated with career exploration to provide middle school girls a positive learning experience.";2011
An interdisciplinary undergraduate course that simultaneously involves the disciplines of Engineering, Science and Arts has been created and offered every semester since the Fall 2009 at our college. This course uses a robotic conducting system as a vehicle to bring together students majoring in mechanical engineering, computer science, interactive multimedia and music, and encourages them to share their knowledge and reach across the boundaries of their own disciplines. It is a project-based course that fosters creative problem-solving approaches, and advances computational thinking skills through an open-ended project requiring the synthesis of knowledge in robotics, interactive multimedia, computer science, and music. The model and implementation of the first offering of this course were presented in the 2010 ASEE Annual Conference and Exposition. This paper presents the outcomes of all the past three offerings including evaluations and assessments, our findings, and student deliverables. These analytical results will improve our understanding of effective approaches to teaching interdisciplinary courses that involve engineering and non-engineering disciplines in undergraduate collaborative problem-solving environments.;2011
As computational thinking becomes a fundamental skill for the 21st century, K-12 teachers should be exposed to computing principles. This paper describes the implementation and evaluation of a computational thinking module in a required course for elementary and secondary education majors. We summarize the results from open-ended and multiple-choice questionnaires given both before and after the module to assess the students' attitudes toward and understanding of computational thinking. The results suggest that given relevant information about computational thinking, education students' attitudes toward computer science becomes more favorable and they will be more likely to integrate computing principles in their future teaching.;2011
Computation is an increasingly essential tool for doing scientific research. It is expected that future engineers will need to engage and understand computing in order to work effectively with computational systems, technologies, and methodologies. Toward this goal, we leverage our previous work with SugarAid v0.2 to allow learners to test their knowledge of computing by applying engineering concepts. Applied concepts include designing multidisciplinary systems including electrical, mechanical, fluidic, and thermal components. Through this method, we expect learners to enhance their computing knowledge by applying their engineering knowledge.;2011
Computational thinking (CT) has been described as an essential capacity to prepare students for computer science, as well as to be productive members of society. But efforts to engage K-12 students in CT are hampered by a lack of definition and assessment tools. In this paper, we describe the first results of a newly created performance assessment tool for measuring CT in middle school. We briefly describe the context for the performance assessment (game-programming courses), the aspects of CT that are measured, the results, and the factors that are associated with performance. We see the development of assessment tools as a critical step in efforts to bring CT to K-12, and to strengthen the use of game programming in middle school. We discuss problems and implications of our results.;2011
Computational thinking has been identified as a necessary fundamental skill for all students. University curricula, however, are currently not designed to provide such knowledge to a broad student population. In this paper, we report on our experiences in the development of a model for incorporating computational thinking into the undergraduate, general education curriculum at Towson University. We discuss the model in terms of eliciting faculty interest, institutional support, and positive student response. In the first two years of this NSF-funded three-year project, we have developed, piloted and assessed five computational thinking general education courses an Everyday Computational Thinking course, and four discipline-specific computational thinking general education courses. Initial assessments show promising and significant student, instructor and administration interest in computational thinking as a basis in courses covering multiple disciplines within the general education curriculum.;2011
"Computer science and biology have enjoyed a long and fruitful relationship for decades. Biologists rely on computational methods to analyze and integrate large data sets, while several computational methods were inspired by the high-level design principles of biological systems. Recently, these two directions have been converging. In this review, we argue that thinking computationally about biological processes may lead to more accurate models, which in turn can be used to improve the design of algorithms. We discuss the similar mechanisms and requirements shared by computational and biological processes and then present several recent studies that apply this joint analysis strategy to problems related to coordination, network analysis, and tracking and vision. We also discuss additional biological processes that can be studied in a similar manner and link them to potential computational problems. With the rapid accumulation of data detailing the inner workings of biological systems, we expect this direction of coupling biological and computational studies to greatly expand in the future. Molecular Systems Biology 7: 546; published online 8 November 2011; doi:10.1038/msb.2011.78";2011
End-user game design tools are effective in motivating and exposing students with no prior programming experience to computer science. However, while there is good evidence that these environments are effective motivators, the question remains what do students actually learn? For our purposes, using Agent Sheets, we would like to know if students can apply the knowledge obtained from programming games to creating science simulations. Specifically, we want to better understand if students are able to recognize Computational Thinking Patterns (CTP) from their game programming experience. Computational Thinking Patterns are abstract programming patterns that enable agent interactions not only in games but also in science simulations. Students and teachers who participated in a game design summer institute were administered a Computational Thinking Pattern Quiz (CTP Quiz). This quiz tested the participants' ability to recognize and understand patterns in a context removed from game programming. We found that participants, for the most part, were able to understand and recognize the patterns in a variety of contexts.;2011
Even as Bureau of Labor Statistics predictions indicate unprecedented demand for software engineers in the next five years, nationwide retention rates of incoming majors are alarmingly low and interest in computer science remains stagnant. Many educators are reevaluating how we teach computer science in the critical first year of study and are questioning the emphasis of programming and tool mastery over more abstract computational thinking. While specialized development tools and integrated development environments intend to simplify programming tasks they typically do little to support pedagogical development and evaluation of a broad range of problems at varying levels of computational abstraction. Worse yet, the languages and tools used in introductory courses often create barriers in the form of boiler plate code, complex build tools, and unintuitive interfaces that discourage students from engaging in directed and focused practice. In this paper we review existing introductory computer science tools, enumerate barriers to student learning we have identified in our own classes, and introduce a new web-based pedagogical platform for teaching computer science that emphasizes problem solving and core computer science concepts while deemphasizing the role of specialized development tools. This is accomplished with JavaGrinder, a task specific web 2.0 environment where students can work either individually or as teams on bite-sized problems that focus on solid software engineering practices and concept mastery. Concepts are presented within real-world contexts that advocate computer science as an exciting multidisciplinary field, rather than as an abstract world of syntax and arcane codes. JavaGrinder is designed to facilitate problem-solving skills by exposing the salient aspects of a problem, providing guided practice, and immediate feedback. JavaGrinder teaches true Java programming, while shielding students from language and platform-specific minutiae. In this way, JavaGrinder addresses the critical gap between successful introductory programming environments and realistic functional programming and software engineering.;2011
Even though computing has become pervasive in today's workplace, many engineering curricula have lagged in creating engineers with computational aptitude. Computational-capable engineers are ones who can utilize computing effectively to solve engineering problems. Developing these computationally capable engineers means understanding that changes in the undergraduate engineering curriculum must recognize it's context in an educational continuum. Starting from the first computing course, the computing skills need to be reinforced at subsequent levels in the curriculum (i.e., in selected 200, 300 and 400 level courses) in order for students to continue to use and build on their skills. In this paper, we will illustrate the kinds of computing based on Excel/VBA that were utilized in an engineering thermodynamics course as part of a program to create a computational thinking thread in the curriculum. Assessment data over three years was used to modify the approaches and problems in each subsequent year. Finally, the lessons learned in introducing computing into engineering courses is addressed in terms of the amount of computing exercises to paper calculations, the types of assistance needed to help students in overcoming the time since taking the first computing course as well as a varied background in terms of computing. These lessons will be applicable to other types of engineering courses where computing is being introduced.;2011
Experience with the first offering of a computational thinking course for computer science (CT4CS) students is reported. The course is grounded in student interaction with fundamental, recurring concepts suggested by comparison with two sets of computer science principles. By using specialized, freely available tools and physical simulations it is possible to provide concrete, tangible learning experiences that neither require knowledge of nor the overhead of programming. Student end-of-term reflections indicate that the course deepened and broadened their understanding of computer science even when they had previously encountered a topic, and improved their computer science vocabulary.;2011
Formal Computer Science curricula in schools are currently in a state of flux, yet there is an urgency to have school students exposed to CS concepts so that they can make informed decisions about career paths. An effective way to address this is through outreach programmes that can operate outside or in conjunction with the formal education system. We compare 5 successful programmes. Each downplays programming as a pre-requisite skill for engaging with Computer Science ideas. This makes them accessible in short bursts without formal curriculum support. The formats used include contests, shows, magazine articles, and resources for teachers. We compare the 5 approaches to draw out key ideas for successfully addressing a school student audience. This can be used as the basis for designing new outreach programs.;2011
"IN THE WEST, the layman's vision of the creative artist is largely bound in romantic notions of inspiration sacred or secular in origin. Images are plentiful; for example, a man standing tall on a cliff top, the wind blowing through his long hair, waiting for that particular iconoclastic idea to arrive through the ether. a Tales, some even true, of genii penning whole operas in a matter of days, further blur the reality of the usually slowly wrought process of composition. Mozart, with his celebrated speed of writing, is a famous example who to some extent fits the cliche, though perhaps not quite as well as legend would have it.(b)";2011
In this paper, we describe the first phase of a cross-disciplinary project between computing and English faculty who explored how computational thinking skills such as abstraction, modeling, and iteration can be used to support English faculty in teaching students to write well. This initial phase of collaboration focused on developing and applying a model to capture fundamental concepts for teaching composition with special emphasis on those related to clarity. We iteratively developed a complex concept map that can act as a curriculum planning and teaching tool. In the next phase of the project, we plan to adapt selected exercises from traditional writing courses to include computational approaches such as modeling, and to test which audiences benefit from these revised exercises.;2011
Inadequate math preparation discourages many capable students - especially those from traditionally underrepresented groups - from pursuing or succeeding in STEM academic programs. iMPaCT is a family of. Media Propelled. courses and course enrichment activities that introduce students to. Computational Thinking.. iMPaCT integrates exploration of math and programmed computation by engaging students in the design and modification of tiny programs that render raster graphics and simulate familiar kinematics. Through these exercises, students gain experience and confidence with foundational math concepts necessary for success in STEM studies, and an understanding of programmed computation. This paper presents early results from our formal evaluation of semester-length iMPaCT courses indicating improved academic success in concurrently and subsequently attended math courses. They also indicate changes to the nature of student engagement with problem solving using mathematics. This paper also describes iMPaCT-STEM, a nascent effort of computer science and mathematics faculty to distill iMPaCT's pedagogy into sequences of short learning activities designed to teach and reinforce a variety of mathematical and kinematic concepts that can be directly integrated into math and science courses.;2011
Information technology is evolving fast and steady over the years providing more and more tools for society to use. There is an increasing need and implementation of computation in the conduct of modern scientific research and experimentation. Computational thinking has been scarcely understood by STEM undergraduates if their majors are not computer sciences. We explore computation projects into existing courses via visualization computational tools to increase the number of STEM students who graduate with discipline specific computational skills. The goal of this paper was to report our efforts for increasing the number of students with experience using computation in science. Discipline specific tools were chosen and implemented in the respective courses, for example Chemsketch in chemistry. Hands-on labs were designed to familiarize instructors and students so it can be helpful to smooth the learning curve in STEM undergraduate students;2011
Institutes of higher education are feeling more and more pressure to cut costs whenever possible. Increasing section sizes and offering online versions of courses is sometimes seen as the quick fix to the problem, a situation particularly evident in many core courses populated by a wide array of students who are not majoring in that specific field. How can instructors of these courses create an environment that engages and draws these large groups of non-majors into learning and understanding the core knowledge and skills presented in the class? The authors of this paper present a redesign of, and initial findings from, a reworked introductory computer science class that seeks to address this question through the use of active, communication focused, and student-centric techniques, materials, and technologies.;2011
It is evident from the recent discussions about computational thinking and the number of papers, panels and birds-of-a-feather sessions at the 2010 SIGCSE Symposium that there is not only a deep connection between computer science and many other disciplines, especially in the sciences, but also a desire to think of computation as an equal partner with experimentation and theory in the solution of science problems. As David Hemmendinger said in a thought piece that appeared recently in ACM Inroads: Teaching computational thinking [to students in disciplines other than computer science] ... is to teach them how to think like an economist, a physicist, an artist, and to understand how to use computation to solve their problems, to create, and to discover new questions that can be fruitfully explored. [1]. As a consequence of this way to think about a proper role for computational thinking, what is emerging is a new discipline, computational science, that brings to bear the knowledge and tools of mathematics, statistics and computer science to solve problems in the sciences and engineering. This multidisciplinary approach is also leading to the creation of new scientific knowledge. In the past few years computational science programs, both at the undergraduate and the graduate level, have been springing up at a number of colleges and universities. This panel is designed to explore this relatively new phenomenon. Each of the panelists has been a leader at her/his institution in the development of such programs. And, each will present what led them to take on this task, how they went about building a program, some of the features of each program and some of the successes and failures.;2011
My vision for the 21st century, Computational Thinking, will be a fundamental skill used by everyone in the world. To reading, writing, and arithmetic, we should add computational thinking to every child's analytical ability. Computational thinking involves solving problems, designing systems, and understanding human behavior by drawing on the concepts fundamental to computer science. Thinking like a computer scientist means more than being able to program a computer. It requires the ability to abstract and thus to think at multiple levels of abstraction. In this talk I will give many examples of computational thinking, argue that it has already influenced other disciplines, and promote the idea that teaching computational thinking can not only inspire future generations to enter the field of computer science but benefit people in all fields.;2011
Nowadays, using interactive video and computer games for educational purposes has become a popular subject of study. Recent empirical studies underline the fact that video games may contribute to the educational process. As programming and logical reasoning are concepts that quite a few high school students find hard to cope with, alternative approaches of teaching them should be explored. The use of Rapid Digital Game Creation (RDGC) for developing Computational Thinking (ComT) skills moves away the frame from simply getting programming knowledge on a specific language, having previously spent a large amount of time in the learning of its syntax, and gives students a boost while stimulating them through the development of interesting applications. Such interesting applications are games, as they can give students the opportunity to experiment their knowledge and to develop ComT skills, while at the same time can have fun. This paper presents an approach to incorporate games, multimedia and programming in order to motivate, help understand and improve analysis, synthesis and algorithmic skills. This approach took place as part of the educational process in a high school class with children at the age of 17-18 years, during Multimedia course. According to this approach, two types of projects were used. Firstly, a simplified demo version of a well known game was presented, and students had to reconstruct it from the beginning, with the same functionality. In the second project type, the rules of the game and the description of the behavior of the various actors in natural language, along with a demo version of a new game were given to them. The students were asked to reproduce the given demo, by using the RAD environment. This paper also presents a study that came through a process of an evaluation questionnaire answered by the students.;2011
One of the most important tasks an introductory computing student must do is to form a mental model of how the computer works. This could be as specific as understanding the read-evaluate-print loop of an interpreter, or as general as believing that the computer works predictably and deterministically. However, some have fuzzy mental models, or worse, sincerely believe that the computer works unpredictably, by magic [2]. We seek to demystify computing for these students using analogy, by showing them something that even magic itself isn't really mystical, it is just computation. Magic is one of the most colorful examples of unplugged (i.e., without-computer, active learning) activities. It adds a unique facet in that it holds a hidden secret that an audience can be challenged to unfold. Once solved, students are often enthusiastic to perform the magic in front of others. In this session, we will share a variety of magic tricks whose answer is grounded in computer science: modulo arithmetic, permutations, algorithms, binary encoding, probability, etc. For each trick, we will have an interactive discussion of its underlying computing fundamentals, and tips for successful showmanship. Audience participation will be critical, for helping us perform the magic, discussing the solution, and contributing other magic tricks.;2011
"Our institution is currently investing in the process-oriented methods of integrative learning to prepare students for a world that is not partitioned along disciplinary boundaries. Our departmental contribution to this investment is an initiative called Educating the Educator where we teach computational processes and computational thinking to colleagues from non-computational fields. Specifically, we designed a system where non-computational faculty members (along with undergraduates) enroll in an introductory, multidisciplinary, open source Geographic Information System (GIS) course to experience integrative learning as students. The faculty participants are subsequently required to integrate their newly acquired expertise with their own disciplinary teaching and research; the necessary time commitment is compensated by a three-credit teaching load reallocation. Our hypothesis is that increasing the general faculty's appreciation of computation (in the context of integrative learning) is an indirect yet effective and scalable way to reach a wider group of students to convey our fundamental disciplinary message: computing is more than programming and computing empowers people.";2011
Phylogenetics seeks to deduce the pattern of relatedness between organisms by using a phylogeny or evolutionary tree. For a given set of organisms or taxa, there may be many evolutionary trees depicting how these organisms evolved from a common ancestor. As a result, consensus trees are a popular approach for summarizing the shared evolutionary relationships in a group of trees. We examine these consensus techniques by studying how the pantherine lineage of cats (clouded leopard, jaguar, leopard, lion, snow leopard, and tiger) evolved, which is hotly debated. While there are many phylogenetic resources that describe consensus trees, there is very little information, written for biologists, regarding the underlying computational techniques for building them. The pantherine cats provide us with a small, relevant example to explore the computational techniques (such as sorting numbers, hashing functions, and traversing trees) for constructing consensus trees. Our hope is that life scientists enjoy peeking under the computational hood of consensus tree construction and share their positive experiences with others in their community.;2011
Recently, higher education has seen an increasing emphasis on the prominent role of computational thinking in all disciplines. Computational thinking is advocated as not only a fundamental skill or concept in computer science but also a core competency for all disciplines. Teaching students in non-computer science majors computing thinking is challenging because students do not have experts' mental models. This study investigates the knowledge gap that non-computing major college students (n=126) possess about computational thinking in an introductory MS Excel course by measuring their performance using spreadsheet functions in three categories: recall, application, and problem solving. The empirical result, analyzed using ANOVA, shows that students can recall the meaning of those functions but seem to have trouble using them correctly and precisely (cued or uncued). Students' test results suggest the following issues: (1) problems with understanding the data type, (2) failure in translating problems to productive representations using spreadsheet functions, and (3) inadequate stipulation of the computational representations in precise forms. Addressing these problems early and explicitly in future classes could improve the education of computational thinking and alleviate difficulties students may experience in using computational thinking in learning and problem solving.;2011
Since 2008, the National Science Foundation, in collaboration with the College Board, has been developing a Computer Science: Principles curriculum to introduce students to the central ideas of computing and computer science, to instill ideas and practices of computational thinking, and to have students engage in activities that show how computing and computer science change the world [1]. We report on the initial pilot of the CS Principles curriculum at five universities in 2010-2011. Beginning in fall 2011, additional colleges will pilot the course while five high schools will teach CS Principles as a rigorous Advanced Placement (AP) high school course with an associated exam. It is important to note that this is in addition to, not as a replacement for, AP Computer Science A, a Java programming course. In this special session, suitable for both college and high school faculty, the five instructors from the 2010-2011 pilot institutions will describe their classes, the piloting experience (teaching under a microscope), and the successes and failures of their offerings. Emphasis will be placed on the following: mapping the CS Principles curriculum to the specific needs of a college or university, and how others can use or modify the existing materials for pilots at their schools.;2011
Software engineering project courses where student teams are geographically distributed can effectively simulate the problems of globally distributed software development (DSD). However, this pedagogical model has proven difficult to adopt or sustain. It requires significant pedagogical resources and collaboration infrastructure. Institutionalizing such courses also requires compatible and reliable teaching partners. The purpose of this workshop is to foster a community of international faculty and institutions committed to developing, supporting, and teaching DSD. Foundational materials presented will include pedagogical materials and infrastructure developed and used in teaching DSD courses along with results and lessons learned. Long-range goals include: lowering adoption barriers by providing common pedagogical materials, validated collaboration infrastructure, and a pool of potential teaching partners from around the globe.;2011
The CS Principles Project is a collaborative effort to develop a new introductory course in computer science, accessible to all students. Computer Science educators at all levels have worked together on the development of the new curriculum under the direction of the College Board with support from the National Science Foundation. This special session provides an opportunity for the CS Principles project leaders to report on recent updates and new directions, and to engage in discussion on all aspects of the project with SIGCSE participants.;2011
The developers of a university curriculum designed to bridge the gaps between the two disciplines have found that there are numerous ways to introduce arts majors to computing, and science and engineering majors to the arts.;2011
"The increased interactivity and connectivity of computational devices along with the spreading of computational tools and computational thinking across the fields, has changed our understanding of the nature of computing. In the course of this development computing models have been extended from the initial abstract symbol manipulating mechanisms of stand-alone, discrete sequential machines, to the models of natural computing in the physical world, generally concurrent asynchronous processes capable of modelling living systems, their informational structures and dynamics on both symbolic and sub-symbolic information processing levels. Present account of models of computation highlights several topics of importance for the development of new understanding of computing and its role: natural computation and the relationship between the model and physical implementation, interactivity as fundamental for computational modelling of concurrent information processing systems such as living organisms and their networks, and the new developments in logic needed to support this generalized framework. Computing understood as information processing is closely related to natural sciences; it helps us recognize connections between sciences, and provides a unified approach for modeling and simulating of both living and non-living systems.";2011
The key contribution of computer science to general and school education relies on the concept of Computational Thinking. Teaching programming in Logo at the primary school is an appropriate didactic approach towards Computational Thinking, it permits to embed Computational Thinking into a spiral curriculum at a very early stage and should enable specific transfer to related school subjects. The paper describes our concrete experiences in teaching programming in Logo at Swiss primary schools, reflects on didactic visions and consider prospects for long-term empirical research.;2011
This article presents an observation resulted from the six-year Sino-USA computer science leadership exchanges: the trend towards the emergence of a new computer science that is more universal and fundamental than that in the past. In the 21st century, the field of computer science is experiencing fundamental transformations, from its scope, objects of study, basic metrics, main abstractions, fundamental principles, to its relationship to other sciences and to the human society, while inheriting the basic way of thinking and time-tested body of knowledge accumulated through the past 50 years. We discuss three new concepts related to this trend. They are computational lens and computational thinking articulated by US scientists, and ternary computing for the masses proposed by Chinese scientists. We review the salient features of these concepts, discuss their impact, and summarize future research directions.;2011
This paper describes a collaboration between computer science and journalism students and professors at our small, primarily undergraduate college, and a large metropolitan newspaper. Our students' work was a catalyst for a hard-hitting series of investigative stories, with far-reaching consequences. The Gumshoe project is a model for computational journalism at an undergraduate institution. The project demonstrates that when computer scientists and journalists reach out across disciplinary boundaries, computational thinking and collaboration can solve a real problem, and have a substantive impact on society.;2011
This study reports the activities of 80 second year architecture students at Victoria University, Wellington, New Zealand for the duration of a single trimester. A central theme in this studio is the framing of day-lighting problems into a quantifiable investigation and then addressing these through the use of digital modelling and simulation tools. This study offers an insight to undergraduate architecture students' negotiation of digital design spaces and asks the question of how the knowledge of skill-based specialist tasks are extensible to core design studio. The mass education within a University environment of such specialist skill based techniques allows for an insight to the negotiation of quantitative and qualitative design criteria. The issue of learning skill based tasks at university level is a pertinent topic of study as the critique of such techniques is implicit to the holistic education of Architects but the level of this critique can vary greatly. This question also highlights the challenges faced to improving the design education approaches to computational thinking and applications.;2011
This WIP discusses Inspire-CT, an NSF-funded, multi-institutional project that is exploring ways to share the excitement and engagement of advanced computing courses with pre-college and introductory undergraduate students. The discussion includes examples of initial educational activities and a summary of results, issues, and future plans.;2011
Through the analysis of current higher education and computer education, we can get the conclusion that local universities are the main force to improve the computer science education. In this paper, we brief introduce the origin and importance of computing discipline. Then we elaborate the essence of computational thinking. Finally, we propose several ways to further improve the computer science education from the computational thinking perspective.;2011
We found that fifth grade students' scores on Scratch programming quizzes in a summer enrichment course were highly correlated with their scores on a standardized test for mathematics. We identify ways in which the programming curriculum builds upon target skills from the Mathematics Content Standards for California Public Schools. We hypothesize that the programming curriculum leveraged and enriched students' mathematics content knowledge.;2011
While specialized knowledge and skills are the hallmark of modern society, the size and complexity of contemporary problems often require cooperative effort to analyze and solve. Therefore, experiences with skills, methodologies, and tools for effective interdisciplinary collaboration and structured problem solving are vital for preparing students for future academic and professional success. Meanwhile, computational systems have permeated much of modern professional and personal life, making computational thinking an essential skill for members of modern society. However, formal training in these techniques is primarily limited to students within computer science, mathematics, management of information systems, and engineering. At Iowa State University, we have designed and offered an experimental course to develop undergraduate students' abilities for interdisciplinary teamwork and to disseminate computational thinking skills to a broader range of students. This novel course was jointly designed and instructed by faculty from the Computer Science Department, Gerontology Program, and Graphic Design Program to incorporate diverse faculty expertise and pedagogical approaches. Students were required to interview real users to identify real-life problems, gather requirements, and assess candidate solutions, which necessitated communication both within the group and with technologically-disinclined users. In-class presentations and wiki-based project websites provided regular practice at disseminating domain expertise to larger interdisciplinary audiences. Workshops, group-based mentoring, peer learning, and guided discovery allowed non-CS majors to learn much more about computer programs and tools, and grading criteria held students individually accountable within their disciplines but also emphasized group collaboration.;2011
With the deepen understanding of computing discipline, the construction of introduction to computer science has been becoming increasingly clear. It is an inevitable development trend that the computer operation will be out of the content in course. Matching this program, experiment for introductory course is set an independent curriculum. Then, the curriculum development is an urgent problem on the course content, teaching methods and evaluation strategies, and so on. From the teaching task of experimental course, this paper proposes the education system programs to explore the course construction.;2011
A five-day, hands-on workshop was held at Monash University to introduce doctoral students in the life sciences to computational applications for research. Although three software tools were employed (CellDesigner (TM), MATLAB (TM) including the Parallel Computing Toolbox, and Nimrod), this paper reports on the use of CellDesigner in teaching computational thinking and modeling, including system dynamics and regulatory networks. Each session included a series of brief orientations to the tool, followed with illustrative, practical projects for participants to implement. From written evaluations and various forms of anecdotal evidence (e. g., oral communications, participation, project/assignment performance), we conclude CellDesigner to be a suitable tool for use in such a workshop.;2012
ACM Ubiquity hosted a symposium in 2010-2011 on Turing's question, 'What is computation?' The editor reflects on how the symposium was organized and what conclusions it reached. The authors showed strong consensus around the propositions that computation is a process, computational model matters, many computations are natural, many important computations are continuous, many important computations are nonterminating and computational thinking has emerged as a core practice of computing. They left open the questions of whether the Turing model is the best reference model, is computational necessarily a physical process, what is information and what is an algorithm.;2012
as part of a national strategic plan recently established by the Ministry of Education in Israel to strengthen science and technology education, an innovative Computer Science (CS) curriculum for middle school was developed. One main goal of the new curriculum is to expose students at an early stage of education to the fundamentals of CS and computational thinking, and to encourage students to study CS in the future. We present the curriculum and its initial implementation, focusing on issues of teachers' professional development.;2012
Computational thinking (CT) does not require profound knowledge of computer science (CS). Vice versa, it helps students organize and build up new knowledge around the core CS concepts they encounter on the daily basis. Furthermore, CT provides a set of problem-solving skills and enhances analytical abilities that are crucial for the young generation to succeed in modern world pervaded with technology,. Tea clung the principles of computing to students with non-computing tracks of study provides them with a competitive advantage and breaks down stereotypes around CS. Our approach is to introduce a topic related to world issues and students' interests while concealing its relation to CS until students' interest and attention ore captured. The approach takes advantage of pattern-matching abilities that are naturally wired in our brain to improve understanding and make the obtained knowledge persist in memory: The paper discusses some of the modules developed as purl of the Inspire-CT project that can be delivered in one or part of a class period at high school or middle school.;2012
Education must empower learners to act effectively in an evolving society where analytical thinking skills will be increasingly needed (ET2020). The cMinds project proposes a learning intervention that exploits new technologies and promotes the adoption of ET2020 educational objectives by schools through the development of transversal learning skills, namely analytical and critical thinking, independent learning, and learning in groups that help learners excel academically in all subject areas of the school curriculum. The cMinds project integrates explorative learning methodologies and information technology into a virtual learning suite that deploys programming concepts towards the development of analytical thinking and problem solving capacity among young learners. Early feedback from the deployment of the cMinds learning methodologies, tools, and activities in classrooms in Greece, Sweden, Romania, and the Czech Republic is positive and demonstrate a high level of engagement by teachers and learners. The project is partly funded by the Comenius Action of the Life Long Learning Programme of the European Commission and runs from 2010 to 2012.;2012
"For the last three decades a great deal of research has been committed to problem solving. Wherever numerical problems are involved from the simple 2 + 3 to complex numerical analysis, technological tools (from a simple calculator to sophisticated computers) have been developed to assist the problem solver to deal with the problem effectively and efficiently. Gone are the logarithmic tables and slide rules. However, it is the human mind in the end that has to be applied in a problematic situation and solve the problem. Its capacity to solve the problem is directly related to the knowledge stored in the mind. Knowledge is the product of thinking. But thinking can vary from a very simple and mundane thought to a very sophisticated and complex one (McPeck, 1981). The nature of the problem dictates the level of thinking. Higher-order thinking can be conceptualised as non-algorithmic, complex mode of thinking that often generates multiple solutions. Such thinking involves uncertainty, application of multiple criteria, reflection, and self-regulation. On the other hand, lower-order thinking could be considered to be one that requires minimum cognitive effort and it is algorithmic. In an attempt by humans to duplicate the power of the mind, Herbet Simon saw thinking as information-processing (McGuinness, 1993) resulting in computers taking over in a manner of 'thinking machines'. McGuinness (1993) also saw thinking as making judgements and sense-making. Making judgements is directly related to critical thinking. Critical thinking has its roots in the ancient Greek philosopher, Socrates, who perfected the art of questioning, who, by asking pertinent questions he would show that people could not rationally justify their confident claims of knowledge. The importance of critical thinking is one of the seven educational critical outcomes together with problem solving a notion supported by many authors (Halpern, 2003; Pascarella & Terenzini, 1991; Brookfield, 1987; Martinez, 2007; McPeck, 1981; Williams, 2005). The complexity of critical thinking is evident from the fact that there is no definition that is universally accepted. However, a great number of critical thinking skills have been identified and agreed upon by many authors. Some of these skills are: analysis and synthesis, making judgements, decision making, drawing warranted conclusions and generalisations. Critical thinking is thus considered as a prerequisite to problem solving. However, when computers are used in the problem solving situation, the need for computational thinking is another pre-requisite. Computational thinking has been coined by J. Wing (2006) and broadly speaking it describes a set of thinking skills that are integral to solving complex problems using a computer. The relationship between computational thinking and critical thinking, two modes of thinking in solving problems has not yet been established. This paper aims at shedding some light into this relationship.";2012
How to develop students' capacity for computational thinking during the teaching process of computer programming, is one of the basic goals of computer fundamental education. Using C program language as example, this paper discusses how to train thinking capability of students during the programming language teaching. Computer programming languages have the features of mass content and practical techniques, and it is difficult for students to master one in short period of time. We provide some advices about how to organize the teaching content and experiments are proposed for improving the teaching results, and human thinking characters are exploited for increasing creative capability. The teaching methods proposed have proved effective for training thinking capability of students.;2012
In the Northern Appalachian region around Pittsburgh, PA, many high schools do not have computer science courses, so students are not introduced to this critical subject that is needed for most technical career paths. Our unique strategy is to invite current high school science, technology, engineering and mathematics (STEM) teachers, in Pennsylvania, West Virginia, Ohio and Maryland, to participate in 3 summer workshops showing how to incorporate computing concepts into existing STEM courses. By working with teachers on how to assimilate programming and computational thinking into their classrooms we will effectively reach a large population of students in areas where computer science classes are not available. In this paper, we outline the current state of the project and some of the data we have collected. Future goals for this project include performing a rigorous evaluation of teacher impact and developing the workshop materials for wider dissemination.;2012
In this chapter, the authors describe an inquiry-based science education (IBSE) theoretical framework as it was applied to robotics activities carried out in European K-12 classrooms during the last six years. Interactions between IBSE, problem-based learning, constructivist/constructionist learning theories, and technology are discussed. Example activities demonstrate that educational robotics capitalizes on the digital curiosity of young people. This leads to concrete experiences in STEM content areas and spreads computational thinking to all school types and levels. Cooperation among different stakeholders (students, teachers, scientific and disseminating institutions, families) is emphasized in order to exploit in and out of the classroom school resources, competencies, and achievements and for implementing peer-to-peer education among students and teachers in the same class/school or from different schools.;2012
In this paper we deal with algorithmic thinking, part of computational thinking. We describe its relationship to key competencies and the need for its development at primary and secondary schools. Based on our study and experience we introduce a model of algorithmic thinking expressed in three dimensions generality of the solution, the formality of solution expression and level of thinking used to solve the problem. We briefly suggest ways to develop algorithmic thinking in teaching of computer science and other subjects.;2012
In this paper, we report our two-year experience offering an introductory computational thinking course for all first year students with no prior related background. In this course, we explore to seek a unified approach to teach non-CS majors and to find out to what extent they can be taught same as CS-majors. We describe our motivation for the proposed approach, the selection of topics, adoption of teaching methods, feedback from the survey at the end of the course, and some promising conclusions based on our experiences and student feedback. (C) 2012 Published by Elsevier B.V.;2012
"Introducing programming using an imperative language often requires a steep learning curve due to the significant emphasis and corresponding time commitment placed on a particular language's syntax and semantics. This paper presents two separate video game scripting engines focusing on nurturing computational skills that can be explored in as little as one hour. Scripting engines run code developed by students to control four concurrent players on a team; up to four teams (four different code scripts) can play in a head-to-head competition. To achieve a quick learning curve, the scripting engine only supports a limited number of instructions to define initial player qualities, movements, and game actions. Students are faced with the computational thinking challenge of mapping their game strategies into code. Successful strategies require teams to appreciate the complexities of concurrent programming to control all game players simultaneously. We have observed that students quickly learn that writing code for all team players individually does not result in a competitive match, but requires a mixture of collaboration and parallel programming to be competitive in a short amount of time. The need for more advanced control flow semantics are also motivated, since students must rewrite similar code for performing similar routines through the game simulation. The video game scripting engines have been used in two high school outreach programs and results from these events indicate that the learning objectives were met and students were engaged in the activities the entire duration by modifying their code to be more competitive. Lessons learned from the first scripting engine (Dodgeball) that went into creating the second engine (Boomtown) are also presented.";2012
Logo turtles and Henderson's picture language have long been used to teach computational thinking by inspiring learners to construct programs that create complex geometric designs. We have developed visual blocks-based versions of these languages, TurtleBlocks and PictureBlocks, that allow users to transform their designs into tangible artifacts produced by laser cutters and vinyl cutters. Our languages embody two novel features. First, they use constructive area geometry to convert the geometric designs generated by our programs into formats suitable for laser and vinyl cutters. Second, they leverage static typing and polymorphism to provide a new way to reference the names of procedure parameters and local variables in a blocks language.;2012
Math on a Sphere (MoS) is a newly developed Web-based environment that enables children to imagine, program, and share creative designs on a public spherical display, the Science on a Sphere system created by the National Oceanic and Atmospheric Administration (NOAA). The MoS software, similar in spirit to the Logo language, was installed at an exhibit located in the Lawrence Hall of Science at the University of California at Berkeley and at the Fiske Planetarium at University of Colorado, Boulder. Twenty-five children ages 8 to 13 in two cohorts tested the MoS software during a half-day workshop held at the Lawrence Hall. In addition to using the MoS software to create beautiful and original works of art, children also engaged in hands-on crafts and inquiry-based math activities to further promote learning of spherical geometry and computational thinking. MoS software workshop had a positive impact on children's engagement, but had mixed results about their understanding of geometry as evidenced by direct observations and results from pre/post-surveys, which are reported here.;2012
Mathematics is a professional mathematics & Applied Mathematics, information and Computing Science in general, and belongs to the basic disciplines. The paper analyzed that the reason of general college mathematics specialized employment is not good is attributed to the disjunction of social demand and the professional training, and determined IT compound talents training mode of fusion mathematics thinking and computational thinking, and studied mathematics and computer courses integration method, given the teaching reform, practice teaching, examination reform measures. This paper studies on how to cultivate the students' practice ability and innovation ability, improve the quality of employment provided a valuable attempt.;2012
Owing to their ease of engagement and motivational nature, especially for younger age groups, games have been omnipresent in education since earliest times. More recently, computer video games have become widely used, particularly in secondary and tertiary education, to impart core knowledge in some subject areas and as an aid to attracting and retaining students. Academics have proposed a number of approaches, using games-based learning (GBL), to impart theoretical and applied knowledge, especially in the computer science discipline. Our research is concerned with the design of an innovative educational game framework focused on the development of Computational Thinking (CT) skills, and herein we introduce a serious game, based on our framework, which encourages the development of CT skills to facilitate learning introductory computer programming. We describe how a limited number of key introductory computer programming concepts have been mapped onto the game-play, and how an equivalent set of skills characterising CT can be acquired through playing the game. A survey response group of 25 students, following computer science and related degree programmes but with very diverse backgrounds and experience, provided initial usability feedback on the game. Their feedback confirmed that they found the game enjoyable, and also universally believed that this approach would be beneficial in helping students learn problem-solving skills for introductory computer programming. Feedback from this group will be incorporated in a revised version of the game, which will now be subject to rigorous experimental evaluation and analysis, to provide structured empirical evidence in support of our approach. (C) 2012 Published by Elsevier Ltd.;2012
"Since 2007, Spanish compulsory education, based on the education law (Ley Organica de Educacion or LOE), has implemented the concept of basic skills as a result of the project DeSeCo (definition and selection of basic skills). Education has the challenge of integrating knowing and doing. Our challenge as teachers of the 21st century is to stimulate change in the classroom scene provoking the jump from transmission teaching to strategic teaching, centered in the student. The student is the protagonist of his learning and should become an active participant in it. In these lines, we present a classroom experience performed on 9-12 year old grade school students (primary school grades 4th to 6th) from the private school - Colegio Internacional SEK-Santa Isabel, Madrid, Spain. For the purpose of method development we begin with the following hypothesis: It is possible to foster a degree of basic skills acquisition and stimulate creativity in grade school students by incorporating Scratch. Scratch is an open source software tool designed and developed at the MIT Media Lab, Massachusetts, USA. It was designed for introducing, in an attractive and simple way, programming language to both children and adults. This tool, based on the theory of constructionism of Seymor Papert (1980), when transformed into an educational resource takes on a great potential. It permits us to work with teaching principles such as significant learning, socialization, active interpersonal learning, practical research, the evaluation of the teaching-learning process and globality. It also provides the perfect framework to promote the creative thinking spiral theory proposed by Mitchel Resnick (2007). Always keeping in mind the importance of creating and establishing an environment of affection and trust (Palou, 2004); which in turn contributes and promotes a sense of security in the student and permits him to work in an area free from fear of rejection or making mistakes and create a bond with his peers and the teacher. This experience was developed during the second semester of the 2011-2012 school year. We did a double evaluation of both the process and the end product. To evaluate the teaching aspect, the following aspects were taken into account: degree whereby the objectives where reached, time optimization, materials and space optimization, adequacy of the planned activities. The degree of student satisfaction was evaluated by way of a questionnaire filled up by all the students who participated and a statistical analysis later performed on the answers.";2012
Students taking introductory physics are rarely exposed to computational modeling. In a one-semester large lecture introductory calculus-based mechanics course at Georgia Tech, students learned to solve physics problems using the VPython programming environment. During the term 1357 students in this course solved a suite of fourteen computational modeling homework questions delivered using an online commercial course management system. Their proficiency with computational modeling was evaluated in a proctored environment using a novel central force problem. The majority of students (60.4%) successfully completed the evaluation. Analysis of erroneous student-submitted programs indicated that a small set of student errors explained why most programs failed. We discuss the design and implementation of the computational modeling homework and evaluation, the results from the evaluation and the implications for instruction in computational modeling in introductory STEM courses.;2012
Studies indicate that students, particularly females, find computing most engaging when it is presented in relation to real-life problems, rather than when it is presented in ways that emphasize computing for the sake of computing. Video scenarios are a novel tool for encouraging students to explore computing in a problem-centric, rather than a code-centric, manner. Video scenarios are short films (2-5 minutes long) that depict individuals facing problems in life-like settings. The scenarios emphasize the diverse and often ill-defined nature of real world problems, and the potential for creative and entrepreneurial computing they present. The video scenarios and their associated discussion/exercise questions are freely available on the web at www.Virt-U.org.;2012
The Collaborative Process to Align Computing Education with Engineering Workforce Needs (CPACE) team developed a partnership among various stakeholders to identify the computational skills that are essential for a globally competitive engineering workforce. Our goal is to redesign the role of computing within the engineering programs at Michigan State University (MSU) and Lansing Community College (LCC) to develop computational competencies informed by industry needs by infusing computational learning opportunities into the undergraduate engineering curriculum. In this paper we summarize the process that we used to translate our research findings about the computational competencies needs in the engineering workplace into fundamental computer science (CS) concepts that can be used in curricular implementation. We also discuss the initial phase of our curricular implementation strategy in two disciplinary engineering programs at MSU and transfer programs at LCC.;2012
The pervasiveness of computer devices in everyday situations poses a fundamental question about Computer Sciences as being part of those known as basic sciences. However, it would be more beneficial not to consider computation only as a technique, but instead as a way of reasoning and problem solving. Under this perspective, there are inherent relationships among the knowledge, skills and attitudes that emanate from this field and those ones commonly related to Math. This paper discusses the relationship between the so-named Computational Thinking and the foundations of Math Education, based on a literature review. Three groups of skills that can be jointly developed by both areas are identified and some challenges and implications for education in Computer Sciences are discussed.;2012
This chapter presents a research program that uses robotics as a powerful tool to engage Kindergarten children in developing computational thinking and learning about the engineering design process. Using an ethnographic analysis of an experience in a Kindergarten classroom at the Jewish Community Day School (JCDS), a pluralistic school in Watertown, MA, in which children worked with robotics as a way to explore issues of identity, the chapter highlights both developmental and technological considerations that need to be addressed when engaging young children with robotic activities. This project used an innovative hybrid tangible programming system composed of interlocking wooden blocks, called CHERP, specifically designed to meet the developmental needs of young children. While many robotic programs highlight building aspects and their relationship to engineering education, the approach presented in this chapter complements this by focusing on programming by teaching powerful ideas from computer science at a very early age.;2012
This paper describes a design for an immediate immersion of computational thinking into current high school math classrooms in Alabama. Most schools in our region have eliminated computer science classes from the curriculum. Alabama has an existing state initiative to improve mathematics, science and technology education in K-12. The Alabama Math, Science, and Technology Initiative (AMSTI) emphasizes learning by doing, with hands-on, activity based instruction. We have developed an instructional treatment that uses strategically designed computer exercises to push students to form the mental foundation necessary for abstraction and generalization. We selected popular problems from the AMSTI mathematics curriculum and applied our instructional design. The first step we took in implementing our plan for reintroducing computational thinking into the secondary schools was to conduct a workshop for math education leaders. This training was sponsored and supported by AMSTI. Results from the workshop included demonstrating to a select group of math education leaders that computer programming could be easily integrated with the AMSTI math curriculum and could be used to meet the educational goals of the initiative and the educators.;2012
This paper outlines an innovative game model for learning computational thinking (CT) skills through digital game-play. We have designed a game framework where students can practice and develop their skills in CT with little or no programming knowledge. We analyze how this game supports various CT concepts and how these concepts can be mapped to programming constructs to facilitate learning introductory computer programming. Moreover, we discuss the potential benefits of our approach as a support tool to foster student motivation and abilities in problem solving. As initial evaluation, we provide some analysis of feedback from a survey response group of 25 students who have played our game as a voluntary exercise. Structured empirical evaluation will follow, and the plan for that is briefly described.;2012
This work in progress explores the landscape of computing learning resources and environments found on the web together with teaching and learning materials that can facilitate the integration of computational thinking into the K-12 classroom. In specific, this paper focuses in finding and describing existing learning environments that integrate computational thinking into a STEM discipline together with lesson plans, activities and other curricula.;2012
Using game design and programming to foster computational thinking acquisition has proved to be a successful strategy in recent years. In previous research with AgentSheets, we concluded that the semiotic richness of this visual programming environment, specifically designed to support computational thinking acquisition, could be explored more extensively to the benefit of learners. In particular, we realized that there are some additional representations of AgentSheets games and simulations that are not presented as programming tools in the interface, and yet they communicate new relevant meanings to the users. This paper reports on research where we artificially introduced such representations in a small follow-up experiment with selected participants from our previous research experiment. Our goal was to investigate the impact of such additional representations on program comprehension and modification tasks. To this end we contrasted empirical evidence of their performance in the two tasks with their verbal account of experience with AgentSheets. We used a combination of discourse analysis and inspections using Semiotic Engineering methods and the Cognitive Dimensions of Notations framework. Our findings go in two directions. First, we observed that additional representations have allowed participants to expand and correct previous learning. Therefore such representations can support new teaching strategies in computational thinking acquisition programs with AgentSheets. Second, we learned that the combination of methods we used to analyze empirical data - discourse analysis with semiotic and cognitive inspection techniques - can be used systematically in other research contexts, holding the promise of insightful results.;2012
We recommend using the term Computation in conjunction with a well-defined model of computation whose semantics is clear and which matches the problem being investigated. Computer science already has a number of useful clearly defined models of computation whose behaviors and capabilities are well understood. We should use such models as part of any definition of the term computation. However, for new domains of investigation where there are no appropriate models it may be necessary to invent new formalisms to represent the systems under study.;2012
Arts & Bots is an educational program that aims to broaden diversity and participation in technology by integrating arts and crafts with robotics. Arts & Bots is a flexible program that can be integrated into in-school and out-of-school programs in many subject areas. This paper describes the visual programming environment developed for Arts & Bots and its goals of low barriers to entry, classroom compatibility, supporting student acquisition of computational thinking skills, and enabling complex robot behaviors. The authors also compare and contrast the programming environment with other popular visual programming environments, namely Scratch, Alice and LEGO NXT-G.;2013
"As the college course of fundamentals of computer pays more attention to the cultivation target of practice ability and the computational thinking ability, we devote to these problems' research as experimental teaching model, teaching contents and teaching method, and reform the innovation practice teaching mode research of the fundamentals of computer in this paper. In the new teaching mode, a new practice teaching system is established based on combined curricular practice teaching with extracurricular innovative work and various innovative competition; group practice teaching is established in order to set a pattern of unit and competitive, where both study and competition can be carried on among groups; the frontier lecture can broaden students' knowledge. The teaching practice proves that the reformed teaching mode will improve students' practice, thinking and learning ability, at the same time stimulate the student's study initiative in large measure, and cultivate students' innovative ability.";2013
"As the course of fundamentals of computer pays more attention to the cultivation target of practice ability and the computational thinking ability, we devote to these problems' research as experimental teaching model, teaching contents and teaching method, and reform the innovation practice teaching mode research of the fundamentals of computer in this paper. In the new teaching mode, a new practice teaching system is established based on combined curricular practice teaching with extracurricular innovative work and vinous innovative competition; group practice teaching is established in order to set a pattern of unit and competitive, in which both study and competition can be carried on among groups; the frontier lecture can help expand the student's knowledge. The teaching practice proves that the reformed teaching mode will improve the practice ability, thinking and learning ability of the students, stimulate the student's study initiative to a great degree, and cultivate the students' innovative ability.";2013
At the threshold between the industrial and the digital crafting era, this paper discusses the notions that both today's designers and users are grappling with. Learning from pre-industrial design and crafting environments, considered as 'intelligent' due to their responsive results, mostly achieved using empirically-oriented methods, we envision the creation of a new environment, this time in the age of scientific, technological and computational applications. Based on interdisciplinary collaboration and global data collection and analysis regarding crafting materials and methods, this environment acts both as a design tool and a knowledge-propagation model among digital communities: simulating the complex behaviors and properties of matter through a user-friendly, real-time computer interface, this environment educates and assists users in the creation and manipulation of their personal - optimized to local conditions and needs-artifacts.;2013
Computational thinking aims to employ Computer Science foundations to solve problems in different knowledge areas. This paper describes projects related to computational thinking and starts a discussion on the challenges for implementing computational thinking in primary and secondary education in Brazil.;2013
Computational thinking education focuses on the cultivation and training of a kind of thinking mode. It poses a new challenge to computing science and college computer education, including teaching contents, curriculum system, and teaching methods. For the purpose of promoting college students' computational thinking, a teaching structure is designed by restructuring the teaching contents, optimizing the employment of teaching methods, establishing compound teaching modules and a categorized and multi-layer curriculum system. Teaching practice has shown that it is helpful to the promotion of college students' computational thinking.;2013
Computational thinking, an approach to problem solving, is a key practice of science education rarely integrated into instruction in an authentic way. A second key practice, creating models of physical phenomenon, has been recognized as an important strategy for facilitating students' deeper understandings of both science concepts and the practices of science. We are creating an interdisciplinary computational thinking curriculum for grades 4-6 that combines the development of computational thinking with content in other disciplines such as science. Here we present an example project where students can iteratively develop a model to explain the momentum and acceleration of an object, coupled with sophisticated computational thinking concepts to simulate that model. In addition, we present two findings from related research on fourth graders' pre-instructional knowledge related to computational thinking: 1) Students recognized the need for but struggled to produce specific instructions, and 2) Students understood that small errors could change outcomes.;2013
Computing disciplines struggle to increase student retention rates. Creating interesting curriculum to attract freshmen and help them learn is challenging. Computational thinking has become a key concept to motivate students with problem-solving strategies and has been used across various fields irrespective of computing majors. This paper describes the vertical integration of middle school and high school students with undergraduate students at a state university in a computational thinking project. Middle school students adopted the role of customers/end-users developing project requirements, high school students were designers, and undergraduate students were developers actually implementing the software system. One of the main themes of this project was the importance of ethics in computational thinking. To this end, teachers were provided with information and coaching on how to teach ethics. Students were provided with introductory ethics discussions and given opportunities to identify and reflect upon the ethical dimensions of computational thinking in the context of several of the aforementioned activities. This paper will briefly highlight and evaluate the ethics pedagogy adopted in this project. The results obtained by carrying out the computational thinking activities among a diversified group of students with varying knowledge and expertise levels were promising. The vertical integration had challenges and research components, which, when unveiled, will attract new students to computing disciplines.;2013
Educational game design environments are used for teaching computational thinking and software engineering concepts to novices. In software engineering education, there has recently been calls for innovative methods for software teaching and training in online courses(1). However, to date, learning these concepts is tied to a formal learning environment and the presence of a teacher. In line with the new educational opportunities provided by the Web such as massive open online courses (MOOCs) and e-learning 2.0 platforms, we have created an online educational game design environment with integrated learning resources including video tutorials, showcases, and communication tools. To understand the effect of online educational game design environments with integrated support for learning on novices' use of the system and their learning, we conducted a mixed-method study with nine participants. While the learning goals were achieved to a high degree, the analysis of participants' interaction with the system reveals interesting phenomena about user preferences, such as the fact that during the given computational thinking tasks, the participants preferred the synchronous communication channel to other forms of commonly provided learning resources such as forums.;2013
"Following the belief that diversity breeds innovation in scientific endeavors, there is a national push for more diversity in the science, technology, engineering, and mathematics (STEM) workforce in order to maintain national economic competitiveness. Currently, STEM-related employment is only 28% non-White; however, greater efforts to recruit and retain underrepresented minorities should increase this figure. Amidst the attention given to supporting leaky pipelines, less emphasis has been placed on mitigating challenges associated with bringing diverse cultures together. This article presents a framework for supporting underrepresented minorities in building STEM-relevant skills and enhancing their ability to collaborate with peers different from themselves.";2013
Fundamental of computer is the first course of general education courses of computer science. It offered in first semester of college to enhance computer practical skill of undergraduate and provide experiment of computational thinking. There are three challenges in course. One is how to organize mass content of course. The second is how to keep balance between academic and practice in teaching. The last is students on various computer practical skill levels. To guarantee quality of teaching, a closed-loop architecture based on knowledge management is proposed, which quested activity of knowledge management in each teaching phase. The results of teaching summative evaluation implied that the scheme can efficiently assist teacher to achieve teaching goal and train students to do personal knowledge management which can foster their autonomous learning ability and arouse knowledge innovation.;2013
Fundamental skills acquired by undergraduate students during their academic, play a crucial role in their career. One such skill is computational thinking (CT), which will help to solve problems algorithmically using computers. Computational thinking will improve their problem solving skills in a non-conventional manner as this leads the student to think in multiple paths to reach the solution. However, it is a challenge in Computing Education to develop student's ability to solve problems in an algorithmic way. The aim of this paper is to introduce a potential and pragmatic approach to develop computational thinking skills in novices.;2013
In order to better cultivate university students' ability of solving problems by computer, computational thinking is demanded during the computer fundamental teaching. Web design and making is one of university computer fundamental courses. Computational thinking is introduced to the course and impenetrates the whole teaching process, so that it not only makes students learn how to design and make webpage but also makes them understand the essence of computer, experience the joy of learning computer and explore resolution of actual problem by computer. Teaching practice shows that teaching reform based on computational thinking improves students' interesting and teaching effect to some extent.;2013
In order to enable students to gradually form computational thinking in the C programming language course, this paper addresses the issues of computational thinking training in the labs and the establishment of a series of labs. For the purpose of progressively obtaining knowledge, ability, and computational thinking pattern, we propose some operable strategies and methods on the formation of problems, design of lab contents, and the assessment of students' submissions.;2013
In this paper we present a case study of 117 Colombian elementary grade students' performance and perceptions of a learning activity aiming to promote computational thinking guided by the College Board's CS Principles and Scratch. The lesson plan was designed by the teacher as part of a three-day teacher professional development workshop within an advanced topics course for a master degree in engineering. As part of the workshop, participants were invited to implement their designs in their own classrooms and, together with the researchers, conduct classroom action research. Workshop participants designed their own instruments and gathered data on students' perceptions of the learning module and identified the level of achievement of the selected learning objective. Our research questions are: (a) what are students' levels of achievement of the identified CS principle learning objective as evidenced by their performance on the design learning activity? And (b) what are students' perceptions and engagement with the design learning activity? Student grades, the perceived usefulness, the appeal of the learning activity, and Scratch were considered as positive. Similarly, as part of an exit interview, the teacher participant highlighted the usefulness of Scratch software to implement the learning task guided by the CS principles and backwards design approaches. These results pose significant implications to integrate computing principles and procedures sooner and often into the K-6 curriculum.;2013
Information Retrieval is a tool and general education courses of Qilu University of Technology, It practices of 21st Century Education revitalization plan, implements of innovative training mode, reconstructs of the curriculum system, focuses on enhancing the student's quality and ability. Our students should be applied talent and have international vision, we need to learn from the American Information Literacy Competency Standards for Higher Education and open teaching philosophy. The teaching content, teaching methods, evaluation form of the Information Retrieval should have new teaching mode under the new situation, and should designed to cultivate the students' innovative spirit and self-learning ability.;2013
Jeannette Wing's influential article on computational thinking 6 years ago argued for adding this new competency to every child's analytical ability as a vital ingredient of science, technology, engineering, and mathematics (STEM) learning. What is computational thinking? Why did this article resonate with so many and serve as a rallying cry for educators, education researchers, and policy makers? How have they interpreted Wing's definition, and what advances have been made since Wing's article was published? This article frames the current state of discourse on computational thinking in K-12 education by examining mostly recently published academic literature that uses Wing's article as a springboard, identifies gaps in research, and articulates priorities for future inquiries.;2013
Mobile applications are predestined for situational informal learning. However, for young learners, it is difficult to control, engage in and make sense of their learning experiences in unstructured environments. Whereas complex mobile games have been successfully implemented for situational learning in structured environments, casual mobile games have mostly been viewed as time wasting without opportunities for thorough learning. Can game design elements within a casual mobile application produce informal learning for teenagers in their everyday environment? How can a casual mobile game support immersing and reflective learning? The casual mobile game Meleon was developed and evaluated to approach these questions. The application's concept is based on the proposed model of immersion and reflection in casual mobile game-based learning. With 'Meleon', players practice computational thinking, by being inspired by their environment. The heart of the game are different mapping algorithms that use the device's camera as input, and the colouring and movement of the game's character Meleon as digital output. Two game modes show how the theoretic model can be translated into detailed design decisions so that immersion and reflection are supported on a micro, macro, and expanded game cycle. First the players become immersed when the game matches their interests. The appropriate level of direct feedback and visual appeal create sensory immersion and reflection on the interface elements. The hierarchical goal structure, balanced challenge and elaborate level feedback encourage challenge-based immersion and in-game reflection that lead to declarative and strategic thinking skills. The integration of the game in a larger play environment, stimulates reflection after the game is completed even where there is no organised external debriefing. The first evaluation of Meleon affirms the high potential for casual mobile games to promote continuous engagement and learning on several levels and styles. The different modes offer initial game immersion for diverse people. A range of entry points, appealing aesthetics and themes, using the device as a tool to integrate the context, and short, rewarding yet challenging play sessions are key factors for thorough learning processes in casual mobile games.;2013
Promoting computational thinking is one of the top priorities in CS education as well as in other STEM and non-STEM disciplines. Our innovative NSF-funded IC2Think project blends computational thinking with creative thinking so that students leverage their creative thinking skills to unlock their understanding of computational thinking. In Fall 2012, we deployed creative exercises designed to engage Epstein's creative competencies (Surrounding, Capturing, Challenging and Broadening) in introductory level CS courses targeting four different groups (CS, engineering, combined CS/physical sciences, and humanities majors). Students combined hands-on problem solving with guided analysis and reflection to connect their creative activities to CS topics such as conditionals and arrays and to real-world CS applications. Evaluation results (approximately 150 students) found that creative thinking exercise completion had a linear dosage effect. As students completed more exercises [0/1 - 4], they increased their long-term retention [a computational thinking test], F(3, 98) = 4.76, p = .004, partial Eta(2) = .127 and course grades, F(3, 109) = 4.32, p =. 006, partial Eta(2) = .106. These findings support our belief that the addition of creative thinking exercises to CSCE courses improves the learning of computational knowledge and skills.;2013
Purpose of review There is ongoing controversy about the relationship between atopy and asthma. Recent findings In clinical practice, specific IgE and skin test results should not be reported as 'positive' or 'negative', but as the level of IgE and the size of skin test wheal diameter. In assessment of children with severe asthma, these tests are not mutually exclusive but complementary, and both should be carried out and quantified. In the near future, their diagnostic accuracy in children with wheezing may be improved by the measurement of allergen-specific IgG. It is becoming increasingly clear that asthma is not a single disease, but a collection of several diseases with similar/same symptoms. These distinct disease entities (endotypes) may share similar observable characteristics (phenotypes), but arise via different pathophysiological mechanisms. Observable phenotypic features (e.g. sputum inflammatory phenotypes) are not stable in children with asthma. The discovery of novel, latent endotypes of asthma will require integration of a time component to take into account the phenotype instability and longitudinal changes. Not only asthma, but also 'atopy' encompasses a number of different endotypes which differ in their association with asthma. Summary Novel endotypes of atopy and asthma which better reflect the unique pathophysiological processes underlying different diseases in the atopy and asthma syndromes can be defined through the fusion of computational thinking and novel mathematical approaches with biomedical science. These novel endotypes may be more relevant for epidemiological, genetic and therapeutic studies.;2013
Reach for the Stars is one of the NSF Graduate Students in K-12 Education (GK12) programs. PhD candidates from Northwestern University are partnered with a middle or high-school teacher to act as a resident scientist in their classroom for the entire academic year. These scientists and engineers spend time both in the classroom and out, developing inquiry-based activities that tie the computational thinking skills essential to their research to the classroom curricula. Reach for the Stars grants graduate students the opportunity to expand and improve their communication skills as they deconstruct their complex research projects in a way that makes them relevant and understandable by a variety of audiences. In the process, they have produced dozens of lesson plans available to teachers everywhere through a program that showcases the benefits of partnering universities with the K-12 school community.;2013
Recent reports have shown that there is a lack of interest in computer science in the K-12 level and number of incoming college freshmen specifying Computer Science (CS) as an area of study has dropped 60% over the last 4 years. The educators and administrators are challenged to find ways to engage and promote success and retention of students while maintaining standards in introductory computer science courses. One way to do this is through education and awareness about computational thinking in K-12 curriculum. There are a number of initiatives on this and one such initiative is the STARS (Students & Technology in Academia, Research & Service) Student Leadership Corps (SLC). STARS SLC is a NSF funded initiative at University of North Carolina at Charlotte with the primary objective of broadening participation in computing through best practices and community building. SC State is a participating university in this initiative. The objective of this paper is to discuss the STARS SLC outreach and other activities at SC State, its success and lessons learned with the engineering, science, and computing community.;2013
Recent research has revealed that basic computer input capabilities can substantially facilitate or impede people's ability to produce ideas and solve problems correctly. This research asks: What type of interface provides best support for inferential reasoning in both low- and high-performing students? Students' ability to make accurate inferences about science and everyday reasoning tasks was compared while they used: (1) non-digital pen and paper, ( 2) a digital pen and paper interface, ( 3) pen tablet interface, and ( 4) graphical tablet interface. Correct inferences averaged 10.5% higher when using a digital pen interface, compared with the tablet interfaces. Further analyses revealed that overgeneralization and redundancy errors were more common when using the tablet interfaces and among low performers. Implications are discussed for designing more effective computational thinking tools.;2013
Recently, higher education has seen an increasing emphasis on the prominent role of computational thinking in computer fundamental education. Computational thinking is taken for the fundamental skills for everyone, not just computer scientist, to learn and use. How to develop students' capacity for computational thinking during the teaching process is one of the basic goals of computer fundamental education. Using Excel VBA course teaching as example, in this paper, we discuss how to understand the essence of computational thinking and how cultivate the computational thinking ability of students.;2013
"Recently, the National Research Council's framework for next generation science standards highlighted computational thinking as one of its fundamental practices. 9th Grade students taking a physics course that employed the Arizona State University's Modeling Instruction curriculum were taught to construct computational models of physical systems. Student computational thinking was assessed using a proctored programming assignment, written essay, and a series of think-aloud interviews, where the students produced and discussed a computational model of a baseball in motion via a high-level programming environment (VPython). Roughly a third of the students in the study were successful in completing the programming assignment. Student success on this assessment was tied to how students synthesized their knowledge of physics and computation. On the essay and interview assessments, students displayed unique views of the relationship between force and motion; those who spoke of this relationship in causal (rather than observational) terms tended to have more success in the programming exercise.";2013
Software engineering project courses where student teams are geographically distributed can effectively simulate the problems of globally distributed software development (DSD). However, this pedagogical model has proven difficult to adopt or sustain. It requires significant pedagogical resources and collaboration infrastructure. Institutionalizing such courses also requires compatible and reliable teaching partners. The purpose of this workshop is to continue building on our outreach efforts to foster a community of international faculty and institutions committed to developing, teaching and researching DSD. Foundational materials presented will include pedagogical materials and infrastructure developed and used in teaching DSD courses along with results and lessons learned. The third CTGDSD workshop will also focus on publishing workshop results and collaborating with the larger DSD community. Long-range goals include: lowering adoption barriers by providing common pedagogical materials, collaboration infrastructure, and a pool of potential teaching partners from around the globe.;2013
The aim of this paper is to discuss computational thinking and parametric design and thus what model is in the realm of mathematics in architecture. Here we investigate how multi-dimensionality and reference systems should be contemplated, along with what mapping is and how it is related with algorithms in computational design. Set theory and functional relations are re-visited and similarity/similitude concepts and the importance of nondimensional parameters relating different reference systems (interpreted as domain and range relations) are pointed out. In this context, computational design approaches based on modern biomimetic studies in architecture which are beyond metaphors or analogies are considered as the prominent cases of the present inquiry.;2013
The aim of this paper is to discuss the importance of computational thinking and how to include techniques to teach this kind of ability in schools in Brazil. First, we discuss what Computational Thinking is and the importance of teaching such skill in school. Then, we list some of the challenges that are involved in introducing this discipline in school curricula.;2013
The gifted students are the people who have an exceptional ability and talent more than others in the fields which are treated as valuable in their society. For decades, lots of researches have been accomplished about developments of curriculum for gifted students on mathematics and science. However, in order to achieve the educational goal of computer science fields such as creative problem-solving skill, an appropriate choice of teaching method is important as well as the curriculum of each course. In this research, we suggest a new computer science teaching model focused on students' activities for the scientifically gifted students. When we perform the education of gifted and talented students, two of the most difficult things are how we can maintain the students' interest the whole time and how we can draw and maximize the students' potentiality. To solve these problems, we placed the student-led activities at the centre of class. Before the class, a teacher suggests the goal of lecture and provides the materials related to the subject. And then the teacher asks for students to get into groups and study the contents by group. In the class, all of group members share and extend their knowledge and then every student attends the group presentation. Finally, students discuss how they apply the knowledge to solve real-life problems. We applied various kinds of presentation styles and evaluation systems for the purpose of keeping up students' interest. We applied our teaching model on Data structures and algorithms course. According to the survey, the students could improve their computational thinking abilities, creativity problem solving skills and communication skills as well as the knowledge of the course.;2013
"The goal of the present study was to utilize a profiling approach to understand differences in motivation and strategic self-regulation among post-secondary STEM students in major versus required non-major computer science courses. Participants were 233 students from required introductory computer science courses (194 men; 35 women; 4 unknown) at a large Midwestern state university. Cluster analysis identified five profiles: (1) a strategic profile of a highly motivated by-any-means good strategy user; (2) a knowledge-building profile of an intrinsically motivated autonomous, mastery-oriented student; (3) a surface learning profile of a utility motivated minimally engaged student; (4) an apathetic profile of an amotivational disengaged student; and (5) a learned helpless profile of a motivated but unable to effectively self-regulate student. Among CS majors and students in courses in their major field, the strategic and knowledge-building profiles were the most prevalent. Among non-CS majors and students in required non-major courses, the learned helpless, surface learning, and apathetic profiles were the most prevalent. Students in the strategic and knowledge-building profiles had significantly higher retention of computational thinking knowledge than students in other profiles. Students in the apathetic and surface learning profiles saw little instrumentality of the course for their future academic and career objectives. Findings show that students in STEM fields taking required computer science courses exhibit the same constellation of motivated strategic self-regulation profiles found in other post-secondary and K-12 settings.";2013
The higher education of China has entered the stage of mass education. How to deepen educational reform and continuously raise the quality of education under the current situation has become a focus to the public. The paper has elaborated the aim of the curricular reform for science and engineering intensive training classes and proposed the thoughts and methods on the reform in the teaching of the curriculum Microcomputer Principle and Interface Technology for intensive training classes centered on the cultivation of computational thinking and based on task-driven teaching philosophy. It also made a practical research on the science and engineering intensive training class (Grade 2010) of Nanjing University of Posts and Telecommunications (NUPT) and achieved positive results.;2013
The Lero Education and Outreach (E&O) programme discussed in this paper focuses on our goal to increase the interest and knowledge of high school students in computing and software engineering and encourage a greater uptake of computing and software engineering at university. While many high school outreach programmes operate in countries that offer Computer Science (CS) education for all high school students or at least offer a pre-university level course, this is not the case in Ireland. In terms of a national approach to Information and Communication Technology (ICT) in schools, 53% of Irish high schools are involved in the European Computing Driving License (ECDL) programme, but the focus of this programme is on computer literacy rather than computer science. The outreach programme, which we have been running for four years, focusing on computational concepts and computational thinking, consists of four parts: teaching materials/curriculum, teacher training, a competition and summer computing camps. Teaching materials/curriculum include a 45 hour course designed for high school students. Teacher training is concerned with training primary and high school teachers. The competition is an annual Scratch competition run for primary and high school students. The summer computing camps are run in our university for a number of weeks during the summer period. Software engineering concepts are introduced in all four parts of the programme during the software project phases. Our outreach efforts primarily use the Scratch tool that was developed at the MIT Media Lab. We describe each outreach effort in detail and outline our experiences based on a mixture of survey results, instructor observation and participant feedback. We will conclude by describing how the E&O programme has led to Lero being commissioned by the Department of Education to write a computing course for high school students that will be part of the official curriculum.;2013
The need for more post-secondary students to major and graduate in STEM fields is widely recognized. Students' motivation and strategic self-regulation have been identified as playing crucial roles in their success in STEM classes. But, how students' strategy use, self-regulation, knowledge building, and engagement impact different learning outcomes is not well understood. Our goal in this study was to investigate how motivation, strategic self-regulation, and creative competency were associated with course achievement and long-term learning of computational thinking knowledge and skills in introductory computer science courses. Student grades and long-term retention were positively associated with self-regulated strategy use and knowledge building, and negatively associated with lack of regulation. Grades were associated with higher study effort and knowledge retention was associated with higher study time. For motivation, higher learning-and task-approach goal orientations, endogenous instrumentality, and positive affect and lower learning-, task-, and performance-avoid goal orientations, exogenous instrumentality and negative affect were associated with higher grades and knowledge retention and also with strategic self-regulation and engagement. Implicit intelligence beliefs were associated with strategic self-regulation, but not grades or knowledge retention. Creative competency was associated with knowledge retention, but not grades, and with higher strategic self-regulation. Implications for STEM education are discussed.;2013
The paper-and-pencil programming strategy (PPS) is a way of representing an idea logically by any representation that can be created using paper and pencil. It was developed for non-computer majors to improve their understanding and use of computational thinking and increase interest in learning computer science. A total of 110 non-majors in their sophomore year were assigned to either a Logo or a PPS course with attendance being 2 hours per week for 15 weeks. To measure the effectiveness of PPS, the Group Assessment of Logical Thinking and a self-assessment survey pre- and post-test were used. Findings indicated that PPS not only improved students' overall logical thinking as much as did Logo programming learning, but also increased scores on one more subscale of logical thinking than did the Logo course. In addition, PPS significantly helped students understand the concept of computational thinking and increased their interest in learning computer science.;2013
This article makes an introduction to the research of computational thinking on its form, characteristic and present situation, analyses the background and the reasons for the rise of computational thinking, draws the conclusion that computational thinking should be considered from national strategic level of talent-training, and proposes some countermeasures of computational thinking enhancement, talent-training and information process.;2013
This chapter presents a research program that uses robotics as a powerful tool to engage Kindergarten children in developing computational thinking and learning about the engineering design process. Using an ethnographic analysis of an experience in a Kindergarten classroom at the Jewish Community Day School (JCDS), a pluralistic school in Watertown, MA, in which children worked with robotics as a way to explore issues of identity, the chapter highlights both developmental and technological considerations that need to be addressed when engaging young children with robotic activities. This project used an innovative hybrid tangible programming system composed of interlocking wooden blocks, called CHERP, specifically designed to meet the developmental needs of young children. While many robotic programs highlight building aspects and their relationship to engineering education, the approach presented in this chapter complements this by focusing on programming by teaching powerful ideas from computer science at a very early age.;2013
This paper aims to summarize the service characters of financial services outsourcing business and analyze the development tendency, by the research on current situation of domestic and international financial services outsourcing business, the position setting of domestic employment market and the students' academic performance of relevant majors in colleges and universities. Based on the concept CDIO of Engineering Education, a system model of demand for talents targeted at financial services outsourcing is structured and by combining the theory of educational objectives classification with the thought of computational thinking In the model, the features of demand for talents of financial service outsourcing are analyzed from three perspectives including structure of knowledge, ability and quality.;2013
This paper describes the outcomes of a three-day teacher professional development workshop aimed at introducing concepts, principles and practices of computational thinking. The guiding research question for this study was: How teachers implement the backwards design process embodying elements of CS Principles (i.e., computational thinking big ideas and computational thinking practices) in the context of their classrooms? The participants of this study included 15 elementary, high school and college level teachers who are also graduate students from a master program in engineering. As part of the workshop participants developed a learning activity that included a set of learning objectives, the design of computational thinking related activities considering appropriate pedagogical strategies, and the integration of mechanisms to evaluate students' performance. Here we describe (a) how participants embodied the CS Principles in the design of learning activities to be integrated into their classrooms, (b) how they used the backwards design process as a tool to implement elements of the CS Principles and (c) what is teachers' performance in integrating CS Principles to the design of learning activities as evidenced by their peer evaluations. Finally, we propose the use of backwards design process together with the CS Principles as a framework for the design of computing learning activities and the development of teacher professional development programs in computing education.;2013
This paper discusses how Social Digital Literacy is being used in CS1 to teach critical and computational thinking by delivering content to students through the use of social media. Social Digital Literacy (SDL) is the way in which people use social media to enhance their social network, effectively increase their knowledge base, while communicating clearly and professionally through the use of social media. The increased popularity of social media amongst college students makes it an opportune time to consider a new form of literacy based on how technology is used by students, the devices that students interact with on a daily bases and the mainstream acceptance of social media in daily life. In order to retain students in computing classes, students are taught in an efficacious manner how to capitalize on the technology that they use on a daily basis. By increasing their SDL proficiency to become a more informed student, a well versed employee and consciously aware of what they post to social media. The expectation is that the approach being used can be implemented in any introductory programming course.;2013
This paper examines the idea that contemporary strategic board games represent an informal, interactional context in which complex computational thinking takes place. When games are collaborative - that is, a game requires that players work in joint pursuit of a shared goal -- the computational thinking is easily observed as distributed across several participants. This raises the possibility that a focus on such board games are profitable for those who wish to understand computational thinking and learning in situ. This paper introduces a coding scheme, applies it to the recorded discourse of three groups of game players, and provides qualitative examples of computational thinking that are observed and documented in Pandemic. The primary contributions of this work are the description of and evidence that complex computational thinking can develop spontaneously during board game play.;2013
This paper outlines an innovative game-based approach to learning introductory programming that is grounded in the development of computational thinking at an abstract conceptual level, but also provides a direct contextual relationship between game-play and learning traditional introductory programming. The paper proposes a possible model for, and guidelines in support of, this games-based approach contextualized by an analysis of existing research into the issues of learning programming and game based learning approaches. Furthermore, the proposed game-based learning model focuses not only on procedural and applied knowledge and associated skills acquisition in computational thinking, but also provides contextualised theoretical knowledge on Computer Science concepts. By way of illustration, the authors introduce a game prototype currently being developed to combine a puzzle solving game-play that uses Computer Science concepts as the game elements.;2013
This paper puts forward reform method for the web design and construction teaching from three aspects. Based on computational thinking, we redesigned guiding principle in HTML element and CSS layout teaching, emphasized on abstraction and automation. Establish a real development environment of website which can make students comprehend the real process in the website building. Adopted more tools for analyze web page which provide powerful function to students. These tools help students to acquire experience from mature web page. These reforms have been proved to be effective in web design and construction teaching.;2013
"This paper will describe a novel approach to engaging under-represented high school students in research and design opportunities at a public university. The I-3 (pronounced I three) Experience programs aim to engage 9th-12th grade African American, Latino, and female students in research and prototyping activities to increase and sustain their interest in computer science. From Spring 2011 - Spring 2012, 64 students have enrolled in the I-3 Experience programs. Our program has specifically targeted female and underrepresented students (African American and Latino/as): 85.94% of program participants are female and underrepresented students; 61% of our students participated in free and reduced lunch programs. The program has a 71.79% retention rate. The I-3 Experience is a series of computing afterschool and summer-enrichment programs designed for students who are interested in exploring computing but lack courses at their school or have completed all the available Computer Science (CS) courses at their school and desire to expand their computing skills. The I-3 Experience consists of three program phases: Imagine, Investigate, and Innovate. Each of these program phases engages students in computational thinking and provides opportunities and resources for them to bring their ideas to life through the design of new applications and devices. Our goal in designing this program was to build on the success of existing K-12 summer camp outreach programs offered at Georgia Tech by offering students an opportunity to pursue their interest in CS through a constructionist and project-based curriculum. As we moved the students from exposure to personalization of the technology they developed, our aim was to increase the number of students desirous of enrolling in college as computer science majors. Our overarching goal was to increase the likelihood of students who apply to computer science undergraduate degree programs. This paper will discuss the program, strategies for program success, and enrollment and participation outcomes of this year long program.";2013
Traditional humanistic disciplines feel irrelevant and marginalized in Europe and Anglophone countries. Instead of demonstrating the insights into humans, their communities, and values that only philosophy, literature, and the arts can provide, many humanists repudiate their base in favor of scientific models. This turn to philosophic naturalism the belief that only knowledge derived from natural sciences has credibility underlies much current work in the humanities and social sciences. Similarly, the digital humanities, purportedly rooted in 'computational thinking', were born with a bias toward science. This paper addresses the loss of confidence in the explanatory value of critical and aesthetic methods of literary inquiry through the work of Richard Rorty. He holds that science and philosophy employ different kinds of thinking and do different work: science asks 'how' questions, philosophy asks 'why'. Confusing two incompatible epistemes will not improve the status of the humanities. It is this same epistemic confusion that the digital humanities must also negotiate.;2013
University computer foundation is a required course in all domestic universities. Based on the features of computer basis teaching, this paper analyzes its actualities and problems, discusses its developing trend and puts forward the corresponding measures. Based on the computational thinking of university computer foundation teaching reform, classification teaching method can train students to develop computational thinking, improve the comprehensive quality and innovative ability, excavate students' learning potential. And it fully arouses the enthusiasm of student's study.;2013
"We believe that undergraduate biology students must acquire a foundational background in computing including how to formulate a computational problem; develop an algorithmic solution; implement their solution in software and then test, document and use their code to explore biological phenomena. Moreover, by learning these skills in the first year, students acquire a powerful tool set that they can use and build on throughout their studies. To address this need, we have developed a first-year undergraduate course that teaches students the foundations of computational thinking and programming in the context of problems in biology. This article describes the structure and content of the course and summarizes assessment data on both affective and learning outcomes.";2013
While there has been a rising interest in computational thinking (CT) and a push to include it into the K-12 curriculum, there is little empirical evidence that a class that teaches CT will have any measurable long-term effects on student performance. Using robotics as an example of CT instruction, I propose to examine a high school that has had a large number of robotics students over the past six years to find evidence for the long-term benefits of CT. I will analyze school records (e. g. STEM class enrollment, STEM test scores, SAT scores) for differences between robotics and non-robotics students and compare interviews with selected students.;2013
With the rapid development and extensive application of information technology, basic computer education in universities is facing severe challenges. In this paper, we analysed the reason why computational thinking was introduced to basic computer teaching in universities. We proposed a targeted teaching idea based on computational thinking, elaborated the implementation of basic computer teaching reform in teaching design and teaching pattern. The teaching results show that basic computer teaching based on computational thinking is a more effective way to improve quality of teaching.;2013
With the rapid development of the computer science and network technology, the capabilities of using computer for Economics and Management students in colleges are requested to be further improved and perfect. Now, however, the computer courses for the college Economics and Management professional exists the gap between the knowledge/skills instruction and demand for future computing capabilities, which causes a crisis in computer basic education. This paper proposes a way to deal with the crisis, which integrates the education of computational thinking with the Economics and Management professional. Based on this idea, the contents of the computer course are reconstructed to focus on the education of computing thinking, which will instruct a universal thinking for the computing disciplines. In addition, the thinking-type teaching methods of the college computer course are investigated.;2013
2012 and 2013 have been challenging years for Computer Science (CS) education in the UK. After decades of national neglect, there has been a sudden impetus to reintroduce CS into the 11-16 age school curriculums. Immediate obstacles include a generation of children with no CS background and an estimated need for 20,000 new CS teachers - existing UK IT teachers being insufficiently qualified and experienced. The Computing at School (CAS) movement has been instrumental in this quantum transition from an IT to Computing syllabus, as have the British Computer Society (BCS), leading UK universities and a number of major international technology companies, including Microsoft, Google, IBM, British Telecom and Facebook. This paper discusses the background to this position and the progress being made to address these challenges. It describes, in particular, the work of the BCS-funded Glyndwr University 'Turing Project' in introducing Welsh high-school students and staff to high-level programming and 'computational thinking'. The Turing Project uses an innovative combination of Lego NXT Mindstorm robots, Raspberry Pi computers and PicoBoard hardware together with the Robot C and Scratch programming platforms. The paper discusses initial objectives and the general approach, describes focused delivery across different age groups and ability ranges and presents results and analysis demonstrating the effectiveness of the programme. Lessons learnt and future directions are considered in conclusion. (C) 2014 The Authors. Published by Elsevier Ltd.;2014
A considerable body of research examines people's perceptions of the nature of science. There is also extensive research about what those perceptions are for teachers, and what strategies can be used to change them. There is, however, very little information about what these perceptions may be in the case of computer science. In fact, computer scientists struggle to agree on a definition of their discipline, and perhaps the only term common term to all existing definitions is that of computational thinking. This paper reports on an investigation into perceptions about computer science occurred during a series of professional development workshops for Australian Digital Technologies teachers. These workshops aimed to promote the computer science discipline by providing skills and resources necessary to teach computer science and computational thinking. The results of our investigation indicate that Digital Technologies teachers in our sample (N=16) had one common misconception about the nature of computer science. We also found that the misconception was changed after 3 days of intensive education about computational thinking, computer science and its applications.;2014
"Aiming at the problems existed in university computer courses, application-oriented curriculum reform aimed at cultivating the ability of computational thinking was investigated. The quality of teaching will be improved by the teaching reform, if teaching objectives, teaching process and teaching methods were improved. It is the purpose of teaching to improve the computational thinking ability, and to teach the basic ideas and ways of computing disciplines; Teaching process including information processing, typical case studying, and practical training; Using scene and teaching-and-learning environment designed carefully which includes case and task allocation to stimulate students' interest in learning. Furthermore, through combining classroom, laboratory and extracurricular self-taught to form multi-scene, multi-task interaction to achieve teaching objectives.";2014
"Although the research on digital gaming has recently shown that collaboration, problem solving and critical thinking are in evidence with K-12 students who design games; researchers still need to make the case that digital game design content meets rigorous new Common Core standards for Language Arts and mathematics. No class time will be devoted to game design unless proponents of digital gaming can develop and demonstrate this argument. This preliminary data focus on a feasibility implementation of an assessment designed to embed these standards. Three elementary level classroom teachers and their students used the process and demonstrated that (1) teachers can learn to design and use this process and (2) their students demonstrate elements of computational thinking that not only includes the Common Core standards but extends them.";2014
Although there are many systems designed to engage people in programming, few explicitly teach the subject, expecting learners to acquire the necessary skills on their own as they create programs from scratch. We present a principled approach to teach programming using a debugging game called Gidget, which was created using a unique set of seven design principles. A total of 44 teens played it via a lab study and two summer camps. Principle by principle, the results revealed strengths, problems, and open questions for the seven principles. Taken together, the results were very encouraging: learners were able to program with conditionals, loops, and other programming concepts after using the game for just 5 hours.;2014
As a research hotspot of basic computer education, the computational thinking is drawing wide attention of scholars at home and abroad. In this paper, the advantages and difficulties of developing computational thinking ability are elaborated from the view of unique characteristics in Fine Arts academies. The comprehensive problem- solving abilities of the students are expected to be improved by introducing the computational thinking ability into teaching practice.;2014
At Jackson State University (JSU), an innovative module has been developed and integrated into an existing Emergency Management Technology course. This course module involved four faculty members. Faculty from several different departments (Computer Science, English, and Technology) developed teaching materials for the module. Through this course, students have opportunities to explore the exciting world of computer science from the perspective of mobile computing. This course module is part of a project, Computational Thinking as an Approach to Refining the Critical Thinking and Analytical Reasoning Skills of Undergraduates, sponsored by the National Science Foundation (NSF). The goal of the project is to develop new courses and course modules to broaden participation in computing. This course module is designed to use MIT (Massachusetts Institute of Technology) App Inventor to introduce mobile application (app) development concepts. Students are required to design apps which can use be used before, during, and/or after an emergency. MIT App Inventor is a drag and drop programming tool that enables users to create applications for Android devices. MIT App Inventor makes mobile app development highly visual and highly intuitive. MIT App Inventor can engage students in developing not only fun and useful apps, but also in logical thinking skills, problem solving techniques, and creativity. The students found MIT App Inventor to be very accessible and quickly learned how to develop their own apps. MIT App Inventor can allow students without any background in information technology to see computing concepts in a context that is of great interest to them.;2014
By elaborating on the significance of the drawing in the architectural avant-garde of the 1960s, the paper's primary scope is to weave a thread between late modernism and contemporary research in computational design. The architectural drawing is presented as an abstract means aiding design research. The more recent notion of performative drawing evokes adaptability, being a critical precondition that responds to diverse design aims in interactive manners. Performative drawing's function may further be linked to patterns, a recurring research theme during late modernism. Thinking in (and with) patterns recalls approaching design problems through malleable schemas that hold design data, according to which they are being transformed. In respect, the present paper delves into the analogies between the manipulation of patterns with the use of drawings during late modernism and parametric processes developed through simulation patterns of the current era. Through this comparison, it becomes possible to stress out the operative significance of methodologies and conceptual means in the architectural making as tools that are being used primarily for the exploration of form's dynamic behaviour.;2014
By engaging in construction-based robotics activities, children as young as four can play to learn a range of concepts. The TangibleK Robotics Program paired developmentally appropriate computer programming and robotics tools with a constructionist curriculum designed to engage kindergarten children in learning computational thinking, robotics, programming, and problem-solving. This paper documents three kindergarten classrooms' exposure to computer programming concepts and explores learning outcomes. Results point to strengths of the curriculum and areas where further redesign of the curriculum and technologies would be appropriate. Overall, the study demonstrates that kindergartners were both interested in and able to learn many aspects of robotics, programming, and computational thinking with the TangibleK curriculum design. (C) 2013 Elsevier Ltd. All rights reserved.;2014
Can biology students without programming skills solve problems that require computational solutions? They can if they learn to cooperate effectively with computer science students. The goal of the in-concert teaching approach is to introduce biology students to computational thinking by engaging them in collaborative projects structured around the software development process. Our approach emphasizes development of interdisciplinary communication and collaboration skills for both life science and computer science students.;2014
Cognitive testing is concerned with quantitative and qualitative evaluation of an individual's intellectual functioning in its broad sense. Tests for evaluating cognitive components are based on submitting the subject to a given task and then assessing performance according to an established set of reference parameters. In order to analyze subject's behavior and test results, a software tool was developed based upon digital ink technology, which permits the digitalization of the assessment procedure, from the undertaking of the test to the production of the assessment results. By doing so, the test procedure is computerized and its data is saved in InkML format and processed to analyze tasks previously defined by the evaluator. We have used this tool to develop a Computational Thinking test defined within the Cattell-Horn-Carroll CHC framework of intelligence. Further investigating the relationship between fluid intelligence and computational thinking allows a better understanding of the main set of cognitive skills which need to be developed by students and professionals that aim to work in this domain. Moreover, it is suggested that assessments, independent of their context, may benefit from using the InkML tool, mainly due to the richer set of information that can be collected.;2014
Computational Thinking (CT) can effectively promote science learning, but K-12 curricula lack efforts to integrate CT with science. In this paper, we present a generic CT assessment scheme and propose metrics for evaluating correctness of computational and domain-specific constructs in computational models that students construct in CTSiM - a learning environment that combines CT with middle school science. We report a teacher-led, multi-domain classroom study using CTSiM and use our metrics to study how students' model evolution relates to their pre-post learning gains. Our results lay the framework for online evaluation and scaffolding of students in CTSiM.;2014
Computational thinking (CT) is broadly defined as the mental activity for abstracting problems and formulating solutions that can be automated. In an increasingly information-based society, CT is becoming an essential skill for everyone. To ensure that students develop this ability at the K-12 level, it is important to provide teachers with an adequate knowledge about CT and how to incorporate it into their teaching. This article describes a study on designing and introducing computational thinking modules and assessing their impact on preservice teachers' understanding of CT concepts, as well as their attitude towards computing. Results demonstrate that introducing computational thinking into education courses can effectively influence preservice teachers' understanding of CT concepts.;2014
Computational Thinking is a core capability for most engineers. The term summarizes a set of skills needed to transform real-life challenges into problems that can be solved with the help of a computer and to apply computer-based solutions to questions at hand. This mindset is fundamental to almost every engineering task. However, teaching Computational Thinking is a great challenge for educators worldwide. In designing and implementing university curricula, one has to take an increasing number of arguments into consideration. Technological progress requires the design, creation, and analysis of increasingly large and complex systems. Engineering working environments and tasks demand interdisciplinary teams and close communication between involved groups. In designing engineering curricula, these factors need to be considered and the necessary skills must be implicitly or explicitly developed. This paper highlights three examples of classes and projects aimed at enabling students to develop and increase Computational Thinking through systematic introduction of computational tools. From these successful case studies, the paper derives six best practices for fostering Computational Thinking in engineering education. A review of several examples is given, that are used to highlight and extract best practices. This provides a comprehensive overview of the relationships and simplifies the application of the aforementioned principles to course and curriculum designs.;2014
Computational Thinking is a term to group skills for the utilization of computers as problem solving tools that improves college readiness and increases K-12 students' likelihood of attending and graduating from college. It differentiates from Digital Literacy (or Computer Literacy) where a person acquires skills for using the computer for everyday use. Statistics about the percentage of bachelor's degrees in computer science/engineering earned in the United States during the last twenty years shows that less than 20 percent of graduates account for underrepresented minorities which place this population in great disadvantage with other ethnic groups. Given that New Mexico is a state with high percentage of underrepresented minorities, the Department of Engineering at Northern New Mexico College through the support of Google Inc. and the National Science Foundation has organized and developed Computational Thinking (CT) workshops and activities for K-12 teachers and pre-service teachers during the last two years as an approach to increase the awareness of Computer Science among K-12 students in New Mexico. The curriculum developed in the workshops have provided teachers and pre-service teachers a variety of tools to incorporate and enhance their classes in K-12 schools through the utilization of computational thinking activities. The approach utilized for the workshops has not only enhanced CT skills but also has provided ideas to develop lesson plans and activities for the Common Core State Standards. The present paper presents a summary of the activities developed for the workshops as well as results that the participants have shared on the utilization of the acquired skills in their classrooms.;2014
Computational thinking, also called structural thinking is characterized by design and construction. In view of the existing problems of traditional teaching methods in high vocational colleges, we propose a teaching method aimed at developing the computational thinking of students. This article analyses the courses of high vocational colleges and the characteristics of students firstly. Then we design the teaching activities based upon the principles and strategies of computational thinking. Finally we offer a real teaching case. The teaching evaluations from students indicate that the teaching method based on computational thinking is very effective.;2014
Computational-thinking skills are an essential intellectual amplifier for all scientific and professional disciplines. Embedding these skills in the K-12 and University curricula is necessary for training the next generation of thinkers. A widely adopted approach to doing so is through simple and visual programming languages like Scratch and engaging assignments like video-game construction. In this work, we report on an empirical study we conducted with senior undergraduate education students aiming to understand how prior experience enables students to better develop their computation-thinking skills through a Scratch-based videogame assignment.;2014
Computer programming courses (C, Java, C++, etc) intended for non-majors are facing a lot of problems in cultivating undergraduates' abilities of computational thinking and problem solving. Students are frustrated with complex syntax of these languages and are confused with their practical applications. In the paper, our exploration on students' abilities cultivations based on Python teaching practice is introduced. Lesson plan, teaching method and teaching effect are presented in detail. We wish our research and practice could give some hint for the reform of introductory programming courses.;2014
Computer programming is an activity that promotes the development of skills such as creativity, problem solving or using their initiative while learning. This work evaluates the impact of Scratch programming activities on the development of key competencies or skills by first year students in secondary education. A sample of 26 participants aged 12-13 were selected from a group of students in secondary education. The participants in the experimental group did activities using Scratch for six months, three hours a week. The results clearly show that this activity has a very positive impact on students' learning abilities.;2014
Computing in schools has gained momentum in the last two years resulting in GCSEs in Computing and teachers looking to up skill from Digital Literacy (ICT). For many students the subject of computer science concerns software code but writing code can be challenging, due to specific requirements on syntax and spelling with new ways of thinking required. Not only do many undergraduate students lack these ways of thinking, but there is a general misrepresentation of computing in education. Were computing taught as a more serious subject like science and mathematics, public understanding of the complexities of computer systems would increase, enabling those not directly involved with IT make better informed decisions and avoid incidents such as overbudget and underperforming systems. We present our exploration into teaching a variety of computing skills, most significantly computational thinking, to secondary-school age children through three very different engagements. First, we discuss Printcraft, in which participants learn about computer-aided design and additive manufacturing by designing and building a miniature world from scratch using the popular open-world game Minecraft and 3D printers. Second, we look at how students can get a new perspective on familiar technology with a workshop using AppInventor, a graphical Android programming environment. Finally, we look at an ongoing after school robotics club where participants face a number of challenges of their own making as they design and create a variety of robots using a number of common tools such as Scratch and Arduino.;2014
"CS4HS (Computer Science for High School) is an initiative sponsored by Google to promote Computer Science and Computational Thinking in high school and middle school curricula. In the past, workshops were offered in a face-to-face format; however, this left many K-12 computer science teachers unable to attend a workshop in their geographical region. During the 2013 round of funding, Google funded the creation of 4 workshops to be delivered in an online format, open to teachers across the United States and beyond. The panelists will share their experiences with development and deployment of large scale workshops that aim to fill the gap in professional development for K-12 computer science teachers.";2014
Due to the international and domestic education and computer industries and so on computational thinking attaches great importance and has done considerable exploratory research, our school also reform and exploration teaching mode on the University Computer Basic based on Computational thinking training in network environment, and the use of based on Computational thinking Autonomous learning mode in the Network Environment in the actual teaching, strengthen the learners understanding of computer science, corrected the computing disciplines equivalent to the idea of computer programming, enhance the connotation and science significance of computer disciplines, to overcome the computer means narrow tool argument, and achieved good teaching results.;2014
Due to the popularity and development of computer science, the connection between computer science and other disciplines became closer. The multidisciplinary crossing centered on computer science is gradually formed. Computer has unparalleled advantages in calculation, modeling, simulation and so on. It makes computer science hold a significant position in other disciplines. How to make students better understand computer knowledge, how to make them easier use computer to solve actual problems in their fields and how to break the barriers between disciplines are the challenges computer educators will face. This paper thought computational thinking is a good method and introduced its core concepts, discussed the dialectical relationship between computation and thinking, analyzed its important role in computer teaching of various disciplines. It indicated computation is a kind of thinking process which uses computing technology to process information and thinking refers to the activities of the human brain to perceive the world in which computation plays an important role. Finally, the paper proposed a modular teaching method based on practical case, engineering project and disciplinary characteristics for achieving the cultivation of computational thinking.;2014
For university computer basic course in police active colleges, this paper studies and analyzes the exiting problems, what including the education ideas being not clear, contents divorcing from practical application, status downing et. It puts forward the countermeasures. And, it discusses how to carry out the in teaching. This has a certain reference function to deepen the computational thinking reform.;2014
Future school science standards, such as the Next Generation Science Standards (NGSS), emphasize the integration of simulation and modeling activities in the classroom environment. The extremes of these activities have two vastly different implementations. On one hand, a teacher can have students experiment on a pre-made simulation associated with the material. On the other hand, students can use, for example, an end-user programming tool to create the simulation from scratch. This allows students to not only experiment on, but also, to model the real world phenomenon being studied{a key component of computational thinking. However, the greater amount of time necessary for student authoring of simulations can make such an approach infeasible in the classroom environment. This paper presents a spectrum of strategies for integrating simulations into classrooms emphasizing our research at the Scalable Game Design Lab, University of Colorado Boulder as well as research from other entities. Starting at consuming simulations and adding more user interaction and authoring elements begins to provide a gentle slope from consumption towards simulation creation. Results indicate that many of these strategies are quite effective.;2014
Game and creation are activities which have good potential for computational thinking skills. In this paper we present T-Maze, an economical tangible programming tool for children aged 5-9 to build computer programs in maze games by placing wooden blocks. Through the use of computer vision technology, T-Maze provides a live programming interface with real-time graphical and voice feedback. We conducted a user study with 7 children using T-Maze to play two levels of maze-escape games and create their own mazes. The results show that T-Maze is not only easy to use, but also has the potential to help children cultivate computational thinking like abstraction, problem decomposition, and creativity.;2014
If information and communication technologies (ICT) are to bring about a transformational change to a sustainable society, then we need to transform our thinking. Computer professionals already have a conceptual toolkit for problem solving, sometimes known as computational thinking. However, computational thinking tends to see the world in terms a series of problems (or problem types) that have computational solutions (or solution types). Sustainability, on the other hand, demands a more systemic approach, to avoid technological solutionism, and to acknowledge that technology, human behaviour and environmental impacts are tightly inter-related. In this paper, I argue that systems thinking provides the necessary bridge from computational thinking to sustainability practice, as it provides a domain ontology for reasoning about sustainability, a conceptual basis for reasoning about transformational change, and a set of methods for critical thinking about the social and environmental impacts of technology. I end the paper with a set of suggestions for how to build these ideas into the undergraduate curriculum for computer and information sciences.;2014
Improving the computational thinking ability of students is the focus of the program design course teaching purpose. In the program design, guide students to analyze things and be able to describe things in natural language processing, make students establish the concept of computational thinking, and then through the programming to solve the problem, is an effective way to cultivate students computational thinking and methods. In this paper, on the basis of combing calculation thinking development, in view of the C program design, collection, classification, and refine the calculation thinking part of the classic case of ascension. According to the calculation thinking training method, calculation thinking training support system for C program was designed and developed.;2014
"In 2013 Linkoping University started the first 5-year engineering program in Computer Science and Software Engineering in Sweden. The goals of the program are to provide a holistic perspective on modern large scale software development, to provide a deep and broad understanding of computer science and computational thinking, and encourage innovation and entrepreneurship. The student response has been very good with more than 600 applicants to the 30 slots, of which more than 130 had this program as their first choice among all programs in Sweden. In this paper we present the goals, the design principles, and the resulting program. The ACM/IEEE CS Curricula has been used to make sure that the program provides a solid foundation in Computer Science. Three pedagogical ideas that we have used are (1) project courses to integrate theory and practice as well as provide experience with the most common form of working in industry; (2) courses that cover multiple programming paradigms and languages as well as multiple software development methodologies so that the students are prepared to take on the continual changes we know will come; and (3) a special course in engineering professionalism with groups of students from the first three years together reflecting on topics related to being a professional engineer. The paper concludes with a discussion about some important aspects such as computational thinking and the relation to the ACM/IEEE CS Curricula.";2014
In this panel, the moderator, who has expertise in computer science education and HCI, but with no ties to any particular blocks-based programming environment in particular, will provide a brief overview of the state of the field of visual programming for education generally, and blocks-based visual programming environments and the languages that go with them more specifically. As early as in 1986, blocks-based visual programming environments were conceived of and built as research studies (Glinert & Smith, 1986)). However, the last five to ten years have seen a proliferation of these kinds of programming languages. Scratch and Alice are probably the most widely known of these programming interfaces, but there are many. Among these, many share common traits: the goal of simplifying the syntax of programming, a related goal of making what were once difficult tasks relegated to arcane languages simpler, and often another related goal of opening computer programming up to a wider audience than has recently traditionally engaged in programming activities. The moderator will be followed by four panelists, representing four blocks-based programming environments that share these affordances, but which more interestingly, are distinct in a number of ways. These panelists, experts in MIT App Inventor, Scratch, Looking Glass, and ToolBlox, respectively, will each have ten minutes to discuss their respective language and the possibility-space it aims to simplify. Specifically, each language will be examined from three perspectives: the reason the tool was created, the target audience for the tool, and how the tool engages those users in computational thinking and learning to program. The moderator will then lead a substantive discussion with the audience and panel members on the material presented.;2014
In this paper we describe a recently started research project with a focus on the redesign and improvement of an introductory programming course for electrical engineering students. First, introducing the current course and its various conditions and limitations, we trace the problems occurring on teaching programming with limited quantity of time and staff. Notably, the last exam results indicate students lack computational thinking and relational reasoning. Explaining the causes on the students' performance and a previous qualitative study, we introduce our first identified points for improvement. Sketching the influences and a short overview about the contents and evaluations, we present our four key assumptions for our new course concept. Specially regarding the current state of CS (computer sciences) pedagogy and a more self-directed way of learning we present a new design which incorporates blended learning methodology and attempts to combine methods from MOOCs for learning programming languages with in-class-lectures. One of the key points is the development of an interactive eBook for C-programming that allows novice programmers to make their first steps in programming in situ. Especially in reducing the impact of a tool chain and setup that hinder students from succeeding in the first exercises and therefore discouraging them. Additionally, this approach eliminates the annoying switching between the editor or IDE ( Integrated development environment) and the provided lecture notes. Next we describe our way of combining this interactive eBook, the new in-class-lectures with a focus on discussions and in-detail examples, and the redesigned exercises. Using the feedback and questions by the students while they are reading and working on the eBook, we present the process of designing puzzles and fostering problem based discussions during lecture. Lastly, the used research methodology is presented and a way of measuring the students' performance in creative tasks and their relational reasoning.;2014
"In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors.";2014
In this paper, we introduce an embodied pedagogical approach for learning computational concepts, utilizing computational practices, and developing computational perspectives. During a five-week pilot, a group of students spent after-school time learning the basic elements of dance and then using them to program three-dimensional characters that could perform. Throughout the pilot, we found students consistently standing up in front of their computers and using their bodies to think through the actuation of their characters. Preliminary results suggest that designing a virtual-physical dance performance is a motivating and engaging social context in which to introduce students, especially girls, to alternative applications in computing.;2014
"In this study, first, we present initial results from an NSF funded Robert Noyce Scholarships program at the College at Brockport to help pre-service science and mathematics teachers to improve their computational thinking skills and pedagogical skills of using computational modeling and simulations for teaching secondary science and mathematics. In doing so, we describe a pedagogical approach of teaching computational modeling, based on a decade-long NSF funded Math and Science Partnership (MSP) program at the College which has resulted in a number of credit-bearing courses for pre-service and in-service teachers (Yasar, 2013). Computational Pedagogy; a pedagogical approach to teaching mathematics and science through the use of computational modeling and simulations for introductory level pre-service teachers (Yasar, 2013). Teaching computational modeling and using this skill for teaching science and mathematics is not an easy task, particularly with the participants having a limited understanding of computer programing and simulation. Based on our previous years of experiences of implementing introductory computational science courses in various professional workshops for in-service and pre-service science and mathematics teachers, we propose presenting results from a successful pedagogical model of teaching mathematics and science through computational modeling and simulation, called Computational Pedagogy. For the year 2013-2014, nineteen participants (pre-service science and mathematics teachers) participated in the program (July 2013). For this study, we only use participants' response to open-ended questions and transcriptions of individual interview with six selected participants. An inductive approach (Patton, 2002) was used for analyzing the participants' responses to the open-ended questions and interviews transcriptions The result of this study indicate that the participants who attended the program have strongly agreed that computer modeling can be used as an effective instructional method to teach science and mathematics concepts. Particularly, they thought that computational modeling can be beneficial to teach science concepts that are not observable in real-world time and space scales. In addition to that, they thought that computational modeling would be beneficial to understand how mathematics would be used in real-world problem solving and to improve critical thinking and problem solving skills. We strongly believe our pedagogical approach will be effective for teaching computational modeling and also that computational pedagogy can be used as an effective tool to train secondary science and mathematics teachers to understand how to use computational modeling as an instructional method to demonstrate science and mathematics concepts in a real-world situation one step at a time and to visualizing underlying principles of the concepts.";2014
Information and communication technology (ICT) literacy education has become an important issue, and the necessity of computational literacy (CL) has been increasing in our growing information society. CL is becoming an important element for future talents, and many countries, including the USA, are developing programs for CL education. Accordingly, Korea's Ministry of Education has modified the ICT education program created in 2000. The revised curriculum has emphasized computational thinking and informational ethics since 2007. However, in revising the ICT curriculum, we need to develop a new ICT test tool because the previous tool did not include CL. Thus, we developed a new ICT literacy test tool consisting of fundamental concepts, contemporary skills, and CL. We then carried out a test on 40,072 elementary students nationally. To determine the CL level of students, we used the standard level obtained from ten experts using the Angoff method (1971) and analyzed the difference between the standard level and students' level in the test. The results showed that students' CL scores were remarkably lower than their scores on fundamental concepts and contemporary skills. We consequently found that the revised ICT curriculum did not apply to the current ICT education domain, implying that we need to develop a strategy to expand CL to different educational fields, which would help researchers and administrators to measure CL in ICT education.;2014
Linear algebra is a core curriculum of science, economics and management majors. It is also a part of undergraduate entrance examination. It can cultivate the students' logical thinking and computational thinking for qualified examination. This paper layered students, teaching contents and examination mode into three layers, which are from down to top: knowledge level, ability level and logic level. The purpose of this method is individualized.;2014
Many architects understand that learning to program can be a challenge, but assume that time and practice are the only barriers to performing well enough at it. However, research from computer science education does not support this assumption. Multinational studies of undergraduate computer science programs reveal that a significant number of students in their first and second year of full-time instruction still have serious misconceptions about how computer programs work and an inability to design programs of their own. If computer science students have trouble learning to think and express themselves computationally, what does this say about architects' chances of learning to program well? Moreover, if common problems have been identified, can architectural educators learn anything from findings in computer science education research? In order to determine if this research is relevant to architecture, the author conducted a pilot study of architecture students consisting of program analysis and conceptual knowledge tests. The study found that student performance was poor in ways similar to those revealed in the computer science education research. Because architects face similar challenges as computer science majors, this suggests that the discipline could benefit from more investment in educational collaborations. In addition, empirical research - from architecture as well as other fields - must play a more substantial role in helping architects learn computational thinking and expression.;2014
Many students have difficulty in grasping core concepts and applying these in the process of learning computer programming and developing computational-thinking skills. Often these problems can stem from difficulties students experience due to their learning in ways that deviate to varying extents from those of more academically successful classmates, or ways that deviate from the style in which they are taught. An investigation of the role of learning styles in the learning and teaching of introductory Computer Science at Rhodes University was carried out with the 2014 first-year programming class, beginning with a survey of existing literature on the issue. Kolb's Experiential Learning Cycle and accompanying assessment instrument, the Learning Styles Inventory (LSI), were identified as useful tools to provide insight and inform action to assist students. Kolb's LSI was administered to the class to identify each student's dominant learning style(s). These were then correlated with academic performance, and the results compared to similar studies both within the specific South African tertiary educational Computer Science context, and internationally.;2014
Many studies have provided qualitative arguments for the premise that the ability to compute is fundamental and therefore should be treated at all levels of education. This work presents a quantitative indication of the validity of this premise for primary school students. In order to precisely define what ability a student should have to use a model of computation to compute, this work reports an experimental study that shows a significant correlation between the student's ability to compute and his/her academic performance in a primary school.;2014
Molecular biology is a scientific discipline which has changed fundamentally in character over the past decade to rely on large scale datasets - public and locally generated - and their computational analysis and annotation. Undergraduate education of biologists must increasingly couple this domain context with a data-driven computational scientific method. Yet modern programming and scripting languages and rich computational environments such as R and MATLAB present significant barriers to those with limited exposure to computer science, and may require substantial tutorial assistance over an extended period if progress is to be made. In this paper we report our experience of undergraduate bioinformatics education using the familiar, ubiquitous spreadsheet environment of Microsoft Excel. We describe a configurable extension called QUT.Bio.Excel, a custom ribbon, supporting a rich set of data sources, external tools and interactive processing within the spreadsheet, and a range of problems to demonstrate its utility and success in addressing the needs of students over their studies.;2014
Our research is based on an innovative approach that integrates computational thinking and creative thinking in CS1 to improve student learning performance. Referencing Epstein's Generativity Theory, we designed and deployed a suite of creative thinking exercises with linkages to concepts in computer science and computational thinking, with the premise that students can leverage their creative thinking skills to unlock their understanding of computational thinking. In this paper, we focus on our study on differential impacts of the exercises on different student populations. For all students there was a linear dosage effect where completion of each additional exercise increased retention of course content. The impacts on course grades, however, were more nuanced. CS majors had a consistent increase for each exercise, while non-majors benefited more from completing at least three exercises. It was also important for freshmen to complete all four exercises. We did find differences between women and men but cannot draw conclusions.;2014
Programming is more than just coding, for, it exposes students to computational thinking which involves problem-solving using computer science concepts like abstraction and decomposition. Even for non-computing majors, computational thinking is applicable and useful in their daily lives. The three dimensions of computational thinking are computational concepts, computational practices and computational perspectives. In recent years, the availability of free and user-friendly programming languages has fuelled the interest of researchers and educators to explore how computational thinking can be introduced in K-12 contexts. Through an analysis of 27 available intervention studies, this paper presents the current trends of empirical research in the development of computational thinking through programming and suggests possible research and instructional implications. From the review, we propose that more K-12 intervention studies centering on computational practices and computational perspectives could be conducted in the regular classroom. To better examine these two dimensions, students could be asked to verbalize their thought process using think aloud protocol while programming and their on-screen programming activity could be captured and analyzed. Predetermined categories based on both past and recent programming studies could be used to guide the analysis of the qualitative data. As for the instructional implication, it is proposed that a constructionism-based problem-solving learning environment, with information processing, scaffolding and reflection activities, could be designed to foster computational practices and computational perspectives. (C) 2014 Elsevier Ltd. All rights reserved.;2014
"Programming skills are an important component of an engineering curriculum, not only because they enable the customization of software tools to be used in the profession, but also (and perhaps more crucially) because of the computational thinking and problem solving capabilities that are ideally developed by young students who learn to program for the first time. The necessity to expand the computing curriculum across a wider range of schools and university courses for students who are not majoring in Computer Science (CS)) it is well-documented in literature [1], as is the difficulty of teaching 21st century skills (www.p21.org. This work presents an educational approach to teaching initial programming based on the development of fundamental and transversal skills and computer science skills, including creative and computational thinking as well as problem solving and critical thinking. The approach is based on cutting-edge educational tools, namely the visual programming frameworks Scratch, AppInventor, BYOB, and the well-known C/C++ language; curriculum material is drawn from CSPrinciples pilot courses, CS unplugged, school level preparation material for the International Olympiad in Informatics, and are complemented by supplementary information. The pedagogical approaches used in the course are based on constructivist learning theory, experiential learning and guided inquiry. This paper presents a year-long teaching experience in a 10th/13th grade high school with 14 to 16-year-old students. Ways to extend the experience to a university course are also presented. An initial analysis of the course results, both qualitative (based on two student surveys) and quantitative (based on formal written examinations) is presented and discussed. Results are encouraging, showing how visual programming languages help students to improve their problems solving skills and reasoning practices. Exposing the younger generation to computational concepts is fundamental in order to improve the mastering of these concepts and increase the success rate in university studies.";2014
"Promoting computational thinking is a priority in CS education and other STEM and non-STEM disciplines. Our innovative, NSF-funded IC2Think project blends computational and creative thinking. In Spring 2013, we deployed Computational Creativity Exercises (CCE) designed to engage creative competencies (Surrounding, Capturing, Challenging and Broadening) in an introductory CS1 course for engineering students. We compared this CCE implementation semester (80 students, 95% completing 3 or 4 CCEs) to the Fall 2013 semester of the same course (55 students) without CCEs. CCE implementation students had significantly higher scores on a CS concepts and skills knowledge test (F(1, 132) = 7.72, p < 01, partial Eta(2) = .055; M=7.47 to M=6.13; 13 items) and significantly higher self-efficacy for applying CS knowledge in their field (F(1, 153) = 12.22, p < .01, partial Eta(2) = .074; M=70.64 to M=61.47; 100-point scale). CCE implementation students had significantly higher study time (t(1, 136) = 2.08, p = .04; M=3.88 to M=3.29; 7-point scale) and significantly lower lack of regulation, which measures difficulties with studying (t(1, 136) = 2.82, p = .006; M=2.80 to M=3.21; 5-point scale). The addition of computational creativity exercises to CS courses may improve computational thinking and learning of CS knowledge and skills.";2014
Relational algebra provides a theoretical foundation for how modern database management systems optimize and execute queries. Its main concepts are based on set theory and first order logic, which can be challenging for students to learn due to their abstract nature. This paper presents Bags, a new type of visual programming environment (inspired by Snap!) for the teaching of relational operations and data analysis. Students formulate algebraic queries by snapping together graphical blocks that represent data sets and relational operators, resulting in an interactive visualization of the underlying concepts. The outcomes of this work will not only enhance university-level database courses, but also provide an engaging computational thinking resource for K-12 teachers in content areas outside of science and engineering.;2014
"Role-Based Collaboration (RBC) is a computational thinking methodology where roles provide an underlying mechanism to facilitate abstraction, classification, separation of concerns, dynamics, and interactions. From a meta theoretical perspective, the specification of groups, roles and agents is a critical element of RBC. In consideration of the relationships and hierarchies faced by groups, roles and agents, we propose a minimal role playing logic system (MRPL) through substructural logic, which is polynomial in complexity, in support of RBC. From MRPL and RPLs extending from it, there are three levels of application, Le., the global level governing how people organize agents to form a group; the concatenative level for role assignment with respect to logic and algebra, and the operational level governing properties, relations and structures that should appear in collaborative system design. From MRPL to RPLs, one can extend it to suit other appropriate applications.";2014
Scratch, a visual programming language, was used in many studies in computer science education. Most of them reported positive results by integrating Scratch into K-12 computer courses. However, the object-oriented concept, one of the important computational thinking skills, is not represented well in Scratch. Alice, another visual programming language, seems to have better illustration of the object-oriented concept for programming novices. To demonstrate effects of Alice and Scratch, we compared students' responses to both visual programming languages, especially for students with low performances, in an introductory programming course. The relationships among learning engagement, learning anxiety, and learning playfulness were explored. The results could be referred to by computer science instructors to select proper visual programming language for corrective instruction.;2014
Several automation tools have been developed over the years for forensic document examination (FDE) of handwritten items. Integrating the developed tools into a unified framework is considered and the essential role of the human in the process is discussed. The task framework is developed by considering the approach of computational thinking whose components are abstraction, algorithms, mathematical models and ability to scale. Beginning with the human FDE procedure expressed in algorithmic form, mathematical and software implementations of individual steps of the algorithm are described. Advantages of the framework are discussed, including efficiency (ability to scale to tasks with many handwritten items), reproducibility and validation/improvement of existing manual procedures. It is indicated that as with other expert systems, such as for medical diagnosis, current automation tools are useful only as part of a larger manually intensive procedure. This viewpoint is illustrated with a well-known FDE case, concerning the Lindbergh kidnapping with a new hypothesis - in this case, there are multiple questioned documents, possibility of multiple writers of the same document, determining whether the writing is disguised, known writing is formal while questioned writing is informal, etc. Observations are made for future developments, where human examiners provide handwriting characteristics while computational methods provide the necessary statistical analysis. (C) 2013 Elsevier Ltd. All rights reserved.;2014
Technology - based learning could help students achieve fundamental abilities and skills like computational thinking and creativity. Engaging young students in computer science concepts and programming with a creative and enjoyable way is a challenging issue. We are aiming to apply and evaluate constructionist or apprenticeship techniques and visual programming tools that could assist and improve the learning activity.;2014
The aerospace engineering pillars of structures, gas dynamics, and dynamics and control have rested long term on a firm foundation of calculus-based physics. Today's aerospace engineer relies more on the computational device than the pencil and paper to innovate in theory and in practice. Educators and practitioners struggle with questions in how to improve computing knowledge and skills in the aerospace curriculum. Whereas most agree it would be unwise to compromise most content currently in place, opinions differ on which computing concepts students need to know. The aim of this paper is to highlight the importance of computing for aerospace and encourage critical thought about options for its inclusion into the required undergraduate curriculum. To do this, computer science is defined and common misconceptions are discussed. A review of computing content in aerospace curricula is presented. A pedagogical strategy that capitalizs on analogs between discrete and continuous-valued physical processes is proposed, including examples of how computational thinking can be meaningfully infused without loss of content in traditional aerospace courses. The paper concludes with related efforts to introduce computational thinking in kindergarten through 12th grades and higher education along with a discussion of insights computer science offers aerospace by revisiting questions from the introduction.;2014
The Black Box is a system with the internal organization and behavior about which the observer has no information. However, it is possible to impact the whole system via its inputs and observe its reactions via its outputs. The paper is concerned with the implementation of black box type of activities to teach computational thinking. The main idea is to give the students the puzzles and ask them to play with the inputs and observe the outputs enough to determine the internal mechanisms or principles that produce particular outputs from given inputs. First year students were asked to define a formula or describe a principle, based on which the input transforms itself into the output. There were four different types of answers: the student could be able (1) to state a formal proof, (2) to state a verbal proof, (3) to state a basic concept of algorithms, or (4) not to state any type of correct solution. We found out that a lot of the students were not able to think about the concept of the application functioning and were not able to create any formal description of algorithms.;2014
"The demand for additional engineering and computing degree graduates continue to increase [1, 2]; however, interest in pursuing these degrees is not matching the predicated demand. More specifically, attracting US students in engineering and computing field has always been a challenge; this is particularly true for female and minority students. Factors such as the geek image, a demanding mathematical foundation, lack of gee whiz element early in the curriculum, and overall misconception about the career in these areas are all contributors to this problem. This paper describes some of our activities associated with the introduction of Computational Thinking (CT) concepts to middle and high schools. The central tenet of the project is to entice students in grade 6-12 to learn some fundamental and advance topics in engineering and computing field, thereby recognizing their own ability to understand the computing and engineering topics, and potentially recognizing their interest in such topics and potential further education and career in these fields.";2014
The desire to expose more students to computer science has led to the development of a plethora of educational activities[16, 7, 15, 4] and outreach programs to broaden participation in computer science. Despite extensive resources (time and money), they have made little impact on the diversity of students pursuing computer science. To realize large gains, computational thinking must be integrated into K-12 systems, starting with elementary school. In order to do so, existing resources need to be adapted for a school setting. In order to make a curriculum with lessons that build on each other over several years, and accountability for student learning, we need standards, an understanding of how students learn, and identification of what students know before exposure to the curriculum. In this paper, we present our detailed findings of what fourth graders know before encountering a computational thinking curriculum. Groups of students participated in activities modified from CS Unplugged[4] in order to discover their knowledge (rather than provide instruction). We identify aspects of the activities students were able to complete successfully, and where they will need further instruction. We then explain how we used these results to modify our pilot curriculum.;2014
The development of computational thinking ability is an important part of college computer education domestically and overseas. It is a new direction and goal of college computer language teaching reform and construction. Based on computational thinking combined with teaching experience, this paper introduces a new teaching model for college VB programming courses, which adopts modularization and case teaching project.;2014
The individual learning and team working is the quintessence of particle swarm optimization (PSO). Within the conceptual framework of computational thinking, the every particle is seen as a computing entity and the whole bird community is a generalized distributed, parallel, reconfigurable and heterogeneous computing system. Meanwhile, the small world network provides a favorable tool for the topology structure reconfiguration among birds. So a learning framework of distributed reconfigurable PSO with small world network (DRPSOSW) is proposed, which is supposed to give a systemative approach to improve algorithms. Finally, a series of benchmark functions are tested and contrasted with the former representative algorithms to validate the feasibility and creditability of DRPSOSW.;2014
The popularization of digital educational devices with low barriers to entry has encouraged the development of many training activities oriented towards the incorporation of technology in schools. In some cases, the introduction of technology has led to the development of new educational practices that support the development of computational thinking. However, the supposed benefits of these approaches have not been properly assessed. Moreover, having taught over 30 workshops with the Scratch programming tool to teachers at different educational levels ( primary, secondary, university), we found no evidence of subsequent methodological changes in schools. This study tries to understand the dissonance between the alleged success of initiatives around digital literacy and the lack of continuity in the use of user-friendly programming environments like Scratch. For this purpose, we analyzed the evolution of the grades of Scratch programming achieved by the students of the School of Education of Vitoria-Gasteiz and their engagement with Scratch. We also interviewed teachers from different schools who have participated in Scratch workshops with us. After this study, we identified some of the circumstances that facilitate and hinder the development of computational thinking. Since we consider Scratch as a resource that allows the development of new methodological approaches in the classroom as well as the acquisition of skills related to computational thinking, we propose a framework that will help to overcome the current status.;2014
The project presented in this paper is a materialization of ideas about Computational Thinking and languages in the context of an interdisciplinary group. This paper has two main goals: to describe a real example of collaboration among research groups, and to illustrate with a practical example the implementation of Computational Thinking ideas through the development of a 3D geometry language. The 3D language was created using the three fundamental mechanisms of a powerful language: primitive expressions, means of combination, and means of abstraction. We designed a classroom experience with the objective of introducing the 3D geometry language through the construction of prisms. For that purpose, a short workshop called Prism Session was planned for fourth grade students. The evaluation results indicate that with a sample of 118 students from four Mexican schools, a total of 95.3% of problems were solved correctly, and 87.3% of the students achieved the level of Mastery (having solved correctly each of the 9 problems). The obstacles and academic limitations presently overwhelming the educational systems could benefit from an interdisciplinary perspective where complementary groups collaborate to solve problems whose solutions are beyond the scope of a single discipline or area of research practice. The project of 3D geometry has served as a catalyst for the consolidation of an interdisciplinary group and it has presented the opportunity to extend these research tasks into future endeavors.;2014
There are increasing calls to prepare K-12 students to use computational tools and principles when exploring scientific or mathematical phenomena. The purpose of this paper is to explore whether and how constructionist computer-supported collaborative environments can explicitly engage students in this practice. The Categorizer is a Javascript-based interactive gallery that allows members of a learning community to contribute computational artifacts they have constructed to a shared collection. Learners can then analyze the collection of artifacts, and sort them into user-defined categories. In a formative case study of the Categorizer for a fractal activity in three middle grade (ages 11-14) classrooms, there was evidence that participating students began to evaluate fractals based on structural and mathematical properties, and afterward could create algorithms that would generate fractals with particular area reduction rates. Further analysis revealed that students' construction and categorization experiences could be better integrated by explicitly scaffolding discussion and negotiation of the categorization schemes they develop. This led to the development of a new module that enables teachers and students to explore points of agreement and disagreement across student categorization schemes. I conclude with a description of limitations of the study and environment, implications for the broader community, and future work.;2014
There has been an international decline in university enrolment rates for computer science courses in recent years. There also exists a distinct gender divide in the subject, with female students exhibiting disinterest in a useful and interesting field due to a wide variety of reasons. In order to try to counteract these two deficiencies in computer science, the way the subject is being taught and presented to students should be revisited and improved upon. The use of educational games to teach basic computer science skills in contextualized and interactive ways could generate enthusiasm and interest for the subject. This approach should be tailored towards a gender neutral teaching method, in order to be more inclusive and approachable. Teaching computational thinking through situational problem solving will place what the students learn in context as well as help reveal the relevance of these skills. The abstract nature of computer science causes a lot of females to shy away from the field but a contextualized approach has been shown to increase students' interest and investment in subject matter, regardless of gender. Research has revealed that females feel less comfortable about interacting with computers for various reasons. By presenting these students with an easy to play game, the confidence levels amongst female students could be increased. An adventure style game was developed with increasing levels of difficulty to be used by first year computer science students during their computational thinking module. By researching teaching and game trends, the game is specifically designed to appeal to both genders. Through continuous encouragement, veiled assistance and enjoyment, computer science can hopefully be re-evaluated by students as a fascinating field that is worth becoming involved in. This paper presents a discussion of the design and development of the adventure style game for teaching computational thinking basics.;2014
"There is a growing literature demonstrating the importance of collaboration and teamwork in the process of learning computational thinking and the foundational aspects of computer science. While Collaborative Virtual Environments are becoming widespread in the software development professional domain and in various areas of advanced learning, their use in the introductory stages of learning computing is still very limited. On the other hand, in recent years, there has been a blooming of attractive programming environments specifically designed to expose young students (e.g., middle school age) to computational thinking. Alice is a very popular introductory programming environment, focused on programming through animations and story-telling. This paper introduces a novel extension of the Alice framework that enables interaction and collaboration among students in the development of programs. In particular, the new version of Alice described in this paper provides support for virtual pair programming. The modified version of Alice allows two students to remotely share a virtual world, and interact in its construction; the system supports roles assignments, to allow teachers to control activities and contributions of the two students in the creation of a programming project.";2014
"This article investigates a rapidly expanding branch of journalism innovation in online news media. The umbrella term computational exploration in journalism (CEJ), embraces the multifaceted development of algorithms, data, and social science methods in reporting and storytelling. CEJ typically involves the journalistic co-creation of quantitative news projects that transcend geographical, disciplinary, and linguistic boundaries. Drawing on extensive empirical data, this article provides a conceptual overview of the field by identifying three main pathways of computational exploration in journalism: the newsroom approach, the academic approach, and the entrepreneurial approach. Implications for changing journalistic practice are discussed, and the theorizing is summed up in a triplex proposition about changing mindset processes coming out of CEJ. The study indicates that the computational exploration not only leads to innovative uses of the technology, but also to innovative ways for journalists to think and behave; journalism innovation leads to innovation journalism.";2014
This design research paper examines the implementation and curriculum changes of an after school computer science program that promotes computational thinking to middle school students. The program, Students in Programming, Robotics, and Computer Science (SPARCS), can adapt to different presentation environments, such as independent after school sessions or a semester-long apprenticeship program. We trace one implementation of the program through the initial deployment, the development of infrastructure, and a reorganization of content to address student interests. We found that student attrition dropped and the average session enjoyment increased when our sessions integrated consumer technologies such as mobile applications, video games, and the Minecraft computer game. In this paper, we provide readers a framework for running computing outreach activities around similar consumer technologies.;2014
This paper describes the design of an adaptive intelligent augmented reality serious game which aims to foster problem solving skills in young learners. Studies show that our students lack computational thinking skills in high school, which raises the need to establish new methods to develop these skills in our younger learners. We believe that problem solving skills are the fundamental skills of computational thinking and are critical for STEM, in addition to a broad range of other fields. Therefore we decided to focus on those meta-cognitive skills acquired to foster problem solving, such as strategic knowledge. The game described in this paper provides a unique adaptive learning environment that aims to develop learners' meta-cognitive skills by utilizing augmented reality technology, believable pedagogical agents and intelligent tutoring modules. It offers a great user experience and entertainment which we hope will encourage learners to invest more time in the learning process. This paper describes the architecture and design of the game from the viewpoint of educational pedagogies and frameworks for serious game design.;2014
This paper presents a pair of online, interactive assessments designed to measures students' computational thinking skills. The assessments are part of a larger project to bring computational thinking into high school STEM classrooms. Each assessment includes interactive tools that highlight the power of computation in the practice of scientific and mathematical inquiry. The computational tools used in our assessments enable students to analyze data with dynamic visualizations and explore concepts with computational models.;2014
This paper presents modelling research lines in engineering teaching to perform a creative design process, to develop new work spaces and to design complex models, which require a strong mathematical background and adequate knowledge of approximation methods. Nowadays commercial software has been refined to a level of excellence and products cover a wide range of design prototypes. However, working with high specificity models requires understanding of the mathematical base knowledge underlying the programming of these tools. Our proposal integrates several subjects in engineering such as Informatics, Advanced Computing and Design in an interdisciplinary approach. The students need planning, conducting and publishing design projects of elements, but some of them are not available in the known packages or its availability is limited. The activities take place in workshop classes, in which designing of parts begin with an initial draft developed by themselves, going through several stages until the digital simulation is achieved, using symbolic computational software, applying formal methods, analytical or parametric mathematical models, which are analyzed and investigated in one of the lines of the areas of study mentioned. The conceptual design structure it's very significant to know, in order to analyze and understand the requirements of prototyping in commercial 3D design software. Projects introduced computer-aided design fundamentals, Bezier curves, B-Splines, Nurbs and T-Splines. We applied these tools in the generation of curves and freeform surfaces in order to construct the same models built-in by technologies algorithms. The experience had a very positive impact, and students showed great fluency and motivation. Pursuing the objective of incorporating the basis of 3D design in Engineering studies a new challenge is found when addressing the latest developments of refinement models design through a structure for modelling surfaces such as T-Splines. This topic is explained by a topological analysis of the refinement algorithms to increase the design quality, working as the known design software do.;2014
This paper states the importance of the college computer basic course and the problem existing in the class firstly. It then analyses the importance of computational thinking for present-day college students. It points out what is computational thinking at present and puts forward the implementation plan for the computational thinking ability in the college computer basic course.;2014
This paper studies the training objectives and programs of all professional students in the computer technology education in application-oriented university, discusses how to set up computer education courses in such a new stage of computer technology that affects all other professions, analyzes the link between them, and presents a three-dimensional computer education curriculum. The paper also proposes the establishment of various programs in terms of teaching content, teaching methods, and teaching focused cross-linkages to ensure advanced science and education and promote the improvement of the teaching quality to adapt to the times.;2014
This paper suggests a Cyberlearning tool based on a highly innovative assessment methodology that helps teachers with computer science education. Currently, there is a strong push to integrate aspects of programming and coding into the classroom environment. However, few if any tools exist that enable real-time formative assessment of in-class programming tasks. The proposed REACT (Real Time Evaluation and Assessment of Computational Thinking) system is a first step toward allowing teachers to see which high-level concepts students have mastered and which ones they are struggling with as students code in real time. REACT supports and facilitates the teaching of 21st century computing skills such as computational thinking [1] in the classroom environment.;2014
This paper summarizes the design and preliminary outcomes from the deployment of the DISSECT (DIScovering SciencE through Computational Thinking) project. The project has two primary objectives. On one hand, it aims to revitalize the teaching of traditional K-12 science concepts through the introduction of tools and concepts drawn from the field of computing, enabling the use of interactive and constructive methods to exemplify and explore scientific materials. On the other hand, the project explores how the teaching of sciences could become a vehicle to engage students in the learning of computational thinking, stimulating their interest towards this discipline and providing them with a baseline preparation to facilitate access and success in more formal computer science courses.;2014
Understanding how social influence shapes biological processes is a central challenge in contemporary science, essential for achieving progress in a variety of fields ranging from the organization and evolution of coordinated collective action among cells, or animals, to the dynamics of information exchange in human societies. Using an integrated experimental and theoretical approach, I will address how, and why, animals coordinate behavior. In many schooling fish and flocking birds, decision-making by individuals is so integrated that it has been associated with the concept of a collective mind. As each organism has relatively local sensing ability, coordinated animal groups have evolved collective strategies that allow individuals, through the dynamical properties of social transmission, to access higher-order capabilities at the group level. However we know very little about the relationship between individual and collective cognition. A major limitation is that it has not been possible to observe directly the pathways of communication, and social networks are typically based on proxies such as spatial proximity among organisms. I will demonstrate new imaging technology that allows us to reconstruct (automatically) the dynamic, time-varying networks that correspond to the visual cues employed by organisms when making movement decisions. Sensory networks are shown to provide a much more accurate representation of how social influence propagates in groups, and one that cannot be captured correctly by social networks based on spatial proximity (regardless of how they are parameterized). I investigate the coupling between spatial and information dynamics in groups and reveal that emergent problem solving is the predominant mechanism by which mobile groups sense, and respond to complex environmental gradients. This distributed sensing requires rudimentary cognition and is shown to be highly robust to noise. I will also demonstrate the critical role uninformed individuals (those who have no information about the feature upon which a collective decision is being made) play in fast, and effective, democratic consensus decision-making in collectives.;2014
Using the Scratch environment as a tool to teach programming skills or develop computational thinking is increasingly common in all levels of education, well-documented case studies from primary school to university can be found. However, there are reports that indicate that students learning to program in this environment show certain habits that are contrary to the basic programming recommendations. In our work as instructors with high school students, we have detected these and other bad practices, such as the repetition of code and object naming, on a regular basis. This paper focuses on verifying whether these issues can generally be found in the Scratch community, by analyzing a large number of projects available on the Scratch community website. To test this hypothesis, we downloaded 100 projects and analyzed them with two plug-ins we developed to automatically detect these bad practices. The plug-ins extend the functionality of the Hairball tool, a static code analyzer for Scratch projects. The results obtained show that, in general, projects in the repository also incur in the investigated malpractices. Along with suggestions for future work, some ideas that might assist to address such situations are proposed in the conclusions of the paper.;2014
We join the increasing call to take computational education of life science students a step further, beyond teaching mere programming and employing existing software tools. We describe a new course, focusing on enriching the curriculum of life science students with abstract, algorithmic, and logical thinking, and exposing them to the computational culture.'' The design, structure, and content of our course are influenced by recent efforts in this area, collaborations with life scientists, and our own instructional experience. Specifically, we suggest that an effective course of this nature should: (1) devote time to explicitly reflect upon computational thinking processes, resisting the temptation to drift to purely practical instruction, (2) focus on discrete notions, rather than on continuous ones, and (3) have basic programming as a prerequisite, so students need not be preoccupied with elementary programming issues. We strongly recommend that the mere use of existing bioinformatics tools and packages should not replace hands-on programming. Yet, we suggest that programming will mostly serve as a means to practice computational thinking processes. This paper deals with the challenges and considerations of such computational education for life science students. It also describes a concrete implementation of the course and encourages its use by others.;2014
A distinctive feature of intelligent game-based learning environments is their capacity for enabling stealth assessment. Stealth assessments gather information about student competencies in a manner that is invisible, and enable drawing valid inferences about student knowledge. We present a framework for stealth assessment that leverages deep learning, a family of machine learning methods that utilize deep artificial neural networks, to infer student competencies in a game-based learning environment for middle grade computational thinking, ENGAGE. Students' interaction data, collected during a classroom study with ENGAGE, as well as prior knowledge scores, are utilized to train deep networks for predicting students' post-test performance. Results indicate deep networks that are pre-trained using stacked denoising autoencoders achieve high predictive accuracy, significantly outperforming standard classification techniques such as support vector machines and naive Bayes. The findings suggest that deep learning shows considerable promise for automatically inducing stealth assessment models for intelligent game-based learning environments.;2015
According to the current situation of C programming teaching in universities, the paper puts forward a series of reform measures implemented in the teaching and some good results are achieved. Through the teaching reform and practice of C programming courses, it stimulates the interest from students in learning, improves their learning enthusiasm, initiative and creativity, and cultivates computational thinking and innovation of students. The education quality has been improved.;2015
Alongside recent UK initiatives on computing education, coupled with demands for the development of broader societal digital competencies, we propose that computational thinking skills can be taught to early year students and highlight a method for teaching a specific aspect, namely pattern recognition. Although our example might appear specific to this context, we identify how this could readily be extended to a broader class of educational settings, proposing an underlying pedagogical framework. Finally, a proof-of-concept prototype, corresponding to the implementation of the method, is highlighted.;2015
Although there have been many advances in end-user programming environments, recent empirical studies report that programming still remains difficult for end-users. We hypothesize that one reason may be lack of effective support for helping end-user programmers problem-solve their own way around barriers they encounter. Therefore, in this paper, we describe the Idea Garden, a concept designed to help end-user programmers generate new ideas and problem-solve when they run into barriers. The Idea Garden has its roots in Minimalist Learning Theory and problem-solving theories. Our proof-of-concept prototype of the Idea Garden concept in the CoScripter end-user programming environment currently targets three barriers reported in end-user programming literature. It does so using an integrated, just-in-time combination of scaffolding for problem-solving strategies, for design patterns and for programming concepts. Our empirical results showed that this approach helped end-user programmers overcome all three types of barriers that our prototype targeted.;2015
An educated citizenry that participates in and contributes to science technology engineering and mathematics innovation in the 21st century will require broad literacy and skills in computer science (CS). School systems will need to give increased attention to opportunities for students to engage in computational thinking and ways to promote a deeper understanding of how technologies and software are used as design tools. However, K-12 students in the United States are facing a broken pipeline for CS education. In response to this problem, we have developed the Scalable Game Design curriculum based on a strategy to integrate CS education into the regular school curriculum. This strategy includes opportunities for students to design and program games and science technology engineering and mathematics simulations. An approach called Computational Thinking Pattern Analysis has been developed to measure and correlate computational thinking skills relevant to game design and simulations. Results from a study with more than 10,000 students demonstrate rapid adoption of this curriculum by teachers from multiple disciplines, high student motivation, high levels of participation by women, and interest regardless of demographic background.;2015
"An important factor underlying the entire EUD enterprise is how to incorporate basic computer programming in school curricula. Rapidly increasing initiatives towards this goal have typically explored two kinds of abilities associated with learning how to program: logical problem solving and digital (multimedia) storytelling. In this paper we report on an exploratory qualitative study with a group of middle school children from a one-semester computational thinking acquisition class. We combined three technologies with which participants: (i) created a game; (ii) explored the representation of implicit and explicit meanings in their game; and (iii) created a scripted asynchronous Web-based conversation with their teacher about their game. We concluded that this combination can not only introduce new forms of 1st-person expression through software in basic education, but also and more importantly give teachers and learners a lead into program reflection, one of the most powerful concepts in programming and computing.";2015
At ICEL 2014 in Valparaiso the authors presented a paper on the importance of developing metacognition in students, to support changes and developments in pedagogy and learning models. Following on from that paper, we now consider and present outcomes from three projects reflecting different stages of the learning continuum, with which we are engaged. Firstly, the Computing at Schools project in the UK has been running for over five years, and has been successful in gaining the support of the UK government for the introduction of Computer Science teaching in schools at both primary and secondary levels. Critical to the success of this project is a change in the pedagogic model adopted by the schools, moving from fairly standard instructivist models for teaching in the primary schools and in teaching coding and factual information to more constructivist approaches, using flip classrooms and other TEL (technology enhanced learning) tools and techniques to help pupils develop Computational Thinking skills. Within our own University, we have been working on a project called Greenwich Connect, which aims to provide our students with a comprehensive set of online services and facilities supporting all aspects of the student experience. As part of this project staff are encouraged to develop learning materials using TEL tools, and to adopt more constructivist and student-centric teaching approaches. Within the UK University context, we already have an excellent example of a strong constructivist, student centric teaching model in the PhD studentship. A PhD student is encouraged to investigate the body of knowledge, with appropriate advice and guidance from experienced and knowledgeable supervisors, and then to take control of their own learning process by identifying their research question, experimental model and analytical methodology. They then carry out and write up their research, with their supervisors now available as experts to be consulted at need, and produce an outcome, which, at the point of viva, proves them to be the current world expert in their field. The issues are in applying this model to large numbers of students at an earlier stage in their learning and the resourcing of the facilities required to support this. One potential approach to deal with the issues of resourcing a student-centric approach to online learning is being investigated in the dCCD-FLITE project, an EU funded project with 7 partners from 6 European countries. The project is developing learning materials on the subject of Entrepreneurship in the IT Industry, and aims to deliver these materials to students in online courses that offer a constructivist, student-centric learning approach, with limited tutor resources and engagement. To achieve this, it allows students to self-select groups to work in, and then introduces two key learning frameworks to be used by the groups to organise and develop their learning Concurrent Design Method, designed by NASA, and the Osterwalder Canvas.;2015
"Background: The diffusion of component content management and structured authoring workflows and technologies in technical communication requires that instructors of documentation courses determine effective ways to teach component content management to students who may initially be intimidated by authoring environments and structures, such as the Darwin Information Typing Architecture (DITA). This teaching case describes how component content management and DITA were integrated into the Creating User Documentation course of an undergraduate professional writing program. Research questions: How can instructors of technical and professional writing best teach English and humanities students to operate within a structured authoring workflow? How can computational abstraction be combined with students' previously acquired genre knowledge to ease their adoption of the DITA to create technical documentation? Situating the case: The development of this course was informed by literature from a variety of scholarly and industry sources, which reveal connections between DITA, computational thinking, and Rhetorical Genre theory. Specifically, the concept of layers of abstraction guides the development of the course's structure, allowing students to separate and independently process the various aspects of a structured authoring workflow. How the case was studied: The case was studied informally through the experience of the authors as they developed and taught the course, through informal discussions and structured interviews with industry professionals, and through student reflections from discussion forum posts from Fall 2012 through Fall 2013. About the case: Initially developed with a focus on print manuals and online help, the course began teaching topic-based authoring in the mid-2000s; however, most enterprise-level editors and tools were cost-prohibitive for students and faculty. Furthermore, many computing concepts associated with structured authoring were intimidating for an audience of students in an English department. An affordable solution was adopting the open-source DITA standard, using free trials or open-source editors. The intimidation factor was minimized by designing the course around five layers of abstraction that draw on students' previous rhetorical knowledge: Layer 1: Developing quality documentation, Layer 2: Separating content from design, Layer 3: Authoring granular content with XML, Layer 4: Authoring and linking Component Content Management modules with DITA, and Layer 5: Single-sourcing and content reuse. This case discusses each layer of abstraction, the associated assignments for each layer, and the results of each layer based on student feedback. Results and conclusions: Although the course is not universally loved by students, it has seen many successes and provides a much-needed foundation in component content management and structured authoring for students who might become technical communicators. The teaching team has learned to avoid overemphasizing coding and automation in structured authoring, maintain a solid grounding on writing principles and good technical communication requirements, and draw upon students' existing knowledge of genres and their constraints.";2015
Based on present situation analysis of University Computer Foundation Course facing reformation in local college, for the purpose of training computational thinking ability, this paper integrates virtual experiment system into practice teaching link and constructs Virtual-Actual fusion experiment platform. It consists of four parts, such as virtual experiment platform, practical platform, network platform and comprehensive test platform. The platform provides much and enough practice training in the class and outclass for the students, trains computational thinking ability, meanwhile, improves application skills and innovative quality.;2015
Both complex systems methods (such as agent-based modeling) and computational methods (such as programming) provide powerful ways for students to understand new phenomena. To understand how to effectively teach complex systems and computational content to younger students, we conducted a study in four urban middle school classrooms comparing 2-week-long curricular units-one using a physical robotics participatory simulation and one using a virtual robotics participatory simulation. We compare the two units for their effectiveness in supporting students' complex systems thinking and computational thinking skills. We find that while both units improved student outcomes to roughly the same extent, they engendered different perspectives on the content. That is, students using the physical system were more likely to interpret situations from a bottom-up (agent) perspective, and students using the virtual system were more likely to employ a top-down (aggregate) perspective. Our outcomes suggest that the medium of students' interactions with systems leads to differences in their learning from and about those systems. We explore the reasons for and effects of these differences, challenges in teaching this content, and student learning gains. The paper contributes operationalizable definitions of complex systems perspectives and computational perspectives and provides both a theoretical framework for and empirical evidence of a relationship between those two perspectives.;2015
Building a classroom environment based on student-led, meaningful collaboration is an ideal being promoted by educators and administrators seeking to equip students with 21st century workforce skills. More and more often, teachers are challenged to design lessons that utilize students' innate desire to communicate with one another rather than more traditional direct instruction. With a heavy focus on student-driven instruction and a reduced role for direct instruction, Carson Middle School's Game Design I course is able to utilize collaboration as a means for allowing students to not only learn but master and retain Computational Thinking Patterns and apply them in formal summative assessments. Through the collection of these data points throughout the course of a semester of learning, an educator can fully appreciate the learning of Computational Thinking skills that occurs as students build a sequence of games and simulations.;2015
Characteristics of scientific phenomenon are commonly investigated using mathematical tools in science and engineering to develop our conceptual understanding. However, computational thinking (CT) and modeling with simulations can result in a more advanced understanding of scientific concepts and offer an effective learning experience for students with various backgrounds. In this chapter, we show how a simulation tool, Scratch, can be used to unfold the abstract side of science through project-based visualizations in fun and engaging ways. It can be an effective approach in attracting young talented students to science and technology by motivating their natural imagination to probe scientific abstraction.;2015
Coding is considered by educators to be a fundamental skill for everybody. The awareness campaigns launched worldwide in the last two years have attracted the attention of media and initiated tens of millions of people of all ages to computer programming. The availability of online visual programming platforms (like Scratch and Blockly) and freely accessible playful educational tools (like the ones offered by Code. org) have significantly contributed to lower the access barrier to coding, making it possible to acquire computational thinking skills while playing, with no need to master the syntax of any programming language. The widespread diffusion of internet connected objects with embedded processors has added to the power of coding, making it the essential skill that allows us to exploit the unprecedented potential of all the smart objects around us. Nowadays, online visual programming platforms for mobile applications make it possible to use block-based programming to develop full fledged mobile applications, thus combining the immediacy of visual programming with the attractiveness of mobile applications. A pan European crowdcoding educational experiment was launched in October 2014, during Europe Code Week, to involve people with no programming skills into the development of a new mobile game for Android, called Flagship, to be officially released by the European Commission to promote computing literacy. The specifications were disclosed at the beginning of Code Week and the fist full fledged version was released on the last day, as a result of an international coding relay race involving more than 500 people from many countries. The University of Urbino took care of merging all the contributions and conducting the live coding sessions corresponding to the milestones of the roadmap. AppInventor was adopted as a development platform in order to make all coding steps accessible to neophytes. Programming phases were streamed live and recorded. Both the video logs and the incremental AppInventor project files were made available online to be used as tutorials. This paper reports the details of the crowdcoding experiment, discusses motivations and results, and outlines the current status and future directions of the Flagship project.;2015
Combining with Computational Thinking, the experiment teaching research of 'the Fundamentals of Computer' in universities has become a new direction and goal for the reform and construction of the computer foundation courses. This paper expounds the connotation of Computational Thinking. Centering on cultivating the college students' Computational Thinking ability, the paper expounds how to build the hierarchical experiment teaching contents, introduces the experiment teaching method and evaluation model based on Computational Thinking.;2015
Computational Thinking (CT) introduces computing concepts and demonstrates their usefulness in many other disciplines. CT principles such as algorithmic problem solving, abstraction, modeling and simulation, are integrated into existing STEM (Science, Technology, Engineering, Mathematics) curricula by DISSECT (DIScover SciEnce through Computational Thinking). By pairing a local K-12 teacher with a graduate fellow, DISSECT provides instruction and resources as instruments that are pertinent to each specific discipline. These skills in problem-solving and abstract reasoning are necessary for students to be able to compete in the modern and future job markets. DISSECT works to provide these skill-sets to students and classrooms that lack access to computers. The K-12 teachers and graduate fellows work together to develop modules that are capable of teaching CT concepts that are directly tied to their current curriculum while removing the need for access to computer systems. This paper will focus on the modules developed and executed in middle and high school classrooms, emphasizing the creative ways explored to operate in a computer-free environment discussing the strengths and weaknesses of different approaches, while qualitatively assessing student engagement, learning, and interaction which is gathered through teacher interviews, observations and informal talks with students.;2015
Computational Thinking (CT) is gaining a lot of attention in education. We explored how to discern the occurrences of CT in the projects of 12th grade high school students in the computer science (CS) course. Within the projects, they constructed models and ran simulations of phenomena from other (STEM) disciplines. We examined which CT aspects occurred in students' activities and how to assess students' CT accomplishments. For this purpose we employed a framework based on CT characterizations by Wing [14, 15], CSTA [4] and Comer et al. [3]. We analyzed students' project documentation, survey results and interviews with individual students. The findings indicate that this framework is suitable for detection of occurrences of CT aspects in students' data. Moreover, our preliminary results suggest that the framework is useful in assessment of the quality of the students' CT performance.;2015
Computational thinking ability is important in computer science education. It emphasizes abstraction and automation. For automation, programming has become a key ability in digital society recently. As a result, the increase in the importance of coding education in many countries has brought various educational methods to improve teenagers' programming abilities. Among programming abilities, reading ability is important especially to programming novices. This paper focuses on the effects of gender and abstract thinking abilities of adolescents on understanding computer programs. Also, we examine if there is any difference in teaching between adolescents and college students. In order to achieve our research goals, we surveyed on the abstract thinking level, and then measured program understanding ability for 300 academic high school students who had learned C language. From this research, we found that the abstract thinking affects more complex program understanding positively. Also, we found that the language experience before learning brought the difference in program understanding. However, we could not find statistical differences in program understanding between two genders. From this research, we can provide a new point of view to improve adolescents' programming ability with abstract thinking and gender factors.;2015
"Computational thinking has recently been widely recognized as a fundamental skill that should be cultivated for everyone and in every field. Although there is an increasing interest in research in teaching and learning computational thinking in recent years, an engaging, effective online learning system is yet to be built for teaching, learning, and applying computational thinking online. To this end, we have developed DATAVIEW, an online social learning system for learning computational thinking concepts and skills online. The main contributions of this paper are: 1) we developed a new, effective online learning model for computational thinking based on our previous widely-applied R2D2 model. A signature characteristic of this new model is being interactive and learner-centered, thus i is carried out through the entire learning experiences, which provides teaching facilities to instructors and interactional tools among instructors and learners; 2) we implemented, validated, and refined iR2D2 in our DATAVIEW computational thinking online service; 3) We propose to use the DBR (design-based-research) approach to study the relationship between technology and teaching in the context of computational thinking, generating research results and findings applicable to online teaching in other domains as well.";2015
"Computational thinking is a competence that should be included in the training of every student of different educational stages, from the lower to the higher stages. However, there are fewer women that choose in their post-secondary education careers related to computer science. Therefore, this article analyzes the main initiatives of teaching the computational thinking, and also the gender gap in computer education. In order to know strategies of computational thinking and the gender differences which were found; it has been made a study about the opinions of teachers, judges, referees and volunteers of the national educational robotics competition FLL (First Lego League), whom was held in Santa Cruz de Tenerife in 2015. The results indicate that although there are more male presence in the tournament, there are no significant gender differences in the skills related to programming and learning computational thinking, because boys and girls learn and process information fairly.";2015
Computational thinking is an important concept that was attention world widely in the computer academia, and was an important topic in the computer education and computer teaching activity. In China, many computer teaching workers have done a lot of work, and got amount of achievement, but still there were divergences. Discussed the relation between computational thinking and program design, put forward the new module that guided computer education of higher education under the computational thinking. Through optimizing teaching content and innovating practice method, combined organically computational thinking and program design, cultivated the ability of computational thinking, improved the innovation spirit and innovation ability.;2015
Computational thinking is an important part of a modern education, and robotics provides a powerful tool for teaching programming logic in an interactive and engaging way. The robot garden presented in this paper is a distributed multirobot system capable of running autonomously or under user control from a simple graphical interface. Over 100 origami flowers are actuated with LEDs and printed pouch motors, and are deployed in a modular array around additional swimming and crawling folded robots. The garden integrates state-of-the-art rapid design and fabrication technologies with distributed systems software techniques to create a scalable swarm in which robots can be controlled individually or as a group. The garden can be used to teach basic algorithmic concepts through its distributed algorithm demonstration capabilities and can teach programming concepts through its education-oriented user interface.;2015
Computational Thinking is considered a universal competence, which should be added to every child's analytical ability as a vital ingredient of their school learning. In this article we further elaborate on what Computational Thinking is and present examples of what needs to be taught and how. First we position Computational Thinking in Papert's work with LOGO. We then discuss challenges in defining Computational Thinking and discuss the core and peripheral aspects of a definition. After that we offer examples of how Computational Thinking can be addressed in both formal and informal educational settings. In the conclusion and discussion section an agenda for research and practice is presented.;2015
Computational thinking is considered best practice for teaching computing and more broadly to solve problems and design systems, however as computing extends beyond the desktop (for instance increased integration of ubicomp technologies) so too must our educational methods. Exposure to ubicomp technologies is most accessible through the maker movement. With this in mind we argue we must move from computational thinking to computational making as an educational framework. Here we present a case study of children's making to support our vision for a broader conception of computational making.;2015
Computational thinking is ubiquitous, and has become a hot spot in education. As the core mission of college computer teaching, computational thinking training naturally causes widespread concern in the field of basic computer education. In this study, we propose the computational thinking formation procedural model, which reveals that computational thinking is the unity of internal and process, and the computational thinking ability training process is an important reason for the formation of computational thinking ability. And based on the factors of computational thinking training process, we construct the computational thinking - based blended teaching model.;2015
Computational thinking, a problem solving method that uses computer science techniques, has recently become mainstream as many governments and major Internet companies are promoting programming skills among children. However, little is known about how programming affects other aspects of life beyond the acquired programming skills. In this regard, this paper summarizes the work done in the school San Diego and San Vicente (Madrid, Spain) during the third quarter of the year 2013/2014, where we conducted a study with four groups of students in 4th and 5th grade to measure to what extent the use of computer programming in English classes can be an interesting educational tool with a positive impact on the learning otucome of the students. The results show that the groups working with programming activities improved more than the groups using traditional resources. Moreover, when asked via surveys at the end of the study, most students felt that coding was a positive influence, not only for learning English, but for developing other important skills as teamwork and learning to learn.;2015
Computer code and programmable objects are a ubiquitous part of our everyday lives. Over the past 25 years critical engagement with digital media has become a part of the art education curriculum. However, involving art students in utilizing processing agents as part of studio practice by learning how to code programming languages is a rare occurrence. This article advocates for computational thinking as an urgent need within art education to prepare students to utilize digital innovations and create code-based artworks. By reviewing the constructionist origins of computational thinking for art educational purposes, we posit that creative code can benefit studio art practice while making broader contributions to conceptions of computational thinking across disciplines. We emphasize three concepts to engage in critical digital making by recognizing code as critical text, code as open or proprietary, and code as digital material to be performed and acted upon.;2015
"Computer Science and programming are being introduced to school curricula in many western countries in an effort to equip students with Computational Thinking skills. However, as these subjects are still relatively new to pre-tertiary education there is much investigation to be done into how best to present these topics and how to prepare teachers. In this study we focus on the presentation of topics relating to computing, Computational Thinking, and Computer Science for primary schools. We analyse English-language curricula that have been published, specifically the English, Australian and CSTA curricula for primary schools. From this we establish the main topics covered, and how they are positioned to be suitable for students from the first year of school to approximately their eighth year. We then report on a pilot study of a curriculum based on Computational Thinking; long term the study will encompass a range of topics and year levels, but the pilot focused on topics suitable for 11 to 12 year old students. Here we detail the design of this part of the curriculum, the manner of its delivery, and the experiences and observations of the generalist teacher who taught the course. Through assessment data, student responses to an attitude survey, and class observations we have evaluated the pilot curriculum. The findings of this study are being used to inform the design of a planned larger scale study.";2015
Computer Science Curriculum 2013 has become the guidance of computing education since it was released in 2013by the ACM/IEEE-Computer Society. This paper analyzes the CS curriculum development trend, trying to dig the programming-related core from CS2013 with respect to the knowledge areas, topics, organization of teaching, and the building of students' capability. Considering the characteristic of our local institution and undergraduates, we present an updated teaching curriculum and lab curriculum for C Programming Language course in relation to CS2013 recommendations, which highlight the development of the students' abilities on programming, problem-solving, self-regulated learning, and computational thinking. Finally, we present and assess the implementation of the resulting curriculum. (C) 2015 The Authors. Published by Elsevier Ltd.;2015
Computer science is expanding into K12 education and numerous educational games and systems have been created to teach programming skills, including many block-based programming environments. Teaching computational thinking has received particular attention, and more research is needed on using educational games to directly teach computational thinking skills. We propose to investigate this using Dragon Architect, an educational block-based programming game we are developing. Specifically, we wish to study ways of directly teaching computational thinking strategies such as divide and conquer in an educational game, as well as ways to evaluate our approaches.;2015
Computer science studies computers, as well as the ambient phenomena and laws. Generalized computation theory includes algorithms, computational complexity theory, computability theory, automata theory, and formal language theory. This paper discusses several typical problems in the theory of computation (computability theory and complexity theory). And then it elaborates the relation of computation theory and computer science from different perspectives. It describes Turing machine model and reveals the essential relation of Turing machine model and computational thinking. In addition, it discusses time complexity and space complexity in computer science, presents approximation algorithm, and gives the packing problem examples. Finally, it emphasizes the importance of computation theory in computer science education.;2015
Computing is no longer considered a subject area only relevant for a narrow group of professionals, but rather as a vital part of general education that should be available to all children and youth. Since making changes to national curricula takes time, people are trying to find other ways of introducing children and youth to computing. In Sweden, several current initiatives by researchers and teachers aim at finding ways of working with computing within the current curriculum. In this paper we present case studies based on a selection of these initiatives from four major regions in Sweden and based on these case studies we present our ideas for how to move forward on introducing computational thinking on a larger scale in Swedish education.;2015
Critical thinking, problem solving, the use of tools, and the ability to consume and analyze information are important skills for the 21st century workforce. This article presents a qualitative case study that follows five undergraduate biology majors in a computer science course (CS0). This CS0 course teaches programming within a data-driven context and is part of a university-wide initiative to improve students' quantitative scholarship. In this course, students learn computing concepts and computational thinking by writing programs in MATLAB that compute with data, by performing meaningful analyses, and by writing about the results. The goal of the study reported here is to better understand the thought processes students use in such a data-driven approach. Findings show that students engage in an ongoing organizational process to understand the structure of the data. The computational and visualization tasks appear to be closely linked, and the visualization component appears to provide valuable feedback for students in accomplishing the programming tasks.;2015
Despite the enthusiasm and initiatives for making programming accessible to students outside Computer Science (CS), unfortunately, there are still many unanswered questions about how we should be teaching programming to engineers, scientists, artists or other non-CS majors. We present an in-depth case study of first-year management engineering students enrolled in a required introductory programming course at a large North American university. Based on an inductive analysis of one-on-one interviews, surveys, and weekly observations, we provide insights into students' motivations, career goals, perceptions of programming, and reactions to the Java and Processing languages. One of our key findings is that between the traditional classification of non-programmers vs. programmers, there exists a category of conversational programmers who do not necessarily want to be professional programmers or even end-user programmers, but want to learn programming so that they can speak in the programmer's language and improve their perceived job marketability in the software industry.;2015
Despite their advanced status, nations such as the United States of America continue to face a STEM (science, technology, engineering and mathematics) crisis in their education system. Lack of effective teaching modalities that can leverage real-world examples to stimulate student interest in STEM concepts are identified as one of the reasons for this crisis. To address these challenges, our research is investigating the use of innovative and attractive modeling and simulation frameworks for concurrent, interactive and collaborative STEM education where vehicular traffic serves as the real-world example to reify STEM concepts. Existing traffic-related tools, such as traffic simulators, however, do not provide: (1) intuitive abstractions to construct, refine, and simulate various traffic models that are commensurate to the level of high school students, (2) concurrent and scalable model execution, and (3) collaborative learning environments. On the other hand, although intuitive abstractions such as Google Maps exist, these abstractions do not support semantics for dynamic behavior, which is representative of real-world traffic scenarios. To overcome both these challenges and address the STEM problem, this paper presents a Cloud-based, Collaborative, and Scaled-up Modeling and Simulation Framework for STEM Education called C2SuMo. The key contribution of this paper lies in the design and implementation of a cloud-based, elastic modeling and simulation framework that provides an intuitive, model-driven, collaborative, and concurrent visual simulation environment for STEM education. The paper also reports on insights we gained conducting a user study involving over sixty high school students. (C) 2015 Elsevier B.V. All rights reserved.;2015
"DISSECT (DIScover SciEnce through Computational Thinking) is a project aimed at introducing students to computer science principles by establishing computational thinking (CT) as a problem-solving technique within middle school and high school Science, Technology, Engineering, and Mathematics (STEM) courses. While DISSECT has shown successful integration of CT into middle school and high school STEM curricula, illustrating the pervasive nature of CT, a question remained; can CT also be infused into humanities courses (e.g., English, Art, History) in addition to scientific courses (e.g., Chemistry, Biology, Computer Science)? The answer is positive. The objective of this paper is to present one approach to bridge the gap between CT and humanities through the curriculum of a 12th-grade English Literature course. The course blends CT practices with composition and literature to provide students with the ability to write critical and comparative analyses of selected literature. This paper will describe multiple modules that integrate computational thinking into the course, and discuss the results and assessment tools used to measure student competency in computational thinking.";2015
During the last few years, the focus of computer science education (CSE) in primary and secondary schools (shortly K-12) have reached a significant turning point. This study reviews the published papers on the field of K-12 computing education in order to summarize the findings, guide future studies and give reflections for the major achievements in the area of CSE in K-12 schools. 47 peer-reviewed articles were collected from a systematic literature search and analyzed, based on a categorization of their main elements. Programming tools, educational context, and instructional methods are the main examined categories of this research. Results of this survey show the direction of CSE in schools research during the last years and summarized the benefits as well as the challenges. In particular, we analyzed the selected papers from the perspective of the various instructional methods aiming at introducing and enhancing learning, using several programming tools and educational context in K-12 CSE. Despite the challenges, the findings suggest that implementing computing lessons in K-12 education could be an enjoyable and effective learning experience. In addition, we suggest ways to facilitate deep learning and deal with various implications of the formal and informal education. Encouraging students to create their own projects or solve problems should be a significant part of the learning process.;2015
Educating our future engineers so that they can gain high proficiency in computational thinking is essential for their career prospects. As educators, acquiring a good understanding of the various learning motivation factors/tools as well as their inter-relationships is a significant step forward in achieving this goal. In this article, we describe an exploratory, data-analytic investigation into the influences of the various learning motivation factors on one another as well as on effecting e-learning of a group of science and engineering students taking computer programming courses. Based on the algorithmic results, we highlight concrete ideas that may have direct impact on improving an existing e-learning system. Further, we describe how the graphical visualization of the algorithmic results can guide us to set priority for focusing on which learning motivation factors first, and which factors next, in achieving a given education goal. These are among some of the new insights not easily obtainable from confirmatory-based analyses.;2015
Educational systems are incorporating in their official curricula new knowledge related to computational thinking Education authorities consider that there are economic, labor, educational, social and cultural arguments to introduce computer programming in the curriculum of compulsory education. This article describes and analyzes three curricular designs that include computational thinking On the one hand, two prescriptive curricula (UK and Autonomous Community of Madrid) organized around subjects, focusing on mandatory content and standardized assessment. Moreover, an innovative and globalized curriculum (Q2L) including computational thinking as a basic, transversal and contextual skill. Analysis of the designs can observe two different approaches to the introduction of programming in the classroom. It concludes with the need to base curriculum design in the accumulated experience in the educational use of computational thinking (Papert), the results of educational research and new learning ecologies.;2015
Existing scheduling and decision solutions to container terminal logistics systems (CTLS) are falling short of peoples' wishes both in theory and in practice. This paper proposes a container terminal gang scheduling computational paradigm (GSCP) for planning and control at container terminals based on computational thinking. GSCP is built on the computing perspective and architecture of multi-processor system-on-chip. GSCP applies principles of pervasive computing to evaluate load conditions of core resources, and then integrates the fundamental principles of gang scheduling, processor affinity and load balancing to define the flexible and robust decision framework and scheduling algorithm set. Those are intended to improve the performance of CTLS, and strive for balance among through capacity for vessels and containers, task latency and load leveling as well. GSCP is demonstrated and validated by a typical container hub logistics service case with intensive computational experiments.;2015
For all computer scientists the term 'modeling' is well known. It displays an often-used method, which is applied in each field of computer science to investigate, describe and plan problems or structures. With the help of models, large and complex structures are divided into smaller parts, which leads to a better understanding of the problem and often provides input for the solution. With the help of different types of models, different perspectives of one problem can be observed and discussed. These processes are not only part of computer science respectively computational thinking. Problem solving skills are needed in any domain and should be trained as well as possible in primary and secondary education. This could be supported by the computer science concept of modeling including processes like reduction, decomposition, abstraction, generalization etc. and appropriate techniques like UML Unified Modeling Language or the Entity-relationship model. We suppose that a consequent use of modeling beginning in different subjects during primary and secondary education can train and improve problem-solving skills. Before being able to verify this hypothesis, it is necessary to find a way to integrate modeling in schools despite of not being part of the curriculum. This is one aim of our project Informatics - A Child's Play, which tries to implement different computer science concepts in different subjects of primary and secondary education. To reach this goal we firstly have to convince and train teachers. In this paper some topics of modeling are presented as they were adapted for workshops in primary and early secondary education considering the age and interests of the students as well as topics taken from their surroundings. Furthermore, we present first evaluation results concerning its acceptance and usefulness for teachers and students as well as their performance in understanding and applying modeling in different lessons.;2015
Fundamental of Computer Technology is a course in first year of college to enhance computer practical skill of undergraduate and provide experiment of computational thinking. There are three issues in fundamental of computer education. One is how to organize mass content of course. The second is how to combine academic education and technical practice in teaching. The last is students on various computer practical skill levels. To guarantee quality of teaching, a closed-loop architecture based on knowledge management is proposed, which can assist teacher to hold over teaching proceeding and arouse students to get knowledge. Then some data contain test scores and investigation results are provided to prove the efficiency of the closed-loop architecture.;2015
Game-based learning environments can deliver robust learning gains and also have a unique capacity to engage students. Yet they can unintentionally disadvantage students with less prior gaming experience. This is especially concerning in computer science education, as certain underrepresented groups (such as female students) may on average have less prior experience with games. This paper presents evidence that a collaborative gameplay approach can successfully address this problem at the middle school level. In an iterative, designedbased research study, we first used an experimental pilot study to investigate the nature of collaboration in the ENGAGE gamebased learning environment, and then deployed ENGAGE in a full classroom study to measure its effectiveness at serving all students. In earlier phases of the intervention, male students outpaced their female peers in learning gains. However, female students caught up during a multi-week classroom implementation. These findings provide evidence that a collaborative gameplay approach may, over time, compensate for gender differences in experience and lead to equitable learning experiences within game-based learning environments for computer science education.;2015
"Higher Vocational Education is one of the most important educational forms. But in the course of implementation of Higher Vocational Education, we find three inevitable questions: Higher Vocational Educational system's length of schooling which is only three years is too short; the differences in personality of teachers affect the teaching effects; the lower quality of the students disengaged their passion to learn. MOOC is a new teaching mode which has successful cases such as a university computer course: a Computational Thinking Perspective of Shandong University. We refer to the university MOOC - a Computational Thinking Perspective, to construct a professional SPOC teaching mode and recur to the University MOOC in the process of teaching. Seen from the evaluation and suggests of teachers and students joined the MOOC and SPOC, the teaching mode not only can stimulate the teachers' teaching enthusiasm, but also can stimulate the students' learning enthusiasm.";2015
How to cultivate students' computational thinking is an important task for the current research of computer education. This thesis expounds the concept and connotation of computational thinking, and explains its enlightenment for computer science research and computer education.;2015
"How to cultivate the students' capacity of computational thinking during the educational process of computer programming is one of the basic goals of computer basic education. Considering the generally reflected problems in education of programming courses such as boring, not enthusiastic about learning, grammatical structures and teaching cases are dispersed, etc; this paper introduces the gamified educational mode for the purpose to cultivate the students' capacity of computational thinking. Educational model based on the gamified education was constructed, and the cultivation of gamified education to students' computational thinking ability was analyzed through specific case analysis. Gamified educational mode can effectively stimulates students' motivation and interest in learning, and then cultivate students' self-learning ability. It better tap the abstract algorithm thinking which cultivate students' computational thinking capacity.";2015
How to take computational thinking ability cultivation as the core task of fundamentals of computers teaching has aroused wide concern and triggered hot discussions in the education circle. As the introductory course of Computer basis teaching, it is urgent to carry out teaching contents reform for Fundamentals of Computers. This paper comes up with an organizational structure for teaching contents from the perspective of abstraction, instruction, language and system computing design based on analyzing the core ideas and philosophy of computer. What's more, it also takes computer network as an example to analyze concrete teaching unit implementation methods guided by questions.;2015
Human-computer interaction is a long established sub-discipline of computer science. While there has been significant focus on the importance of developing computational thinking skills, there appears to be a gap in the literature in using HCI principles, analysis and design as a framework for doing so. We present the first step to identify methodologies for systematically introducing HCI to pupils from an early age, presenting a commentary for their prospective future application, comparing to similar approach as other foundational aspects of computer science in developing computational thinking skills that have been considered for the past decade.;2015
Improving students' abilities of computational thinking and professional problems solving is an urgent issue for non-major students who live in the information age. This paper first analyzes the reasons of the above issue from time gap and guide absence. Constructivism learning theory is then introduced as the guiding principle, and its four core characteristics are elaborated by the computer innovative practice base of East China University of Science and Technology (ECUST). Furthermore, the project based collaborative learning process is illustrated step by step to solve the existed problem. In the end, four years' experimental result shows the method is effective in improving students' abilities of analyzing professional problems, solving professional problem and cultivating computational thinking.;2015
"In recent years, many researchers, study groups and associations (Diethelm et al. 2013; Baude 2013; Furber 2012; Seehorn et al. 2011) launched alerting calls to make the teaching of informatics as a subject and make it mandatory at all educational levels. The current mainstream is to start teaching computational thinking and problem solving as early as the primary school. In fact, informatics is increasingly seen as an academic discipline similar to other subjects like mathematics, earth and life sciences, chemistry, and physics. This article underlines the importance of computer science as an essential component of civic education. We then make a critical overview about the state of informatics education in Morocco. At the end we present a number of suggestions for any eventual reforms related to the subject in light of what's been adopted in few countries like England, the United States, France, Japan, Poland and Tunisia.";2015
In the 1960s, Papert and his team at the Massachusetts Institute of Technology (MIT) developed Turtle Graphics using the LOGO programming language. Underpinning this development was a profound new philosophy of how learning happens with computers: a microworlds-based approach to learning. The wider aim of this research project is to examine how a microworlds-based approach may be revived in contemporary educational contexts by secondary school teachers in cross-curricular subject areas. It examines the microworld as a tool for secondary level learning at ages eleven-to-fourteen and explores its potential role in making relevant conceptual learning accessible through practical, constructionist approaches in cross-curricular applications. This particular work-in-progress paper reports on a comparative evaluation of a microworlds-based approach to teaching poetic verse in the subject domain of drama. A quasi-experimental design was used in order to measure performance gains in specific aspects of computational thinking and literacy development following the microworld-based intervention. Preliminary data reveals a higher improvement in performance but further qualitative data needs to be collected in order to provide further insight to support the quantitative findings.;2015
In the contemporary society, informatics plays a role similar to that played by mathematics in 19th and 20th centuries and the need of properly educating students in school to the scientific principles underlying information technologies is now widely recognized. In the spring of 2014 we decided with the Italian Ministry of Education, University, and Research to launch a project to change the way informatics is taught in primary and lower secondary Italian schools. We created a portal through which teachers could access the Code. org courseware and tools, and we produced additional material in Italian specifically designed. We framed the project to schools in term of learning computational thinking, to de-emphasize the technical and technological aspects of coding in favour of the logical ones and presented them at the end of September 2014. The response has been enthusiastic: at the end of November 2014 we reached more than 5.000 registered teachers and we had more than 80.000 students completing at least one hour of code.;2015
In this age of data-driven science and high-throughput biology, computational thinking is becoming an increasingly important skill for tackling both new and long-standing biological questions. However, despite its obvious importance and conspicuous integration into many areas of biology, computer science is still viewed as an obscure field that has, thus far, permeated into only a few of the biology curricula across the nation. A national survey has shown that lack of computational literacy in environmental sciences is the norm rather than the exception [Valle & Berdanier (2012) Bulletin of the Ecological Society of America, 93, 373-389]. In this article, we seek to introduce a few important concepts in computer science with the aim of providing a context-specific introduction aimed at research biologists. Our goal was to help biologists understand some of the most important mainstream computational concepts to better appreciate bioinformatics methods and trade-offs that are not obvious to the uninitiated.;2015
"In this chapter, we report two studies in which 3rd- and 4th-grade students used a distributed computing infrastructure (ViMAP-Tangible) in order to collaboratively invent mathematical machines for generating geometric shapes. ViMAP-Tangible combines the ViMAP visual programming language with a distributed computing infrastructure, in which students collaboratively control the behavior of a virtual agent using both mechanical devices and virtual algorithms. The curricular activities integrate engineering practices such as user-centered design; agent-based computer programming; mathematical reasoning about multiplication, rates, and geometry; and physical science concepts central to learning Newtonian mechanics. In Study 1, we investigate the key affordances of such a distributed computing environment for learning Integrated STEM, and identify the relationships between the various elements of students' physical constructions and computational models, and their STEM learning outcomes. Study 2 is a deeper investigation of the effect of iterative user testing on the refinement of children's designs and their STEM learning.";2015
In this paper a work related to using Web3D-based technology at k-12 levels and stimulating individuals' lifelong learning is presented. This work has addressed a gap on showing longitudinal investigation results referent to stimulating young children's lifelong learning with support of emerging digital technologies since k-12 levels and its impact on individuals' lifelong development. Based on qualitative data collected through action-research and ethnographic techniques in natural settings, a longitudinal investigation is described through a case study. It presents a former student's lifelong learning and professional development based on how he has used scientific knowledge integrated with computer science features such as interactive computer graphics and computer programming techniques and tools to create complex 3D digital environments' content (3DDE). As a qualitative result, with support of innovation diffusion theory, computational thinking, human computer interaction, and instructional scaffolding, this former student's trajectory has showed a potential for stimulating ones' lifelong learning and cognitive abilities enhancements through using Web3D technology. In addition, this work has brought about empirical possibilities for stimulating cross-disciplinary collaborative teachers' training and teaching in service based on diffusing advanced scientific and 3DDE knowledge with innovation and promoting sociotechnical development since k-12 levels.;2015
"In this paper we present CodeCraft, an educational video game we are developing to teach the fundamentals of computer programming. Similar to other educational tools such as Scratch, Alice, Project Spark, and Code Spells; CodeCraft provides users with an intuitive graphical interface for writing programs. However, CodeCraft is a video game that uses a problem-based learning approach in which players learn programming concepts by solving individual puzzles in an immersive 3D environment. Moreover, CodeCraft is intended to be an autonomous learning game that can be played without teacher support, thereby potentially reaching students in all economic, ethnic, and gender groups. Using an iterative development process and evidence-centered design, this work proposes to further develop CodeCraft and evaluate how it can improve performance in acquiring programming skills.";2015
In this study, we present the characteristic analysis of computational thinking (CT)-gifted elementary students in the fifth and sixth grade who participated in the gifted e-learning education. The students were able to upload their reports and questions on our smart learning system through a PC or smartphone and utilize the video chat facility so that video learning could be possible in real-time. Further, they were taught the CT learning phase of every 6 weeks in order to solve real-life problems and go through the discussing mission. The students were observed as having steadily improved their performance in the curriculum of a year (hereinafter referred to as an improvement group), and we want to focus on them to examine their characteristics. After the analysis, the correlation coefficient of the improvement group student is high, especially in tutoring education. They have been rated as excellent in interpersonal relationship ability with their mentor, who uploaded a lot of comments. They showed high motives of challenges, problem-solving skills and self-leading force. Also, the more the activities of these comments increases, the higher it is found that their self-esteem was developed. In addition, at the time of Scratch learning for CT ability, the result showed that immersive ability, creative problem-solving skills and interpersonal relationshipswere improved. In particular, compared to other students, they used the Remix features many times for collaboration with other students. Therefore, interpersonal relationship ability also improved.;2015
Instructional developers and others creating apps must choose from a wide variety of app development tools and technologies. Some app development tools have incorporated visual programming features, which enable some drag and drop coding and contextual programming. While those features help novices begin programming with greater ease, questions arise about the overall utility of visual tools for app development. Analyses and comparisons of app development tools and technologies would make their advantages and disadvantages apparent, enabling instructional technologists to make informed decisions about tool selection. Toward that end, this work generated a new framework for comparing app development tools. The criteria that comprise the framework were then used to compare multiple authoring tools and technologies for creating apps. Three app development tools, namely Corona, LiveCode and MoSync, emerged as particularly noteworthy for their utility and flexibility, and because they are free of monetary cost or have a free version.;2015
Introduction to Computing is a public course for the first-year non-major undergraduate students, aiming at training students for the abilities in computer science and technology with computational thinking. However, as new computer technologies emerge continuously and rapidly, it is required for this course to accommodate more and more knowledge. Therefore the teaching contents are growing enormously, which makes it very difficult to cover all of them in limited hours, and therefore sets an obstacle in understanding computing principles and building up a clear and general picture of computing, especially for non-major students. As computer science and technology are becoming more and more essential for various disciplines and majors, it is urgent for the education community to find out an effective and propagable way to solve this problem. In this regard, we employ virtual reality technology to the experiment teaching of this course, and have developed 18 virtual experiments to support the whole teaching process. For example, Turing machine is a basic model for computer science and technology. However, since it is not a real machine, it is not easy for the students to imagine the working process of Turing machine and understand the related concepts. Another example, the execution of an instruction is very important to understand the principles of computer organization. However, as the information flow is invisible, it is difficult and time-consuming for the teachers to explain how an instruction is executed inside a computer. Therefore, 3D modeling and animation techniques are used to demonstrate the invisible micro-structure of computers, and human-machine interaction and visualization techniques are used to present the internal process of information evolution, thus constructing a complete virtual experiment system of this course, including demonstration experiments, verification experiments and interaction experiments. Our virtual experiments have applied software copyrights and served more than 12,000 students from five universities of China since 2013. The evaluation demonstrates that the virtual experiments have produced excellent results in both teaching effectiveness and learning efficiency, relieved the conflicts between limited hours and vast knowledge, and helped students understand and build up the knowledge of computing.;2015
It has been recently recognized that computational thinking and problem solving are fundamental cross-disciplinary skills that can be effectively developed by facing simple programming challenges. Cloud-based visual programming platforms and playful massive open online courses have lowered access barriers and supported worldwide computer literacy campaigns targeting not only IT-gifted pupils, but neophytes of any age regardless of their aptitudes and dreams. Giving to everyone the opportunity to think like a programmer has become a priority for many governments, inducing for the first time education ministries to officially invite schools to leverage freely available online resources in order to speedup the process and achieve early results without waiting for a full fledged reform of curricula. In this scenario, digital divide risks to cause serious discrimination due to the lack of suitable Internet access infrastructures and computation equipment, to the adverse socio-economic conditions, to the cultural background, and to the language barriers. This paper presents a new method that makes use of special playing cards inspired to the building blocks of visual programming tools to enable unplugged coding experiences. Language neutrality is achieved by making use of evocative symbols in place of words. The same cards can be used to create many different games belonging to two main categories: board games and spatial games. Two target groups have been chosen to test the inclusiveness and the engagement capabilities of the proposed method: primary schools affected by digital divide issues, and multiethnic groups of asylum seekers and refugees. The paper presents the proposed methodology and reports the results of the first field trials.;2015
"It is well established in the scientific literature that global human civilization is in serious ecological trouble. The most comprehensive survey is perhaps that of the Planetary Boundaries framework (Rockstrom et al., 2009). The unfolding of these challenges will, of course, be a very complex process; and some detailed impacts are certainly still open to significant human management and moderation. Nonetheless, it seems clear that we are no longer dealing with a problem, or even set of problems, that might be solved; rather, this is a predicament - an uncertain, dynamic, and at least partially chaotic, disruption in global human development (Gilding, 2012). A predicament calls not for solution, but for engagement, and continuous, long term, refinement of response. The purpose of this contribution is to propose a particular educational (curricular and pedagogic) response: one that specifically draws on the tools, techniques and understandings of the field of Artificial Life. In recent decades, the mission of university education, at least in public universities, has become progressively identified simply with the direct support of economic development in its sponsoring regional community. That is, its primary role is to provide graduates with just the knowledge and skills most immediately aligned with the preceived needs of the regional economy. There is a perfectly clear logic and rationale to this development; but in a world faced with global ecological disruption, within the lifetimes of current students, this is neither an honest nor even an effective preparation for the challenges which they will face. Moreover, given that even limited moderation of the impending impacts of ecological limits will rely on the widest societal understanding and deeply informed and engaged leadership at all levels, it is arguable that universities have an immediate, and potentially decisive role to play in communicating the realities of the current global ecological situation. And so, to Artificial Life; or more precisely, to Artificial Ecology. The use of computational tools to model complex biological, evolutionary, ecological and social dynamics is a foundational technique in the ALife field. Indeed, computational thinking and modelling was at the heart of the systems dynamics approach to socio-ecological modelling pioneered by Forrester (1982). This provided the basis for the famous (or infamous?) Limits to Growth (LTG) project of the Club of Rome (Meadows et al., 1972). This was the first substantive attempt to computationally model the socio-ecological dynamics of global human society and assess whether ecological impacts would be likely to limit the growth of human material activities within any practically foreseeable time-frame. While the model was necessarily crude, the robust result was that - in the absence of effective control measures to the contrary - serious limits would become apparent within the first half of the 21st century. In the 40 years since, the world has tracked remarkably close to the standard run of the LTG study (Turner, 2014). In fact, multiple lines of investigation now strongly suggest not just that aggregate human activity is approaching ecological limits, but that it has already reached a state of significant overshoot beyond those limits. Overshoot is a qualitatively distinct regime for the design and operation of any adaptive or mitigating interventions (Catton, 1982). Effective societal responses to date have been significantly impaired by a lack of wide understanding of this harsh ecological reality. This gap in understanding facilitates the comforting - but erroneous - notion that it is prudent to delay difficult responses until after impacts are manifest. But delay is precisely one of the principle mechanisms that actually causes overshoot, and undermines the capability to damp the subsequent crash. Accordingly, it is suggested that there is now a clear need to develop what is here termed an overshoot curriculum, and to integrate this with formation of graduates in all disciplines. Further, a key pedagogical technique in delivering such a curriculum will be the systematic use of computational model ecologies. The Alife community is therefore uniquely positioned to contribute to this radical reform of higher education to meet what are, without exaggeration, the most profound challenges in the history of human civilization.";2015
It is widely accepted that developing the ability to solve problems is essential. Computational thinking is based on problem solving using basic concepts of computing. An introductory course to programming is a direct way to develop the ability to solve problems using computer concepts. This paper presents our thinking about initiating students into the field of computer programming. This work does not detail the contents to be taught, but focuses on methodological aspects, including experiences and specific examples, which are general and extensible to any programming course. Although programming languages are been developed to be increasingly closer to human language, computer programming using formal languages is not intuitive and easy to be understood by our students. It may seem a simple task for an experienced programmer, but it is not for a neophyte. Moreover, mastering the art of programming is complex. For this reason it is essential to use all possible techniques and tools that facilitate this work.;2015
Jeannette Wing's seminal computational thinking (CT) paper, published in 2006, set forth CT as not just a way of looking at computational problems, but as an alternative approach to solving everyday problems. We strongly support Wing's assertion. Accordingly, we report the results of our meta-analysis of CT curricular implementations since 2006. Our principle interest is in CT framings and implementations for K-12 audiences in disciplines other than computer science, thus fulfilling the broad appeal and utility originally prescribed by Wing. We break CT down into its constituent characteristics, and split these characteristics into two principle groups: mechanistic (inextricably tied to and limited by computer science) and humanistic (separable from and adaptable beyond computer science). We use this conceptual bifurcation as a basis for selecting and analyzing implementations of CT for subsequent reporting. We summarize our CT meta-analytical results by distributional themes including grades, disciplinary foci, equity groups, and programming paradigms. In conclusion, we make recommendations for improving K-12 CT curricular implementations. Our hope is that utilization of CT characteristics and principles will become more commonplace in public education, be utilized more continuously through primary and secondary grades, and be inventively applied across a more inclusive range of academic disciplines.;2015
Learning to program in computer code has been considered one of the pillars of contemporary education with benefits that reach well beyond the skills required by the computing industry, into creativity and self-expression. Nevertheless, the execution of computer programs usually takes place on a traditional desktop computer, which has a limited repertoire of input and output interfaces to engage with the user. On the other hand, pedagogy has emphasized that physical representations and tangible interactive objects benefit learning especially for young students. In this work, we explore the benefits of learning to code for ubiquitous computers, such as robots and wearable computers, in comparison to programming for the desktop computer. For this purpose, thirty-six students participated in a within groups study that involved three types of tangibility at the target computer platform: 1) desktop with Scratch, 2) wearable with Arduino LilyPad, and 3) robotic with Lego Mindstorms. Regardless of the target platform, we employed the same desktop visual programming environment (MIT Scratch, Modkit and Enchanting) and we measured emotional engagement and assessed students' programming skills. We found that students expressed more positive emotions while programming with the robotic rather than the desktop computer. Furthermore, tangible computing platforms didn't affect dramatically students' performance in computational thinking.;2015
Merging computational thinking and an embodiment-centered curriculum, VEnvI (Virtual Environment Interactions) seeks to expand the professional and academic possibilities for K-12 students through opening up pathways that synthesize knowledge across and through digital media, computer science, and the arts. This paper presents findings from a case study research intervention with 5 th grade students at an arts magnet school in a small urban municipality in the Southeastern United States. This research iteration is part of a larger, ongoing design-based research project, pioneering the design, development, and testing of a virtual environment and associated curriculum for blending creative movement and computer programming for upper elementary and middle school students. After conducting quantitative and qualitative analysis, researchers found students' computational knowledge improved through their engagements in a constellation of multimodal literacy practices (Steinkuehler, 2007, n.p.) during the process of choreographing and programming a complimentary virtual character's movements based on a 5 th grade biology standard about cells.;2015
Microsoft's Kodu is a visual programming environment for children inspired by robotics rule-based formalism to specify behaviors. The reactive nature of this approach means that systems just react to what they are currently sensing, they do not need to have a perfect model of the world, and they can easily respond to external changes in the world. This resilience makes behavior-based systems perfect for real world robotics use. When developers chose this approach for Kodu, the hope was that this resilience would help minimize the potential frustration of young users. This paper introduces the Kodu developers' strategy, results and future plans in developing a user-friendly programming environment that successfully introduces children in a fun and easy way to the fundamental concepts of computer science and computational thinking.;2015
One of the barriers to entry of computer programming in schools is the lack of tools that support educators in the assessment of student projects. In order to amend this situation this paper presents Dr. Scratch, a web application that allows teachers and students to automatically analyze projects coded in Scratch, the most used programming language in primary and secondary education worldwide, to check if they have been properly programmed, learn from their mistakes and get feedback to improve their code and develop their Computational Thinking (CT) skills. One of the goals of Dr. Scratch, besides supporting teachers in the evaluation tasks, is to act as a stimulus to encourage students to keep on improving their programming skills. Aiming to check its effectiveness regarding this objective, workshops with students in the range from 10 to 14 years were run in 8 schools, in which over 100 learners analyzed one of their Scratch projects with Dr. Scratch, read the information displayed as feedback by Dr. Scratch, and tried to improve their projects using the guidelines and tips offered by the tool. Our results show that at the end of the workshop, students increased their CT score and, consequently, improved their coding skills.;2015
Policy innovation labs are emerging knowledge actors and technical experts in the governing of education. The article offers a historical and conceptual account of the organisational form of the policy innovation lab. Policy innovation labs are characterised by specific methods and techniques of design, data science, and digitisation in public services such as education. The second half of the article details how labs promote the use of digital data analysis, evidence-based evaluation and 'design-for-policy' techniques as methods for the governing of education. In particular, they promote the 'computational thinking' associated with computer programming as a capacity required by a 'reluctant state' that is increasingly concerned to delegate its responsibilities to digitally enabled citizens with the 'designerly' capacities and technical expertise to 'code' solutions to public and social problems. Policy innovation labs are experimental laboratories trialling new methods within education for administering and governing the future of the state itself.;2015
Research on digital' journalism has focused largely on online news, with comparatively less interest in the longer-term implications of software and computational technologies. Drawing upon a 6-year study of the Toronto Star, this article provides an account of TOPS, an in-house web content management system which served as the backbone of thestar.com for 6 years. For some, TOPS was a successful software innovation, while for others, a strategic digital property'. But for most journalists, it was slow, deficient in functionality, aesthetically unappealing and cumbersome. Although several organizational factors can explain TOPS' obstinacy, I argue for particular attention to the complex ontology of software. Based on an outline of this ontology, I suggest software be taken seriously as an object of journalism, which implies acknowledging its partial autonomy from human use or authorization, accounting for its ability to mutate indefinitely and analysing its capacity to encourage forms of computational thinking'.;2015
Scientific literacy in science education can be improved through the process of scientific knowledge formation and a series of inquiry process, such as having a question to a phenomenon and forming a problem, designing an experiment by analyzing models for the problem solving, and preparing evidences with the experiment results and discussing to find the answer. These activities were organized and proposed as eight practices of Science and Engineering by NRC. Among eight science practices, 5th practice is related to computational thinking, and the term of computational thinking is also uprising concepts in computer education. Yet, these two concepts are relatively new to many teachers. Thus, in this research, the authors attempted to find relationship between 5th science practice and nine computational thinking concepts. The survey result found that science teachers and computer teachers were sharing similar visions in terms of relevancy of computational thinking concepts on 5th science practice.;2015
Society and Economy demand skilled professionals in technological industries. There is a current paradox in countries with a high rate of unemployment consisting in unfilled positions for engineers and technicians for the industry and digital services. This has sensitized managers and institutions to address the problem from the point of view of training. There is a new literacy, the digital literacy, and as such we must begin teaching it from the earliest stages of individual development, as well as with other key skills: reading, writing and Math skills. The most frequent approach to teaching digital literacy has been to gradually encourage the learning of programming. It usually consists in teaching children programming tasks, from the simplest and most entertaining to the most complex. But one can raise the question in a different way: The powers of encoding are the most visible part of a way of thinking that is valid not only in the field of mental activity, which supports the development and creation of programs and systems. There is a specific way of thinking, to organize ideas and representations, which is fertile ground and favors computational skills. It is a mindset that leads to the analysis and the relationship of ideas to the organization and logic representation. Those skills favor certain activities and certain learning environments from the early stages. It is the development of a specific way of thinking: computational thinking. In this paper we review forms of thinking which have emerged and have been studied as useful to this way of thinking and problem solving in this cognitive domain. We state they can provide a basis for future development of contents in a curriculum which can be applied to different types and levels of education, as well as to train teachers and professors applying computational thinking.;2015
Tablets, such as the iPad and Kindle, provide a portable platform for children of all ages to explore various content through apps and interactive books. The use of gestures provides a means of interaction that is intuitive to children as a means of navigating apps or activating media-based content. The tablet as a programming platform is unique in that the gesture-based skills used in other apps are extrapolated and applied to computational thinking skills and interaction with a robot, which maneuvers based on the child's creation. This paper describes the workflow and user interface design to facilitate Lego Mindstorms NXT programming by children.;2015
Teaching students how to code in K-12 classrooms is considered as one of the major keys to promoting engineering education in the future, which can potentially enhance the competency and computational skills of students to adhere better learning outcomes in higher education. The success of promoting coding education or integrating it into school curriculum depends on the perceptions of teachers and headmasters in schools, and how well they believe on coding education and prepare for the innovative teaching and learning. In this exploratory research study, it reports the results of a large-scale quantitative questionnaire surveying 42 primary and secondary schools (n = 42) in Hong Kong, where computer programming has not been regulated as a compulsory course in K-12 curriculum. The questionnaire aims to investigate the school belief on coding education and their practical challenges while integrating it into their regular school curriculum. Our results show that there is a trend in the local schools promoting coding education with positive perceptions on teaching and learning. However, teaching challenges are also mentioned in the survey waiting for solutions, such as lack of teachers training and unified curriculum. Therefore, the empirical experiences of these schools have set forth the future research direction in design and implementation of coding education in K-12 classrooms not only in Hong Kong but also in the globe.;2015
The aim of this study is to present an approach to the introduction into pipeline and parallel computing, using a model of the multiphase queueing system. Pipeline computing, including software pipelines, is among the key concepts in modern computing and electronics engineering. The modern computer science and engineering education requires a comprehensive curriculum, so the introduction to pipeline and parallel computing is the essential topic to be included in the curriculum. At the same time, the topic is among the most motivating tasks due to the comprehensive multidisciplinary and technical requirements. To enhance the educational process, the paper proposes a novel model-centered framework and develops the relevant learning objects. It allows implementing an educational platform of constructivist learning process, thus enabling learners' experimentation with the provided programming models, obtaining learners' competences of the modern scientific research and computational thinking, and capturing the relevant technical knowledge. It also provides an integral platform that allows a simultaneous and comparative introduction to pipelining and parallel computing. The programming language C for developing programming models and message passing interface (MPI) and OpenMP parallelization tools have been chosen for implementation.;2015
The Bebras is an international large scale contest that aims to motivate children for engaging in Computer Science. In this paper we present an investigation of the psychometric factors that determine the success in this contest, e.g. abilities in Computational Thinking or intelligence factors. For this purpose, we looked for subsets of Bebras questions that are requiring joint psychometric constructs, according to the responses of the test persons, applying latent trait analysis on all combinations of questions. After identifying suitable sets of questions, we tested the fit of the mono-parametric Rasch Model and evaluated the distribution of person parameters. Additionally, the identified sets of questions were analyzed by qualitative methods to find out the nature of these common psychometric constructs. As a test bed for feasibility studies, we have chosen the Bebras Contests of Germany 2009. We have found and analyzed several sets of questions that met our requirements, analyzed the questions, and identified differences in the performance of boys and girls in these sets.;2015
The computational thinking is the current international computer widely attention an important concept, is also the current computer education need to key research important topic. Computer industry at home and abroad in the field of philosophy and social science and the general scholars on this subject has carried on the extensive research and discussion. In this paper, the formation and development of computational thinking process has carried on the comprehensive analysis, to study the forming characteristics of computational thinking, focus on key content, summarizes the common patterns of computational thinking in combination with the existing research results and the research direction and its computational thinking is prospected in the face of challenges.;2015
The core value of University Computer curriculum is to cultivate the common sense of students' computational thinking guided by computational thinking on the university computer curriculum reform. How to cultivate computational thinking? What should be explained during the university computer course? What do students of non-computer majors' demand for the computational thinking? According to these questions, this paper clarifies the core of computational thinking from the developments of computing technique and computing system. Meanwhile, the knowledge space that university computer will face with is showed in the paper. And through the analysis of the future demands for computational thinking of students who are not majoring in computers, this paper shows a solution of university computer curriculum reform.;2015
The difficulty of students in learning logic and programming languages leads the research of technological solutions to assist in the teaching-learning process. Among these solutions, two common approaches are robotics and graphical-based programming languages. Researches indicate that these tools can aid learners to think systematically and develop computational thinking. Therefore, this work proposes the Coffee Platform, which is composed by a Web-based block programming environment and a smartphone as a robot controller unit. This platform can be expanded to work with various mobile devices and robotic kits. The Coffee Platform was applied in a classroom with the aim of assessing the tool and its effects over students' motivation. Results indicate that the proposed solution can serve as a stimulus for students and assist in understanding programming concepts.;2015
The EarSketch computer science learning environment and curriculum (http://earsketch.gatech.edu) seeks to increase and broaden participation in computing using a STEAM (STEM + Arts) approach. EarSketch creates an authentic learning environment in that it is both personally meaningful and industry relevant in terms of its STEM component (computing) and its artistic domain (music remixing). Students learn to code in JavaScript or Python, tackling learning objectives in the Computer Science Principles curricular framework as they simultaneously learn core concepts in music technology. They create music through code by uploading their own audio content or remixing loops in popular genres created by music industry veterans. No prior experience in music or computer science is required. EarSketch is entirely browser-based and free.;2015
The fast pace of change in high technology product development requires high flexibility and adaptation in product design and technology management. Within this context, appropriate learning environments are planned to shape future Information and Communication Technology staff in such a way they could get able to keep up with new trends and innovations. A constructivist educational model based on Active Learning represents a step towards this vision for staff training. This paper deals with a new organization of a 13 weeks course based on the inverted class model, where students are introduced to the problem-posing domain by a direct involvement of enterprises, which participate specifically to the problem definition and assessment phases. In the case study shown, students simulate a production business unit in all the phases that characterize the product/service development life cycle. A mixed traditional and company-based organization of the course is supposed to improve students competences by proposing solutions leveraging on appropriate tools taken from traditional experiences and also gaining benefits from a learning-by-doing approach that encourages the use of state-of-the-art solutions. A preliminary study is performed to see how expected professional competences are met during the course, with the additional goal of collecting indications that could help to improve the learning framework for future editions of the course.;2015
The first regular informatics lessons in schools in Poland were organised in the second half of the 1960'. Some of them were devoted to programming a mainframe computer (in Wroclaw) and some to theoretical models of computers and computations (in Warsaw). Then, for more than last 30 years of formal informatics education in Poland we have been very successful in keeping informatics (as computer science) as a stand-alone subject and in shaping its curriculum according to high standards of the discipline. In this paper, in Section 1 we first discuss terminology related to computers in education and then report on early history of informatics education in Poland. In Section 2, the present curriculum of informatics subjects is described in details together with some comments on using computational thinking in its implementation. Then, as the main contribution of this paper we introduce in Section 3 a new computer science curriculum for all school levels in Poland. To this end, the existing curricula of informatics subjects have been remodeled, extended (e.g. by adding programming to each level), and unified according to the five Unified aims of learning computing. The new curriculum benefits very much from our prior curricula and experience. Finally we discuss some implementation details, supporting activities, and the road map for a successful introduction of the curriculum to all schools.;2015
"The focus of this research was to create and test an introductory computer science course for middle school. Titled Foundations for Advancing Computational Thinking (FACT), the course aims to prepare and motivate middle school learners for future engagement with algorithmic problem solving. FACT was also piloted as a seven-week course on Stanford's OpenEdX MOOC platform for blended in-class learning. Unique aspects of FACT include balanced pedagogical designs that address the cognitive, interpersonal, and intrapersonal aspects of deeper learning; a focus on pedagogical strategies for mediating and assessing for transfer from block-based to text-based programming; curricular materials for remedying misperceptions of computing; and systems of assessments (including formative and summative quizzes and tests, directed as well as open-ended programming assignments, and a transfer test) to get a comprehensive picture of students' deeper computational learning. Empirical investigations, accomplished over two iterations of a design-based research effort with students (aged 11- 14 years) in a public school, sought to examine student understanding of algorithmic constructs, and how well students transferred this learning from Scratch to text-based languages. Changes in student perceptions of computing as a discipline were measured. Results and mixed-method analyses revealed that students in both studies (1) achieved substantial learning gains in algorithmic thinking skills, (2) were able to transfer their learning from Scratch to a text-based programming context, and (3) achieved significant growth toward a more mature understanding of computing as a discipline. Factor analyses of prior computing experience, multivariate regression analyses, and qualitative analyses of student projects and artifact-based interviews were conducted to better understand the factors affecting learning outcomes. Prior computing experiences (as measured by a pretest) and math ability were found to be strong predictors of learning outcomes.";2015
The growth of employment opportunities in the information technology sector and the shortage of well-trained professionals in this field are a recurring theme in recent years in both Europe and North America. In this sense, research studies that analyse the causes of the reduction of students who are interested in computer science mainly point to young people being unaware of the type of tasks computer scientists perform. Therefore, in order to try to reverse this trend many types of initiatives have been organized seeking to bring the world of computing to children and adolescents. In the same vein, the main objective of the Europe Code Week, an initiative which was held in parallel in 38 countries and in which more than 100,000 people participated, is to show the beauty and fun associated with programming as a means of attracting young people to computer science to get endow the European labour market with well-trained professionals who are required in this field. In this paper, in addition of presenting the goals and most relevant facts of this initiative, its relationship to other similar research work is analysed, the lessons learned after its first two iterations are shared, and suggestions to improve future editions are made, with special focus on improve the possibilities of assess its impact and results more accurately.;2015
The H1N1 pandemic of 2009 and the ongoing Ebola outbreak in West Africa serve as a reminder of the social, economic and health burden of infectious diseases. The ongoing trends towards urbanization, global travel, climate change and a generally older and immuno-compromised population continue to make epidemic planning and control challenging. Recent quantitative changes in high performance pervasive computing have created new opportunities for collecting, integrating, analyzing and accessing information related to large urban social systems, disease surveillance and global logistics and supply chains. The advances in network and information science that build on this new capability provide entirely new ways for reasoning and controlling epidemics. In this talk I will overview of the state of the art in computational networked epidemiology with an emphasis on computational thinking and on the development of high performance computing oriented decision-support environments for planning and response in the event of epidemics. I will describe how such systems can be used to support near real-time planning and response during the 2009 H1N1 swine flu and the recent Ebola Outbreak in West Africa. Computational challenges and directions for future research will be discussed.;2015
The importance and application of computational thinking, a problem solving process of computing science, has grown in the last years. This results from its major impact on a variety of fields of knowledge due to the thinking and problem solving competences included, e.g. modeling. In the educational area, the concept and technique of modeling can be used by teachers of any subject in order to provide a new and innovative access to visualize states, processes, relationships, vocabulary etc. There is an essential reason for why this concept should be used in teaching especially foreign languages. Pisa studies have shown that students nowadays lack the skills to understand the main messages of written texts. They struggle with basic structures, and therefore, are not able to select between major and minor arguments in a text. The idea of modeling opens them a new way of analyzing and understanding problems and contexts as well as a tool for their visualization. But how exactly can this concept help teachers to convey their knowledge as well as support students to gain knew information? A model is a simplified representation of the reality, hence, modeling means representing and visualizing essential aspects of real situations, processes etc. In a wider sense, the concept of modeling is used also in foreign language lessons when summarizing a text. This task can be supported by modeling techniques from computer science like UML (Unified Modeling Language) or entity relationship diagrams, which originally visualize the structure of databases. Modeling techniques may support recognizing and identifying structures as well as relations between words and sentences. In this paper we concentrate on one modeling technique: entity-relationship diagrams. We demonstrate how they can be introduced in English as a foreign language in order to support students of lower secondary schools in text comprehension. It is of paramount importance for these young students to understand the basics of how the English language is structured. As a result, we assume that using modelling techniques may raise the awareness for textual relationships and students will be more successful in text comprehension as well as text writing. The first step to verify this hypothesis is to check how modeling techniques can be introduced in the context of language learning. This paper reports on the first workshops, the created models as well as on the students' and teachers' experiences and feedback.;2015
The latest concept evolving in pedagogy is flipped class room where class room is utilized for active learning by students with their peers and faculty. This necessitates development of new syllabus and pedagogy for each subject for class room activities. This paper attempt to propose spreadsheet based experiments in linear algebra that can be used to learn many abstract concepts that are very important for mastering many engineering disciplines. There is vast amount of evidence showing that the computational experiments support active learning and develop exploratory and inventive skill of students.;2015
The Next Generation Science Standards (NGSS) that have been recently developed in the United States, integrate learning across three-dimensions (disciplinary content, science and engineering practices, and crosscutting concepts). The NGSS are written as a set of Performance Expectations (PEs) that integrate the three dimensions into a set of PEs against which student performance is to be assessed. One of the science practices is Mathematical and Computational Thinking, and it explicitly includes student development and use of computational models in science. In this presentation I will discuss the structure of the NGSS, and focus on the Mathematical and Computational Thinking practice. I will illustrate how this is combined with a variety of disciplinary content and crosscutting concepts. I will also illustrate what is meant by computational models in the NGSS by examining observable features of a student performance that indicate whether a student has met the PE or not.;2015
The optimal paradigm and systematic solution to scheduling and decision-making for container terminal logistics systems (CTLS) have been scarce owing to their high nolinear and complexity and the strong coupling and randomness. In this paper, the concept of computational logistics for CTLS is proposed above all, and then the instruction sets, resource constraints, and operating environments for CTLS abstract machines are defined on the basis of the similarities and differences between computer systems and CTLS. Subsequently, CTLS are discussed from the perspective of asymmetric single-ISA multi-core processors (AMP) in detail within the conceptual framework of computational logistics and generalized computing. Consequently, a container terminal computational logistics model is presented with computing architecture and central properties of AMP. Finally, the proposed approach is demonstrated and validated by investigating through capacity, task latency and load balancing of a typical container terminal logistics service case with a comprehensive scheduling algorithm that is a composite of multifarious classical decision thinking and algorithms.;2015
The past decade has seen a rapid increase in the ability of biologists to collect large amounts of data. It is therefore vital that research biologists acquire the necessary skills during their training to visualize, analyze, and interpret such data. To begin to meet this need, we have developed a boot camp in quantitative methods for biology graduate students at Harvard Medical School. The goal of this short, intensive course is to enable students to use computational tools to visualize and analyze data, to strengthen their computational thinking skills, and to simulate and thus extend their intuition about the behavior of complex biological systems. The boot camp teaches basic programming using biological examples from statistics, image processing, and data analysis. This integrative approach to teaching programming and quantitative reasoning motivates students' engagement by demonstrating the relevance of these skills to their work in life science laboratories. Students also have the opportunity to analyze their own data or explore a topic of interest in more detail. The class is taught with a mixture of short lectures, Socratic discussion, and in-class exercises. Students spend approximately 40% of their class time working through both short and long problems. A high instructor-to-student ratio allows students to get assistance or additional challenges when needed, thus enhancing the experience for students at all levels of mastery. Data collected from end-of-course surveys from the last five offerings of the course (between 2012 and 2014) show that students report high learning gains and feel that the course prepares them for solving quantitative and computational problems they will encounter in their research. We outline our course here which, together with the course materials freely available online under a Creative Commons License, should help to facilitate similar efforts by others.;2015
The phenomenon of Big Data is creating a need for research perspectives that blend computational thinking (with its focus on, e.g., abstractions, algorithms and scalability) with inferential thinking (with its focus on, e.g., underlying populations, sampling patterns, error bars and predictions). Database researchers and statistical machine learning researchers are centrally involved in the creation of this blend, and research that incorporates perspectives from both databases and machine learning will be of particular value in the bigger picture. This is true both for methodology and for theory. I present highlights of several research initiatives that draw jointly on database and statistical foundations, including work on con-currency control and distributed inference, subsampling, time/data tradeoffs and inference/privacy tradeoffs.;2015
The present paper focuses on the research carried out with students in the first semester of the Computer Science Degree, at the Faculty of Philosophy, Letters and Education Sciences of Ecuador Central University, seeking to analyze the utilization of non-symbolically mediated programming environments as a teaching tool for the development of computational thinking. The aim sought is to identify the potential advantages of applying the aforesaid non-symbolically mediated programming environments for students to develop computational thinking skills such as creativity, modeling and abstraction, amongst others, which are important in programming. The research was supported on a mixed methodology, with field research and documentary research at a descriptive level. A questionnaire served to collect data from the Degree students. Finally, after gathering all the information, data processing took place following descriptive statistics criteria through which conclusions and recommendations can be reached.;2015
The Project PP&S, Problem Posing & Solving, is part of a set of initiatives promoted by the General Directorate of the Italian Ministry of Education, Research and University, aimed to support the many innovations in the High School. Its main goal is to enhance teaching and learning Mathematics and Informatics using new methodologies and technologies, like an e-learning platform integrated with an Advanced Computing Environment and with a web conference system. This integrated environment makes available to teachers and students a powerful set of features for collaborative learning, e-tutoring and e-assessment.;2015
The purpose of this study is to design a computational thinking curriculum standard for K-12 education. The Delphi technique was employed to collect different views and derive consensus from a panel of thirteen experts, including computer scientists, computer science educators, K-12 computer teachers, and industry experts. The first draft of Delphi survey questionnaire, consisting of nine themes (problem solving, problem decomposition, algorithms, data representation, data analysis, modeling and simulation, abstraction, automation, and others) and 60 competence indicators, was developed based on our investigation of the nature of CT (Computational Thinking). After three rounds of survey and a final round-table discussion, the expert panel derived 49 essential competence indicators (thirteen for grades K to 6, nine for grades 7 to 9 and twenty seven for grades 10 to 12) and eight optional competence indicators (one for grades 7 to 9 and seven for grades 10 to 12). According to the results, the core ability and training of computational thinking are different in grades. In grades K to 6, students develop logical thinking and problem solving skills in personal and family life. In grades 7 to 9, students must understand the basic concepts of programming and write basic programs. Finally, in grades 10 to 12, they will use high-level skills to apply the concepts of abstraction, modeling, and structured problem decomposition to solve problems in different fields. The results serve as useful references for developing Taiwan's new K-12 computing curriculum.;2015
The purpose of this study was to investigate how elementary school teachers with limited computer science experience in a high-need school integrated computational thinking into their instruction. The researchers conducted a cross-case analysis across different instructional contexts (e.g., general education classrooms, library, art) that included multiple observations and interviews over four months. Major themes included: (a) a wide range of implementation models emerged depending on teaching contexts, (b) ongoing professional development and embedded coaching resulted in increasing participation in computing education, (c) teachers and administrators viewed barriers to implementing computing from a problem solving framework, and (d) struggling learners, including students with disabilities and those living in poverty, benefitted from computing education that included scaffolding, modeling, and peer collaboration. (C) 2014 Elsevier Ltd. All rights reserved.;2015
The recent inclusion of computational skills in core curriculum by governments in the UK and Australia, has been linked to industry calls for schools to better equip young people with capabilities and dispositions aligned with needs of future high-tech industries and rapidly changing workplaces. This move has stimulated much interest in New Zealand, and while lacking any compulsory curriculum mandate, many teachers in K-12 classrooms are exploring the potential of coding tasks for developing computational skills as part of their mathematics, science and technology curricula. This paper reports findings from a study that used a unique data capture app embedded in iPads to record 9&10 year old students while they used two apps of very different designs for coding tasks. Using Studiocode video analysis software, data were analysed using a framework developed from Brennan and Resnick's [1] three dimensions of computational thinking, to learn more about how these apps constituted useful environments for developing computational thinking. Results suggest that coding apps of a 'teaching' design complement apps where computational concepts and practices are applied to project creation, and indeed may be more efficient if the desired outcome specifically targets the learning of concepts. Implications for teachers exploring coding apps for computational thinking development are drawn.;2015
The systematic solutions to planning and scheduling for container terminal logistics systems (CTLS) have been scarce owing to their high complexity and strong randomness. This paper extended the past research on modeling CTLS with computer composition principles and architecture. The comparability and the further mapping relationships between CTLS and multi-processor system-on-chip (MPSoC) were discussed at great length within the theoretical viewpoints of computational thinking. Whereafter a container terminal logistics computational architecture was put forward for scheduling and execution using the perspective of MPSoC, which was established on the conceptual framework and fundamental principles of distributed, parallel, and cooperative computing in essence. Finally, the approach was demonstrated by investigating the stress testing, load balancing and process behavior of a typical container terminal logistics service case in contrast with the previous work based on the comprehensive computational experiments.;2015
"The term computational thinking (CT) has been in academic discourse for decades, but gained new currency in 2006, when Jeanette Wing used it to describe a set of thinking skills that students in all fields may require in order to succeed. Wing's initial article and subsequent writings on CT have been broadly influential; experts in computational thinking have started developing teaching and leadership materials to support integration of CT across the K-12 curriculum. Despite interest at the K-12 level, however, outside of computer science and other science, technology, engineering and mathematics (STEM) fields there has been less interest in -and research conducted on- the potential of CT in higher education. The purpose of this paper is to review the current state of the field in higher education and discuss whether CT skills are relevant outside of STEM fields.";2015
The Testing Algorithmic and Application Skills (TAaAS) project was launched in the 2011/2012 academic year to test first year students of Informatics, focusing on their algorithmic skills in traditional and non-traditional programming environments, and on the transference of their knowledge of Informatics from secondary to tertiary education. The results of the tests clearly show that students start their studies in Informatics with underdeveloped algorithmic skills, only a very few of them reaching the level of extended abstract. To find reasons for these figures we have analyzed the students' problem solving approaches. It was found that the students, almost exclusively, only consider traditional programming environments appropriate for developing computational thinking, algorithmic skills. Furthermore, they do not apply concept and algorithmic based methods in non-traditional computer related activities, and as such, mainly carry out ineffective surface approach methods, as practiced in primary and secondary education. This would explain the gap between the expectations of tertiary education, the students' results in the school leaving exams, and their overestimation of their knowledge, all of which lead to the extremely high attrition rates in Informatics.;2015
There has been a well-documented and persistent drop in the number of women in computer science and engineering courses [1]. Young peoples' decisions about participation often start early and have been linked to particular experiences [2]. For some young people, these experiences are less than encouraging. In the US, high school computer science courses are overwhelmingly male dominated [3]. Schools serving minority students and those from lower socioeconomic backgrounds often struggle to even offer such classes [4]. Even when opportunities exist, many girls and underrepresented populations face barriers such as negative stereotypes and dearth of role models and community [5]. The Digital Youth Divas program was created to address these issues through intentional design. The program is developed to trigger situational interest [6] in girls through a combination of community, project-based instruction, on-and offline learning spaces, and narrative stories. Triggered situational interest is critical as an opening to move on to subsequent phases that are more independent of environmental factors. Understanding potential effective triggers for girls, minorities, and youth from lower socioeconomic backgrounds is critical to engaging such populations in STEM learning. ( 1) Community: Middle school girls interested in fashion and design are recruited, especially from areas that have traditionally been underserved. Adult mentors who are not engineers, but share cultural connections with the girls and have gone through curriculum and pedagogical training, attend to specific practices of encouraging, helping to troubleshoot, and developing community. ( 2) Project-based instruction: The program combines principles of fashion, design, and dance with the power and possibilities of electronic circuits and programming to develop interactive e-fashion projects and virtual programmed choreographies. Scaffolded challenges work through stages of design and computational thinking, including paper prototyping, implementation, feedback, and revision. ( 3) Integrated on and offline learning spaces: Girls work through projects in a shared physical space using supplied materials. An online system, iRemix, is the mechanism for independent work and leveling up. ( 4) Interactive narrative stories: Narratives can provide context that helps relate abstract concepts to real-world issues [7], increase motivation and positively contribute to girls' science identity [8], and provide focus for design by communicating tasks, specifically when readers can identify with the stories [9]. Compelling stories conveyed in text and multimedia ( video, audio, images) is employed to engage middle school girls in activities involving computational thinking. The stories center on a group of middle school girls involved in the Digital Youth Divas program, and combines aspects of contemporary young adult fiction ( mystery, social and emotional issues) with content, topics, and project work from the etextiles and programming curricula. The interactive narratives unfold through the iRemix platform: girls launch narratives and at intervals are prompted to engage in project-based work. The girls solve challenges by submitting work online, and receive and respond to messages from characters. Our early exploratory research suggested that narratives prompted discussions of identity, and contributed to participant interest in the program content and motivation to engage in project work.;2015
There is a strong movement asserting the importance of quality education all over the world and for students of all ages. Many educators believe that in order to achieve this 21st century skills must be taught and that digital literacy should be coupled with rigorous Computer Science principles and computational thinking. Accordingly this work will describe a didactic experience in an introductory programming course by describing the context, pedagogical approach, content of the course based on a procedure-first approach, technologies used, research questions addressed, experimental design adopted, data collection and analysis and the main conclusion supported by qualitative and quantitative data. The research questions focus on understanding which is the best medium to design algorithms by comparing flow chart and the Scratch programming language and by evaluating whether using textual language is worth the effort of the syntactic burden imposed by these languages. An analysis of quantitative and qualitative data revealed that both a visual programming and a flow-chart approach are suitable for algorithm design with no statistical difference in terms of number of errors and time taken to write the corresponding code in a textual language. However, the high number of errors suggest that using visual programming allows the student to focus on the problem solving activities.;2015
There is a strong worldwide movement which is pushing for the teaching of serious computer science principles besides reading, writing and basic numeracy starting from first grade and reaching all students across all grades. This is being done through both formal initiatives carried out by international organizations and at the national level by putting forward curricula, some of which are mandatory. In order to accomplish this goal, and based on the consensus that computer science is not programming and that programming languages are a tool, visual languages have become the preferred method for teaching introductory courses in computer science. The absence of rigid syntactic rules makes them the ideal tool for focusing on problem solving and computational thinking activities. Recent reports have pointed out the need for supporting the international community of teachers by providing assessment methods, an internationally validated question repository as well as tools and assessment platforms. In this context our work presents an assessment platform for formative, summative and informal assessment of computer science competencies by using a visual language, namely App Inventor, which allows for the rapid development of a mobile app and has a strong appeal to the younger generation of students. The capability to log user activity allows the teacher to monitor the progression in the student's learning path as well as her/his solution-building approach.;2015
This article addresses the topic of Educational Robotics in Uruguay. It includes a brief review of the history of the discipline in this country, as well as the different approaches that it presents. The Educational Robotic is analyzed as a way of working that supports the development of computational thinking in children and young people in general education, beyond the programming and the profession that they will be choose in the future. It presents the programming as a stage in the development of specific projects, chosen by the students. Imagine, design, build and programming make up the continuum that represents educational robotics and its way of working in elementary and high school.;2015
"This article is a case report on the program entitled Innovation and Enterprise (Innova y Emprende), a permanent extension project at the Engineering Faculty of the Universidad FASTA. In this program, a series of workshops was held with the education community. One such workshop was called Little Big Dreamers (Pequenos Grandes Sonadores) and was held in Mar del Plata, Argentina, from March to September 2014. The objective was to empower fifth and sixth grade secondary students at Basic Middle School N degrees 45 to encourage them to dream and plan their futures. Technology was employed as the facilitating medium for realizing their dreams. The students learned to design their own presentations using Scratch (a programming language for children and adolescents) to develop computational thinking and creativity; they created characters according to their own personal image and incorporated rap music with rhythm and lyrics to express their way of seeing the world. The results obtained through this project helped to awaken the curiosity of the participating adolescents, to develop the necessary abilities for enterprise and find the needed enthusiasm to successfully finish the project.";2015
This article presents the framework of Computational Thinking and how it can be integrated into the classroom through the design and implementation of programming projects. It describes the need, purpose and main features of Computational Thinking. It describes with several examples how to develop the key elements of Computational Thinking using a programming language. The last section of the paper shows the content and outcomes of the course Computational Thinking in School taught as a MOOC (Massive Open Online Courses) in the platform Miriada X.;2015
"This article reports the results of a study of the relationship of computer game programming to computational learning (CL). The results contribute to the growing body of knowledge about how to define and measure CL among children by proposing a new concept, Game Computational Sophistication (GCS). We analyzed 231 games programmed by 325 11 and 12 year olds with a range of prior computer experience who attended a voluntary technology class during or after school. Findings suggest that students' games exhibited a range of GCS: programs composed of sequences of simple programming constructs; programs composed of programming constructs, some of which are used to implement higher-order patterns; and programs composed of game mechanics built from combinations of patterns glued together with simple programming constructs. We use case studies of students' games to illustrate how variation in the use and integration of programming constructs, patterns, and game mechanics can be used to demonstrate evidence of CL. The study contributes to an understanding of what CL looks like in middle school, how to assess it, and how game-programming activities might promote CL.";2015
This chapter analyzes the nature of Computational Thinking (CT) and demonstrates the synergistic relationship between CT and Mathematical Thinking (MT). It cites commonly used definitions of CT and MT and discusses shared problem-solving techniques. The chapter discusses the roles mathematics plays in CT, including how specific mathematical topics interact with specific computing topics, and how mathematical reasoning complements computational reasoning. It explores some principles and practices of CT and performs an analysis of these principles and practices couched in their synergistic relationships to MT. The chapter also discusses a theory of learning for both MT and CT, the application of which suggests directions for pedagogy to enhance the learning of MT and CT concepts.;2015
This emerging technology report describes virtual environment interactions an approach for blending movement and computer programming as an embodied way to support girls in building computational thinking skills. The authors seek to understand how body syntonicity might enable young learners to bootstrap their intuitive knowledge in order to program a three-dimensional character to perform movements. We have gained insight into the desire for character realism. The lessons learned to date, as well as the challenges to integrating the physical and virtual and keeping the interactions rich are discussed.;2015
This paper analyzes the efforts of DISSECT (DIScover SciEnce through Computational Thinking) to introduce computer science theories into K-12 Curricula. This is accomplished by teaching computational thinking (CT) problem solving techniques in existing STEM+C courses in select middle and high school classrooms in Las Cruces, New Mexico, USA. Data collected over the course of the fall 2014 and spring 2015 semesters involving 10 graduate fellows, 9 teachers, and over 200 K-12 students has been analyzed. A single assessment was issued at the beginning and end of each semester in order to track metrics about fellow-teacher pairings, student understanding of CT concepts, and student interest in STEM+C areas. Using statistical analysis software to evaluate the data, we were able to determine the efficacy of the DISSECT program. In particular, we use descriptive statistics to evaluate the trends in CT vocabulary recognition and overall interest in computing, and we compare trends across courses and grade levels.;2015
This paper describes current research exploring the adaption of the Bridge21 pedagogical model for the provision of a Computer Science (CS) Continuing Professional Development (CPD) Programme for post-primary/high school teachers in the Republic of Ireland. This paper outlines the design of the programme and explores the delivery of two, week long CS CPD interventions delivered in the authors' home institution over the summer of 2014. The interventions were designed to help teachers develop expertise in areas such as computational thinking, programming and game design, text based programming and hardware configuration. The Bridge21 Learning and Activity Models were used throughout each workshop delivery and teachers were invited to use the same models in their own delivery of CS classroom activities. An Exploratory Case Study approach, using Evaluation Theory, informed data collection, coding and analysis procedures. Teacher reactions towards the Bridge21 CS CPD programme were investigated. Analysis indicate that teacher reaction towards the programme was positive and that teachers intended to use elements of the Bridge21 Learning and Activity model for CS delivery in the classroom.;2015
This paper details a series of pre-professional development interventions to assist teachers in utilizing computational thinking and programming as an instructional tool within other subject areas (i.e. music, language arts, mathematics, and science). It describes the lessons utilized in the interventions along with the instruments used to evaluate them, and offers some preliminary findings.;2015
This paper documents a study that was conducted with regard to the use of robotics as an innovative pedagogical tool for computer programming. The robotics in question relate to the Lego Mindstorms robots that were introduced as a means to develop further learners' problem-solving skills and motivate learners to have fun while learning. Vygotsky's philosophy regarding the Zone of Proximal Development supports the notion of Lego Mindstorms robots as a pedagogical tool. A mixed methods study was conducted and the aim of the project was twofold. Firstly, to determine whether robots reinforce fundamental computer programming concepts that were taught in the classroom environment. Secondly, to determine whether robots provide motivation and interest in computer programming. The issues regarding the pedagogical approach are discussed and feedback from learners is analysed. The results are positive and encouraging.;2015
This paper introduces the notion of predicting academic performance based on Computational Thinking. The integral role that Computational Thinking modalities play in engineering disciplines can serve as an accurate indicator of the student future academic success. Therefore, this study investigated the students' performance in a Computational Thinking course offered at the freshman level to predict student academic success. To achieve this goal, a two-year study of the correlation between the students' accumulative grade point averages and their grades obtained in this course was conducted. The performance of nine hundred and eighty two students in forty sections was assessed over the two-year period. It was concluded that the students' future academic performance is strongly correlated to their Computational Thinking skills assessed at the freshman level. This clearly suggests the viability of using Computational Thinking skills as a fairly accurate predictor of students' academic success. These results have also implied that the assessment of Computational Thinking can be used as an early intervention tool to improve the students' retention, progression, and graduation rates in STEM related disciplines.;2015
This paper mainly studies the features of problem theory, analyses the relationship between the problems and Bloom's taxonomy to train computational thinking, brings a method to construct problems using concept map. Then an instance of data structure curriculum is given, Our experience shows it is an effective way using the concept map to constructive teaching problems.;2015
This paper studies approaches to introduce computer sciences in 19 primary, secondary, public and private schools in Cordoba Province, Argentina. After offering a 13 hours introductory programming course through the development of computer animations, we analyse the main factors related to Computer Science career choice: students' representations about Computer Scientist job's demand, students' beliefs about the disciplinary area of Computer Science, and students' self-perception of competence using pre and post course survey. Our data show that most schools are teaching their students to use the computer and software developed by others, and fewer schools are teaching computational thinking and programming. The computer content knowledge teaching gap is wider when comparing private and public schools. However, after our 13 hours course all of the students changed their representations about Computer Science and its jobs. The amount of students who had positive or negative perceptions do not change after our teaching experience. Nevertheless, the reasons why they perceived themselves as capable or incapable of programming do change. We describe policy implications of these findings.;2015
This paper summarizes the successes and challenges encountered during the incorporation of the New Mexico State University DISSECT (DIScovering SciEnce through Computational Thinking) Fellowship program into a 6th grade classroom. Graduate student fellows work with experienced K-12 teachers to create and deploy interactive computational thinking (CT) modules in middle and high school classrooms that promote active learning through the use of technology and cutting edge scientific research. One of the main objectives of the DISSECT program is to facilitate the professional development of graduate students in computing-rich fields, such as engineering, computer science, and biology, through leadership development, public speaking experience, and an enhanced vision of how CT is vital to in all scientific disciplines. The alliances formed between K-12 teachers and their fellows provide an opportunity for teachers to attain knowledge of CT principles and equips them with the ability to develop and continue their own future lesson plans integrating CT. This paper thoroughly describes specific modules that integrate CT concepts into the traditional 6th grade science curriculum, the statistical results of assessments gauging the development of CT skills and knowledge during the course of one academic year, and suggestions for improvements and incorporation into other curricula.;2015
This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment.;2015
This study attempts to investigate the effect of teaching code.org site on reflective thinking skills towards problem solving. More specifically, this study attempts to investigate whether there is a gender difference in terms of students' reflective thinking skills towards problem solving. This triangulation study was conducted with 32 primary school students. The quantitative part of the study was conducted in pre-test/post-test comparison design of quasi-experimental design. The scores of reflective problem solving skills were gathered through the reflective thinking skill scale towards problem solving and the students' performances in the code-org site were examined. In the qualitative part of the research, after the five-week experimental process, focus group interviews were conducted with ten students and a reflection paper from the IT teacher was analysed. According to the t-test results, teaching programming to primary school students in the code.org site did not cause any differences in reflective thinking skills towards problem solving. However, there is a slight increment in the means of female students' reflective thinking skills towards problem solving over the males' reflective thinking skills towards problem solving. On the other hand, qualitative data provided more information about the students' experiences. Students developed a positive attitude towards programming, and female students showed that they were as successful as their male counterparts, and that programming could be part of their future plans. (C) 2015 Elsevier Ltd. All rights reserved.;2015
This study examines the impact of computational journalism on the creation and dissemination of crime news. Computational journalism refers to forms of algorithmic, social scientific, and mathematical processes and systems for the production of news. It is one of a series of technological developments that have shaped journalistic work and builds on techniques of computer-assisted reporting and the use of social science tools in journalism. This paper uses the Los Angeles Times' Homicide Report and its Data Desk as a case study to explore how technological adaptation occurred in this newsroom in the early twenty-first century. Our findings suggest that computational thinking and techniques emerged in a (dis) continuous evolution of organizational norms, practices, content, identities, and technologies that interdependently led to new products. Computational journalism emerges from an earlier and still ongoing turn to digital within broader organizational, technological, and social contexts. We place this finding in the local, situated context of the Homicide Report, one of the first crime news blogs to adopt computational journalism in North America.;2015
This study explores the relationship between computational thinking, teaching programming, and Bloom's Taxonomy. Data is collected from teachers, academics, and professionals, purposively selected because of their knowledge of the topics of problem solving, computational thinking, or the teaching of programming. This data is analysed following a grounded theory approach. A computational thinking taxonomy is developed. The relationships between cognitive processes, the pedagogy of programming, and the perceived levels of difficulty of computational thinking skills are illustrated by a model. Specifically, a definition for computational thinking is presented. The skills identified are mapped to Bloom's Taxonomy: Cognitive Domain. This mapping concentrates computational skills at the application, analysis, synthesis, and evaluation levels. Analysis of the data indicates that abstraction of functionality is less difficult than abstraction of data, but both are perceived as difficult. The most difficult computational thinking skill is reported as decomposition. This ordering of difficulty for learners is a reversal of the cognitive complexity predicted by Bloom's model. The plausibility of this inconsistency is explored. The taxonomy, model, and the other results of this study may be used by educators to focus learning onto the computational thinking skills acquired by the learners, while using programming as a tool. They may also be employed in the design of curriculum subjects, such as ICT, computing, or computer science.;2015
This studyproposes a new learning model for improving problem solving and programming skills. To solve a real world problemusing IT, the problem solving and programming skills are important. In this study, we propose and develop a learning model that can help to improve problem solvingand programming skills, based on computational thinking. The feature of the learning model proposed is to offer learners challenge and interestby presenting the questions into learning games of an inter-competition type after developing the questions that improve the problem solving and programming skills. Also, another feature is to present the questions about algorithm and programming in the various forms and generate the questions dynamically. Especially, by providing an inter-competition game type, due to increase of competitive sense between learners, learners feel relatively less difficulty of problem solving and programming and enable to naturally improve the problem solving and programming skills through competition.;2015
This work stems from the recent reforms made to the Italian education system. On one side, a relevant aspect is the introduction of coding in primary school, where coding is seen as a way to improve learning processes in young students. On the other side, music education is considered a key element to promote the integration of the various aspects of personality: the perceptual-motor, the logic, and the affective-social component. After reviewing the state of the art, this work aims at defining a new discipline - called music coding - presenting the key elements of the two pedagogical approaches. A computer-based tool to foster the development of both coding and music skills in young students will be proposed.;2015
Throughout the world, two related tendencies are happening provoking questions with still few answers: high level of youth unemployment and a number of free job positions for which people with vocational work skills are needed. The International Labour Organization states that 75 million young people are unemployed in 2015. Including estimates of underemployed youth, this number would potentially triple. According to Eurostat, 23.815 million people in the EU are unemployed in January 2015. Despite the high level, youth unemployment is also firm and should be considered as one of the biggest problems of each country. Moreover, the constant high number of young people who are not in education, employment or training (NEETS) shows that this number is not influenced by the state of the national economy or the economic growth. It is not expected that that new job positions will solve the problem of youth unemployment because young people at the labour market are usually with low education, lack of work and social skills and no motivation for work. And what could affect and explain the paradox - on one hand we have shortage of people with specific vocational work skills to directly enter the labour market, and on the other hand we have a lot of unemployed? Firstly, we should consider the applicability and efficiency of the educational systems, especially the VET one. Secondly, we should decide on the methods of distribution of the labour force into different work spheres. Last but not least, we should deliver well educated young people with specific vocational skills, work and social habits ready to enter the business after VET graduation. Having in mind that these people will have lower than university education, they should be highly qualified at specific vocational sphere in order to be competitive at the labour market. The notion of the existence of a gap between the gained knowledge and developed skills at academic and training institutions on one hand and the requirements of industry on the other hand is not in doubt. The policy makers are aware of the possible consequences of social and economic distress when the professional future of too many young people is compromised. At the same time the educational providers, youths and employers seem to live in parallel realities. Employers believe that new graduates are not adequately prepared for entry-level positions and their practical skills are not enough. Nevertheless only few of them invest in work-based learning and apprenticeships. Education providers state that the new graduates are ready to work. Not many of them take the opportunities of continuous professional development and offer their students innovative and efficient educational services with focus on practice, like on-the-job training and hands-on learning. Young people are not aware of the world of work and are not motivated to develop their soft and social skills to increase their employability. Workers of the future will need to be adaptable, flexible, perceptive lifelong learners. The key skills needed in the future workforce will be: sense making, social intelligence, novel and adaptive thinking, cross-cultural competency, computational thinking, new media literacy, transdisciplinarity, design mindset, cognitive load management and virtual collaboration.;2015
Today, as advanced technologies and cloud computing tools emerge, it is imperative that such innovations are sustained with knowledge and skill set among STEM educators and practitioners. In this paper, the author reports on a project, HBCU-UP II, that works on bringing Computational Thinking to Science, Technology, Engineering, and Mathematics (STEM) disciplines. A Computational-Thinking based strategy is adopted to enforce thinking computationally in STEM gate-keeping courses. The paper presents framework, implementation and outcomes. This on-going project contributes to efforts to establish computational thinking as a universally applicable attitude that is meshed within STEM conversations, education, and curricula. This paper will be particularly useful for researchers interested in Computational Thinking and its applications in STEM education, in particular and higher education in general (C) 2015 The Authors. Published by Elsevier B.V.;2015
"Undergraduate traditional instructional delivery that does not utilize computation is linked significantly to students' low performance and thereby attrition. Over the last two decades, new computational technologies, information, and communication have emerged, creating comprehensive cyberinfrastructure-based service systems, or what is termed here e-science. E-science environments are virtual systems that support data management, data mining, information acquisition, visualization, computing services, and people collaboration over the Web. Although a number of attempts have been successful in utilizing e-science environments to change how research is conducted, using e-science environments for education has been rarely realized. This chapter describes a project that aims to transform Science, Technology, Engineering, and Mathematics (STEM) education through using e-science systems at the undergraduate level. The strategy is built on three arms: (1) injecting Computational Thinking (CT) in STEM education; (2) using e-science for STEM learning; and (3) building a community-of-practice around e-science. By using e-science resources and services, an inquiry-based approach to learning can be the key to students' motivations, achievements, and enthusiasm for science.";2015
Unlike enrollment in undergraduate computer science degree programs, there are no gender or ethnic imbalances in K-12 enrollment. While such disparities are seen at particular schools, such disparities do not exist in disciplinary courses such as history, math, or science where all students are required to take these courses. This paper discusses an approach to broaden minority participation in computing through the integration of Computer Science (CS) into a history course. This poster proposes an alignment between computational thinking and historical thinking that makes history courses an attractive fit for CS integration. It also presents results from the pilot study of a project-based cross-disciplinary curriculum using MIT App inventor that leverages students' interests in mobile technology to facilitate the creation of historical mobile apps. This curricular approach is built on a theoretical framework rooted in Constructivist and Constructionist learning where students construct and produce knowledge, artifacts, and technology rather than consume them. Our initial results suggest that students were engaged in the material and were enthusiastic about the creation of their mobile app.;2015
Visual programming course is a program design course, contains many computational thinking. Sorted out main computing thinking involves in the course, and improve the corresponding teaching methods, in order to change the implicit and unconscious computational thinking training to explicit and purpose, so as to improve the computational thinking consciousness and literacy of students.;2015
We believe the most important in the teaching of computer organization and architecture course is to encourage the practice of computational thinking in students, that's to train them to think actively in problem-solving like a scientist. A six-step thinking procedure was proposed, practiced and discussed in this paper, namely defining problems, abstracting, formulizing, refining, reasoning, and designing. Consistent and continuous efforts from teachers in this aspect can improve students' competence of thinking.;2015
We live in a society full of digital and programmable objects. In this context, being code-literate involves an inescapable requirement for any citizen of the XXI century. We believe that a person is code-literate when the ability to read and write in the language of computers and to think computationally has been developed. So it is not surprising that computational thinking (CT) is being located at the focus of educational innovation as a set of problem solving skills to be acquired by new generations of students. However, we still lack international consensus on a definition of CT, nor a clear idea of how to incorporate CT to our education systems at various levels. Similarly, there is a striking gap about how to measure and assess CT. In reply, this paper presents the design of a Computational Thinking Test aimed at Spanish students between 12 and 13 years old (grades K-7 & K-8): we describe the guidelines on which whole test and each of its items have been designed, as well as the content validation process through expert's judgment procedure. Through this process, the initial version of the test (40 items length) was depurated to a 28 items version, which is currently being applied to the target population. Finally, possible limitations of the test and possible concurrency of the same with other international evidence on computational thinking assessment are discussed.;2015
When the classical theory of problem solving is put into practice, a sequence of operator applications must be found that transforms an initial problem state into a goal state. This is equivalent to finding a path through the graph of possible problem states from an initial node to a goal node. The search is usually conducted by an algorithm or by a human through an iterative process of selecting and applying operators to states found so far. Here, I demonstrate examples of searching in problem spaces via interactive drawing. The demonstrations help to elucidate issues in the design of new problem-solving affordances that may enhance the abilities of human solvers to understand and solve problems. This opens up new ways to conceptualize the process of solving problems, and it suggests new ways to teach a form of computational thinking.;2015
While advances in game-based learning are already transforming educative practices globally, with tech giants like Microsoft, Apple and Google taking notice and investing in educational game initiatives, there is a concurrent and critically important development that focuses on 'game construction' pedagogy as a vehicle for enhancing computational literacy in middle and high school students. Essentially, game construction-based curriculum takes the central question do children learn from playing games to the next stage by asking (what) can children learn from constructing games? Founded on Seymour Papert's constructionist learning model, and developed over nearly 2 decades, there is compelling evidence that game construction can increase confidence and build capacity towards ongoing computing science involvement and other STEM subjects. Situated at the intersection of 'maker' pedagogies and inquiry-based learning on one hand and game-based learning on the other, this field of educational research is just now more thoroughly being theorized and implemented. There is still debate as to the utility of different software tools for game construction, models of scaffolding knowledge, and evaluation of learning outcomes and knowledge transfer. In this paper, we present a study we conducted in a classroom environment with three groups of grade 6 students (60+ students) using Game Maker to construct their own games. Our study adds to the growing body of literature on school-based game construction through comprehensive empirical methodology and evidence-based guidelines for curriculum design. We also discuss preliminary results related to computational literacy, in addition to a theorization of game construction as an educational tool that directly engages foundational literacy and numeracy and connects to wider STEM-oriented learning objectives.;2015
While there has been a remarkable interest to make computer science a core K-12 academic subject in the United States, there is a shortage of K-12 computer science teachers to successfully implement computer sciences courses in schools. In order to enhance computer science teacher capacity, training programs have been offered through teacher professional development. In this study, the main goal was to systematically review the studies regarding computer science professional development to understand the scope, context, and effectiveness of these programs in the past decade (2004-2014). Based on 21 journal articles and conference proceedings, this study explored: (1) Type of professional development organization and source of funding, (2) professional development structure and participants, (3) goal of professional development and type of evaluation used, (4) specific computer science concepts and training tools used, (5) and their effectiveness to improve teacher practice and student learning.;2015
With the growing interest in computational thinking (CT) and coding education worldwide, various discussions have been raised that there is a need to practice the coding education to K-12 especially from an elementary school. Accordingly, several block-based educational programming languages have been developed such as Scratch, App Inventor, code. org and so on for introducing coding education, and various related experimental studies have been carried out. These block-based programming languages are very useful and convenient, and it has the advantage of being able to help students understand the logic and control structure at the initial programming stage. However, if the blocks increased, there are such inconveniences that readability becomes worse, and therefore the debugging process can be more difficult. In addition, the block-based programming languages are confined in a particular web page or system, so there is shortcoming in the transition to the practical programs. In this study, to address these concerns, we suggest a text-based introductory educational programming language, that is, JQuery Mobile based on the mobile web browser on smart devices, and proposed the benefits and differences compared to the block-based languages in instructional class situations.;2015
With the rapid development of Internet and constant improvement of informationization degree, all kinds of security problems become increasingly prominent. Especially Computer system security is faced with serious challenges. In such case, whether the course of Computer system security taught in colleges and universities can be advanced with the times plays an important role in dealing with the challenge. Based on the current situation of Computer system security course, this thesis analyzed and studied how to realize the innovative reform of Computer system security course.;2015
With the rapid development of information technology as well as the popularization of computer and network, in order to meet the different needs of the students' basic knowledge of computer, bring into full play the initiative of students for learning basic computer knowledge, and strengthen the students' practical ability, how to reform the teaching method of basic computer courses in college is becoming an important subject of undergraduate education in universities. This paper analyses current situation and existing problems of basic computer courses teaching in universities, explores a teaching model based on subject classification and target stratification, and then introduces the computational thinking ability training and the project-based teaching method into the teaching process of courses. Through 3 years of teaching practice, a significant teaching effect has been achieved on promoting the students' problem-solving ability and innovation ability.;2015
With the rapid development of the Internet technology, it is imperative to reform current curriculum plan and traditional teaching mode to meet the information requirements of the times and improve teaching quality of continuing education. The paper analyzes the problems on course of Web design which is offered by the School of Continuing Education in East China of University of Science and Technology, and introduces the reform and exploration on the course based on aspect-oriented course design, task-driven classroom teaching, rich and diverse resource sharing and various forms of teaching assessment. The aims are to cultivate students' abilities of computation thinking and improve students' abilities of analyzing problems and solving problems. The teaching practice proves that the exploration is feasible and effective.;2015
"with the wide use of computers, how to make students understand the special way of thinking of computer science and find the appropriate methods to solve problems in their own fields like computer scientists are the challenges for educators. This paper proposed a computational thinking model based on blended learning McrBBL and a descending dimension method for problem-space transformation. The Mcz-BBL model analyzes and researches the application of computational thinking in computer science by the organic combination of computational thinking and blended learning in a life-cycle perspective. On one hand, the model can summarize the core concepts and important principles in computer science and extract the typical thoughts and general methods of solving problems; on the other hand, the model can implement the teaching and learning of computational thinking by means of blended learning. Based on the model, the teachers can teach the problem-solving process by using computer more intuitively and clearly and the students can understand the application of computer knowledge more easily and simply. The Mcumll, prolongs the study life cycle which takes preview as beginning, teacher-student discussion as body and practical application as core to ensure integrity, endurance and consistency of teaching.";2015
Women are underrepresented in the field of Computer Science. This project aims to help Secondary School girls develop an insight into the role computers play in society and to learn some of the key skills in computing including computer programming. Exposure to Computer Science, in home or school environments, and encouragement from family and peers are leading factors that influence girls' decisions to pursue careers in Computer Science. Other factors include the girls' perception of their own problem solving ability, an understanding of the diverse applications of Computer Science and related career paths and the potential for positive social impact. This paper describes the design of an after school computing programme, CodePlus, which uses a novel 21st Century learning model. Pre and post questionnaire are being used to explore girls intentions to study CS, their confidence to study CS, perception of CS as a career, gender perception of CS and IT profession and self-efficacy following participation in the CodePlus programme. Preliminary results comparing pre questionnaire results with a male control group highlight differences in how girls see themselves in terms of CS capabilities and their future potential. Initial post questionnaire findings show a significant increase in the participants' perceived programming ability.;2015
A Bebras challenge is an international network on informatics education for all K-12 students. Participation in the Bebras challenge provides opportunities for learning basic informatics education concepts and understanding deeper information and communication technologies. Based on the results of the last year Bebras contest in Lithuania, some problems on teaching informatics through solving high quality informatics concept-based tasks are brought forward and discussed. Future work concerning the improvement of informatics education is discussed as well.;2016
A movement to include computer science in K-12 curriculum standards has sparked a significant interest in computational thinking (CT). This paper describes current and future work in the development of visual programming curricula for teaching CT at the K-12 level and self-efficacy surveys for evaluating the effectiveness of the curricula at fostering CT. Current work on a comprehensive system for automated extraction of assessment data for descriptive analytics and visualization is also described. To complement attitude surveys, a translation of Scratch to Blockly is proposed. Data on student programming behaviors at the collegiate level will be collected and quantitatively analyzed to help assess CT in support of self-efficacy.;2016
"A revolution is taking place across Europe and worldwide in how we teach our children about computing, in primary and secondary school. Out goes ICT and how to use Microsoft Office; in comes coding and computer science. Assessment has a crucial role to play in this revolution. If teachers use low-quality assessment instruments we will end-up teaching the wrong subject; and vice-versa. This paper reviews the state of the field, and makes concrete, achievable proposals for developing shared, high quality assessments for computer science. Central to this proposal is the collaborative platform VIVA (the Vilnius collaboratively coded and Validated computer science questions/tasks for Assessment). Two requirements are key to VIVA: 1) support for multiple competency frameworks, so that the contributors can meta-tag resources with respect to the framework they are most familiar with; and 2) support for crowdsourcing the validation of each question/task and its mapping to competencies. The use of a taxonomy of questions/tasks type that has been mapped to computational thinking concepts and to a competency framework is proposed. Some seed questions are already available in the online platform prototype, and various supporters have granted permission to use large questions banks. The design requirements of a full implementation of the VIVA platform for a modern and effective approach to assessment including support for digital badges, are outlined; and some preliminary results from a survey administered to the initial contributors to VIVA are presented.";2016
A significant issue in research on educational games lies in evaluating their educational impact. Although game analytics is often leveraged in the game industry, it can also provide insight into player actions, strategy development, and the learning process in educational games separate from external evaluation measures. This paper explores the potential of game analytics for learning by analyzing player strategies of an educational game that is designed to support algorithmic thinking. We analyze player strategies from nine cases in our data, combining quantitative and qualitative game analysis techniques: hierarchical player clustering, game progression visualizations, playtraces, and think-aloud data. Results suggest that this combination of data analysis techniques provides insights into level progression and learning strategies that may have been otherwise overlooked.;2016
According to recent studies, people will increase their possibilities for getting a job in 2020, when they are able to select the adequate information online and lead virtual teams. We present, in this paper, a training program (Skills+/H2020 Program) to promote the development of the Future Work Skills 20201 in European Graduates. This training program starts from a diagnosis of student's needs that follow master studies at University of Granada. On the other hand, the program is based on the strategic lines provides by the Report titled Future Work Skills 2020 created in the University of Phoenix. The European environment requires all those workers in today's society. Although, these skills haven't been included, properly and effectively, into the curriculum changes of the Bologna process. Everybody should improve ten skills to become an effective worker at state-owned and private European companies: 1) Sense making or ability to determine the deeper meaning or significance of what is being expressed. (2) Social Intelligence or ability to connect to others in a deep and direct way, to sense and stimulate reactions and desired interactions. (3) Novel and adaptive thinking or the proficiency at thinking and coming up with solutions and responses beyond that which is rote or rulebased. (4) Cross cultural competency or ability to operate in different cultural settings. (5) Computational thinking or ability to translate vast amounts of data into abstract concepts and to understand data based reasoning. (6) New media literacy or ability to critically assess and develop content that uses new media forms, and to leverage these media for persuasive communication. (7) Cross-disciplinarily or literacy is the ability to understand concepts across multiple disciplines. (8) Design Mindset or ability to represent and develop tasks and work processes for desired outcomes. (9) Cognitive Load Management or ability to discriminate and filter information for importance, and to understand how to maximize cognitive functioning using a variety of tools and technique. (10) Virtual Collaboration or ability to work productively, drive engagement, and demonstrate presence as a member of a virtual team. The work plan of the training program, is based on three modules of content, where are defined different techniques and methods to promote the ten skills on people. Moreover, we used an active methodology to train also these techniques on all sessions. Consequently, we expect outcomes related to need previously demanded by the university students about training in global connectivity, cross cultural competency and lead of digital teams. Being all these items, constituents' elements of our thinking about work. In addition, we found unexpected but desired outcomes such as self-awareness of participants about a new professional environment, where companies ought to adapt to a new social environment influenced by smart cities and transform functions performed on a new job.;2016
Across the globe, there is an increasing push to incorporate coding into the entire K-12 curriculum - a shift which entails enormous challenges. This paper presents preliminary findings of an approach we are developing which addresses a key challenge associated with teaching coding, namely how to enable teachers with minimal coding backgrounds to effectively teach coding. The model we are developing provides online real-time tech support to teachers, thereby lowering the technical barriers to coding instruction. The genesis of this approach emerged from a year-long after school coding club run by the authors for elementary school students. This was followed by a pilot study involving gifted students in multiple elementary schools.;2016
Adding computer science as a separate school subject to the core K-6 curriculum is a complex issue with educational challenges. The authors herein address two of these challenges: (1) the design of the curriculum based on a generic computational thinking framework, and (2) the knowledge teachers need to teach the curriculum. The first issue is discussed within a perspective of designing an authentic computational thinking curriculum with a focus on real-world problems. The second issue is addressed within the framework of technological pedagogical content knowledge explicating in detail the body of knowledge that teachers need to have to be able to teach computational thinking in a K-6 environment. An example of how these ideas can be applied in practice is also given. While it is recognized there is a lack of adequate empirical evidence in terms of the effectiveness of the frameworks proposed herein, it is expected that our knowledge and research base will dramatically increase over the next several years, as more countries around the world add computer science as a separate school subject to their K-6 curriculum.;2016
After analyzing the current situation of Computer Programming Course, it presented that computational thinking should be trained in program teaching. And then further proposed the use of the Case Teaching in program teaching courses, as well as task-driven, micro-lesson, MOOCs and other advanced teaching philosophy to cultivate students' computational thinking ability and it improved the students' ability of computational thinking. It will be more helpful in developing all abilities for student in the future.;2016
Although science, technology, engineering, and mathematics (STEM) education sits at the center of a national conversation, comparatively little attention has been given to growing need for STEM teacher preparation, particularly at the elementary level. This study analyzes the outcomes of a novel, preservice STEM teacher education model. Building on both general and STEM-specific teacher preparation principles, this program combined two traditional mathematics and science methods courses into one STEM block. Analysis compared preservice teachers in the traditional courses with those enrolled in the STEM block, investigating STEM teaching efficacy, reported and exhibited pedagogical practices, and STEM literacies using a pre-post survey as well as analysis of lesson planning products. Linear regression models indicated that substantial growth was seen in both approaches but STEM block preservice teachers reported significantly greater gains in STEM teaching efficacy as compared with traditional-route teachers. Lesson planning artifacts also demonstrated increased facilitation of STEM literacies, with specific attention to content integration, engineering and design, and arts inclusion. Technology and computational thinking emerged as areas for further growth and clarification in STEM teacher education models. Findings contribute to a growing research base on developing the STEM teacher workforce.;2016
As a summer camp for middle school and high school students, a new method of learning/teaching computer science was explored: Teaching high schoolers MIT's App Inventor for 2 weeks and then during the following two weeks, having the high schoolers teach middle schoolers ranging from up-coming 6th to 9th graders. The program, App Inventor, simplifies the process of coding, making it an ideal method of teaching beginners the basics of computer programming and computational thinking practice. The simplicity of the program is evident through the rapid learning process of the high schoolers, who were mostly beginners at coding. Additionally, during the process of teaching and helping the middle schooler's debugging session, the high school students were able to properly digest the principles and fundamentals of computer programming by revisiting and teaching what they learned. The students, both the high schoolers and middle schoolers, collaborated in exploring and experimenting with multiple variations of apps that could be made with the given teaching materials. The level of comprehension amongst the middle schoolers was evident through their ability to produce the final products, which ultimately varied depending upon the method of teaching that the high schooler chose to teach with. This paper presents the organization of the summer programming camp, contents and learning outcome.;2016
As an international informatics contest, or challenge, Bebras has started the second decade of its existence. The contest attracts more and more countries every year, recently there have been over 40 participating countries. From a single contest-focused annual event Bebras developed to a multifunctional challenge and an activities-based educational community building model. This paper aims to introduce the Bebras model using ten years of observations in implementing the contest in different countries. The model is essentially based on democratic and inclusive education values. Systematic literature review of research papers concerning Bebras activities has made an integral background for this model. The model is represented both at international and national levels and consists of several components where the development of Bebras tasks has taken a very significant role. Reasoning on innovated learning informatics and strengthening computational thinking by utilising carefully selected informatics concepts is discussed as well.;2016
As computer programming and computational thinking (CT) become more integrated into K-12 instruction, content teachers and special educators need to understand how to provide instructional supports to a wide range of learners, including students with disabilities. This cross-case analysis study examined the supports that two students with disabilities, who were initially disengaged during computing activities, received during computing instruction. Data revealed that students' support needs during computing activities were not CT-specific. Rather, supports specific to these students' needs that were successful in other educational areas were also successful and sufficient in CT. Although additional studies would need to be conducted to ascertain the transferability of these findings to other contexts and students, our results contribute evidence that students with disabilities can and should participate in CT and be provided with the supports they need, just as in all other areas of the curriculum. We present a framework for evaluating student engagement to identify student-specific supports and, when needed, refine the emerging K-12 CT pedagogy to facilitate full participation of all students. We then offer a list of four implications for practice based on the findings. (C) 2016 Elsevier Ltd. All rights reserved.;2016
As is known to all, computer is a college student in a university course, one of the basic course in the process of education for college students which lay a theoretical foundation for the next professional learning. At the same time, in recent years, countries and universities attach great importance to and focus on computer teaching for young college students, the purpose is to improve students' thinking ability, eventually to promote college students' ability to use computational thinking to solve and analyze the problems of daily life. Therefore, this article on how to the calculation of optimization in the process of computer teaching college students thinking ability on further discussion and analysis, and then explore the strategies and methods, so as to promote the computer teaching in the process of the cultivation of thinking ability and optimize the computer.;2016
As the needs of education of programming language increase, the importance of the learning environment has been emphasized. Based on the social trends, various web services for the education of programming which improves the computational thinking of a student. Among the web services, block-based programming languages are well known as an effective educational tool for a primary student though a freshman in the university. These tools are proven to be useful tools since the tools provide same programming environment to the students and the teachers anytime and anywhere. However, the environments may be insufficient for learning practical programming languages, such as C/C++ and Java, because they are not the block-based programming languages. This paper introduces a block-based learning environment for C programming language using web services. The environment fills the gap between building computational thinking and learning the syntax of the programming language. The programming environment provides the equivalent environment to teachers and the students during the programming hands-on.;2016
As the rapid development of information society, people daily work and study rely on computer network as a platform environments, only familiar with computer operation skills which is not competent to meet the needs of the community, computational thinking ability and innovative consciousness are essential procedure for people to learn. Computer foundation course is not only playing an important role in undergraduate general education but also guiding the students to develop their computational thinking. The paper analyses some problems existed in computer foundation teaching and proposes a new computer foundation teaching mode based on computational thinking. From aspects of curriculum system, teaching method and so on, the paper discusses some strategies in developing computational thinking. The practice showed that the new teaching mode is useful to develop students self-learning ability, innovation ability and the ability to analyze and solve problems.;2016
At present, there are still many problems in the practice of computer fundamental education, such as attaching importance to theory, neglecting practice, ignoring the spirit of teamwork, and neglecting the cultivation of innovation. By introducing the CDIO model, reform the content of teaching as the breakthrough point, through the project case driven, computational thinking, leading the knowledge system of hierarchical and comprehensive training to improve the teaching quality, in order to cultivate students' independent learning ability and innovation practice ability.;2016
At the core of every computing related discipline and impacting everyone everywhere, computational thinking or CT has increasingly emerged as its own subject in all levels of education. How to effectively teach CT skills poses real challenges and creates opportunities. Focusing on engineering and computer science undergraduates, we resourcefully integrated elements of Artificial Intelligence (AI) into introductory computing courses. In addition to a comprehension of the essence of CT, AI enabled inspirations of collaborative problem solving beyond abstraction, logical reasoning, critical, and analytical thinking. It fostered the study of basic data structures and algorithms. Students enjoyed active learning classrooms. Learning to learn, they constructed essential knowledge from solving exciting AI puzzles, competing in strategic AI games, and participating in intellectual discussion. Every activity is designed to allow students to fully engage their mental tools. Neither coding nor programming was required.;2016
Authentic problem solving tasks in digital environments are often open-ended with ill-defined pathways to a goal state. Scaffolds and formative feedback during this process help learners develop the requisite skills and understanding, but require assessing the problem solving process. This paper describes a hybrid approach to assessing process at scale in the context of the use of computational thinking practices during programming. Our approach combines hypothesis driven analysis, using an evidence-centered design framework, with discovery-driven data analytics. We report on work-in-progress involving novices and expert programmers working on Blockly games.;2016
Background: Robotics competitions are increasingly popular and potentially provide an on-ramp to computer science, which is currently highly gender imbalanced. However, within competitive robotics teams, student participation in programming is not universal. This study gathered surveys from over 500 elementary, middle, and high school robotics competition participants to examine (1) whether programming involvement in these competitions is associated with motivation to pursue additional programming experiences and (2) whether opportunities to learn programming varied by gender, age, and competition type. Results: Results showed a significant association of students' programming involvement with their motivation to learn more programming. Interestingly, in the youngest groups/entry-level competitions, girls were heavily involved in programming. Unfortunately, in older/more advanced competitions, girls were generally less involved in programming, even after controlling for prior programming experience. These gendered effects were substantially explained by programming interest. Conclusions: While robotics competition experiences may motivate students to learn more programming, gender gaps in programming involvement persist in these learning environments and appear to widen as students grow older and enter more advanced competitions. Therefore, addressing gender imbalances in programming will likely require greater attention to particular curricular and pedagogical characteristics of robotics competitions that support girls' interest and involvement in programming.;2016
Basic computer teaching is the most important part of improving students' comprehensive quality and innovative ability to promote the reform of computer basic teaching in the new era and training compound talents with creative thinking. Through the concrete practice of teaching process, we elaborate these methods and procedures and discuss some experience in the teaching process.;2016
"Bebras is an award-winning, international contest and challenge in informatics that has been running for 12 years in primary and secondary schools, with 50 countries now participating. From a single contest-focused annual event the Bebras developed to a multifunctional challenge; an activities-based educational community-building network has grown up where the development of Bebras tasks has taken a very significant role. Bebras tasks present a motivating way to introduce computer science concepts to students as well as developing computational thinking skills. Tasks are categorized in terms of the concepts being covered, and each task includes an explanation of how the task relates to informatics. In this paper we propose that Bebras tasks can be used within the school curriculum (whether it is called informatics, computer science, computing or information technology) to promote computational thinking and provide teaching materials. We give examples of Bebras tasks that could be incorporated into the curriculum, and make recommendations for schools wishing to develop children's computational thinking skills.";2016
Children and animals of all kinds are said to develop some degree of number sense. The search for number neurons' and neural correlates of computational thinking aims to identify biological primitives to explain the emergence of number sense. This work typically looks for the sources of number sense in organisms, but one might extend this search and study the possibility of a calculating matter more generally. Such a speculative project explores the implications of the non-human turn within the posthumanities. In this paper, I draw primarily on the work of Vicky Kirby and Gilles Deleuze in order to focus on becoming-monster through calculation. I show how calculation, as a machinic and empirical act that both serves and troubles images of mathematical truth, has always played a unique role in the production of mathematical monsters. I then discuss calculating children who participate in abacus clubs and annual abacus competitions, calculating at inhuman rates with imaginary abacuses. I argue that a new materialist philosophy of immanence demands a radically new approach to number sense.;2016
Coding (programming) is a skill that nowadays is considered as an important asset. Teaching programming is an activity that becomes more and more popular. In the last few years there are great discussions on inclusion of coding in schools. These initiatives impacted the policy makers in Macedonia to include coding as a part of a new compulsory subject for the pupils at the age of 8. In this paper our focus is on the newest change in the Macedonian curriculum - the introduction of the course Working with computers and basics of programming, which can be shortly named as Computing in 2015. Here, we present the proposed and accepted curriculum with emphasis on the topics about computational thinking and programming. Then we discuss the available software and tools suitable for the implementation of the before mentioned topics, and present a newly developed game. At the end we explain the background of the teachers, give the format of the preliminary training of all primary school teachers in the country and present the first impressions of the trainers that conducted the training, and we elaborate the teachers' feedback.;2016
Coding has been recognized by the Italian National Plan for Digital School (PNSD) as one of fundamental disciplines to be introduced at school level to develop problem solving abilities. In order to reach such an objective, the University of Urbino offered for free a MOOC on Coding specifically devoted to school teachers through the European Multiple MOOC Platform (europeanmoocs. eu, Emma for short). Considering coding as a transversal skill, the objective of such a MOOC was then to generate a highly scalable process of teaching/learning involving a plethora of actors: school managers, ICTs ambassadors and animators, teachers, and pupils as final users. The MOOC was organized as a hands-on experience course, based also on live webinars, illustrating how to organize coding activities using only freely accessible online resources. This approach allowed teachers to learn the fundamental principles of coding together with their pupils and to apply computational thinking to any topic, with a non secondary effect: converting role of the teacher into an enabler factor, restoring their centrality, legitimation and social value. In this paper, we will explore the dimension of the experience, the relevance of pedagogies used, as well as the factors of success with empirical data on user profiles, previous learning experience as well completion rate.;2016
Computational Thinking (CT) has become popular in recent years and has been recognised as an essential skill for all, as members of the digital age. Many researchers have tried to define CT and have conducted studies about this topic. However, CT literature is at an early stage of maturity, and is far from either explaining what CT is, or how to teach and assess this skill. In the light of this state of affairs, the purpose of this study is to examine the purpose, target population, theoretical basis, definition, scope, type and employed research design of selected papers in the literature that have focused on computational thinking, and to provide a framework about the notion, scope and elements of CT. In order to reveal the literature and create the framework for computational thinking, an inductive qualitative content analysis was conducted on 125 papers about CT, selected according to pre-defined criteria from six different databases and digital libraries. According to the results, the main topics covered in the papers composed of activities (computerised or unplugged) that promote CT in the curriculum. The targeted population of the papers was mainly K-12. Gamed-based learning and constructivism were the main theories covered as the basis for CT papers. Most of the papers were written for academic conferences and mainly composed of personal views about CT. The study also identified the most commonly used words in the definitions and scope of CT, which in turn formed the framework of CT. The findings obtained in this study may not only be useful in the exploration of research topics in CT and the identification of CT in the literature, but also support those who need guidance for developing tasks or programs about computational thinking and informatics.;2016
Computational Thinking (CT) has been described as the use of abstraction, automation and analysis skills for problem solving, thus becoming a set of fundamental skills for the 21st century. Many initiatives have emerged to promote early development of CT skills. However, to date, there are no studies in which CT is developed in minority groups, such as individuals with Autism Spectrum Disorders. In this paper we present the design and evaluation of a Game Design Workshop aimed at teenagers with Autism Spectrum Disorders. An analysis of the artifacts produced by the participants of a pilot offering of the workshop was performed using a rubric for CT skills acquisition. The results showed that the participants, all of them with high-functioning autism and no previous experience with programming, acquired intermediate level skills related to CT.;2016
"Computational thinking (CT) is a fundamental skill for students, and assessment is a critical factor in education. However, there is a lack of effective approaches to CT assessment. Therefore, we designed the Three-Dimensional Integrated Assessment (TDIA) framework in this article. The TDIA has two aims: one was to integrate three dimensions (directionality, openness, and process) into the design of effective assessment tasks; and the other was to assess comprehensively the three dimensions of CT including computational concepts, practices, and perspectives. Guided by the TDIA framework, we designed three pairs of tasks: closed forward tasks and closed reverse tasks, semiopen forward tasks and semiopen reverse tasks, and open tasks with a creative design report and open tasks without a creative design report. To further confirm each task's applicability and its advantages and disadvantages, we conducted a test experiment at the end of the autumn semester in 2014 in a primary school for 3 weeks. The results indicated that (a) the reverse tasks were not more superior than the forward tasks; (b) the semiopen tasks and the open tasks were more effective than the closed tasks, and the semiopen tasks had higher difficulty and discrimination than the others; (c) the self-reports provided a helpful function for learning diagnosis and guidance; (d) the scores had no significant difference between the schoolboys and the schoolgirls in all six tasks; and (e) the six tasks' difficulty and discrimination were all acceptable, and the semiopen tasks had higher difficulty and discrimination than the others. To effectively apply them, the following suggestions for teachers to design computational tasks are proposed: motivating students' interest and enthusiasm, incorporating semifinished artifacts, involving learning diagnosis and guidance, and including multiple types of tasks in an assessment.";2016
Computational Thinking (CT) is considered a core competency in problem formulation and problem solving. We have developed the Computational Thinking using Simulation and Modeling (CTSiM) learning environment to help middle school students learn science and CT concepts simultaneously. In this paper, we present an approach that leverages multiple linked representations to help students learn by constructing and analyzing computational models of science topics. Results from a recent study show that students successfully use the linked representations to become better modelers and learners.;2016
Computational Thinking (CT) is considered a fundamental skill for everyone. Therefore, research has focused on defining age and grade-appropriate curricula for teaching CT. In this context, mobile programming can be a good means to foster CT. Indeed, the growing adoption of mobile devices, also among females, minorities, and all economic groups, provides a powerful opportunity for engaging students. Nevertheless, further issues need to be addressed, in particular in the context of liberal education. For example, most of the students enroll in these schools because they have higher interest for liberal arts, and perceive programming as a very difficult task. Also, issues can emerge when trying to introduce new courses into schools. In this paper, we describe a course, which aims at creating a mobile application with students having no background in software development. The main strategy to accomplish this is to foster and evaluate CT, with the support of development tools that ease the learning and application of CT skills. We report the results and the evaluation of a case study conducted in a social-economic high school, with a total of 29 students of 8th and 9th grade.;2016
Computational Thinking (CT) is gaining a lot of attention in education. In this study we focus on the CT aspect modeling and simulation. We conducted a case study analyzing the projects of 12th grade high school informatics students in which they made models and ran simulations of phenomena from other disciplines. We constructed an analytic framework based on literature about modeling and analyzed students' project documentation, recordings of student groups at work and during presentations, survey results and interviews with individual students. We examined how to discern the elements of our framework in the students' work. Moreover, we determined which data sources are suitable for observing students' learning. Finally, we investigated what difficulties students encounter while working on modeling and simulation projects. Our findings result in an operational definition of modeling and simulation, and provide input for future development of both assessment instruments and instructional strategies.;2016
Computational thinking (CT) is now considered either as an essential skill for the 21st century, either as the fundamental added value of digital literacy of citizens. This literature review aims to present computational thinking as a complex construct that is at the heart of 21st century skills development such as problem solving (PS) and collaboration skills, that can guide students to careers related to the field of science, technology, engineering and mathematics (STEM) disciplines, with high potential of employability and innovation, and, which can have an impact on economic productivity.;2016
Computational thinking has been gaining new impetus in the academic community and in K-12 level education. Scratch is a visual programming environment that can be utilized to teach and learn introductory computing concepts. There are some studies investigating the effectiveness of Scratch for K-12 level education. However, studies that have been conducted at the collegiate level, especially in the context of preservice computing teacher education, are very rare. The present study aimed to investigate the effect of Scratch-based instruction on preservice teachers' understanding of basic programming concepts and their attitudes toward programming. In the present study, a mixed method design was utilized. In the first phase of the study, the data were collected using an achievement test, a practice test, and a computer programming attitude scale. In the second phase of the study, data were collected through a semistructured interview. The results of the study indicated that preservice teachers in Scratch-based instruction had significantly better understanding of basic computing concepts. Qualitative data indicated that Scratch-based instruction was useful in constructing a more meaningful learning environment for preservice teachers. The results of this study have implications for researchers and preservice computing teacher educators when designing an introductory computing course.;2016
Computational Thinking has recently returned into the limelight as an essential skill to have for both the general public and disciplines outside Computer Science. It encapsulates those thinking skills integral to solving complex problems using a computer, thus widely applicable in our technological society. Several public initiatives such as the Hour of Code successfully introduced it to millions of people of different ages and backgrounds, mostly using Blocks Programming Environments like Scratch that lower the barriers of programming and facilitate learning. In this paper we present our arguments for fostering Computational Thinking skills using a Blocks Programming Environment augmented with a Tangible User Interface, namely by exploiting objects whose interactions with the physical environment are mapped to digital actions performed on the system. Our demonstration includes a working prototype implementing our Tangible Blocks Programming Environment called TAPAS.;2016
Computational thinking is an approach to problem solving that is typically employed by computer programmers. The advantage of this approach is that solutions can be generated through algorithms that can be implemented as computer code. Although computational thinking has historically been a skill that is exclusively taught within computer science, there has been a more recent movement to introduce these skills within other disciplines. Psychology is an excellent example of a discipline that would benefit from computational thinking skills because of the nature of questions that are typically asked within the discipline. However, there has not been a formal curriculum proposed to teach computational thinking within psychology and the behavioural sciences. I will argue that computational thinking is a fundamental skill that can easily be introduced to psychology students throughout their undergraduate education. This would provide students with the skills necessary to become successful researchers, and would also provide a practical and marketable skill to all psychology graduates.;2016
Computational Thinking is an essential skill for all students in the 21st Century. A fundamental question is how can we create computer affordances to empower novice teachers and students, in a variety of STEM and art disciplines, to think computationally while avoiding difficult overhead emerging from traditional coding? Over the last 20 years we have iteratively developed tools that aim to support computational thinking. As these tools evolved a philosophy emerged to support Computational Thinking by joining human abilities with computer affordances. Chief among these findings is that supporting Computational Thinking is much more than making coding accessible. Computational Thinking Tools aim to minimize coding overhead by supporting users through three fundamental stages of the Computational Thinking development cycle: problem formulation, solution expression, and solution execution/evaluation.;2016
Computational thinking is one of the hot current computer education concern. This paper describes the connotation of computational thinking and their current progress, and from the perspective of computational thinking to sort out basic computer course content university, and algorithms, databases and network technology preliminary analysis, to solve practical problems for the other areas of expertise to provide inspiration and the method of Reference.;2016
Computational Thinking was an important way to study computer science and it explained the relationships between human, calculation and computer in terms of thinking. The computer science was raised from the theory of tools to the height of thinking. This paper introduced three levels of Computational Thinking Computational Thinking in computer science, Computational Thinking in computing science and Computational Thinking in all subjects and analyzed the thinking characteristic of calculation and the calculation attribute of thinking. Through Computational Thinking, human can solve problems by using computer more efficiently. Therefore, the cultivation of Computational Thinking's ability was particularly important in teaching. But Computational Thinking cannot be taught without carrier and the programing course was the best way for they were closely related with each other. The paper took the Maze Problem as an example to express the differences between human and computer in the aspects of storage structure, thinking mode, solving procedure, etc. and it compared the human brain's multi-dimension and multi-forms characteristics with the computer's ne-dimension and one-form characteristics. The paper thought the goal of teaching was not to learn knowledge itself, but to form problem solving thinking;2016
Computational Thinking, which entails using analytic and algorithmic approaches to formulate, analyse and solve problems, has increasingly gained attention in the educational field in the past decade, giving rise to a large amount of academic and grey literature, as well as to numerous public and private initiatives to implement it. Despite such widespread interest, its successful integration in school curricula is still facing several open issues and challenges. In order to contribute to the field development, we are carrying out a desk investigation to draw a comprehensive overview of recent findings produced by academic research, grassroots initiatives and policy actions addressing the development of computational thinking in primary and secondary school, as well as to highlight major implications for policy and practice. In this paper we describe the project methodology and a classification of the comprehensive corpus of documents collected. We also present a preliminary picture of the field as it is emerging from our analysis.;2016
Computer science (CS) is not being taught at Czech grammar schools (15-18 years old students). In our effort to change that, we developed and piloted a basic CS course. It introduces the fundamental ideas of CS comprehensively and in relation to existing subjects and real world applications. In this paper we describe the course program briefly and present the part of evaluation that focuses on students' point of view. We assessed how they perceive the subject of CS in context of other school subjects using a questionnaire with a qualitative and a quantitative part. It turns out that our approach to CS is considered intellectually very demanding, yet this does not seem to affect other features (interest, usefulness) too negatively. CS does not show extreme values in other measured attributes in comparison to other science subjects.;2016
Computer science education in K-12 and for non-majors at university often aims at making students confident with computational thinking by introducing them to programming. We are convinced that such programming classes offer a great opportunity to expose students to core concepts of computer science and thereby contribute to a broad and general education. In this article, we describe our approach and experiences with teaching programming at various levels, namely at primary schools, high schools, and universities. We identify a set of goals that allow us to go beyond the pure teaching of specifics of a given programming language, i.e., syntactical details, and shift the focus towards sustainable topics such as algorithms as problem solving methods and their analysis.;2016
Computer science is becoming ever increasingly important to our society. Computer science content has, however, not traditionally been considered a natural part of curricula for primary and secondary education. Computer science has traditionally been primarily a university level discipline and there are no widely accepted general standards for what computer science at K-12 level entails. Also, as the interest in this area is rather new, the amount of research conducted in the field is still limited. In this paper we review how 10 different countries have approached introducing computer science into their K-12 education. The countries are Australia, England, Estonia, Finland, New Zealand, Norway, Sweden, South Korea, Poland and USA. The studied countries either emphasize digital competencies together with programming or the broader subject of computer science or computing. Computational thinking is rarely mentioned explicitly, but the ideas are often included in some form. The most common model is to make computer science content compulsory in primary school and elective in secondary school. A few countries have made it compulsory in both, while some countries have only introduced it in secondary school.;2016
Computers cause an impact in almost every single aspect of our lives, however, unfortunately, schools have not been able to keep up with this irreversible evolution. The simple use of technological apparatuses in the classroom does not guarantee the improvement of the learning process, however it can be the medium through which the students find the alternatives for the solution of complex problems. The Computational Thinking is an approach of teaching that uses a diverse range of techniques derived from computers for the resolution of these problems combined with the new competencies of the 21st century (critical thinking, collaboration, etc.). The adoption of the notion of Computing within the basic education schools is a concern in many countries, where the implementation occurs in a strict way. Admittedly, it grows the idea that the Computing discipline is very distinct from the computer classes and that the use of skills from Computing possesses educational (reflection and problem solving, the comprehension that the world is ingrained with the digital technology) and economic (high demand of professionals with good training) benefits. This article, through the vast bibliographic review, describes an international landscape of countries of all Americas, in order to contextualize the reader in respect to the adoption of Computational Thinking within the basic education schools.;2016
Considering the present situation of PhotoShop teaching in Colleges and universities, most attention is paid on the imparting knowledge and skills, but the refined thinking is ignored. In this paper, a new method is introduced by cultivating students' computational thinking in the Heuristic teaching based on mind mapping and driving teaching. This method sums up the significance of the computational thinking in the teaching of PhotoShop in Colleges and Universities. The experimental results show the method can help students cultivate the ability of computational thinking, so as to achive the aim of innovation on PhotoShop usage.;2016
Core subjects by field of knowledge for official University studies have been established in Annex II of the RD 1393/2007. Computer Science appears only in Engineering and Architecture Degrees. It is therefore necessary that the training received by high school students in the Computer field is not limited only to the intrinsic knowledge of current digital technologies and their immediate practical uses. It is crucial that the training also focuses on the development of skills that enable students to adapt to new technologies that might emerge in the future, especially, in the field of smart education and next generation smart classrooms. Whereas computational thinking may be the most appropriate for developing such skills, in this work, a particular proposal for measuring the development of computational thinking abilities in students is described, together with the results obtained in an experiment carried out during the practicum of the Master's Degree in Secondary School Teaching from the Universidad de La Laguna.;2016
Critical computational literacy (CCL) is a new pedagogical and conceptual framework that combines the strengths of critical literacy and computational thinking. Through CCL, young people conceptualize, create, and disseminate digital projects that break silences, expose important truths, and challenge unjust systems, all the while building skills such as coding and design. This empirical study of CCL is based at Youth Radio, a nationally recognized multimedia production company in Oakland, California. Using embedded ethnographic methods, we focus on one collaborative project inside Youth Radio's Interactive department, where young people partnered with adult colleagues to produce a web-based interactive map of gentrification in a West Oakland neighborhood. Findings demonstrate a highly sophisticated knowledge production process where youth are simultaneously contending with content, message, audience, aesthetics, design, functionality, execution, and the long-term ramifications or digital afterlife of their work. Through learning environments organized around critical computational literacy, young people emerge as critical problem-solvers unified by the technical know-how and the critical consciousness necessary for them to leverage digital tools for social transformation.;2016
"Critical thinking and problem solving are fundamental skills to function successfully particularly in today's world. When programming, these skills are promoted, developed and deployed. In this context, Universidad ORT Uruguay and The University of Edinburgh co-created in 2015 a MOOC (Massive Open Online Course) that teaches young teenagers how to program. The course was implemented simultaneously in 2 versions: in Spanish, called !A Programar!and in English, called Code Yourself!, which are available on the Coursera platform. Since its launch in March 2015, more than 139,000 people from 197 countries have registered. Initially it was offered in a fixed session; while currently it is offered in an autocohort mode. In both cases, students' surveys indicate that the course has met or exceeded expectations (values above 93%). In this paper, we detail the characteristics of the MOOC, and we analyze and compare the modes and results.";2016
Croatian curriculum reform started in February 2015 as one of measures in Strategy for education, science and technology. During first phase of curriculum reform 55 documents were created - for all levels of pre-tertiary education, all subjects, cross curricular topics and frameworks for assessment, special education and gifted education. One of subject curriculum document is for subject Informatics whose authors are: Predrag Brodanac, Nikolina Bubica, Lidija Kralj, Zlatka Markucic, Marina Mirkovie, Maristela Rubie and Darka Sudarevie with support: Antonela Czwyk Maric, Viktorija Hrzica and Branka Vuk. Aims of subject Informatics are to enable students to become digitally literate, to develop computational thinking, digital wisdom, critical thinking and use technology effectively, responsibly and respectfully. In order to reach that aims curriculum of Informatics is organized in four domains: Information and digital technologies, Computational thinking and programming, Digital literacy and communication and E-society.;2016
Current policy efforts that seek to improve learning in science, technology, engineering, and mathematics (STEM) emphasize the importance of helping all students acquire concepts and tools from computer science that help them analyze and develop solutions to everyday problems. These goals have been generally described in the literature under the term computational thinking. In this article, we report on the design, implementation, and outcomes of an after-school program on computational thinking. The program was founded through a partnership between university faculty, undergraduates, teachers, and students. Specifically, we examine how equitable pedagogical practices can be applied in the design of computing programs and the ways in which participation in such programs influence middle school students' learning of computer science concepts, computational practices, and attitudes toward computing. Participants included 52 middle school students who voluntarily attended the 9-week after-school program, as well as four undergraduates and one teacher who designed and implemented the program. Data were collected from after-school program observations, undergraduate reflections, computer science content assessments, programming products, and attitude surveys. The results indicate that the program positively influenced student learning of computer science concepts and attitudes toward computing. Findings have implications for the design of effective learning experiences that broaden participation in computing.;2016
Designing games requires a complex sequence of planning and executing actions. This paper suggests that game design requires computational thinking, and discusses two methods for analyzing computational thinking in games designed by students in the visual programming language Scratch. We present how these two analyses produce different narratives of computational thinking for our case studies, and reflect on how we plan to move forward with our larger analysis.;2016
Developing students' 21st century skills, including creativity, critical thinking, and problem solving, has been a prevailing concern in our globalized and hyper-connected society. One of the key components for students to accomplish this is to take part in today's participatory culture, which involves becoming creators of knowledge rather than being passive consumers of information. The advancement and accessibility of computing technologies has the potential to engage students in this process. Drawing from the recent publication of two educational frameworks in the fields of computational thinking and media & information literacy and from their practical applications, this article proposes an integrated approach to develop students' 21st century skills that supports educators' integration of 21st century skills in the classroom.;2016
"Digital competence is, besides a right promoted by European Union, a necessity of all citizens that should be taught and provided from early years and during all the life. Although technology is a common matter for young people, its use and its competences have differences among countries, cultures, status, residence places, etc., even within the members of the same family. At the same time, nowadays computing, because of its ubiquity and role in innovation, has become an essential tool for competition in the increasingly global knowledge economy. Therefore, we propose to go beyond digital competence and to use the computational thinking. Computational thinking involves solving problems, designing systems, and understanding human behavior, by drawing on the concepts fundamental to computer science. Computational thinking includes a range of mental tools that reflect the breadth of the field of computer science. There are four key concepts within computational thinking, where each one is as important as the others: decomposition, that is, breaking down a complex problem or system into smaller, more manageable parts; pattern recognition, or looking for similarities among and within problems; abstraction, in the sense of focusing on the important information only, ignoring irrelevant detail; and algorithms, which we can define as the process to develop a step-by-step solution to the problem, or the rules to follow to solve the problem. Our objectives are to implement the computational thinking in the Secondary School at a first level and to design materials for a quick and easy way of using by teachers and students. Methodology to achieve these objectives is divided in several steps that can be briefly explained as spreading the concepts of computational thinking, training in this matter, generating some materials as examples of the implementation, learning to use these materials and promoting to generate new materials by teachers. In the scope of the process, we try to involve all type of subjects, with special emphasis in STEM subjects because the obvious reason that they are easier to be implemented with simple examples. We present in this paper a summary of the meaning and uses of the computational thinking and an analysis of the chance to integrate it in the curricula in a transversal way, without the necessity of generating or implementing a new curriculum.";2016
Digital game design is a complex activity relying on multiple skills of the 21st century as such creativity, problem solving, collaboration in interdisciplinary teams and computational thinking. The complexity of the knowledge modelling and creation process, game design is a powerful learning activity that could benefit in learning from childhood to older adults. Our experiences take advantage of the digital game design as a complex learning activity and engages learners from different age groups in a joint activity. In this paper, we analyze the scaffolding process of intergenerational game design activities as an instructional learning strategy. We argue that the process could help learners from different ages and backgrounds to collaborate together in doing progressive steps through their game design process.;2016
"Digital native generations have been technology consumers all their lives, but they have never created anything with it and they have no idea how these technologies work. Computational thinking has not been fostered within the digital-native generations, in a way to encourage the development of other important skills, such as reasoning, problems solving, logic, creativity, perseverance and working as part of a team. These skills are a basic mechanism for the day-to-day life and for the understanding of STEM subjects like mathematics, physics, technology or science. We aim that our children should be educated to be capable of contributing to that digital frame with maturity and critical attitude. To do that, children should learn how to program from a very early stage at school and to familiarize with electronics and mechanical topics; for that reason, robotics is the perfect discipline to combine all of them. Only teachers with an electronic background dare to make use of isolated electronic components. Therefore, we offer a methodology supported by a book and on-line resources to teach robotics with Arduino and Scratch. Firstly, an introduction to electronics topic and a basic programming with a graphical language and, finally, gathering all that knowledge to build up a robot from scratch. In order to guide students and teachers on how to correctly assembly the electronic components, augmented reality will also be used. This paper describes the development of an augmented reality book that can be used by students to learn electronics and computer programming. Students whether they are alone, in groups, at home or in the classroom can use mobile devices (smartphones or tablets) through augmented reality to help them in the electronics assembly. We believe that the use of augmented reality will change significantly the teaching activities by enabling the addition of supplementary information that they will be able to see on a mobile device and complement the other supplied materials. As a result, the young aged 12 to 16 will learn how to program, topics of electronics and how to build a robot, while they are developing their computational thinking and reinforcing their knowledge about science, physics, mathematics, oral and written expression, while working in a group, among others skills.";2016
Digital technologies have reshaped our experience of the material world. In this augmented and hybridized condition, information (and architecture) has no social relevance unless circulated, shared, and integrated into everyday life through interfaces between the digital and physical. The `more serious work' presented here is digital craft as a method for materializing the digital and extending the agency of computational thinking and parametric design into a new social project for architecture. In an age of digital social networks, the future of public spaces will largely depend on an architecture that navigates the interface between the material and the digital.;2016
Digital technologies have reshaped our experience of the material world. In this augmented and hybridized condition, information (and architecture) has no social relevance unless circulated, shared, and integrated into everyday life through interfaces between the digital and physical. The 'more serious work' presented here is digital craft as a method for materializing the digital and extending the agency of computational thinking and parametric design into a new social project for architecture. In an age of digital social networks, the future of public spaces will largely depend on an architecture that navigates the interface between the material and the digital.;2016
During the recent years computational thinking has been actively promoted through the K-12 curriculum, higher education, contests, and many other initiatives. Computational thinking skills are important for a further students' educational and professional career. Our focus is on computational thinking for software engineering novice students, a term meant to encompass a set of concepts and thought processes that are helpful in formulating problems and their solutions. Annually organized international challenge on Informatics and Computational Thinking Bebras'' has developed many tasks to promote deep thinking skills in this area. It is important to motivate students to solve various informatics or computer science tasks and evaluate their computational thinking abilities. The paper presents a study conducted among first-year students of software engineering, studying the structured programming course. As an instrument to measure computational thinking, a test of internationally approved and well-preselected tasks from the Bebras'' challenge has been suggested and validated. The correlation between the students' test results and the structured programming course results has been investigated. We conclude with a discussion and future directions to enhance computational thinking skills of novice software engineering students.;2016
EarSketch lowers the barriers to entry and broadens engagement in computer science through expressive and culturally relevant music composition. In EarSketch, students write computer code to remix sound samples into original music compositions, often within hours of first exposure to the application. Coupled with sound samples rooted in modern music genres, EarSketch generates deep student engagement. We observed two unexpected challenges when implementing EarSketch in high school Computer Science Principles courses. First, music that appeals to the students' generation may be difficult for teachers to appreciate (and vice versa). Second, while a majority of students engaged in music production and coding, we observed that some students fixated on artistic musical expression without engaging in substantial computational thinking. These findings may apply more broadly in computational courses situated in expressive domains and to STEAM courses in general. We conclude with suggested changes to professional development, which may be applied more generally to creative computation and STEAM-based courses.;2016
Educational robotics are increasingly integrated in education. In some cases, robots are used as an extracurricular activity which is not oriented towards the learning objectives of the curriculum or follows a procedural approach which does not engaged the learner in a creative knowledge inquiry, construction and application process. In some cases, educational robotics are integrated in the classroom as knowledge modelling tools. The pedagogical potential of educational robotics for knowledge modelling is based on the combination of constructivism [1] and constructionism approaches [2] engaged in the modelling, programming and evaluation tasks in project-oriented robotics. This presentation introduces two type of educational learning activities supported by the LEGO WeDo robotic kit.;2016
Fundamentals of Computer is a compulsory course of non-majors in many universities of China. In this paper, we explore the reform on this course for two goals. One is to redesign the teaching content: from operation oriented to computational thinking oriented. Computational thinking is one of the most important ability for 21st century and has become the primary goal of computer foundation education. New content covers the basic principles of computer science as well as the fundamental ways of thinking and problem solving with computer. The second goal is to improve teaching methods by leveraging mobile technology. We propose the use of MIT App Inventor, which is a simple tool for creating mobile applications for Android. Students with no prior knowledge of programming can create entertaining and socially useful applications with App Inventor while practicing computational thinking.;2016
Game developers have been using commercial game engines to create serious games. The development of serious game is a process that requires game and instructional design. Constructionist environments and games are becoming more popular in the last years because of the importance of Computational Thinking to develop problem solving skills. Despite this popularity, there is a lack of available game engines and frameworks to develop this kind of games. This paper proposes a game engine architecture to support the affordable development of constructionist games. The game engine specification describes components of game, instructional and constructionist elements as a low-level definition that facilitates direct implementation. A serious game built upon this specification and used by 96 students is also presented in this paper. This validation provided some future work ideas, as an editor tool, SDK and API.;2016
How can educational technologists most effectively support children in their development of computational thinking? This project attempts to integrate recent evidence from embodied cognitive science with concreteness fading: an instructional theory popular in mathematics and science education. Through a series of classroom studies, I will investigate the effectiveness of the concrete-pictorial-abstract sequence, and the relative benefits of physical and virtual implementations of the concrete stage. Results will be used to guide the development of an interactive learning environment for use in primary school classrooms.;2016
How can elementary grade teachers integrate programming and computational thinking with the science curriculum? To answer this question, we present results from a long-term, design-based, microgenetic study where 1) agent-based programming using ViMAP was integrated with existing elementary science curricula and 2) lessons were taught by the classroom teacher. We present an investigation of the co-development of children's computational thinking and scientific modeling and show that the integration of programming with scientific modeling can be supported by the development of sociomathematical norms for designing mathematically good computational models.;2016
In 2015 the Peter Pan Charity Association and the Institute for Educational Technology of the Italian National Research Council, from within the welcome centre 'The Great House of Peter Pan' (home for temporary domiciling of those needing onco-haematological therapy at the Bambin Gesu pediatric hospital in Rome), launched the WendyTD initiative, which involves several volunteers of the association (the so called Wendies), who deal with the playful entertainment of the children in the use of some educational technologies (TD1) in playful learning activities. This contribution will illustrate the capabilities of the technologies considered (Bee-Bots, Pro-Bots, Tablets and IWBs) to implement playful learning during the entertainment of young guests in the houses. In addition, the methods and tools used to monitor the activities of the children will be explained. Some first evidence will also be presented, in particular how the use of the proposed playful approach and technology allows the children to reach educational goals in an informal way. The contribution will outline how the initiative will continue in order (a) to consolidate the practices put in place in the first year of activity, (b) to foster the involvement of the over 14 young people, relying on more advanced technologies, stimulating computational thinking through the use of robots, 3D printers, holograms, videogame editors, etc.;2016
In a technology-fueled world, coding is an essential skill for young people. MOOCs (Massive Open Online Courses), which are free online courses available to a very large number of people, are an effective and increasingly popular option for teaching scientific topics to a worldwide audience. However, despite the large number of MOOCs available on computer science, there is a scarcity of coding-related MOOCs that are designed for children and teenagers. In this paper, we present a programming MOOC that was recently developed by The University of Edinburgh and Universidad ORT Uruguay for teenager high school students with no prior programming experience. The MOOC was collaboratively developed by the two teams, resulting in a shared instructional design but with a bilingual delivery: Code Yourself' in English and A Programar in Spanish. In this paper, we describe the course design for a young audience and we discuss the international co development of the course materials. Furthermore, we present results from its simultaneous bilingual delivery in spring 2015, where around 85000 students participated. Student surveys show encouraging results: more than 93% found that the course met or exceeded their expectations, and more than 90% stated that they plan to continue programming in the future.;2016
In a world where technology has become pervasive in our lives, the notion of IT integration in education practice is losing its significance. It is now more appropriate to discuss transforming pedagogy where technology is not considered a tool anymore but part of what we are. To advance this hypothesis, an enterprising, student-directed approach is proposed which embraces problem-solving as activity and computational thinking as knowledge development. In order to test its efficacy, a case study of students developing a 3D virtual space for international collaboration is used to exemplify the transformational pedagogy. From observations of the enactment of heutagogical characteristics and computational thinking, it is argued that we can now teach and learn in technology. This modality will come to dominate how technology operates as our lives, and become central to what it means to know and learn.;2016
In mobile assisted language learning, devices are mostly used to provide digital, captivating versions of traditional exercises to teach the four language skills foreseen by the Common European Framework of Reference for Languages. The goal of this paper is to introduce an innovative and novel approach to German learning, which goes beyond learning with the assistance of mobile devices. The idea is to create a mobile app, which includes exercises that require computational thinking to be applied. This allows us to reach two goals. First, learners can discover the grammatical structures and become able to apply them in other contexts, which shows competence acquisition. Second, the assessment of these exercises allows us to measure competencies (also partial ones), beside knowledge. Such a diagnostic assessment can be helpful both for learners (to understand where improvement is needed) and for teachers (to check the effectiveness of their activities). In this paper, we show sample applications to illustrate concretely the potentials of our approach.;2016
In recent years, there has been a growing interest in and recognition of the importance of Computational Literacy, a skill generally considered to be necessary for success in the 21st century. While much research has concentrated on requirements, tools, and teaching methodologies for the acquisition of Computational Literacy at basic educational levels, focus on higher levels of education has been much less prominent. The present paper considers the case of courses for higher education programs (undergraduate and graduate university levels) within the Humanities. A model is proposed which conceives of Computational Literacy as a layered set of skills rather than one single skill, where Computational Thinking is the first layer of the model. Skills acquisition at these layers can be tailored to the specific needs of students. The work presented here builds upon experience from courses for such students from the Humanities in which programming is taught as a tool for other purposes. Results, challenges and recommendation are discussed.;2016
In recent years, with the rise of the concept of Computational Thinking, the issue about College Computer teaching reforms has received wide attention. A high percentage of the research nowadays focuses on how to impart knowledge of computer in the perspective of computational thinking. But more importantly, the research ignores an important way to train thinking---practice. This paper starts with the College Computer Curriculum, which is the first computer course for undergraduate students. By using virtual reality technology, this paper gives the college teacher an experimental design method of College Computer Curriculum. Some exploratory research works have been performed to explain how to embody the basic problems of computer public course. Finally, we introduce a set of virtual experiment libraries, which are independent research and development. These experiments have already achieved excellent results in the practical teaching of college computer curriculum.;2016
In the last years, socialization of the software development process has been proven to be an emergent practice, becoming social development platforms (such as GitHub or GitLab) very popular among software developers. However, little is still known about how social factors influence software development. In particular, in this paper we focus on how socialization affects the learning of programming skills, as developing software can be considered, in part, a continuous learning process. Aiming to shed some light in this regard, we analyze the social interactions of almost 70,000 users and the sophistication of over 1.5 million software products authored by them in the Scratch platform, the most popular social coding site for learning to program. The results indicate that there is a relationship between the social conducts of users and the improvement of their programming abilities, showing that more social actions performed by users is positively associated with more sophistication in their programs. Furthermore, the results also provide evidence that the relationship of social factors with the development of software programming skills tends to grow with time.;2016
In this essay, Amy Voss Farris and Pratim Sengupta argue that a democratic approach to children's computing education in a science class must focus on the aesthetics of children's experience. In Democracy and Education, Dewey links democracy with a distinctive understanding of experience. For Dewey, the value of educational experiences lies in the unity or integrity of experience. In Art as Experience, Dewey presents aesthetic experience as the fundamental form of human experience that undergirds all other forms of experiences and that can bring together multiple forms of experiences, locating this form of experience in the work of artists. Particularly relevant to the focus of this essay, computational literacy, Dewey calls the process through which a person transforms a material into an expressive medium an aesthetic experience. Farris and Sengupta argue that the kind of experience that is appropriate for a democratic education in the context of children's computational science is essentially aesthetic in nature. Given that aesthetics has received relatively little attention in STEM education research, the authors' purpose here is to highlight the power of Deweyan aesthetic experience in making computational thinking available and attractive to all children, including those who are disinterested in computing, and especially those who are likely to be discounted by virtue of location, gender, or race.;2016
In this paper we describe our process for synthesizing frameworks for recognizing student talents in the areas of Computational Thinking (CT) and Engineering Design (ED) from prior research. Computer science education research has resulted in multiple, overlapping definitions of CT as an approach towards solving problems using methods and tools that are derived from computer science. Our development of operationalized definitions of CT talent for middle school educators is focused on uniting models for CT in a simplified structure. Our ED definition framework builds on multiple distinct models of the engineering design process along with concepts from systems engineering models and the design thinking process. We operationalize these frameworks to provide teachers with metrics and examples for recognizing and assessing the CT and ED skills of their students in non-technical classes. By training teachers to evaluate students' processes from the perspective of an engineer and computer scientist, teachers are more able to help their STEM-inclined students recognize the alignments between their own talents and possible careers. Through the analysis of teacher surveys and interviews from 19 classroom implementations, we evaluated the changes that the Arts & Bots program has had on teacher perceptions of student CT and ED skills and talents.;2016
Information society puts forward higher requirement for the practical teaching of computer basic courses in the universities of finance and economics. Research shows that the original uniform teaching cannot meet the professional demand and the needs of different levels of students. According to the status of computer basic courses in Tianjin University of Finance and Economics, this paper puts forward the suggestions on the practical teaching reform, reconstructs the practical teaching system of computer basic course, adopts the practical mode of the graded teaching and classified teaching to the students with the different majors and different levels. In addition, some measures of teaching reform are proposed to be taken. Finally, the practical teaching reform will cultivate the application ability and computational thinking ability of the student.;2016
"Introductory programming courses often concentrate on teaching students the syntax for a specific programming language and the relevant constructs for implementing sequence, selection, and iteration. A necessary component of teaching programming, a fundamental flaw is the omission of a suitable strategy for teaching students problem solving. The ability to manipulate a programming language from a syntactical perspective leaves the students with a cursory awareness but does not necessarily mean that given a complex problem they will have the ability to produce a suitable solution. Thus it is important to embed within the teaching of introductory programming an integrated approach to problem solving. This can be a challenge within itself as students are not always receptive to the traditional approach of defining the problem, planning the solution, coding and testing the program. Present such problems as a paper and pen based exercise, couple this with the student's perceptions of these problems as irrelevant and a recipe for lack of engagement ensues. Teaching introductory programming to Game Software Development students lead to an interesting observation; while playing various genres of game, when encountering a puzzle, they appeared to consider their options as if mentally processing a strategy or solution before proceeding. Thus a hypothesis was derived that the use of cerebral based puzzle games could be used to introduce computational thinking, its four key techniques and the mapping between these techniques and the basic programming building blocks in a fun and engaging manner far removed from the traditional approach. Game Software Development students were already, unwittingly, implementing the techniques of decomposing the problem, identifying patterns, abstracting out relevant information and developing suitable algorithms to solve the puzzle. This paper will present the initial research identifying the underlying pedagogical issues associated with the use of game based learning in respect of computational thinking and the genres of game considered for use and the pedagogical constructs they exhibit.";2016
It is estimated that approx. 52% of public schools in Brazil have no Internet connection and several of the others only have slow Internet connection. In addition, there is a lack of a physical infrastructure within schools to allow the inclusion of educational technology tools which can give teachers assistance. However, there is a means of overcoming this problem by employing techniques to teach Computer Science without computers, which is called unplugged computing. In this paper, new didactic strategies were devised for disseminating computational thinking among elementary school teachers with the aid of unplugged computing. These strategies are based on computational algorithms mapped to unplugged computing activities. We develop a theoretical-practical workshop involving 37 public school teachers to analyze and test the proposed strategies. However, it was found that although the teachers were interested to learn the new skills required for unplugged computing, most of them stated that they would probably not replicate the knowledge acquired in their teaching practice.;2016
It is one of a teacher's challenges in lesson planning to consider all levels of learning involving students' team skills while taking the actual subject content into account. This descriptive study examines how the student-centered approach can be utilized as supportive classroom climate and how it can be combined with cooperative team tasks for solving computational thinking problems using an easy accessible computer-coding environment. Drawing on existing concepts and research methods this study applies a case study approach with mixed methods to investigate students' development of team-attitudes and characteristics of team cooperation. It turned out, that students identified the quality of cooperation in their teams as beneficial and productive while from an outside point of view their teamwork seemed to be unorganized and not cooperative. These contradicting results were clarified in a classroom meeting, where it became clear, that the student-centered classroom climate still could have influenced students' team attitudes in a way that students felt comfortable to express themselves in their, sometimes not so nice, youth language during problem solving tasks but while be able to solve problems effectively.;2016
It is widely acknowledged that many freshmen go to university without any prior grounding in computer science. Recent studies conducted in the US have shown that not only do high school students lack any exposure, but also they possess ill-conceived notions of what computer science is, a problem also affecting their parents, teachers and regional school superintendents. For incoming students, the extent to which computing technology impacts their daily lives is very likely at odds with the extent to which they have considered how software works and its ethical implications. The ability to critically analyze and consider related ethical consequences of computing is an important life skill for every twenty-first century adult and not just computer scientists. With this this in mind, this paper presents a unique CSO introduction to programming and computer ethics for pre CS and non majors. It has been defined as a service course to promote digital literacy and to ensure that students appreciate what computer science is and its socio-ethical implications. The paper outlines the course and its content in detail, as well as providing quantitative and qualitative evidence of its benefit and appeal to female students.;2016
Many attempts have been made to integrate software into various industries through software development, but due to low enrolment in science and engineering programs, the human resources supply in computer science has been insufficient to meet industry demand. Consequently, curricula have been revised to foster the development of software-focused human resources, and many schools have introduced software education into courses. Following this paradigm, South Korea's curriculum revisions in 2015 made informatics subjects mandatory in elementary and middle school and modified the contents to focus on computational thinking and informatics cultural literacy. However, the contents and the days devoted to this subject are insufficient to foster software competency. To develop classroom guidelines for this subject, a standard education model is needed. Consequently, this study analyzes various computer-science education models and develops a new one for the Korean context. The models analyzed are the CSTA K-12 Computer Science Standards developed by the Computer Science Teachers Association in the United States, Computing released in 2014 in the United Kingdom and the 2015 curriculum revision in South Korea. Five categories of the CSTA K-12 Computer Science Standards were applied in a comparative analysis: computational thinking, collaboration computing practice and programming, computers and communications devices, and global community and ethical impacts. In each category, the subjects and contents of the curriculum were compared. The results of the comparative analysis were adapted to the Korean context to develop a draft of a Korean computer science education model. A broad variety of opinions were gathered at two conferences with computer-science education experts and educational experts in diverse fields to develop the final model. The computer science education model developed in this study identifies the standards of contents that must be taught to foster the human resources needed in the future. As a prototype, the model should be revised by the development of computer science technology. Furthermore, the construction of an integrated computer science model is needed to align the proposed model with computer science education in tertiary education.;2016
Mobile devices with all their advanced features (the networking and multimedia capabilities, portability, intuitive interfaces, location awareness etc.) enable teachers to involve students in learning activities that may bring the formal school environment closer to real-world contexts, provide the attractive and personalized learning experiences as well as enhance the collaboration, creativity and productivity of learners substantially. Thanks to the long-term national projects concerned with mobile technology and its successful adaption as an effective learning tool, teaching practice in Slovak primary and secondary schools is getting better. However, the integration of tablets and smartphones is still rather intuitive or even improper. Within the informatics education, lessons usually take place in a computer laboratory, so the innovative mobile scenarios are considered less frequently. This paper provides an overview of the potential of tablet devices to support learning. This paper presents the sum of general and specific use cases targeting the learning objectives stated by the Informatics curriculum. They were implemented during the regular lessons, non-formal workshops or summer camps and comprise both, the indoor and outdoor scenarios. They focus on informatics concepts and were designed to foster computational thinking. Mobile technology is used to facilitate the active construction of knowledge and development of new skills.;2016
Mobile programming is one of the fastest growing approaches in many fields, such as marketing or e-commerce. From the educational perspective, this means that students should understand that they can build mobile applications (apps) without being professionals, and at the same time recognize their own potential to use technology in any professional path they choose. This goal is not trivial, even if students are in general curious and open to learn about the creation of apps. Indeed, especially in liberal education, students get discouraged upfront as they perceive programming as a difficult task. This paper describes a course that was created to fit the educational needs of a social-economic high school. Students take part of an interdisciplinary project in which the Software Engineering process is used to promote CT skills. The course was repeated twice and involved 29 students (8th and 9th grade).;2016
Ninja Code Village is a comprehensive learning support environment for the Scratch, visual programming language. It provides more than 60 sample functions that are commonly used in Scratch projects, and analyses automatically which functions are used in a project in order to foster students' competencies in abstraction, modelling, and decomposition. It also provides automatic assessment of computational thinking concepts such as conditional statements, loops, data, and parallelism in order to develop students' programming skills.;2016
Non-computer major students in the future are required to master new computer methods to support different subjects' research. In order to make the computational thinking fuses with the thinking of other subjects, and promote the formation of all students' creative thinking, this paper comes up with the teaching problems of the existing non-computer majors about the setting of teaching content, teaching pattern, teaching methods and teaching tools, and then proposes five reformation schemes. The traditional teaching method/studying method is tools oriented, while this paper puts forward a novel teaching model which can completely change the traditional teaching approach to computational thinking oriented blending learning, flipped class and cooperative learning model. Furthermore we use the independently developed MOOC (Massive Open Online Courses) platform and the MOOC classes involved with teachers and students, aiming at training students' computational thinking to realize the flipped class. One-year practice result shows that the proposed teaching model can turn the main teaching objective to making students achieve computing thinking skill from traditional prescriptive teaching and to create a basic computer technology educational class system which takes the computer science theory, knowledge application, basic skill as foundation, takes computational thinking as principle line and takes the information application skills as goal.;2016
Nowadays, the lack of basic knowledge and competences on technology hinders the possibility of obtaining qualified jobs, embarking on higher studies and participating in society. For that reason, the teaching of computer science in secondary schools is of high interest. In a country, where a great need of graduates in informatics is expected, it is fundamental to have competent teachers that encourage students and to have public policies tending to make this growth possible. Working with informatics during secondary school could initiate students in useful concepts regarding computational thinking to be applied to any profession. This article describes events related with the teaching of informatics in Argentina, focusing on its development in secondary education.;2016
One of the problems of education today is that it continues to favoring the teaching of contents instead applying skills and cognitive abilities that allow a development of the thought of the students. Besides a traditional education, it is considered that a reflection of the complex thought can contribute to a better understanding of a contemporary reality. Education today has as a challenge the explanation and understanding, from a hermeneutic perspective, of the new complexities of reality to the occurrence and the everyday use of the internet, ICTS web 2.0 and social networks. For this reason, the proposal of this article is that there is a relationship between complex thinking and computational thinking that affects an improvement of the quality of education. This research focuses on a reflection on education from the conception of uncertainty and complexity. It refer to the relationship between a complex thought and a computational thinking from connectivism and the challenges of a society 3.0 in which ICT is incorporated into the daily life of human beings. In the other hand, a definition of computational thinking will put us on this new way of thinking from real problems through a new computational logic to achieve solutions. The computational thinking challenges the contemporary education to incorporate this new approach to the solution of problems, building systems and prospective understanding of the relationship between science, technology and society 3.0.;2016
"Our multi-year national research study examines knowledge and perceptions of computer science (CS), disparities in access, and barriers to offering CS in the United States. The first year of the study surveyed 1,673 students, 1,685 parents, 1,013 teachers, 9,693 principals, and 1,865 superintendents, and the second year surveyed 1,672 students, 1,677 parents, 1,008 teachers, 9,244 principals, and 2,227 superintendents. We found that while large majorities of respondents from all groups continue to hold positive perceptions of computer science work as fun, exciting, and socially impactful, perceptions of who can do CS remained narrow. Despite support from large majorities in all groups for having CS in schools, few teachers or administrators strongly agree that CS is a top priority in their school or district, and principals report mixed support for CS from key stakeholders. Few principals and superintendents describe demand for CS from students and parents as high, while few parents and teachers report having specifically expressed support for CS education to school officials. Our paper also uncovers overall opportunities to learn CS in-and out-of-school. We see an increase in the percent of schools teaching computer programming/coding. Even if opportunities exist, students and parents may not know about them; just over half of students and teachers and 43 % of parents are aware of CS learning opportunities in the community, with slightly higher percentages of students and parents aware of online opportunities. Barriers to offering CS in schools remain largely unchanged from year one of the study, with principals continuing to cite a lack of teachers with the necessary skills and a prioritization of courses related to testing requirements as reasons why CS is not offered in their schools. To overcome such barriers, we discuss a potential opportunity for teachers to incorporate CS into existing school subjects.";2016
"Pair programming (PP) is a usefulness approach to fostering computational thinking (CT) for young students. However, there are many factors to impact the effectiveness of PP. Among all factors, the social factors are often ignored by researchers. Therefore, this study aimed to explore the impact of two social factors (gender and partnership) on PP in a primary school setting. To that end, we conducted PP experiments in four classes from the sixth grade in a Chinese primary school. The research results indicated: (a) there was no significant difference on compatibility among the gender pairs, but a significant difference among partnership pairs; (b) there was no significant difference on programming achievement and confidence among different pairs, and girls became more productive and confidence in PP; and (c) PP tightened up the partnership within pairs. These findings suggest that teachers should take partnership into account as an important factor in PP or other collaborative learning, and adopt PP as an effective approach to decrease the gender gap in programming courses, and make students socialize. (C) 2016 Elsevier Ltd. All rights reserved.";2016
Pattern recognition is one of the fundamental competencies associated with computational thinking and STEM education. Although much has been written to define computational thinking (CT), we argue that CT is a multi-faceted construct and specific aspects of CT (such as pattern recognition) should be examined. The purpose of this study is to conduct a systematic review of literature on pattern recognition to define pattern recognition as an aspect of computational thinking. The synthesis included the Engineering Village database (Compendex and INSPEC). We searched peer reviewed articles and the keywords, pattern recognition, pattern generalization and education. The initial search resulted in 208 articles. The screening of abstracts more closely resulted in 17 relevant articles, which were then read in detail by two researchers. The review of this pool resulted in two relevant articles, one with a focus on mathematics education and the other one in the context of medical education. Surprisingly there were no articles that examined pattern recognition as part of engineering or computer education. Further research examining specific aspects of CT is necessary.;2016
Pedagogical robots are increasingly popular from kindergarten to secondary education. The pedagogical potential of educational robotics for knowledge modelling is based on the combination of Piaget's constructivism [1] and constructionism approaches [2]-[4]. In this context, we develop a pilot study aiming to extend the age range of the mBot Arduino-based robot, which is appropriate for older primary school children but does not suit kindergarten children due to an open architecture, which allows touching directly the Arduino electronic board. In order to adapt mBot for younger users, the CocciBot project had two main objectives. The first objective is to adapt the robot for younger users by encapsulating its exposed board in a shell with character and life aiming to create a positive impact on the emotional level. The second objective is to add an autonomous programming feature for straightforward and less complicated usage.;2016
Previous studies suggested that computational thinking is an important skill that schools should start equipping children with from primary school education. This study proposes way to develop a mobile app coding curriculum in primary 4 to 6 to nurture students' computational thinking. It will guide students to undergo learning stages from developing their own codes and combining with others' work to create their own apps and staging their apps to gain confidence and recognition of performance in coding. An example of mathematic game in the curriculum is selected as a case study to illustrate in this study how it incorporates the elements of computational thinking in the coding activities progressively. It is believed that the proposed way of curriculum development paves a learning path which may drive students' interest in coding and students could develop computational thinking skills progressively.;2016
Programming for beginners is becoming increasingly more difficult to understand since most innovative tools immediately throw students into an environment where they must build everything in a program from nothing with inconsequential programming skills and little knowledge of programming concepts. As programming based careers are rising in demand, it is important to help the beginner programmers bridge the gap between understanding a program and developing one. Robot Chronicle offers a solution to this dilemma through a different approach than common state machines such as Scratch, Alice, Playmaker, and Code Spells and introduces the basic concepts of programming through a puzzle-based video game.;2016
Recent government moves in many countries have seen coding included in school curricula, or promoted as part of computing, mathematics or science programmes. While these moves have generally been associated with a need to engage more young people in technology study, research has hinted at possible benefits from learning to program including fostering general thinking skills. However, little research has been carried out exploring these ideas. This study analysed data collected while 5- and 6-year-old students in a New Zealand primary school were using Scratch Jnr. to learn about basic shapes, as part of a numeracy topic. Analysis combined Brennan and Resnick's (2012) computational thinking skills framework and Krathwohl's (2002) revision of Bloom's Taxonomy to evaluate any role general thinking skills played in these students' coding work. Results suggest including basic coding in primary curricula provides teachers with an effective means of exercising their students' general and higher order thinking skills. They build on Brennan and Resnick's (2012) framework by including conceptualization as an important element in students' computational work and highlight the role of predictive thinking in debugging code. Findings support historical arguments that more needs to be done to investigate students' cognitive processes when undertaking computational work.;2016
Recent increased interest in computational thinking poses an important question to researchers: What are the best ways to teach fundamental computing concepts to students? Visualization is suggested as one way of supporting student learning. This mixed-method study aimed to (i) examine the effect of instruction in which students constructed visualizations on students' programming achievement and students' attitudes toward computer programming, and (ii) explore how this kind of instruction supports students' learning according to their self-reported experiences in the course. The study was conducted with 58 pre-service teachers who were enrolled in their second programming class. They expect to teach information technology and computing-related courses at the primary and secondary levels. An embedded experimental model was utilized as a research design. Students in the experimental group were given instruction that required students to construct visualizations related to sorting, whereas students in the control group viewed pre-made visualizations. After the instructional intervention, eight students from each group were selected for semi-structured interviews. The results showed that the intervention based on visualization construction resulted in significantly better acquisition of sorting concepts. However, there was no significant difference between the groups with respect to students' attitudes toward computer programming. Qualitative data analysis indicated that students in the experimental group constructed necessary abstractions through their engagement in visualization construction activities. The authors of this study argue that the students' active engagement in the visualization construction activities explains only one side of students' success. The other side can be explained through the instructional approach, constructionism in this case, used to design instruction. The conclusions and implications of this study can be used by researchers and instructors dealing with computational thinking.;2016
Recent trends in architectural education and practice have encouraged the use of computational tools and methods for solving complex design problems. Newer technology can augment the design process by applying progressively more-advanced computational tools. However, the complex nature of these tools can lead to students getting lost at the skill-building stage, they can become trapped in computational design terminology, leading to designs of limited spatial quality. This paper introduces a pilot study from Izmir University of Economics (IUE) for the integration of computational design technology in the undergraduate architectural curricula, based on a workshop series using a top-down teaching strategy.;2016
Re-emphasizing our agenda for this special issue as marking the shift from epistemological to ontological concerns in social science inquiry, Patti Lather locates it in challenging the orthodoxies of both positivist and critical approaches to the calculative, computational thinking and the limits of reason. With a focus on an escape from psychometrics in education research, she grounds her remarks in the context of the wider terrain of the possibilities of quantification for cultural studies and (post)critical inquiry.;2016
Reflecting political shifts toward both 'network governance' and 'digital governance', the idea of 'learning to code' has become part of a major reform agenda in education policy in England. This article provides a 'policy network analysis' tracing the governmental, business and civil society actors now operating in policy networks to project learning to code into the reformed programs of study for computing in the National Curriculum in England. The insertion of learning to code into the curriculum provides evidence of how the education policy process is being displaced to cross-sector 'boundary organizations' such as 'policy labs' that act as connecting nodes to broker networks across public and private sector borderlines. It also examines how the pedagogies of learning to code are intended to inculcate young people into the material practices and systems of thought associated with computer coding, and to contribute to new forms of 'digital governance'. These developments are evidence of a 'reluctant state' deconcentrating its responsibilities, and also of a computational style of political thinking that assumes policy problems can be addressed using the right code. Learning to code is seen as a way of shaping governable citizens that can participate in the dynamics of digital governance.;2016
Research has identified multiple reasons why people do end-user programming but has yet to quantify one of the most basic: making more money. This is an important gap in the literature given the current widespread efforts to promote computational thinking skills, because this education campaign is often linked to the argument that end-user programming skills will contribute to workers' long-term career prospects. Therefore, this paper presents a study investigating how the earnings of workers varied as a function of whether they used spreadsheets/databases and/or did programming at work. Examining survey data from 2003 revealed a positive correlation of earnings against these variables, even after controlling for the occupations of workers. Overall, occupation-adjusted earnings were 14% higher for workers who used spreadsheets/databases and who also did programming, versus those who did neither. These results provoke numerous questions for future research regarding what financial benefits workers can expect to obtain in different settings through end-user programming.;2016
RoboCupJunior is an international educational robotics initiative, aiming to promote STEM content and skill learning among participating youth through educational robotics competition inaugurated in 2000. What makes RoboCupJunior quite unique is its relationship with RoboCup which aims to promote robotics and AI research, by offering a publicly appealing, but formidable challenge including development of soccer robots, search and rescue robots, and robots functions at home and at work. This paper introduces a case of RoboCupJunior and the effectiveness of its practice for enhancing learning of STEM contents and skills for innovation and creativity among participating students. It presents the survey results from one of the World Championships held in 2012, the anecdotal and personal account of participating US students on their learning experience from their participation in 2013 World Championship, and participating students' technological and innovative contributions to highlight the impacts RoboCupJunior has had through over a decade of its practice. (C) 2015 Elsevier B.V. All rights reserved.;2016
Science and mathematics are becoming computational endeavors. This fact is reflected in the recently released Next Generation Science Standards and the decision to include computational thinking as a core scientific practice. With this addition, and the increased presence of computation in mathematics and scientific contexts, a new urgency has come to the challenge of defining computational thinking and providing a theoretical grounding for what form it should take in school science and mathematics classrooms. This paper presents a response to this challenge by proposing a definition of computational thinking for mathematics and science in the form of a taxonomy consisting of four main categories: data practices, modeling and simulation practices, computational problem solving practices, and systems thinking practices. In formulating this taxonomy, we draw on the existing computational thinking literature, interviews with mathematicians and scientists, and exemplary computational thinking instructional materials. This work was undertaken as part of a larger effort to infuse computational thinking into high school science and mathematics curricular materials. In this paper, we argue for the approach of embedding computational thinking in mathematics and science contexts, present the taxonomy, and discuss how we envision the taxonomy being used to bring current educational efforts in line with the increasingly computational nature of modern science and mathematics.;2016
Seeing that current C language programming teaching mode is deficient in the training of computational thinking, this paper proposes PBL method to teach this course. This method will properly design problems around a selection of cases and allure students with those problems to actively learn and research relevant knowledge. Thus the students can enhance their computational thinking consciousness, method and ability during the process of solving problems.;2016
Several authors and studies highlight the benefits of the integration of Computer Science into K-12 education. Applications such as Scratch have been demonstrated to be effective in educational environments. The aim of this study is to assess the use of a Visual Programming Language using Scratch in classroom practice, analyzing the outcomes and attitudes of 107 primary school students from 5th to 6th grade in five different schools in Spain. The intervention takes place in two academic years analyzing the practice of integrating coding and visual blocks programming in sciences and arts. The Computational concepts and computational practices dimension details a quasi-experimental approach, which showed significant improvement regarding learning programming concepts, logic, and computational practices with an active approach. The Learning processes and coding in primary education dimension analyzes the practice of the experimental group through questionnaires and structured observation. In this pedagogical design, students interact and create their own content related to curricular areas with several advantages, such as motivation, fun, commitment, and enthusiasm, showing improvements related to computational thinking and computational practices. Understanding of computational concepts through an active approach, Project Based Learning, usefulness, motivation, and commitment underline the importance and effectiveness of implementing a Visual Programming Language from active methodologies in primary education. Due to the aforementioned benefits and positive results obtained in this research, it is recommended to implement a Visual Programming Language in educational settings in 5th and 6th grade in primary education through a cross-curricular implementation. (C) 2016 Elsevier Ltd. All rights reserved.;2016
"Several initiatives have been created to promote Computational Thinking (CT) abilities in students. There are multiple approaches of assessing CT and wide abilities and skills involved. However, the evidence on how to assess CT has not yet been systematically grouped or reviewed. The goal of our study is to identify and classify approaches to promote CT and the different ways of assessing CT abilities. To achieve this goal, a systematic mapping study was planned and executed. The results reveal that: (i) programming courses are the most common pedagogical approaches to promote CT for K-12 students; (ii) multiple skills are involved in CT, but solving problems, algorithms, and abstraction are most common abilities assessed; and (iii) codes and multi-choice questionnaires are the most common artifacts for assessing CT abilities. This study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing CT abilities.";2016
Simulation and modeling activities, a key point of computational thinking, are currently not being integrated into the science classroom. This paper describes a new visual programming tool entitled the Simulation Creation Toolkit. The Simulation Creation Toolkit is a high level pattern-based phenomenological approach to bringing rapid simulation creation into the classroom environment. Students create agent-based simulations via analogy between the real world phenomena they are trying to represent and interacticons, which are visual animations of generic agents enacting the phenomena. This approach obviates the need for students to implement low level and often time-consuming agent behavior programming and yet, requires the use of abstraction, which is a key component of computational thinking. Initial data shows that students in the classroom can implement simulations faster using the Simulation Creation Toolkit as compared to the end-user programming level and begins to show that students can use the Simulation Creation Toolkit to create simulations through analogical reasoning. In this sense, Simulation Creation toolkit provides an initial data point into the integration of Computational Thinking activities through simulation construction in the classroom environment.;2016
Software education will be included in public education in South Korea as of 2018, and National Curriculum was made last year. The goal of the curriculum is to focus on three core competencies, namely information culture literacy, computational thinking, and collaborative problem solving. The curriculum also has four large main areas, as follows: information and culture, data and information, problem solving and programming, and physical computing. The physical computing section has initiated the greatest debate. It is controversial because practice in the classroom requires the use of physical computing tools, such as Arduino, but teachers lack knowledge about this physical computing tool and its circuit configuration. Therefore, they should receive training on the hardware components of the tool. Moreover, they need to choose a practical tool among many physical computing tools and must know how to teach them. In this research, we study a practical approach to teaching Arduino programming in the physical computing section so that the new software education curriculum can be implemented properly in schools. We also seek to help teachers to address their problems to achieve optimal educational success.;2016
Some computing educators, especially in African context, have been interested in pedagogical strategies that cultural heritage can provide viable mental models to enhance teaching and learning in curriculum. Particularly, students from Africa have rich cultural heritage that provides new ways of conceptualising computing principles. It is essential that literature provides framework that explains pedagogical benefits of indigenous knowledge in computing education. We analysed scientific publications related to computing education by systematically reviewing the article from constructivist perspectives on students learning from cultural heritage. The study reveals that constructivist philosophical assumptions of multiple meanings to reality and subjectivity in knowledge construction are compatible with the main objective in ethnocomputing studies that seeks to contextualise computing principles in cultural heritages.;2016
Some researchers consider that the benefits of Computational Thinking (CT) in education are unclear, and therefore a quantitative study to understand the effects of CT skills in the basic levels of formal education is needed. The present study aims to analyze the effects of CT on the academic performance of students in high school. We seek to answer the following research questions: (RQ1) Can CT increase the problem-solving skills of students in high school? (RQ2) Is CT related to the performance of students in high school? (RQ3) Can CT improve the performance of students in high school? We conducted an analysis between two groups of students with similar profiles belonging to the same population, where the factor CT proficiency is the only feature that distinguishes both groups. The results show that there is a moderate correlation between the performance of evaluated students and their skills of CT developed by computer programming. In addition, we found that students proficient in computer programming have superior performance up to 10.2% in ENEM (National Exam of High School) assessment compared to those with little or no experience level and even better performance 21% in the WASI test problem-solving in students on attending high school.;2016
Spreadsheets are arguably the most used form of programming and are frequently used in higher education to teach fundamental concepts about computation. Their success has shown that they are simple enough for a huge number of end users to learn and use. This is in contrast to traditional programming languages and the high dropout rate from introductory programming and computer science. However in comparison to traditional programming languages and structured modelling, spreadsheets are not expressive, placing a limit on the levels of computational thinking that can be taught using the spreadsheet paradigm. This limitation is imposed by the lack of programming language features and abstractions in the paradigm. Furthermore, more advanced spreadsheet features (e.g. array formulae, lookup formulae, R1C1 syntax) can be difficult to learn and use. This paper discusses the idea of adding language features to spreadsheets, enabling the gradual structuring of free-form spreadsheets to more structured models. We propose that this concept is termed Gradual Structuring, and is analogous to the programming language concept of gradual typing. In this analogy, spreadsheets take the place of dynamic programming and structured modelling of static programming. In programming languages, gradual typing allows dynamic programming to be mixed with static programming. It is our contention that dynamic programming is more learnable while static programming is more expressive and abstract. Gradual typing could be used to mitigate the issues in the teaching of traditional programming. Likewise Gradual Structuring can mitigate the conceptual limits that can be taught using current spreadsheets. The key language feature required to enable Gradual Structuring is the ability to logically group cells together so that a single formula can be applied to the grouped cells. This concept, termed cell grouping diminishes and can even eliminate the need for the ubiquitous and error-prone use of copy-pasted in spreadsheets. Moreover, it makes the structure present in spreadsheet models explicit. Cell grouping requires a cascade of other new languages features. Namely a more expressive referencing style, which in turned requires enabling labels to be moved to the row and column headers, and the hierarchical structuring of these headers. Respectively these language features are termed enhanced referencing and semantic axes. The ongoing research focusses on the usability and learnability of these language features. Spreadsheet applications exist that contain aspects of the features mentioned. However these applications do not enable Gradual Structuring and have taken a mainly technical,;2016
Storytelling is widely recognized as a powerful tool to enhance learning, because of its support to meaning making and to the development of expressive (possibly multimodal) skills. An interesting variant to storytelling-based learning activities is the construction of storyworlds apt to support the development of interactive stories. This differs from the design of traditional story plots in that storyworlds represent collections of possibilities to be combined in various ways, rather then pre-defined sequences of events, from which different plots can emerge, at every use of the story, from the interaction between user and story-environment. This contribution aims to reflect on the process of constructing a story world, highlighting how this type of construction implies a different mental activity and skill development than traditional storytelling.;2016
The adoption of computational thinking (CT) has been increasing in K-12 classrooms and curricula. One population that could benefit from early instruction in CT is students with Autism Spectrum Disorders (ASD). Unfortunately, many individuals with ASD lack the social competencies to successfully navigate a work environment. The purpose of this paper is to discuss a digital games-based learning intervention for youth with ASD to learn computational thinking and social skills. Dubbed Virtuoso, the intervention targets youth with ASD to gain social skills while working together to solve introductory computer programming problems with virtual, programmable robots. One objective is to create learning materials that embed social competency instruction within a CT-focused curriculum. Another objective is to develop an immersive space where participants can work together on curricular content. Using educational design research methods, we are developing and refining instructional interventions so as to maximize their educational impact.;2016
"The aim of this study is to perform the state of the art in ICT education and application of ICT in the educational process in primary school in Bulgaria and abroad. The possibilities for development of education in ICT with respect to requirements of information society and world trends in usage of computing in education. The following topics are discussed: ICt and pedagogical theories; Application of ICt in primary school in Bulgaria and abroad; Problems in process of implementation of ICT in primary school. Also the paper considers the place of computational and algorithmic thinking in primary school curricula.";2016
The appearance of MOOCs has boosted the creation of educational material for use in all possible contexts. However, this material is often created without much thought and without proper tools and methodologies. Much more attention should be placed on the design of educational material, since this is the basis for a successful learning experience. In this special session, we report about several interesting approaches towards the design and creation of educational material that range from the call to the definition of a discipline of Courseware Engineering, to a methodology for video recording, another one for the creation of smart adaptive content, tools metrics for teaching computational thinking, the integration of OERs, and the design and application of game-based material.;2016
The application of network teaching platform can make up the deficiency of teaching resources and limits of time and space of the traditional teaching mode and it is the main direction of current teaching reform and development. The computer basic courses in colleges and universities have employed the self-study and self-evaluation platform system of encyclopedia garden and the flipped classroom in the process of teaching practice to assist the reform programs and the concrete implementation of teaching as well as cultivate the innovative and compound talents with computer application ability, computational thinking ability and innovation ability.;2016
The computer science (CS) education field is engaging in unprecedented efforts to expand opportunities in K-12 CS education, and to broaden participation of students traditionally underrepresented in CS. However, even as the field considers ways to provide access to high school computing in general, and the new AP CSP course in particular, one underrepresented group is often overlooked: students with learning differences (that is, students with specific learning disabilities and related attention deficit disorders, like ADHD). The national dialogue about broadening participation in K-12 computing education has given almost no voice to this population. As computer science education initiatives grow, K-12 teachers need evidence-based guidance about how to account for challenges specific to learning disabilities and attention deficit disorders so that these students who learn differently can access instruction and curriculum in ways that address their learning needs. This paper reports on the first phase of a National Science Foundation (NSF) supported exploratory research study (Grant #1542963) to address this problem. We describe our education research-practice partnership that aims to make CS more accessible for students who learn differently and in doing so, highlight the team's process of collaboration as a critical element to address the problem and support equitable learning in CS.;2016
The Computer Science (CS) Principles framework seeks to broaden student participation and diversity in the field by focusing on the creative and social aspects of computing. As the pilot effort undergoes its early execution phases, this research contributes to the theoretical and practical application of CS Principles. We investigated the impact of CS Principles on student motivation and learning outcomes and sought to determine if the pedagogy created any lasting change on student perceptions of CS as a field of practice. We report a case study of how CS Principles created an effective framework for introducing undergraduate students to the fundamentals of computer science. We discuss how Self-Determination Theory instantiates Self-Directed Learning, Constructionist, and Connectivist learning theories, which can be used to inform the pedagogical framework. Quantitative and qualitative measures were used to assess the impact of CS Principles on student motivation and learning outcomes, followed by an additional surveying of students one year after the completion of the course. Results indicate that CS Principles facilitated positive programming experiences for students, helped increase learning interest and improve attitudes of CS as a field of study, positively changed perceptions of CS as a creative practice, and also encouraged students to continue learning CS after the course had finished. In particular, many non-majority students in the course self-reported to having positive changes and attitudes about CS explicitly because of the course. These finding suggest that CS Principles is a step in the right direction for creating more engaging and compelling curricula to diverse groups of students, especially those with minimal experience and exposure in the field. We discuss opportunities for future work using the selected theoretical framework for CS Principles.;2016
The concept of computational thinking has caused wide public concern over the world. How to cultivate students' computational thinking and creative ability becomes a common question. This paper proposes some suggestions about the curriculum provision of theory courses and experimental teaching of computer science and technology.;2016
The cultivation and training of computational thinking become more and more significant in basic computer education in university. In this paper, firstly the necessity of the computational thinking is analyzed in contribution to the learning of the usage of application software. And then a new teaching scheme based on computational thinking is proposed in the computer teaching design and teaching pattern. The experimental results show that the application software teaching based on computational thinking is feasible and more effective to improve the quality of our teaching;2016
The development of computational thinking skills through computer programming is a major topic in education, as governments around the world are introducing these skills in the school curriculum. In consequence, educators and students are facing this discipline for the first time. Although there are many technologies that assist teachers and learners in the learning of this competence, there is a lack of tools that support them in the assessment tasks. This paper compares the computational thinking score provided by Dr. Scratch, a free/libre/open source software assessment tool for Scratch, with McCabe's Cyclomatic Complexity and Halstead's metrics, two classic software engineering metrics that are globally recognized as a valid measurement for the complexity of a software system. The findings, which prove positive, significant, moderate to strong correlations between them, could be therefore considered as a validation of the complexity assessment process of Dr. Scratch.;2016
The development of skills that allow children to perform satisfactorily in their training process and, later, in their work or social life, has become an objective for all educational and training models developed. This article deals with the relationship between thinking development skills, shared mental models and abstraction mechanisms, from a theoretical review and application with children aged between eight and twelve, from the Childprogramming methodology in a public education institution in Colombia. The results recorded at the end of the practices with this group of students, especially when assessing the progressive use of abstraction mechanisms in the Scratch environment, are presented, using the Dr. Scratch platform.;2016
The extensive research in the domain of computational thinking has identified itself as one of the critical skills that needs to be a part of regular K-12 curriculum. However, most of the tangible computational thinking toolkits that are being developed are bulky and expensive to be deployed in classroom environments. In this paper we present Code Bits, a paper based tangible computational thinking toolkit that is inexpensive, portable and scalable. The students create programs using the tangible paper bits on any flat surface and use the Code Bits mobile application to process the code, which runs on any android device with a camera and uses augmented reality based games to improve the computational thinking skills of the students. The toolkit has been designed in way so as to promote collaboration amongst students.;2016
The importance of coding as an instrument to develop computational thinking, especially in young children, has been underlined by the recent proliferation of large scale coding literacy campaigns such as Hour of Code, Europe Code Week, and Africa Code Week. The success of these campaigns has been bolstered by the use of innovative teaching tools, such as Scratch and Blockly, encouraging interactivity in teaching, fostering creativity, and giving participants a sense of agency. By leveraging the collaborative nature of the learning process, we envision large scale events that capitalize on the success of these initiatives and push the boundaries even further. In this paper we describe an interactive, in-presence, large-scale event format, which introduces computational thinking and algorithmic problem solving to large audiences. The event format is inspired by the standard coding puzzle schemes introduced by Code. org and Hour of Code. Programs are written collaboratively using a visual programming editor and are then interpreted live, with the full participation of the audience. The crowd thus acts as a programmer, interpreter, and program executor. This approach illustrates how algorithms work and conveys the parallelism between the actions of the audience and the execution of a real computer program. The game's implementation, its mechanisms, the hardware setup adopted in real experiments, and the results achieved on large-scale pilots are presented and discussed in the paper.;2016
The importance today is the development of computational thinking of technological professionals. This kind of thinking is useful for solving algorithms, analyzing, designing, coding and generating tests in a computer language. Today, obtaining knowledge and skills is related to the use of technology. In this paper, a robot is used as a teaching element to motivate the generation process of computational thinking in students of high school level. Measurement of variables, such as: advantages, interest, competition and operating time serve as indices to determine the degree of acceptance of this educational tool.;2016
The important task of computer basic teaching is to cultivate students' ability of computing thinking. Through continuous efforts, there are many forms of teaching mode during the course of teaching, improving the process of practice and assessment, and fully mobilize the enthusiasm and initiative of students learning. In order to cultivate talents with the ability of thinking and innovation, a useful exploration has been carried out, which makes students have the ability to solve practical problems with the combination of professional knowledge.;2016
The increasing presence of software in people's life, at both professional and personal level, reveals that problem solving and programming skills can give people greater freedom of action and thought when facing everyday life. In our job at the Universidad Pedagogica of Buenos Aires Province, we develop research tasks aimed at investigating how to develop digital fluency in young people and teachers through the design, development and programming of digital interactive objects. For this project, we chose Arduino open source platform. As a result, we observed that the use of this resource is relevant and very valuable to develop an educational proposal as an introduction to computational thinking.;2016
"The logic of education addresses the policies that in matter is applied in education systems of nations and studying the methods used in education, learning, man, communities and the results given in societies. This helps to reason about the failures that occur in education and also in the good results are consolidated into education systems. It also serves as an academic proposal in these times of change, innovation and transformation, affecting society today, to improve pedagogical action, development and progress of mankind and society with ethical and moral values. Education has allowed the inclusion of technologies that go far beyond the walls of the classroom, as well as the emergence and dissemination of methodological teaching. Thus it is facilitating a new teaching dynamics, student creativity is stimulated and promoted cooperative work, to motivate the world academic. Currently, educational institutions have an learning additional as a pedagogical tool; is computational thinking, which facilitates the acquisition of the basis of criteria and good decision making. This is an abstract mechanism inspired by human intelligence and notions of integrity and randomness. Also, computational thinking is a fundamental part of the learning process at all ages, but mainly in children, as they now are learning the basics of a language of communication and technology to create animations and develop their abilities. It should be noted that the abstraction of computational thinking helps create solutions for problems in the real world of the XXI century. It can be used in two primary ways: for users and for the machines themselves.";2016
"The millennial students registering at the university are skilled at using technology for entertainment and fact finding. But, the necessary curiosity to know the workings of the technology and the ability to utilize it productively seem to be lacking. Mentoring at high-school presents the same dilemma. The foundations needed to investigate, explore, and develop problem-solving with computation is seen missing. This project was an attempt to jumpstart this process by introducing fundamentals of computation and problem solving using computers to students prior to entering high-school. Additionally, pedagogical techniques taught and used by middle school teachers were used to create activities and sustain interest. In particular the constructionist approach by John Biggs [2] was adopted together with the ideas in Self Theories [1] professed by Carol Dweck. The curriculum was developed incrementally - in conjunction with the pedagogical techniques learned through the graduate level Middle School Education course. The course comprised fifteen (15) one hour sessions, once per week. The course was delivered using a combination of videos and reflective discussion, current events and relevant articles, short quizzes, demonstration of programming tools and techniques developed for the class, team projects, active classroom participation, and student presentation. The class comprised of 14 7th and 8th graders; with 8 girls and 6 boys; three teachers and one university professor and an MS student. Various pedagogical techniques learned in the classroom - Selective Readings and Teaching Strategies for Middle School Children - were used to keep student attention, group formations, discussions moderation, and assignment creation. All activities were conducted as a team project or classroom activity. First set of activities involved making the class relevant to student interest and understanding the relevance of technology to all aspects of society. Subsequently, using the Java language and the JEdit interface, students were introduced to computational problem solving first - where the code resembles the output and then code that needs to be interpreted to ensure expected output is achieved. Students learned core values needed to work on computational problem solving. This include soft and hard skills. The curriculum was developed on the go based on student feedback and hence was quite different than originally envisioned. But this is precisely the constructionist approach and thus was most effective from the students' point of view. Students also learned the need and use of soft skills and skills from various disciplines to creatively deliver useful products and technologies. A surprising side-effect was that the school teachers participating in the project got motivated and interested in computing. The participating teachers - science and social studies teachers - were motivated to learn software development and participated extensively in the process. We thus achieved in-service teacher training. This may be the better approach to teacher training.";2016
The need for teachers of Elementary School children to learn to program or rather to understand the Computational Thinking behind programming has been accelerated in many countries by the mandated teaching of programming in this context. A major problem is that the majority of such teachers have no concept of how to program and naturally are not motivated to learn programming. The need to teach programming will motivate most but to learn through a tool that can be seen to have intrinsic value in their role as teachers have a greater potential. This paper describes the design and early implementation of a tool to use the learning of Flash Action Scripting as a motivational mechanism for trainee teachers. The intrinsic value to them is intended to be the utilisation of the learned Action Scripting skills to produce their own teaching material. Initial results indicate an enhanced engagement and motivation to learn to program and improved confidence in doing so.;2016
The new global economy has a great potential to shift economic power on a massive level resulting in a new and growing digital divide in the world. Over the past few decades, computers have transformed both the world and the workforce in many profound ways. As a result, computer science and associated technologies now lie at the heart of smart economies worldwide. Many reports around the world state that failure to teach Computer Science and associated technologies in the Digital Age will be disastrous. This paper summarizes the recently developed comprehensive standards and performance criteria for K-12 computer science and technology education designed to strengthen computer science fluency and competency throughout primary and secondary Schools in UAE. The paper presents a comprehensive overview of the up-to-date trends in computer science education worldwide and then demonstrates the adaptation of such practices to the design of a fully customized standards document that fit UAE culture and vision regarding transformation to knowledge based economy, innovation, and entrepreneurship.;2016
The outcome of a multidisciplinary and iterative process, CyberPLAYce is a tangible, interactive, cyber-physical learning tool for children supporting computational thinking and, particularly, playful storytelling. CyberPLAYce finds inspiration in the concept of child-computer interaction, where meaning is constructed through spatially reconfiguring the physical environment. The novel aspect of CyberPLAYce is its extension of cyber-learning to the dimension of space where children construct meaning at a larger physical scale. This paper outlines the motivations for CyberPLAYce, focuses on the full arc of design and evaluation activities concerning computational thinking (CT) practices that engaged 8-12-year-old storytellers, and concludes with a consideration of future work focusing on spatial thinking with CyberPLAYce. Results from our empirical study suggest that cyber-physical play afforded by CyberPLAYce scaffolds computational thinking, creating, and sharing in children. Particularly for IDC researchers in the educational domain, CyberPLAYce represents a Research-through-design exemplar supporting children's enjoyment of learning and meaning-construction.;2016
The paper aims to analyse and propose scientific methods suitable for evaluating the adaptation quality of Virtual Learning Environments (VLEs) matching Informatics learners' needs. The authors' approach consists of the consecutive application of the principles of multiple criteria decision analysis for identifying the VLEs adaptation quality criteria, sets portrait method to analyse the interconnections of the VLE adaptation quality criteria and the learners' computational thinking skills, fuzzy group decision making theory to obtain final evaluation measures of the VLEs quality criteria, and scalarization method to obtain the final results of evaluating the VLEs quality. While applying these methods, appropriate decision support system was developed. This system consists of the learners' computational thinking skills' questionnaires, observations results and conclusions, VLEs adaptation quality criteria, their ratings (values) and weights, and final evaluation results that propose a proper decision. This approach should help Universities and schools to create, buy, or find free VLE software mostly suitable for teaching and learning Informatics. Computational thinking term is detailed in the paper, and interconnected with the VLEs adaptation quality criteria using sets portrait method. After that, multiple criteria decision analysis approach is used to evaluate the adaptation quality of VLE in terms of its conformance with the learners' computational thinking styles. The experts' additive utility function is proposed to use for the expert evaluation of the adaptation quality of VLEs. Trapezoidal fuzzy numbers method is proposed to use for establishing both weights and ratings (values) of the VLEs quality criteria matching learners' computational thinking styles. Practical example of the experimental evaluation of three popular open source VLEs is also presented in the paper. Presented research results are particularly useful for Informatics/software engineering education.;2016
The paper deals with students' participation in the Bebras challenge on Informatics and Computational Thinking in Lithuania in 2010-2015. As noticed, secondary school students have an opportunity to learn the basic informatics concepts during the participation in the Bebras challenge. Analyses of a large amount of data from participants' task solving records are provided. Additionally, observation of the task difficulty level of the Bebras contest in the past 6 years is presented. The target group, on which a research study was focused, is a group of students who solved tasks 6 years in turn. A detailed overview of their results provides an understanding how the participants have solved tasks over these years. The importance of algorithmic thinking as an opportunity for students to learn and understand the basics of informatics as well as develop their computational thinking skills is emphasised. The results of data analysis highlight the importance of students' achievements by a long-term participation.;2016
The paper is a description of the continuing research of the efficacy of a 3D virtual world simulation to support more engaged academic practice and transformative learning in Higher Education. Within the context of a virtual Fukushima nuclear power plant, tasks of quantifiable complexity are designed using programmable robots to engage learners in robot-mediated interactions in both real and virtual worlds. The paper will demonstrate that the use of a 3D virtual simulation to facilitate the collaborative programming of robots provides opportunities for students to engage in professional interactions, constructionist learning, computational thinking and knowledge development.;2016
The rapidly increasing use of computers in education has caused a resurgence of interest among educators. Educational technology must be engaging, interactive, and motivating. Integrating information and communications technologies into the classroom examines topics critical to innovation and entrepreneurship. The ideal model for flipped instruction stands on four pillars: a platform for instructional delivery, availability of student and faculty resources, creation of an online community, and faculty assessment. An educational technology that incorporates a high degree of social and community-building opportunities is more effective and successful.;2016
The recent focus on computational thinking as a key 21st century skill for all students has led to a number of curriculum initiatives to embed it in K-12 classrooms. In this paper, we discuss the key computational thinking constructs, including algorithms, abstraction, and automation. We further discuss how these ideas are related to current educational reforms, such as Common Core and Next Generation Science Standards and provide specific means that would allow teachers to embed these ideas in their K-12 classrooms, including recommendations for instructional technologists and professional development experts for infusing computational thinking into other subjects. In conclusion, we suggest that computational thinking ideas outlined in this paper are key to moving students from merely being technology-literate to using computational tools to solve problems.;2016
The systematic solutions to a berth allocation problem (BAP) at container terminals have been scarce owing to their high complexity and strong randomness. This paper extends the past research on modeling of container terminal logistics systems (CTLS) with computational thinking. We introduce and integrate the task scheduling architecture and mechanism in real-time operating system (RTOS) into BAP, and propose a partition berth allocation scheduler based on resource utilization and load balancing. Subsequently, we establish the fundamental principles of scheduler with the computing perspective and decision framework of ARINC 653, which is a design philosophy of RTOS for integrated modular avionics. Finally, the approach is demonstrated by investigating the stress testing of a typical container terminal logistics service case in contrast with the average random berth assignment algorithm based on the comprehensive computational experiments.;2016
The use of computer programming in K-12 spread into schools worldwide in the 70s and 80s of the last century, but it disappeared from the educational landscape in the early 90s. With the development of visual programming languages such as Scratch, this movement has emerged again in recent years, as teachers at all educational levels and from different disciplines consider that the use of programming enhances learning in many subjects and allows students to develop important skills. The systematic literature review presented in this article aims to summarize the results of recent research using programming with Scratch in subjects not related to computing and communications, as well as studies analyzing the kind of skills students develop while learning to code in this environment. Although the analyzed papers provide promising results regarding the use of programming as an educational resource, this review highlights the need to conduct more empirical research in classrooms, using larger samples of students that allow to obtain clear conclusions about the types of learning that could be enhanced through programming.;2016
Theorists and advocates of remixing have suggested that appropriation can act as a pathway for learning. We test this theory quantitatively using data from more than 2.4 million multimedia programming projects shared by more than 1 million users in the Scratch online community. First, we show that users who remix more often have larger repertoires of programming commands even after controlling for the numbers of projects and amount of code shared. Second, we show that exposure to computational thinking concepts through remixing is associated with increased likelihood of using those concepts. Our results support theories that young people learn through remixing, and have important implications for designers of social computing systems.;2016
There is a growing interest for Computational Thinking (CT) for the last decade. Most studies focus on teaching CT skills in K-12 level. In higher education, applying CT methods over all disciplines still needs cross institute movement, proper teaching tools and assessment procedure. In this paper we discuss the potential of applying CT methods in the mathematics courses at university level. With the inspiration of the Interest-Driven Creator (IDC) theory, we suggest that applying CT methods in mathematics benefits students' understanding of concepts and overcomes the drawbacks of traditional pedagogy. We study the case of introducing the limit of a sequence, which is a fundamental concept in calculus. An algorithm, inspired by the epsilon-N definition, is designed to find suitable N given a specific epsilon with exhaustion methods. Based on the algorithm designed, a game that help to introduce the epsilon-N definition of the limit of a sequence is presented as an example. The game would be developed on mobile devices for easy accessibility and for catering the trend of mobile device.;2016
There is wide recognition that teaching children to program is immensely important. A new digital divide is potentially defined in terms of competencies to create programs rather than access to computers. In this context perseverance and motivation needed to acquire programming skills are gatekeepers as are appropriate learning materials. Thus a new category of software products that attempts to turn learning to programme into play is of special interest. These playful programming products are the focus of our research program trying to bring perspective to their potential. A mid level goal of this program is to comprehensively compare different products against a stable list of skills and understandings supported by the category of playful programming software. This paper aims to initiate systematic development of this list of skills and takes inspiration from Brennan & Resnick (2012) where a model of computational thinking is held up against features of the visual programming language Scratch. However, we refine this model by assessing another playful programming product against it. The changing model is represented in a series of concept specialisation maps to support greater overview and transparency. A final relatively stable map is discussed with respect to the larger research projects goals.;2016
This article describes the design and implementation of the course Introduction to Computational Thinking (PC-01) for primary and secondary education. The course introduces the concepts and core processes of Computational Thinking using a visual programming environment. The design of the course PC-01 includes a set of multimedia content, learning tools and technologies that help teachers and students in the teaching-learning process. These tools allow the teacher the successful delivery of the course content as well as the individual/collective monitoring of students' progress in the course. Students have access to their progress throughout the course and participate in creative and collaborative tasks. This course also serves to introduce transversely educational technologies to many students of primary and secondary education. The technological environment integrates the online teaching resources and the methodological tools of the course. The course uses Scratch 2.0 as the programming environment and Moodle as the learning platform. At present the course is being implemented in public schools in the Dominican Republic.;2016
This article focuses on teaching a textual programming language as the first programming language (allowing for previously studied visual programming languages). The teaching process is placed into a real educational environment in connection with the national curriculum, social expectations and students reactions. In order to write a program, several abilities and pieces of knowledge are required. There are tools and syllabuses for teaching these skills but the result mainly depends on the personality of the students and teachers. We use the term Learning Activity Unit to describe the teaching-learning process of programming and detecting gaps in every day practice. This very simple model is practical for teachers to detect problems. In the global view of teaching programming, the implementation of the curriculum could be analysed.;2016
This article presents a systematic review of research related to the use of robotics construction kits (RCKs) in P-12 learning in the STEM disciplines for typically developing children. The purpose of this review is to configure primarily qualitative and mixed methods findings from studies meeting our selection and quality criterion to answer the review question: How do robotic construction kits function as computational manipulatives in P-12 STEM education? Our synthesis of the literature has resulted in four key insights that are new to the field. First, RCKs have a unique double application: They may be used for direct instruction in robotics (first-order uses) or as analogical tools for learning in other domains (second-order uses). Second, RCKs make possible additional routes to learning through the provision of immediate feedback and the dual modes of representation unique to RCKs. Third, RCKs support a computational thinking learning progression beginning with a lower anchor of sequencing and finishing with a high anchor of systems thinking. And fourth, RCKs support evolving problem-solving abilities along a continuum, ranging from trial and error to heuristic methods associated with robotics study. Furthermore, our synthesis provides insight into the second-order (analogical) uses of RCKs as computational manipulatives in the disciplines of physics and biology. Implications for practice and directions for future research are discussed.;2016
"This paper contributes to the growing body of research that attempts to measure online, informal learning. We analyze skill progression in MIT App Inventor, an informal online learning environment with over 5 million users and 15.9 million projects/apps created. Our objective is to understand how people learn computational thinking concepts while creating mobile applications with App Inventor. In particular, we are interested in the relationship between the progression of skill in using App Inventor functionality and in using computational thinking concepts as learners create more apps. We model skill progression along two dimensions: breadth and depth of capability. Given a sample of 10,571 random users who have each created at least 20 apps, we analyze the relationship between demonstrating domain-specific skills by using App Inventor functionality and generalizable skills by using computational thinking concepts. Our findings indicate that domain-specific and generalizable skills progress similarly; there is a common pattern of expanding breadth of capability by using new skills over the first 10 projects, then developing depth of capability by using previously introduced skills to build more sophisticated apps.";2016
"This paper describes a pilot study to evaluate its use for teacher Continuing Professional Development (CPD) in Computer Science (CS) using the Bridge21 model, a particular model of 21st century teaching and learning. A range of introductory Computer Science workshops are evaluated that include topics such as; Computational Thinking, Scratch, Raspberry Pi and Python. This paper includes a detailed look at the generalized activity model used in all Bridge21 activities. Combining the Kirkpatrick training evaluation theory with ethnographic methods the researchers analyzed qualitative and quantitative data gathered from 110 in-service teachers whom attended 9 CS CPD workshops. Using the Kirkpatrick framework as a taxonomy with which to code data relating to (a) teachers initial reactions towards the workshops and (b) intentions towards use of the Bridge21 model for supporting CS classroom delivery. Findings indicate that teachers' initial reactions towards the programme were positive and that teachers intend to use the model in their classroom.";2016
This paper describes the challenges and approaches to introduce computational thinking to a large and diverse group of architecture students during an international workshop with 300 students from different cultural backgrounds and educational levels, also integrating a diverse group of tutors whose computational expertise varied extremely. The approach suggested articulating a design task which enforced computational thinking but enabled different levels of engagement with the computer as a tool. Hypothetically this would allow all participants to engage with the computational thinking agenda regardless their computational affinity even whilst applying analogue methods. Besides the intercultural experience the workshop was successful in exposing a large group of students and tutors to the concepts of computational design whilst accommodating different learning preferences and engagement with the computer as a device.;2016
This paper describes the development, validation, and uses of the Collaborative Computing Observation Instrument (C-COI), a web-based analysis instrument that classifies individual and/or collaborative behaviors of students during computing problem-solving (e.g. coding, programming). The C-COI analyzes data gathered through video and audio screen recording software that captures students' computer screens as they program, and their conversations with their peers or adults. The instrument allows researchers to organize and quantify these data to track behavioral patterns that could be further analyzed for deeper understanding of persistence and/or collaborative interactions. The article provides a rationale for the C-COI including the development of a theoretical framework for measuring collaborative interactions in computer-mediated environments. This theoretical framework relied on the computer-supported collaborative learning literature related to adaptive help seeking, the joint problem-solving space in which collaborative computing occurs, and conversations related to outcomes and products of computational activities. Instrument development and validation also included ongoing advisory board feedback from experts in computer science, collaborative learning, and K-12 computing as well as classroom observations to test out the constructs in the C-COI. These processes resulted in an instrument with rigorous validation procedures and a high inter-rater reliability.;2016
This paper describes the findings of a pilot study that used robotics and game design to develop middle school students' computational thinking strategies. One hundred and twenty-four students engaged in LEGO(A (R)) EV3 robotics and created games using Scalable Game Design software. The results of the study revealed students' pre-post self-efficacy scores on the construct of computer use declined significantly, while the constructs of videogaming and computer gaming remained unchanged. When these constructs were analyzed by type of learning environment, self-efficacy on videogaming increased significantly in the combined robotics/gaming environment compared with the gaming-only context. Student attitudes toward STEM, however, did not change significantly as a result of the study. Finally, children's computational thinking (CT) strategies varied by method of instruction as students who participated in holistic game development (i.e., Project First) had higher CT ratings. This study contributes to the STEM education literature on the use of robotics and game design to influence self-efficacy in technology and CT, while informing the research team about the adaptations needed to ensure project fidelity during the remaining years of the study.;2016
This paper focuses on the current trends in the domain of brain research and on the current stage of development of the research for software and hardware solutions, communication capabilities between human beings and machines, new technologies, nanoscience and Internet of Things (IoT) devices. The proposed model for the Human Brain assumes the main similarities between human intelligence and the chess game thinking process. Tactical and strategic reasoning and the need to follow the rules of the chess game are all very similar to the activities of the human brain. The main objective for a living being and the chess game player are the same: securing a position, surviving and eliminating the adversaries. The brain resolves these goals and, moreover, the being's movement, actions and speech are sustained by the vital five senses and equilibrium. The chess game strategy helps us understand the human brain better and to replicate easier in the proposed 'Software and Hardware' SAH Model.;2016
This paper introduces a novel approach to providing high school students with access to computer science experiences as part of an Algebra unit on linear functions. The approach is being developed and tested as part of a funded National Science Foundation study. The unit piloted in the study integrates computational thinking and computer modeling into a project-based Algebra unit on linear functions. Literature on computational thinking, access to computer science in secondary settings, modeling approaches, project-based learning, and design-based research is described to provide a rationale for the study design. The ultimate goal of the study is to develop a paradigm for integrating computer science experiences into algebra as a way to increase engagement in STEM and computing among students from all backgrounds.;2016
This paper introduces an ongoing National Science Foundation funded project that prepares high school students for college readiness and fosters student interests in careers in Information Technology. The project targets a mixed student population from urban, low-income settings. Based on the project's first-year results, the paper proposes significant changes that will be implemented in the project's second year. These changes include a competency-based education curriculum in which students' IT knowledge and skills can be assessed in a way that three college course credits can be awarded to students who are still in high schools, a 12-hour graduate certificate program that prepares both in-and pre-service teachers to teach college IT courses for University of Cincinnati at their high schools through an Ohio College Credit Plus program, and a more concentrated research in computational thinking, which has been brought up for national attention and recognized as one of the essential competencies among Science, Technology, Engineering, and Mathematics disciplines.;2016
This paper presents Frog Pond, an interactive code-first learning environment about biological evolution. We deployed Frog Pond as part of a six-day curricular unit on natural selection implemented in six 7th grade science classes. Here we describe a case study of two students, Charlie and Aaron who participated in the unit. Comparing pre- and post-interviews in which they were asked to design a program for a hypothetical simulation of evolution, we found that both students shifted from an event-based programming approach to a rule-based approach. Both students also drew upon their experience with Frog Pond to explain an evolutionary phenomenon. However, the level of sophistication of the two students' explanations varied along with the aspects of Frog Pond they drew upon. These findings have implications for design improvement to better support students' understanding of evolution.;2016
"This paper will present a cross-European experience of game jams as part of a Horizon 2020 funded project: No-one Left Behind (NOLB). The NOLB project was created to unlock inclusive gaming creation and experiences in formal learning situations from primary to secondary level, particularly for children at risk of social exclusion. The project has engendered the concept of game jams, events organised with the aim of designing and creating small games in a short time-frame around a central theme. Game jams can support engagement with informal learning beyond schools across a range of disciplines, resulting in an exciting experience associated with strong, positive emotions which can significantly support learning goals. This paper will disseminate experience of two cross-European game jams; the first a pilot and the second having over 95 submissions from countries across Europe, America, Canada, Egypt, the Philippians and India. Data collected through these games jams supports that coding, designing, reflection, analysing, creating, debugging, persevering and application, as well as developing computational thinking concepts such as decomposition, using patterns, abstraction and evaluation. The notion of game jams provides a paradigm for creating both formal and informal learning experiences such as directed learning experience, problem-solving, hands-on projects, working collaboratively, and creative invention, within a learner-centred learning environment where children are creators of their own knowledge and learning material. This paper explores the use of a mobile app, Pocket Code, in schools across Europe in two game jams during the academic year 2015-16 with children aged 11-18. Pocket Code provides an environment which supports learners in easily creating apps directly on their smart-phones and tablets through a visual Lego (R)-style programming language where users can put code bricks together to form scripts. We draw on a range of data to support how game jams can be used as a design research method to observe the creation of knowledge in fast-paced, collaborative environments across a range of disciplines. Our data evidences that learners can be more motivated through game jams and that learners who are less likely to create games are nevertheless more engaged in a game jam setting. We will also present the frameworks for 3 games from different disciplines: Chemistry, Languages, and Mathematics.";2016
This submission describes my current status in implementing a dissertation study around the themes of gender equity, computational thinking, and teacher practice. The scholarly and social context for the study is presented, reviewing some of the work related to gender equity and computer science over the past decade. Computational thinking provides a framework for computer science education centered on the learning of mental skills and big ideas of the field. The effect this framing has on female students' performance and interest in computer science is unclear. Establishing any possible benefits would be instructive for researchers, as would isolating teacher practices that support any possible benefits for equitable interactions.;2016
"This work investigates the development of students' computational thinking (CT) skills in the context of educational robotics (ER) learning activity. The study employs an appropriate CT model for operationalising and exploring students' CT skills development in two different age groups (15 and 18 years old) and across gender. 164 students of different education levels (Junior high: 89; High vocational: 75) engaged in ER learning activities (2 hours per week, 11 weeks totally) and their CT skills were evaluated at different phases during the activity, using different modality (written and oral) assessment tools. The results suggest that: (a) students reach eventually the same level of CT skills development independent of their age and gender, (b) CT skills in most cases need time to fully develop (students' scores improve significantly towards the end of the activity), (c) age and gender relevant differences appear when analysing students' score in the various specific dimensions of the CT skills model, (d) the modality of the skill assessment instrument may have an impact on students' performance, (e) girls appear in many situations to need more training time to reach the same skill level compared to boys. (C) 2015 Elsevier B.V. All rights reserved.";2016
Throughout the world, educators have recognized that computer science or informatics fundamentals need to be introduced at all levels of schools. This can be done using various approaches. One of them is an international challenge on informatics and computational thinking named Bebras. We are going to survey the goals of the contest and discuss some examples of Bebras tasks.;2016
To address the problem of underexposure, underrepresentation, and underproduction of diverse professionals in the field of computing, we target middle school education using an idea that combines computational thinking with dance and movement choreography. This lightning talk delves into a virtual reality education and entertainment application named Virtual Environment Interactions (VEnvI). Our in vivo study examines how VEnvI can be used to teach fundamental computer science concepts such as sequences, loops, variables, conditionals, functions, and parallel programming. We aim to reach younger students through a fun and intuitive interface for choreographing dance movements with a virtual character. Our study contrasts the highly immersive and embodied virtual reality metaphor of using VEnvI with a non-immersive desktop metaphor. Additionally, we examine the effects of user attachment by comparing the learning results gained with customizable virtual characters in contrast with character presets. By analyzing qualitative and quantitative user responses measuring cognition, presence, usability, and satisfaction, we hope to find how virtual reality can enhance interest in the field of computer science among middle school students.;2016
"To respond to the growing integration of digital technologies across all sectors of society, a curriculum should be developed to nurture the next generation as creative problem solvers in order to see the world through a computational lens. One way to achieve this goal is to design a curriculum in K-12 to promote computational thinking (CT) through programming. In order to facilitate the design of the CT curriculum, the expected learning outcomes of the curriculum are proposed in this study. The CT learning outcomes of this study compose of CT knowledge, practices, and perspectives. Based on the proposed CT learning outcomes and interest-driven creator theory, this article aims to propose a seven-principle framework for guiding the design of K-12 CT curriculum. The first three principles ensure CT skills and perspectives are delivered in the curriculum through a programming environment that fosters CT knowledge acquisition. The other four principles are the design strategies for CT development: provide incrementally complex computational tasks across all levels of the curriculum to develop CT skills; review each level of the curriculum by producing final project samples to ensure a comprehensive coverage of CT knowledge; design the computational tasks that are of interest to the target learners to nurture interest-driven creator; and establish appropriate assessment criteria for the final projects and showcase their productions to enhance learners' creativity. The future work is to design, implement, and evaluate CT curriculum underpinned by these seven principles in K-12.";2016
Today's dramatic change of diverse activities and policies on computing education has its root in the prediction that talents equipped with creative computing competence will determine the competitiveness of a nation in the future. From this point of view, we developed the computational thinking-based creative problem solving (CT-CPS) instructional model in our previous study, on which students can develop their computational thinking ability in the context of the creative problem solving process. This study is a follow-up study on the real world application of our instructional model. In this study, we first conducted a lesson plan based on the CT-CPS instructional model and then applied it to elementary informatics gifted students. After the experiment, we compared creative problem solving ability through pre-post test comparison and drew implications for possibilities of our instructional model.;2016
Using coding education to promote computational thinking and nurture problem-solving skills in children has become an emerging global trend. However, how different input and output modalities in coding tools affect coding as a problem-solving process remains unclear. Of interest are the advantages and disadvantages of graphical and tangible interfaces for teaching coding to children. We conducted four kids coding workshops to study how different input and output methods in coding affected the problem-solving process and class dynamics. Results revealed that graphical input could keep children focused on problem solving better than tangible input, but it was less provocative for class discussion. Tangible output supported better schema construction and casual reasoning and promoted more active class engagement than graphical output but offered less affordance for analogical comparison among problems. We also derived insights for designing new tools and teaching methods for kids coding.;2016
Video games have grown in popularity since the 1980's. The largest consumers of video games are youth populations. Previous research has shown cognitive development and learning principles in video games. As a result, there is an increasing interest in games being teaching tools. Gamification is the use of video game elements in non-game applications. In this paper, I proposed a design to a study of applying gamification to a computer programming software, VENVI, in order to promote motivation, engagement, and computational thinking.;2016
Video games offer an exciting opportunity for learners to engage in computational thinking in informal contexts. This paper describes a genre of learning environments called constructionist video games that are especially well suited for developing learners' computational thinking skills. These games blend features of conventional video games with learning and design theory from the constructionist tradition, making the construction of in-game artifacts the core activity of gameplay. Along with defining the constructionist video game, the authors present three design principles central to thier conception of the genre: the construction of personally meaningful computational artifacts, the centrality of powerful ideas, and the opportunity for learner-directed exploration. Using studies conducted with two constructionist video games, the authors show how players used in-game construction tools to design complex artifacts as part of game play, and highlight the computational thinking strategies they engaged in to overcome game challenges.;2016
"Visual programming environments, such as Scratch, are increasingly being used by schools to teach problem solving and computational thinking skills. However, academic research is divided on the effect that visual programming has on problem solving in a computational context. This paper focuses on the role of bricolage programming in this debate; a bottom-up programming approach that arises when using block-style programming interfaces. Bricolage programming was a term originally used to describe the constructionist benefits of novice programming environments, yet more recent research has suggested it may promote poor programming practice that can negatively affect student ability and motivation. This paper describes an exploratory research study into bricolage programming aimed at exploring this concept in more depth. The study used a post-test only experimental design to explore the effects of bricolage programming on problem solving when playing an educational programming game. Two versions of the game were created, one that used a Scratch-like visual programming interface to encourage bricolage, and one that used a more structured visual programming interface. A pre-test based on non-verbal reasoning was used to perform a matched assignment of forty, 6 and 7 year olds to the two conditions. Each child then played their version of the game for thirty minutes. It was hypothesised that children in the Scratch-like condition would insert, move and delete more programming instructions, in line with a bricolage approach. This in turn could result in differentiation in performance between conditions. The results of this study showed that more indications of bricolage did occur in the Scratch-like condition. However, a range of measures of overall performance revealed no difference between the two groups. Post-hoc analysis of the data suggested that indications of bricolage may vary according to the relative progress made by participants in the game. Findings and opportunities for future work are discussed.";2016
Visual programming languages (VPLs), such as Scratch and StarLogo TNG, can make computer science education more accessible to everyone. Current researches in the study of using VPLs for educational purposes primarily focus on understanding motivational benefits and computational thinking gains. All these educational VPLs claim to scaffold students learning computational thinking concepts. Although the evaluations show that students may exhibit more enthusiasm, it is not clear what computational thinking concepts are actually learned by students. In this paper, we attempt to develop a visual programs recognition tool for student-created StarLogo TNG simulations which representing the computational thinking concepts implemented by the students. Through collecting student's created projects over time, this visual programs recognition tool can possibly indicate the patterns of computational thinking in science simulations created by StarLogo TNG.;2016
We detail the design, implementation, and an initial evaluation of a virtual reality education and entertainment (edutainment) application called Virtual Environment Interactions (VEnvI). VEnvI is an application in which students learn computer science concepts through the process of choreographing movement for a virtual character using a fun and intuitive interface. In this exploratory study, 54 participants as part of a summer camp geared towards promoting participation of women in science and engineering programmatically crafted a dance performance for a virtual human. A subset of those students (16) participated in an immersive embodied interaction metaphor in VEnvI. In creating this metaphor that provides first-person, embodied experiences using self-avatars, we seek to facilitate engagement, excitement and interest in computational thinking. We qualitatively and quantitatively evaluated the extent to which the activities of the summer camp, programming the dance moves, and the embodied interaction within VEnvI facilitated students' edutainment, presence, interest, excitement, and engagement in computing, and the potential to alter their perceptions of computing and computer scientists. Results indicate that students enjoyed the experience and successfully engaged the virtual character in the immersive embodied interaction, thus exhibiting high telepresence and social presence. Students also showed increased interest and excitement regarding the computing field at the end of their summer camp experience using VEnvI.;2016
We present a live, multiple-representation novice environment for probabilistic programming based on the Infer. NET language. When compared to a text-only editor in a controlled experiment on 16 participants, our system showed a significant reduction in keystrokes during introductory probabilistic programming exercises, and subsequently, a significant improvement in program description and debugging tasks as measured by task time, keystrokes and deletions.;2016
We present Haathi Mera Saathi (My Elephant Friend), a game concept which serves as a tool for teaching programming and computational thinking to underprivileged children in rural India. It provides a metaphor and gameplay for embodied and tangible games, and creates a soft early ramp up into the conceptual and digital space of learning to code. We discuss the urgency of digital inclusion for Indian rural children, with reference to technology as an amplifier which they need to learn to direct. We contrast the grounded, embodied style of Haathi Mera Saathi with the current crop of mini-languages and coding games, with particular emphasis on the need for physicality and tangibility in the very early stages of learning to code. We further discuss our experience conducting workshops for students from the tribal and rural belts of India, where we see HMS as an effective approach for taking them from a state of having no background in computers or computing, to a state where they create interactive applications in a Java based environment. Recommendations are given for researchers interested in working with rural village children.;2016
We present our approach and experiences in teaching computational thinking, problem solving, team-work and project management skills to several elementary level children using Lego Mindstorms EV3 robotics education kit. We taught students how to design, construct and program robots using components such as motors, sensors, wheels, axles, beams, connectors and gears. Students also gained knowledge on basic programming constructs such as control flow, loops, branches and conditions using a visual programming environment. We carefully observed how students performed various tasks and solved problems. We present experimental results which demonstrates that our teaching methodology consisting of both the course content and pedagogy was useful in imparting the desired skills and knowledge to elementary level children.;2016
We present TACCLE3 - Coding European Project (Ref. 2015-1-BE02-KA201-012307) in the XVIII International Symposium on Computers and Education - SIIE 2016, held within the V Congreso Nacional de Informatica - CEDI 2016 in the University of Salamanca, Spain, September 14th - 16th, 2016. One of the sessions was devoted to Computational Thinking topic and TACCLE3 was selected to open this session. Taccle3 is a European Union Erasmus+ KA2 Programme project that supports primary school staff and others who are teaching computing to 4-14 year olds. It started at September 2015 and will end at August 2017.;2016
Web design was introduced into the Computer Applications Technology (CAT) curriculum in South Africa at Grade 11 level in 2013, and Grade 12 in 2014. This paper reports on a study determining what value learners and educators saw in using web design and Hyper Text Markup Language (HTML). The paper comprises studies undertaken by 17 honours students in 2013 and 2014 as part of a research report module, and followed a survey research design in which 18 educators were interviewed and 319 learner questionnaires analysed. It was found that there was some disagreement regarding the level of support offered to educators having to learn HTML and that most learners enjoyed learning web design and were coping with the demands of learning HTML. Educators felt that web design ought to remain part of the CAT curriculum, although time constraints were frequently raised as problematic. The majority of learners, similarly, felt that there was value in including web design within the CAT curriculum. Workshops to support educators and a focus on computational thinking as a way forward are recommended. Furthermore, starting web development in Grade 10 should be considered.;2016
"While advances in game-based learning are already transforming educative practices globally, with tech giants like Microsoft, Apple and Google taking notice and investing in educational game initiatives, there is a concurrent and critically important development that focuses on 'game construction' pedagogy as a vehicle for enhancing computational literacy in middle and high school students. Essentially, game construction-based curriculum takes the central question do children learn from playing games to the next stage by asking (what) can children learn from constructing games? Founded on Seymour Papert's constructionist learning model, and developed over nearly two decades, there is compelling evidence that game construction can increase student confidence and build their capacity towards ongoing computing science involvement and other STEM subjects. Our study adds to the growing body of literature on school-based game construction through comprehensive empirical methodology and evidence-based guidelines for curriculum design. There is still debate as to the utility of different software tools for game construction, models of scaffolding knowledge, and evaluation of learning outcomes and knowledge transfer. In this paper, we present a study we conducted in a classroom environment with three groups of grade 6 students (60+ students) using Game Maker to construct their own games. Based on a quantitative analysis and a qualitative discussion we organize results around several core themes that speak to the field of inquiry: levels of computational literacy based on pre-and post-tests; gender-based attitutdes to computing science and programming based on a pre-and post-survey; and the relationship between existing media literacy and performance in programming as part of the game construction curriculum. Significant results include some gender differences in attitudes towards computers and programming with boys demonstrating slightly higher confidence and performance. We discuss the complex reasons potentially contributing to that, particulaly against a diverse ecology of overal media use, gameplay experience and access to technology at home. Finally, we theorize game construction as an educational tool that directly engages foundational literacy and numeracy, and connects to wider STEM-oriented learning objectives in ways that can benefit both boys and girls in the classroom.";2016
While education programs are generally defined in terms of learning outcomes known as knowledge, skills and attitudes, it is not always obvious how attitudes are to be gained. This study focuses on the formation of attitudes of accountability and sharing of knowledge in computational approaches to basic design education. We posit that computational thinking, even without computers, is supportive of both the reflective practice and the learning of such values in design education. We report on comparatively observed collaborative design processes of first year architecture students who externalized their thought processes through visual rules. While a reflection-in-action stage helps in learning the know-how, a second reflection on reflection-in-action deepens the understanding and initiates habits for how to think and act within and beyond the design domain, leading to attitude formation.;2016
While pedagogical and technological affordances of three-dimensional (3D) multiuser virtual worlds in various educational disciplines are largely well-known, a study about their effect on high school students' engagement in introductory programming courses is still lacking. This case study presents students' opinions about their participation in a 3D multiuser game-like environment, by harnessing Second Life in combination with the two-dimensional (2D) programming environment of Scratch4SL. Following a blended instructional format (face-to-face in a computer laboratory and supplementary online courses), 56 students utilizing Scratch4SL participated in this study, with a view to reduce the steep learning curve created during their first-time entrance into Second Life. This study identifies Papert's theory of Constructionism as a potentially appropriate theoretical foundation for the development of an instructional framework, in order to assist students to coordinate and manage learning materials with other teammates, using their computational thinking skills in collaborative problem-based programming tasks. The study findings based on a mixed-method research (a close-ended questionnaire and an open-ended interview) indicated the effectiveness of this constructionist-oriented instructional process for students' engagement to acquire or empower social, cognitive, higher-order, and computational thinking skills. Educational implications and recommendations for future research are also discussed.;2016
With the advent of computer age, people gradually form effective digital information calculation tutorial classes in the process of curriculum teaching, depending on information technology. For modern computer courses' teaching form, we should establish a more effective curriculum reform system to improve students' learning level effects. In the rapid development of modern society, the cultivating of undergraduates thinking calculation ability should be based on modern information education curriculum. This article takes college students' computer courses in the new era as main study object, builds effective teaching facilities, and conducts a comprehensive tutorial analysis according to the existing teaching procedures. With the development of economic globalization, the application of computer is becoming more and wider in social economy. Therefore, in the teaching of computer courses, we should pay attention to computational thinking ability training, and take it as the main study object. In the process of teaching popularization, form effective information task based on the actual thinking ability training modes. And the cultivation of students' comprehensive quality should be analyzed from the following points.;2016
A key untapped feature of game-based learning environments is their capacity to generate a rich stream of fine-grained learning interaction data. The learning behaviors captured in these data provide a wealth of information on student learning, which stealth assessment can utilize to unobtrusively draw inferences about student knowledge to provide tailored problem-solving support. In this paper, we present a long short-term memory network (LSTM)-based stealth assessment framework that takes as input an observed sequence of raw game-based learning environment interaction data along with external pre-learning measures to infer students' post-competencies. The framework is evaluated using data collected from 191 middle school students interacting with a game-based learning environment for middle grade computational thinking. Results indicate that LSTM-based stealth assessors induced from student game-based learning interaction data outperform comparable models that required labor-intensive hand-engineering of input features. The findings suggest that the LSTM-based approach holds significant promise for evidence modeling in stealth assessment.;2017
A new computer science curriculum has been developed for the Victorian Certificate of Education. It gives students direct entry into second year University computer science. The curriculum focuses on data structures and algorithms, with an emphasis on the graph abstract data type and graph algorithms. We taught a pilot course during 2014 involving students from seven schools, and administered an algorithmic thinking quiz on entry and exit, and also tested a first year university reference group. In this paper we present the curriculum and report on the evaluation. We discuss the effectiveness of our approach and make recommendations for improving future versions of the course. Pedagogical issues are discussed in relation to the cognitive education literature on the teaching of algorithmic thinking.;2017
"A science, technology, engineering, and mathematics-influenced classroom requires learning activities that provide hands-on experiences with technological tools to encourage problem-solving skills (Brophy et al. in J Eng Educ 97(3):369-387, 2008; MatariAc et al. in AAAI spring symposium on robots and robot venues: resources for AI education, pp 99-102, 2007). The study aimed to bring computational thinking, an applicable skill set in computer science, into existing mathematics and programming education in elementary classrooms. An essential component of computational thinking is the ability to think like a computer scientist when confronted with a problem (Grover and Pea in Educ Res 42(1):38-43.refer to the frame of reference programmers or computer scientists adopt when approaching a problem. The study examined the effects of taking computational perspectives through various degrees of embodied activities (i.e., full vs. low) on students' achievement in mathematics and programming. The study employed a 2 (full vs. low embodiment) x 2 (with vs. without computational perspective taking) factorial condition to evaluate four learning conditions from a combination of embodiment and computational perspective-taking practice. The results from this experimental study (N = 66 kindergarten and first graders) suggest that full-embody activities combined with the practice of computational perspective-taking in solving mathematics problem improved mathematics understanding and programming skills as demonstrated in Scrath Jr. among novice young learners. Moreover, the practice of using a computational perspective significantly improved students' understanding of core programming concepts regardless of the level of embodiment. The article includes recommendations for how to make the computational thinking process more concrete and relevant within the context of a standard curriculum, particularly mathematics.";2017
A software development process is a mechanism for problem solving to help software developers plan, design and structure the development of software to solve a problem. Without a process to guide the structured evolution of a solution, it is extremely likely that at least some aspect of the resulting software will be omitted or incorrectly implemented. Even though the importance of utilising a software process for solving problems is accepted, it is a topic that is addressed very lightly (if at all) in most freshman undergraduate computing courses with most courses focussing on programming procedures rather than the process of how to develop a solution. A consequence of this is that some students go on to develop maladaptive cognitive practices where they rush to implement solutions to problems with little planning. Typically these maladaptive practices involve surface practices such as coding by rote learning and cutting and pasting code from existing projects. Such practices can be very difficult to unlearn and can result in students lacking skills in planning and designing solutions to problems which can persist to graduation. Despite these issues, little active research has been found on the development of software processes aimed at freshman 3rd level learners and consequently there are few approaches available to help freshman students through all stages of the software process. However, there is a wealth of current research into computational thinking (CT) as a mechanism to help solve computational problems. Even though CT is seen as a key practice of computer science, most of the research into CT (as a named area) is aimed at 1st and 2nd level education with CT being a more implicit part of 3rd level computing courses. This suggests that there is an exciting opportunity to explicitly exploit the affordances and skills of CT into a software process aimed at freshman 3rd level learners. This paper presents work which has been carried out as part of an ongoing research project into this issue in which the key skills associated with computational thinking are incorporated into a conceptual framework which will provide a structure for a software process aimed at freshman undergraduate computing students. This research is not tied to any particular programming paradigm but its use is assumed to be in the context of imperative, commercial programming languages. The framework is centred on declarative knowledge (in the form of threshold concepts) and procedural knowledge (in the form of CT skills) scaffolding freshman software development from initial planning through to final solution. The framework known as Computational Analysis and Design Engineered Thinking (CADET) - once operationalised as a software process with an accompanying support tool aims to support the structured development of both software and student self-efficacy in the topic;2017
A well-known challenge on Informatics and Computational Thinking Bebras is based on task solving activity. The Bebras model is known as one of the methods that involves students to the learning and promotes students' reasoning. The Bebras motivates students to be interested more deeply in informatics. This goal can only be reached if the tasks are interesting and provoke some excitement. The interactivity is very typical for computers, so it is clear that a computer oriented challenge / contest should apply interactive elements to solve or explain tasks. This paper presents a tool that is used to code and design dynamic Bebras tasks. The paper has two main goals: 1) to analyse tasks used to engage student's in learning informatics fundamentals, and 2) to provide a description of the tool, so-called the Bebras Lodge, and illustrate application of this tool by discussing several examples.;2017
According to Professor Jeannette M. Wing's definition, Computational thinking uses the computer science basic concepts to solve problems, design systems, understand human behavior and includes a range of mental tools that reflect the breadth of the field of computer science. At present, the information technology education filed set off a wave of computational thinking training. In this paper, the content analysis method is used to analyze the current situation of computational thinking in information technology curriculum from theory and practice, and keyword analysis is used to analyze the high frequency keywords. The study found that the computational thinking research on theory accounted for the majority, while the practice is lacking, and most of the computational thinking training concentrated in the junior and high school, people pay less attention on the cultivation for primary school students. The emergence of computational thinking has promoted the teaching reform of information technology curriculum.;2017
According to some authors, the success of students' integration in the courses of Differential and Integral Calculus all depends on their obtained basic knowledge in mathematics, which should have been acquired during the Secondary School. This knowledge is also essential for the first year in any Engineering Degree at the Superior level. It is from this compatibility that a better integration of students in the courses arises. A link between secondary and higher education is urgently needed, reducing the degree of demotivation that may lead to early school dropout with consequent implication in academic failure. However, a growing multiplicity in the basic training of students, with significantly different grades of access in mathematics, causes difficulties not only in Mathematics-based courses but also in courses of Introduction to Programming. Project members have already studied both problems. In this scenario, the integration of students in higher education, namely in Engineering degrees, is essential. Concurrently the recruitment of students to these areas of knowledge is in visible decline. Therefore, strategies to prevent students from deterring from these areas by introducing new processes of teaching and learning are needed. It is also important to draw a plan that fosters positive attitudes towards mathematics to reinforce self-efficacy. This intervention has to be carried out in higher education from a very early phase and has to gather a set of strategies that reverse the students' alienation in the areas of mathematics. Either by reorganizing the functioning and evaluation of courses or by constructing instruments that facilitate the learning process and that promotes student involvement. The MathScratch project aims at the creation of products (games/animations) on a Mathematics theme, in basic and elementary concepts that are considered essential for the integration of students in higher education in engineering degrees using Scratch programming. These resources will later be placed on a platform for the use of the 1st year students with difficulties in mathematics. We intend to support students and facilitate their integration into higher education by creating a sustainable structure that includes projects carried out through the 2016/2017 academic year, identifying the major difficulties experienced in areas of knowledge which are considered essential.;2017
According to the difficulty of computer fundamental education, introduced the idea of computational thinking, discussed the essence and essential contents of computational thinking, and based on this, designed the curriculum System for computer fundamental education as well as the content framework for key courses, finally put forward some strategies for teaching practice.;2017
According to the guidance of the basic teaching requirements of university computer basic course and the training objectives of applied universities, this paper has reformed the teaching contents, teaching mode, assessment and evaluation system and so on, has integrated computational thinking and Internet thinking into college computer basic teaching to cultivate students' computational thinking and innovation and entrepreneurship, and has explored the specific problems encountered in the reform process.;2017
After ten years of deployment of the Sugar Learning Platform, we reflect on the specific tools and affordances deployed to engage learners in computational thinking with the overarching goal of fluency. These tools include multiple media-rich programming environments and also mechanism for debugging, collaboration, expression, and reflection. We motivate our selection of tools by reviewing the pioneering work of Seymour Papert, Marvin Minsky, and Cynthia Solomon, who first brought multimedia computing to elementary schools in the late 1960s with the goal of engaging children in the mastery of many of the heuristics and algorithms we associate with computational thinking. Multiple examples of how these tools have been used by teachers and students are discussed. We further describe the role that Free/Libre Software plays in providing scaffolding for deep and personal expression through programming and for surfacing personal responsibility, a sense of community, and unbounded expectations of Sugar users turned Sugar developers.;2017
Aim/Purpose Over the past few years, new approaches to introducing young children to computational thinking have grown in popularity. This paper examines the role that user interfaces have on children's mastery of computational thinking concepts and positive interpersonal behaviors. Background There is a growing pressure to begin teaching computational thinking at a young age. This study explores the affordances of two very different programming interfaces for teaching computational thinking: a graphical coding application on the iPad (ScratchJr) and tangible programmable robotics kit (KIBO). Methodology This study used a mixed-method approach to explore the learning experiences that young children have with tangible and graphical coding interfaces. A sample of children ages four to seven (N = 28) participated. Findings Results suggest that type of user interface does have an impact on children's learning, but is only one of many factors that affect positive academic and socio-emotional experiences. Tangible and graphical interfaces each have qualities that foster different types of learning;2017
Although there is no universal agreement that students should learn programming, many countries have reached a consensus on the need to expose K-12 students to Computational Thinking (CT). When, what and how to teach CT in schools are open questions and we attempt to address them by examining how well students around the world solved problems in recent Bebras challenges. We collected and analyzed performance data on Bebras tasks from 115,400 students in grades 3-12 in seven countries. Our study provides further insight into a range of questions addressed in smaller-scale inquiries, in particular about the possible impact of schools systems and gender on students' success rate. In addition to analyzing performance data of a large population, we have classified the considered tasks in terms of CT categories, which should account for the learning implications of the challenge. Algorithms and data representation dominate the challenge, accounting for 75-90% of the tasks, while other categories such as abstraction, parallelization and problem decomposition are sometimes represented by one or two questions at various age groups. This classification can be a starting point for using online Bebras tasks to support the effective learning of CT concepts in the classroom.;2017
As advancement of the already successful Informatics Lab in 2016 a Teaching-Learning-Lab (TLL) was implemented with the main aim of supporting all teacher education departments of our university to teach and practice digital literacy and computational thinking as fundamental skill for everyone (Wing, 2006) in different ways. Our support is based on three pillars: equipment, know-how and research. Scientists, (future) teachers and students can use the rooms (creative, experimental and observation lab), the technical equipment and instructional technology for planning, designing, holding and/or observing and analyzing teaching units. We offer workshops for digital literacy and computational thinking in and for different subjects. Our main research focuses on the connection of computational thinking to other disciplines and its impact on problem solving and text comprehension. Furthermore, the Teaching-Learning-Lab offers research possibilities for scientists and students in different areas concerning teaching and learning. We enhance cooperation between schools and university and give support in finding research questions for master or PhD-theses in didactics, conducting teaching experiments. The paper describes challenges and opportunities of the Teaching-Learning-Lab in fostering the digital literacy competences and computational thinking of the target groups.;2017
As digital technology is increasingly a part of all sectors of society, educational approaches must be developed in order to nurture students' ability to see the world through a computational lens. One way to achieve this goal is to promote Computational Thinking (CT) for young learners. The CoolThink@JC project is a four-year curriculum pilot designed to integrate CT into Hong Kong upper-primary level schools. The CoolThink framework for curriculum development is structured around computational concepts, practices and perspectives adapted from the framework of Brennan and Resnick (2012). This adapted framework motivated the choice of learning activities for CoolThink This paper focuses on one aspect of that framework, namely computational practices. Here, we describe how activities in the CoolThink curriculum can promote the computational practices highlighted by the framework.;2017
As early as 1997, the Ministry of Education (MOE) of China published Document Number 155, which emphasized the importance of computing in college education regardless of discipline. As a required course for all majors, CS0 College Computers has been taken by around six million students each year since then. However, due to the lack of appropriate materials for the course, some professors taught students how to use computer tools, and others taught students programming skills. This article discusses a recent CS0 reform happening in China that shifts the focus of the course from computer tools and skills to computational thinking. An MOE teaching steering committee has published The Basic Requirements for Teaching College Computer Courses, where 42 core concepts on computational thinking are identified as guidelines for teaching College Computers and associated entry-level computer courses. Four college-level curricula recently developed are presented in this article as case studies. They are interesting and unique in different ways: one is a CS0 course for the deaf, another is a MOOC on C Programming, the third case is a MOOC on College Computers, and the fourth is a CS0 course designed for health majors. These curricular innovations around computational thinking are reenergizing CS0 in China. In this chapter, we discuss these innovations and their implications for college study in China.;2017
As educators move to introduce computing in K-12 classrooms, the issue of assessing student learning of computational concepts, especially in the context of introductory programming, remains a challenge. Assessments are central if the goal is to help students develop deeper, transferable computational thinking (CT) skills that prepare them for success in future computing experiences. This chapter argues for the need for multiple measures or systems of assessments that are complementary, attend to cognitive and noncognitive aspects of learning CT, and contribute to a comprehensive picture of student learning. It describes the multiple forms of assessments designed and empirically studied in Foundations for Advancing Computational Thinking, a middle school introductory computing curriculum. These include directed and open-ended programming assignments in Scratch, multiple-choice formative assessments, artifact- based interviews, and summative assessments to measure student learning of algorithmic constructs. The design of unique preparation for future learning assessments to measure transfer of CT from block-based to text-based code snippets is also described.;2017
"As K-12 computer science (CS) initiatives scale throughout the U.S., educators face increasing pressure from their school systems to provide evidence about student learning on hard-to-measure CS outcomes. At the same time, researchers studying curriculum implementation and student learning want reliable measures of how students apply their CS knowledge. This paper describes a two-year validation study focused on end-of-unit and cumulative assessments for Exploring Computer Science, an introductory high school CS curriculum. To develop the assessments, we applied a principled methodology called Evidence-Centered Design (ECD) to (1) work with various stakeholders to identify the important computer science skills to measure, (2) map those skills to a model of evidence that can support inferences about those skills, and (3) develop assessment tasks that elicit that evidence. Using ECD, we created assessments that measure the practices of computational thinking, in contrast to assessments that only measure CS conceptual knowledge. We iteratively developed and piloted the assessments with 941 students over two years and collected three types of validity evidence based on contemporary psychometric standards: test content, internal structure, and student response processes. Results show that reliability was moderate to high for each of the unit assessments; the assessment tasks within each assessment are well aligned with each other and with the targeted learning goals; and average scores were in the 60 to 70 percent range. These results indicate that the assessments validly measure students' computational thinking practices covered in the introductory CS curriculum. We discuss the broader issues we faced of balancing the need to use the assessment results for evaluation and research, and demands from teachers for use in the classroom.";2017
As visions of smart urbanism gain traction around the world, it is crucial that we question the benefits that an increasingly technologised urbanity promise. It is not about the technology, but bettering peoples' lives, insist smart city advocates. In this paper, I question the progressive potential of the smart city drawing on the case of Singapore's Smart Nation initiative. Using the case studies of the smart home and 'learning to code' movement, I highlight the limits of such 'smart' interventions as they are stunted by the neoliberal-developmental logics of the state, thereby facilitating authoritarian consolidation in Singapore. As such, this paper distinguishes itself from previous works on the neoliberal smart city by situated smart urbanism within the socio-political dynamics of neoliberalism-as-developmental strategy. For smart urbanism to better peoples' everyday lives, technological 'solutionism' needs to be replaced with more human-centric framings and understandings of urban challenges.;2017
At present there are different public and private companies that support the Colombian government in the initiative of taking the technological processes and of research and innovation to the classrooms in order to generate a knowledge that propitiates great changes in the society and that at the same time helps to mitigate some national problematic. This generates great changes inside the school and the student, achieving significant learning in various areas of knowledge such as environmental, physical, electronic, mathematics, programming, and mechanics, among others. This article presents some strategies, such as robotics clubs, and how their problem-based teaching methodology collaborates in the development of competences of various types and the achievement of computational thinking in students. In addition, mention is made of the results of the project developed at the Pascual Bravo Industrial Technical Institute in Medellin-Colombia, which was presented at the XXII CACIC Congress in Argentina;2017
Based on a framework of computational thinking (CT) adapted from Computer Science Teacher Association's standards, an instrument was developed to assess fifth grade students' CT. The items were contextualized in two types of CT application (coding in robotics and reasoning of everyday events). The instrument was administered as a pre and post measure in an elementary school where a new humanoid robotics curriculum was adopted by their fifth grade. Results show that the instrument has good psychometric properties and has the potential to reveal student learning challenges and growth in terms of CT. (C) 2017 Elsevier Ltd. All rights reserved.;2017
"Based on the shared concern about the lack of a common strategy for teaching and learning Computational Thinking across Europe, 3 teachers (Ts) from Belgium, Italy and Spain started thinking of a transnational experience of introducing Coding and Robotics into the curriculum. The initial team included a teacher training association, a primary school and a secondary school, but we wanted to extend it to more countries to have the maximum of difference in the strategies in National curricula. To do so, we looked for more partners across Europe and beyond to start an ERASMUS+ project, with Estonian, Polish and Turkish Ts: a total of 1 teacher training association, 2 secondary schools and 3 primary schools. The main goal of CaRoMtE project is to improve digital literacy in our students (Ss), on abstract coding of relevant information related with their environment, its transmission to other student or device and its use to build significative knowledge and solving real life problems. These requirements will be achieved by a collaborative environment defined with teams of Ss, grouped by ages, in which the older ones will train, support, challenge and assess the youngers while the younger ones will give the conditions for work to the olders, ask them for challenges, test their artifacts (give feedback for improvement) and assess their job. The process is scaffolded as follows: Initial training of a small group of Ts to be forwarded in their schools: to create a cohort of trained Ts to support the project on the ground Ss are trained on the basics of coding and robotics so that they can share a common language to interact and collaborate Secondary Ss design and create some challenging labyrinths (in a videogame fashion), including Math problems to be solved, adapted to the level of the primary Ss from different countries Primary Ss set the conditions to be matched by the artifacts designed by their secondary mates Feedback is shared bidirectionally in a Participatory Design Workshop fashion, for improvement: primary Ss test artifacts and assess the final work of their secondary mates, while secondary Ss assess their primary mates work both from the point of view of establishing clear, realistic and affordable conditions and from the point of view of giving relevant and motivational feedback. We are interested in putting together collaborative problem solving, mentoring, peer-to-peer assessment and asynchronous collaboration as strategies for teaching and learning with ICT support in order to build significant knowledge shared with the community in a common foreign language: English. After the project we expect to: Change the mind of our school administrators/faculty/community with respect to teaching & learning of coding and robotics (from theoretical & applied points of view); Improve our Ss' digital literacy, changing them from content consumers into creators of significant knowledge; Improve our Ss' digital citizenship through the interaction with Ss and Ts from other countries, knowing their differences and commonalities; Define new strategies for collaborative learning and teaching by sharing different activities and evaluating their impact in the common context of our schools and in the different contexts of our countries; Start and consolidate a space of collaboration related with ICT tools in education, hoping that many other schools may join to make this experience more and more relevant for our Ss as future citizens";2017
Basic computer teaching is a series of basic and compulsory courses. In the higher agricultural colleges, Computer Basis and Programming Design are the basic courses. The former is aimed to train the operation ability, the latter is aimed to make the students build the computational thinking and write the program code, and own the computer ability, apply the ability to the major domain. The paper introduce the several impacts of system building and extension, including courses building, teaching material building, teaching model building, item bank building, computational thinking train and innovation ability train.;2017
Bebras, an international challenge organized on an annual basis in several countries (50 in 2016), has the goal of promoting informatics and computational thinking through attractive tasks. We analyzed Bebras tasks by considering the Computational Thinking (CT) skills each task promotes, starting from the operational definition of CT developed by the International Society for Technology in Education (ISTE) and the ACM-founded Computer Science Teachers Association (CSTA). We argue that such an approach is indeed well-suited to present Bebras tasks, especially with the goal to use them in curricular teaching: framing them as CT enablers helps in making explicit their educational potential, that can be appreciated also by teachers without a formal education in informatics and adapted to a wide range of ages and schools. We explored the viability of our approach by interviewing teachers of different kinds of schools. We propose to use these CT skills also as a tool to classify Bebras tasks, which results in a more uniform distribution of tasks, w.r.t. the one obtained by leveraging content topics.;2017
"Block-oriented programming environments, such as Scratch and AppInventor, have become mainstream and have helped introduce non-programmers to algorithmic thinking; that is, to computational thinking (CT) skills. In various experiments, referenced in this paper, we observed how objects (tangibles) augmented with digital properties - that is, tangible user interface (TUI) objects - can help develop CT skills. We investigate which paradigm can be used to introduce CT skills with TUIs. By drawing on past experience, we conclude that block-oriented programming provides a suitable answer to our research questions. Furthermore, we introduce a framework for implementing block-oriented programmable objects that we believe can help end-users learn CT skills.";2017
Bringing Programming to K-12 Education has been a strong tendency in Brazil and in the world. In this workin -progress, we describe an experience in teacher training with the goal of promoting the practice of programming and the development of computational thinking in students of Brazilian public schools, through an initiative called Programming Literacy. Here we present strategies used in the implementation of the initiative, design of a curricular structure and training program, as well as monitoring and evaluation strategies. The results and findings of the initiative, involving more than 500 students from four cities in 2016, are shared as well as the perspectives on next steps.;2017
Case teaching method based on computational thinking is introduced into the programming teaching. Take C++ programming course as an example. Through the careful design of living cases, let students master how to combine computational thinking with programming method, and use computers to solve problems in life. In the cultivation of students' computational thinking ability, the students' innovative consciousness and comprehensive practical ability are also cultivated.;2017
Coding education and robotic applications are integrated or being integrated into education system for students at early ages all around the world. Aim of this study is to reveal the importance of coding education and robotic applications for achieving 21st-century skills in North Cyprus. This study is a descriptive study based on literature review. The obtained data were evaluated by the researcher to reveal the current case with a descriptive approach. It is really important for students to receive education on coding and robotics applications in order to be able to acquire 21st-century skills, develop, produce and achieve Informatics Island vision of North Cyprus. In this research, it is observed that importance given to coding education and robotic applications in North Cyprus is insufficient. It is also revealed that there are effective robotic studies as a result of institutional efforts by universities. However, there is no attempt to integrate coding education into primary, secondary and university education programs and there is a little number of academic research related with coding education and robotic applications. It is expected that this study will be a guide for academicians who would like to conduct research in this field, provide information about the present condition and set an example.;2017
"Coding is a powerful instrument to include and integrate the different learning styles and the cognitive peculiarities of every student: writing clear and unequivocal instructions, using a machine language and working with a concrete tool could lead students to be more accurate, concise and conscious about their own process of learning. Coding lessons motivate student learning scientific disciplines, overcoming those emotional factors obstructing a fertile experience of school. Because of the advantages offered, Coding has been fully introduced in ministerial programs in Italy as a discipline: it is not only an innovative subject for pedagogy in theoretical terms, but it requires schools to rapidly and effectively comply with reforms implemented since 2014. OECD TALIS 2013 data confirms teachers need training, as they are required to teach and use Coding as a school discipline, but they do not have the required competencies: based on this, in 2015 the first project was launched to better introduce Coding in the Italian Schools. However, the current training paths which are offered to educators, in Italy and abroad, present several shortcomings: poor timing, absence of evaluation moments and, consequently, lack of tools for analysis of results. In order to overcome these critical issues, we propose and describe the design of a training course addressed to educators. This path is tailored to meet the real needs and the characteristics of the recipients, it refers to a rigorous design method and it is able to quantify the actual increase of the skills of the subjects. This method could support the teachers in organizing educational interventions, avoiding the use of improvisation, increasing the internal validity of the course and allowing replication in other contexts. First of all, we provide an overview of the Coding projects launched in Italian schools: method, structure, monitoring data and first results. Then, we identify the best practices and the lesson learned which are summarized in a guideline. We finally propose a course path, observing some important quality criteria to self-evaluate the quality of our work. In particular, we apply three main quality indicators: 1. The quality of the design: a) preliminary analysis, b) macro-design and c) micro-design; 2. The quality provided: a) pre-delivery and b) delivery; 3. Quality of the results' evaluation: a) evaluation and b) reporting. The course design consists of two essential moments: I) A first phase, macro-design, which illustrates the general structure of the course. The three main outputs of this phase are: 1. the conceptual map, which has been created to identify the conceptual nodes and the main contents of the course; 2. the tree of didactic objectives, each of one is defined according to the Bloom complexity level ( revised): we also list the main assessment tests, consistent with the level of the Bloom's Taxonomy; 3. a flow chart, defining the logical structure, the rules and the time scanning; II) A second phase, micro-design, which describes the storyboard of the classroom and the rating storyboard. Following this method, we believe teachers could put in practice programs which are tailored to their particular class. Going through different experimentations, teachers could also promote the use of coding in interdisciplinary domains that are not yet coded also supporting research in this field.";2017
Collaboration becomes increasingly important in programming as projects become more complex. With traditional text-based programming languages, programmers typically use a source code management system to manage the code, merge code from multiple editors, and optionally lock files for conflict-free editing. There is a limited corpus of work around collaborative editing of code in visual programming languages such as block-based programming We propose an extension to MIT App Inventor, a web-based visual platform for building Android applications with blocks, which will enable many programmers to collaborate in real-time on MIT App Inventor projects. We take the position that real-time collaboration within MIT App Inventor will encourage students in a group environment to interact with one another in ways that help them improve each other's understanding and practice of computational thinking practices that may not be achieved in the traditional one user-one project paradigm that is currently provided.;2017
Computational algorithmic thinking (CAT) is the ability to design, implement, and assess the implementation of algorithms to solve a range of problems. It involves identifying and understanding a problem, articulating an algorithm or set of algorithms in the form of a solution to the problem, implementing that solution in such a way that the solution solves the problem, and evaluating the solution based on some set of criteria. CAT is an important scaffolded on-ramp as students develop more advanced computational thinking capabilities and apply computational thinking to solve problems that are more constrained and require greater expertise. Supporting Computational Algorithmic Thinking (SCAT) is both a longitudinal between-subjects research project and a free enrichment program supporting and guiding African-American middle school girls over three years as they iteratively design a set of complex games for social change. This article explores Scholars' reflections about the difficulties they faced while using CAT capabilities as they engaged in collaborative game design for social change over those three years. We particularly focus on how these difficulties changed over the course of three years as well as new difficulties that emerged from year to year as Scholars become more expert game designers and computational algorithmic thinkers.;2017
Computational thinking (CT) denotes the idea of developing a generic solution to a problem by decomposing it, identifying relevant variables and patterns, and deriving an algorithmic solution procedure. As a general problem solving strategy, it has been suggested a fundamental cognitive competence to be acquired in education-comparable to literacy and numeracy. However, integrating CT into general curricula has been challenging. Therefore, the current project aims at developing an extra-curricular training of CT for primary school students. From a literature review we identified seven concepts central to CT: i) sequencing, ii) loops, iii) parallelism, iv) events, v) conditionals, vi) operators, and vii) data/variables. In our targeted educational training program, we will specifically address these concepts (which are shared concepts between CT and programming/computer science education) in 2-step procedures using corresponding game-based unplugged and plugged-in activities. Playful unplugged activities, such as a treasure hunt board game for the concept of using variables as placeholders for information, shall allow students getting a first grip on CT processes by actively engaging them. In the game, a treasure is to be hunted by completing a series of arithmetic operations, in which players have to handle different variables (e.g., dice faces, scores, etc.). Building on this unplugged activity, a related plugged-in scenario is a programmable simulation of rain drops filling a glass. While raindrop and glass volume are constants, the fill level of the glass may be the variable to manipulate. In both kinds of activities we aim at clarifying the association between CT-based solving real-life problems and aspects of different STEM disciplines. The series of unplugged and plugged-in activities are integrated into a gamified approach suitable for primary school children, employing badges for mastering specific CT processes to increase students' engagement and for giving feedback about their learning progress. The instructional design will integrate principles of constructionism, game-based and project-based learning, such that students will construct knowledge through playing and interacting with interdisciplinary educational scenarios. The course will be empirically evaluated with 3rd and 4th graders in primary schools. Thereby, the idea of evidence-based instruction is pursued to ensure efficiency and validity of our training.;2017
Computational Thinking (CT) has become popular in recent years and has been recognized as an essential skill for the digital generation. Students are exposed to computational thinking when they do programming, and MIT App Inventor is currently one of the most popular block based programming environments. Meanwhile, Design thinking is considered as a creative, human-centred, participative, exploratory and problem-solving process that values different perspectives of a problem. In this study, we aim to bring the design thinking in a curriculum framework of K-12 to promote computational thinking by App Inventor. The future work is to implement and evaluate CT curriculum.;2017
Computational thinking (CT) has been given recent attention suggesting that it be developed in children of all ages. With the creation of K-12 computer science standards by the Computer Science Teacher Association, states such as Massachusetts and Washington are leading the nation in adopting these standards into their school systems. This seems somewhat premature, when there are so few measures of computational thinking or computer programming skills that can be applied easily in a K-12 setting to assess outcomes of such state- wide initiatives. Through funding from the National Science Foundation, we developed an analysis tool to efficiently capture student learning progressions and problem-solving activities while coding in Scratch, a popular visual programming language developed by MIT Media Lab. Our analysis tool, the Functional Understanding Navigator! or FUN! tool, addresses the need to automate processes to help researchers efficiently clean, analyze, and present data. We share our experiences using the tool with Scratch data collected from three different week-long summer Scratch Camps with students in grades 5 to 8. Based on our preliminary analyses, we share important considerations for researchers interested in educational data mining and learning analytics in the area of assessing computational thinking. We also provide links to the publically available FUN! tool and encourage others to participate in a community developing new measures of computational thinking and computer programming.;2017
Computational thinking (CT) has been offered as a cross-disciplinary set of mental skills that are drawn from the discipline of computer science. Existing literature supports the inclusion of CT within the K-12 curriculum, within multiple subjects, and from primary grades upward. The use of computers as a context for CT skills is often possible, yet care must be taken to ensure that CT is not conflated with programming or instructional technology, in general. Research had suggested that instructing preservice teachers in the use of CT can help them develop a more accurate and nuanced understandings of how it can be applied to the classroom. This chapter reports results from a study about preservice teachers' conceptions of CT and how it can be implemented within their classrooms. Results suggested that preservice teachers with no previous exposure to CT have a surface level understanding of computational thinking. Participants largely defined CT in terms of problem-solving, logical thinking, and other types of thinking and often requiring the use of computers. The chapter offers implications for teacher educators to embed computational thinking in preservice education courses through educational technology as well as content specific methods courses.;2017
Computational Thinking (CT) has been recognized as one of the fundamental skills that all graduates should acquire. For this reason, motivational concerns need to be addressed at an early age of a child, and reaching students who do not consider themselves candidates for science, technology, engineering, and mathematics disciplines is important as well if the broadest audience possible is to be engaged. This article describes a framework for teaching and assessing CT in the context of K-12 education. The framework is based on Agile software engineering methods, which rely on a set of principles and practices that can be mapped to the activities of CT. The article presents as well the results of an experiment applying this framework in two sixth-grade classes, with 42 participants in total. The results show that Agile software engineering methods are effective at teaching CT in middle schools, after the addition of some tasks to allow students to explore, project, and experience the potential product before using the software tools at hand. Moreover, according to the teachers' feedback, the students reached all the educational objectives of the topics involved in the multidisciplinary activities. This result can be taken as an indicator that it is possible to use computing as a medium for teaching other subjects, besides computer science.;2017
Computational Thinking (CT) has gained in popularity in recent years, both within educational and political discourses. It is more than ever important to discuss the term itself in order to determine to which extent it is helpful in solving the challenges it has been suggested to address. Recently, Denning (2017) proposed that CT can be viewed as either traditional or new. Traditional CT is a skillset resulting from engaging in traditional computing activities, e. g. programming, whereas new CT forefronts certain skills as desired in problem solving. By looking at CT through the perspective of computer semiotics, specifically the algorithmic sign, it is possible to dissolve the hard distinction of traditional vs. new. Instead, a perception of CT having both an implicit and an explicit nature emerges, allowing for a dialectic relationship between CT's integrated implicit and explicit nature.;2017
Computational thinking (CT) in medicine means deliberating when to pursue computer-mediated solutions to medical problems and evaluating when such solutions are worth pursuing in order to assist in medical decision making. Teaching computational thinking (CT) at medical school should be aligned with learning objectives, teaching and assessment methods, and overall pedagogical mission of the individual medical school in relation to society. Medical CT as part of the medical curriculum could help educate novices (medical students and physicians in training) in the analysis and design of complex healthcare organizations, which increasingly rely on computer technology. Such teaching should engage novices in information practices where they learn to perceive practices of computer technology as directly involved in the provision of patient care. However, medical CT as a teaching and research field is only beginning to be established in bioinformatics and has not yet made headway into the medical curriculum. Research is needed to answer questions relating to how, when, and why medical students should learn to engage in CT, e.g., to design technology to solve problems in systemic healthcare and individual patient care. In conclusion, the medical curriculum provides a meaningful problem space in which medical computational thinking ought to be developed. We argue not for the introduction of a stand-alone subject of medical CT, but as researchers, teachers, clinicians, or curriculum administrators, we should strive to develop theoretical arguments and empirical cases about how to integrate the demand for medical CT into the medical curriculum of the future.;2017
Computational thinking (CT) is being located at the focus of educational innovation, as a set of problem solving skills that must be acquired by the new generations of students to thrive in a digital world full of objects driven by software. However, there is still no consensus on a CT definition or how to measure it. In response, we attempt to address both issues from a psychometric approach. On the one hand, a Computational Thinking Test (CTt) is administered on a sample of 1,251 Spanish students from 5th to 10th grade, so its descriptive statistics and reliability are reported in this paper. On the second hand, the criterion validity of the CTt is studied with respect to other standardized psychological tests: the Primary Mental Abilities (PMA) battery, and the RP30 problem-solving test. Thus, it is intended to provide a new instrument for CT measurement and additionally give evidence of the nature of CT through its associations with key related psychological constructs. Results show statistically significant correlations at least moderately intense between CT and: spatial ability (r = 0.44), reasoning ability (r = 0.44), and problem solving ability (r = 0.67). These results are consistent with recent theoretical proposals linking CT to some components of the Cattel-Horn-Carroll (CHC) model of intelligence, and corroborate the conceptualization of CT as a problem-solving ability. (C) 2016 Elsevier Ltd. All rights reserved.;2017
Computational thinking (CT) is broadly defined as the thought processes involved in formulating problems and their solutions so that the solutions can be automated. In this twenty-first century, computation is fundamental, and often unavoidable, in most endeavors, thus computing educators have the responsibility to instill in future generations of scientists, mathematicians, and engineers key computational thinking skills. There is a compelling case to be made for the infusion of CT skills into the K-16 education of everyone, given the pervasiveness of computers in all aspects of our lives. This poses the following critical educational challenge: how and when should students learn CT and how and when should it be taught? While discussions, deliberations, and debates will likely continue, the tightly knitted relationship between computational thinking and mathematical thinking suggests that one avenue to acquire CT skills is to integrate CT in the K-16 mathematics curriculum. This chapter describes a study that uses a problem-driven learning pedagogical strategy and the APOS theoretical framework to integrate computational thinking in CSCE 2100, a sophomore level discrete structures course which is a required course for all Information Technology majors. Results demonstrate that integrating computational thinking in a discrete structures course can effectively and significantly influence students' understanding of a range of CT concepts.;2017
"Computational thinking (CT) is emerging as a key set of problem-solving skills that must be developed by the new generations of digital learners. However, there is still a lack of consensus on a formal CT definition, on how CT should be integrated in educational settings, and specially on how CT can be properly assessed. The latter is an extremely relevant and urgent topic because without reliable and valid assessment tools, CT might lose its potential of making its way into educational curricula. In response, this paper is aimed at presenting the convergent validity of one of the major recent attempts to assess CT from a summative-aptitudinal perspective: the Computational Thinking Test (CTt). The convergent validity of the CTt is studied in middle school Spanish samples with respect to other two CT assessment tools, which are coming from different perspectives: the Bebras Tasks, built from a skill-transfer approach; and Dr. Scratch, an automated tool designed from a formative-iterative approach. Our results show statistically significant, positive and moderately intense, correlations between the CTt and a selected set of Bebras Tasks (r=0.52); and between the CTt and Dr. Scratch (predictive value r=0.44; concurrent value r=0.53). These results support the statement that CTt is partially convergent with Bebras Tasks and with Dr. Scratch. Finally, we discuss if these three tools are complementary and may be combined in middle school.";2017
Computational Thinking (CT) is the new way of learning experience in this 21st century learning. It has been integrated through education in other developing countries like Australia, America and UK. In order for students and teachers in Malaysia to be equipped with this new skill, this research study has employed action research and qualitative research methodologies. A new framework known as CICP has been constructed to integrate CT in higher educational curriculum. This research study has also shown two different components of student's learning experience.;2017
Computational Thinking (CT) is widely recognized as a way of thinking -including a set of essential thinking skills- that should be mastered by the whole literate population, through compulsory education along with reading, writing and mathematics. CT is described as a set of significant aspects such as abstraction, algorithmic problem solving, data representation and data analysis. Diverse studies have been conducted in order to find effective educational practices and frameworks to help K-12 students to develop their computational thinking skills and many proposals have been formed. Despite this fact, a proposal identifying Digital Storytelling (DST) as a framework for the development of CT skills by K-12 level students has not yet been reported. This is the contribution of this paper. In fact, by analyzing secondary data emerging from the literature regarding CT and DST, a specific framework highlighting the relationship between the abilities of CT and the skills cultivated in DST for each stage of digital story development are proposed. It is worth mentioning that DST has emerged as a powerful teaching and learning tool across all disciplines by providing various direct and indirect advantages for the learners. Thus, the purpose of this paper is to clarify the contribution of digital storytelling (DST) as an effective educational framework to the development of specific aspects of computational thinking at K-12 level students.;2017
Computational thinking (CT) practices, especially abstraction and evaluation, are central to developing expertise in scientific disciplines, and considerable synergies exist between CT and scientific expertise. We present a pedagogical model based on the Equation-Based Model (EBM) for developing computerized simulations to describe physical phenomena. Specifically, EBM emphasizes the importance of mathematics as a central tool in science, and aims at fostering students' abstraction and evaluation practices, as part of their modeling processes. We analyzed a final team-project of participants who decided to investigate a specific physical phenomenon in a course based on the EBM approach. Our analysis focused on characterizing the abstraction and evaluation practices, and the role they play in the scientific inquiry. The students applied multiple levels of abstraction, starting with the mathematic-system-level perspective of the conceptual model, and eventually constructed a computerized model of the conceptual model. They applied mathematical tools throughout the process, and verified and validated their models. The graphical simulation that the students built enabled them to investigate and enhance their comprehension of the problem explored. We concluded that this pedagogic approach has the potential to promote meaningful learning and knowledge transfer of computational thinking that were acquired during the course.;2017
Computational thinking (CT) refers to a set of processes through which people arrive at solutions to problems using principles based in computer science. A CT approach to problem-solving is increasingly valuable in education and workplace settings as the economy grows more dependent on digital literacy. Given the importance of CT, it is essential to assess these skills. However, a reliable assessment tool is absent from the current literature. This chapter, therefore, defines CT across the Ontario (Canada) Elementary School curriculum in elementary classrooms and addresses the need for effective instructional strategies and assessment of CT-related problem-solving abilities. Finally, we establish where CT concepts and skills already exist or are missing from the curriculum and suggest a workable tool to assess CT based on existing literature.;2017
Computational thinking (CT) uses concepts that are essential to computing and information science to solve problems, design and evaluate complex systems, and understand human reasoning and behavior. This way of thinking has important implications in computer sciences as well as in almost every other field. Therefore, we contend that CT should be taught in elementary schools and included in every university's educational curriculum. Several studies that measure the impact of teaching programming, analytical thinking, and CT have been conducted. In this review, we analyze and discuss findings from these studies and highlight the importance of learning programming with a focus on the development of CT skills at a young age. We also describe the tools that are available to improve the teaching of CT and provide a state-of-the-art overview of how programming is being taught at schools and universities in Colombia and around the world.;2017
Computational thinking (CT), which is the core of the Computer Science field, is an essential thinking process to solve problems effectively and efficiently using computing systems. Learners must be able to design algorithms, identify the appropriate algorithm design skill for a specific problem, and apply it to the problem. Aiming to stimulate learners' interest in learning algorithm design skills, we developed puzzle-based algorithm learning program that has a user-friendly format tailored to real-world scenario. We investigated the effect of this puzzle-based algorithm learning program on learners' CT abilities. The results provide evidence that puzzle based algorithm learning program is effective for developing learners' CT. The study suggests that puzzle based algorithm learning is worth as a learning model for improving CT of learners.;2017
Computational thinking and coding is gradually becoming an important part of K-12 education. Most parents, policy makers, teachers, and industrial stakeholders want their children to attain computational thinking and coding competences, since learning how to code is emerging as an important skill for the 21st century. Currently, educators are leveraging a variety of technological tools and programming environments, which can provide challenging and dynamic coding experiences. Despite the growing research on the design of coding experiences for children, it is still difficult to say how children of different ages learn to code, and to cite differences in their task-based behaviour. This study uses eye-tracking data from 44 children (here divided into kids [age 8-12] and teens [age 13-17]) to understand the learning process of coding in a deeper way, and the role of gaze in the learning gain and the different age groups. The results show that kids are more interested in the appearance of the characters, while teens exhibit more hypothesis-testing behaviour in relation to the code. In terms of collaboration, teens spent more time overall performing the task than did kids (higher similarity gaze). Our results suggest that eye-tracking data can successfully reveal how children of different ages learn to code.;2017
Computational thinking and creative thinking are valuable tools both within and outside of computer science (CS). The goal of the project discussed here is to increase students' achievement in CS courses through a series of computational creativity exercises (CCEs). In this paper, the framework of CCEs is described, and the results of two separate studies on their impact on student achievement are presented. Students in introductory CS courses completed CCEs as part of those courses. Students in Study 1 came from a variety of programs, and students in Study 2 were engineering majors. A profiling approach was used to test whether the impact of the CCEs could be accounted for by differences in students' motivated and self-regulated engagement. Overall, CCEs had positive impacts on students' grades and knowledge test scores, and although there were differences in achievement across the profiles, the impact of the CCEs was generally consistent across profiles. The CCEs appear to be a promising way to increase student achievement in introductory CS courses. Implications and directions for future research are discussed.;2017
Computational thinking describes key principles from computer science that are broadly generalizable. Robotics programs can be engaging learning environments for acquiring core computational thinking competencies. However, few empirical studies evaluate the effectiveness of a robotics programming curriculum for developing computational thinking knowledge and skills. This study measures pre/post gains with new computational thinking assessments given to middle school students who participated in a virtual robotics programming curriculum. Overall, participation in the virtual robotics curriculum was related to significant gains in pre- to posttest scores, with larger gains for students who made further progress through the curriculum. The success of this intervention suggests that participation in a scaffolded programming curriculum, within the context of virtual robotics, supports the development of generalizable computational thinking knowledge and skills that are associated with increased problem-solving performance on nonrobotics computing tasks. Furthermore, the particular units that students engage in may determine their level of growth in these competencies.;2017
Computational thinking has become an increasingly popular notion in K-12 and college level education. Although researchers have accepted that abstraction is a central concept in computational thinking, they are quick to disagree on the meaning of it. A focus on reflective abstraction has led to the development of APOS Theory in Mathematics education. This has resulted in many cases of improved student learning in Mathematics (Arnon et al., 2013). Our main aim in this paper is to construct a theoretical bridge between computational thinking and APOS Theory and show that reflective abstraction can be used in the context of computational thinking.;2017
Computational thinking has been recognized as a collection of understandings and skills required for new generations of students not only proficient at using tools, but also at creating them and understanding the implication of their capabilities and limitations. This study proposes the combination of modeling and simulation practices along with disciplinary learning as a way to synergistically integrate and take advantage of computational thinking in engineering education. This paper first proposes a framework that identifies different audiences of computing and related computational thinking practices at the intersection of computer science and engineering. Then, based on a survey with 37 experts from industry and academia, this paper also suggests a series of modeling and simulation practices, methods, and tools for such audiences. Finally, this paper also reports experts' identified challenges and opportunities for integrating modeling and simulation practices at the undergraduate level. (C) 2016 Wiley Periodicals, Inc.;2017
Computational thinking has received increased attention over the past several years and is considered by many to be a fundamental and necessary literacy for children. One approach to teaching this skill has been through tangible programming since it facilitates intuitive interaction with children. In this paper, we introduce CodeTrain and CodeBox, two motorized toys whose behavior can be programmed through wooden building blocks without the use of a computer, tablet, or screen-based interface. The goal with both these designs is to foster playful exploration of computational thinking in pre-adolescent children through tangible objects. We describe the design process from the conceptual design to the functional prototype. Furthermore, we present first impressions of the prototypes from a pilot study and highlight some lessons learned from our first iteration.;2017
Computational Thinking involves core computer science concepts and practices that apply to multiple disciplines including science and mathematics. Currently, there is a strong drive toward integrating computer science into the K-12 STEM curricula. Several general-purpose programming environments have been developed to support the learning of CT and computing concepts and practices. Domain-specific modeling languages (DSMLs), on the other hand are designed for specific applications in engineering domains As compared to general-purpose programming languages, DSMLs provide ease of use and more power to express domain-specific concepts, thus increasing productivity in specific application domains In this paper, we present design guidelines and a design process for constructing DSMLs to facilitate SEEM learning by computational modeling. To illustrate the process, we provide a case study of designing a DSML specifically for the kinematics domain.;2017
Computational thinking is a component of the Science and Engineering Practices in the Next Generation Science Standards, which were adopted by some states. We describe the activities in a high school chemistry course that may develop students' computational thinking skills by primarily using Excel, a widely available spreadsheet software. These activities were classified as (i) the use of simulation and modeling, (ii) experimental data analysis, (iii) coding or programming, (iv) algorithmic reasoning, and (v) statistics and probability.;2017
Computational Thinking is a fundamental skill for the twenty-first century workforce. This broad target audience, including teachers and students with no programming experience, necessitates a shift in perspective toward Computational Thinking Tools that not only provide highly accessible programming environments but explicitly support the Computational Thinking Process. This evolution is crucial if Computational Thinking Tools are to be relevant to a wide range of school disciplines including STEM, art, music, and language learning. Computational Thinking Tools must help users through three fundamental stages of Computational Thinking: problem formulation, solution expression, and execution/evaluation. This chapter outlines three principles, and employs AgentCubes online as an example, on how a Computational Thinking Tool provides support for these stages by unifying human abilities with computer affordances.;2017
Computational thinking is a fundamental skill that extends beyond computer science. Conceptually it involves logic, algorithms, patterns, abstraction, and evaluation. The approach for developing a computational mind-set may involve experimenting, creating, debugging, and collaborating. Due to certain implicit biases and societal and cultural factors, girls may not be exposed to these computational thinking concepts and approaches. This has resulted in a decrease in the number of women in computer science since the 1980s. This chapter summarizes some of the challenges faced when teaching introductory computer science to high school girls and the approaches taken to overcome those challenges.;2017
Computational thinking is a hot topic in math education, among teachers whose curricula now include the term, and researchers who wish to pinpoint what it means and how it could be promoted in classrooms. A recent study resulted in a theoretical model of the computational practices of professional mathematicians and scientists, with the aim of offering teachers a set of competencies around which to build activities for their students. Nonetheless, concrete examples that validate the model and exemplify its use in math classrooms have yet to be discussed. We wish to open up this discussion, which we see as crucial to understanding how to empower students to participate in the computational thinking that has become integral to the mathematics community and beyond.;2017
Computational thinking is a kind of universal thinking method. Design of C++ Programs is an important subject of basic computer teaching for engineering specialty of higher education institutions. Aiming at the requirement that high education institutions shall cultivate high quality innovative talents, it puts forward the immersion computational thinking instruction system and the teaching guideline of three stages of teaching, three layers of experiment and three aspects of examination. Furthermore, it discusses the concept of overall and systematic immersion computation thinking and gradually better students' application capacity of computational thinking.;2017
"Computational thinking is an increasingly important focus in computer science or informatics curricula around the world, and ways of incorporating it into the school curricula are being sought. The Bebras contest on informatics, which originated 12 years ago and now involves around 50 countries, consists of short problem-solving tasks based on topics in informatics. Bebras tasks engender the development of computational thinking skills by incorporating abstraction, algorithmic thinking, decomposition, evaluation and generalization. Bebras tasks cover a range of informatics concepts including algorithms and data structures, programming, networking, databases and social and ethical issues. Having built up a substantial number of Bebras tasks over 12 years it is important to be able to categorize them so that they can be easily accessed by the Bebras community and teachers within schools. The categorization of tasks within Bebras is important as it ensures that tasks span a wide range of topics; there have been several categorization schemes suggested to date. In this paper we present a new two-dimensional categorization system that takes account of computational thinking skills as well as content knowledge. Examples are given from recent tasks that illustrate the role that Bebras can play in the development of computational thinking skills.";2017
Computational thinking is nowadays being widely adopted and investigated. Educators and researchers are using two main approaches to teach these skills in schools: with computer programming exercises, and with unplugged activities that do not require the use of digital devices or any kind of specific hardware. While the former is the mainstream approach, the latter is especially important for schools that do not have proper technology resources, Internet connections or even electrical power. However, there is a lack of investigations that prove the effectiveness of the unplugged activities in the development of computational thinking skills, particularly for primary schools. This paper, which summarizes a quasi-experiment carried out in two primary schools in Spain, tries to shed some light on this regard. The results show that students in the experimental groups, who took part in the unplugged activities, enhanced their computational thinking skills significantly more than their peers in the control groups who did not participate during the classes, proving that the unplugged approach may be effective for the development of this ability.;2017
Computational thinking is taking an ever increasing role in education. According to the Netherlands institute for curriculum development there currently is little to no education on this topic in Dutch primary schools. Since teachers are the key to high quality education, it is important to know which knowledge primary school teachers should have on this topic. This exploratory research is part of a larger design-based study on how 5-6 year old students can develop CT skills at a basic level and what teachers in primary education need to know about computational thinking to teach it. This poster describes the educational design research consisting of a total of three rounds and the results after the first two rounds.;2017
Computational thinking is to use heuristic reasoning to seek the solution of the problem, and has a strong ability to innovate. In the teaching of computer courses, it is one of the important subjects of teaching research to cultivate students' computational thinking ability. The traditional teaching model ignores the cognitive role of the students, which is not conducive to the cultivation of students' innovative thinking and creative ability. Blending learning is an inevitable trend of development in the field of higher education, and a hot research topic in the field of education. Inspired by Database Principles course model at University of Missouri, Kansas City, a multi-dimensional blending learning flipped class model of computer courses in colleges and universities based on students' computational thinking ability is proposed to construct teaching model and design theoretical and practical teaching system and diversified teaching process evaluation system. In the course of Database Principles, the teaching practice is carried out to verify the teaching effect.;2017
"Computational thinking is well-known in computer science and is currently entering the field of education. Due to changes in the private and professional life by modern technologies all students are with increasing relevance expected to possess sufficient knowledge in computer-related problem-solving (e.g. Fraillon et al., 2014). The acquisition of key competences related to this assumes an enhancement of knowledge in learning as well as computational thinking processes. Although many concepts for computational thinking education have been created (e.g. Barr & Stephenson, 2011; Krauss & Prottsman, 2017), in fact, an evidence-based competence model is not yet available, thereby it represents a significant desideratum. Considering these aspects, the contribution at hand aims to contribute to this and focuses on the construction and investigation of a model, taken theoretical aspects and the current state of research into account. The principle of this procedure is to break down the term and construct of 'computational thinking' to core elements by working with a literacy approach and presuppose that computational thinking can only be implemented in lessons in a competence-oriented way referring to an evidence based approach to computational thinking as a key competence of the 21' century. Starting from this, the research presented in this paper describes and explains preliminary work in the context of the preparation of IEA-ICILS 2018 (International Computer and Information Literacy Study). In this context, the authors of this paper are involved as members of the national study center in Germany, which is among other countries taking part in this international study.";2017
Computational thinking may be defined as the systematic development of critical thinking and problem solving skills supported by computational concepts. The literature shows the numerous benefits of implementing the ideas behind computational thinking in the teaching/learning process at very early ages. This means in practice that children and teenagers should start programming at school or high school. Tools like MIT's Scratch and Google's Blockly ease notably this task. Being aware of this need, authorities in the Spanish region of Castilla-La Mancha are deploying a set of activities to disseminate these ideas among teachers of primary and secondary levels. One of these activities is a course on Scratch programming, which has been offered to teachers of different disciplines (not only technological ones) and taught by computer science professors and researchers from the regional University. In this work, the contents and the organization of this course are described. In particular, apart from providing some notions to those teachers not familiarized with programming, a second goal of the course is to describe the way in which they can incorporate these computational concepts in their courses, taking into account the current regulations. The paper also performs a detailed analysis of the information collected by means of a survey to the course attendees. In this survey, they were asked anonymously about their general opinion regarding computational thinking, their intention to incorporate these computational concepts and techniques into their classroom daily activity, and the way in which this can be implemented. In the light of the results of the survey, some interesting conclusions were drawn.;2017
Computational thinking sits at the core of every engineering and computing related discipline. It has increasingly emerged as its own subject in all levels of education. It is a powerful cornerstone for cognitive development, creative problem solving, algorithmic thinking and designs, and programming. How to effectively teach computational thinking skills poses real challenges and creates opportunities. Targeting entering computer science and engineering undergraduates, we resourcefully integrate elements from artificial intelligence (AI) into introductory computing courses. In addition to comprehension of the essence of computational thinking, practical exercises in AI enable inspirations of collaborative problem solving beyond abstraction, logical reasoning, critical and analytical thinking. Problems in machine intelligence systems intrinsically connect students to algorithmic oriented computing and essential mathematical foundations. Beyond knowledge representation, AI fosters a gentle introduction to data structures and algorithms. Focused on engaging mental tool, a computer is never a necessity. Neither coding nor programming is ever required. Instead, students enjoy constructivist classrooms designed to always be active, flexible, and highly dynamic. Learning to learn and reflecting on cognitive experiences, they rigorously construct knowledge from collectively solving exciting puzzles, competing in strategic games, and participating in intellectual discussions.;2017
Computational thinking skills will be important for the next generation of students. However, there is a disparity in the populations joining the field. Integrating computational thinking into artistic fields has shown to increase participation in computer science. In this paper, we present our initial design prototype for TunePad, a sound composition tablet application controlled by a block-based programming environment. TunePad is designed to introduce learners to computational thinking and to prepare them for text-based coding environments. From our preliminary testing, with children ages 7-14, we observed that our design actively engages learners and communicates how the programming blocks control the sounds being played. This testing is a prelude to more formal studies as we continue to improve the design and interface of TunePad. With this work, we intend to engage students in computational thinking who may not have otherwise been exposed, giving the opportunity to more people to enter the computer science field.;2017
Computational thinking, according to Wing, is a fundamental skill for everyone, not just for computer scientists. In the last decade, computer scientists and teachers stress that it is important to engage students in developing computational thinking at early age. It is strongly anchored in problem-solving paradigm of learning and could be supported by different activities, e.g., workshop on making maze games in Scratch. In the paper we analyse the projects developed by primary school students during the constructionist workshop. We were interested in how the students understand computational concepts, as a dimension of computational thinking, reflected in their projects. We analyse the computational thinking concepts in the projects in accordance with Brennan and Resnick suggestions and in the context of neo-Piagetian theory of cognitive development according to Lister and Teague. Projects reflect the understanding and use of following concepts: sequences, loops, parallelism, events, conditionals, operators and data. All of the students, no matter what the background knowledge they had, were at the end of the workshop able to understand and use sequences, loops, events and conditionals. Students who had background knowledge in Scratch were also able to include in their project parallelism and variables (data). We quantitatively assessed projects with the tool Dr. Scratch and checked the presence of the previously mentioned concepts. The results of our research will not be helpful only for understanding the development of student's computational thinking but they can also help scholars who use Scratch in process of learning in optional elective course Computer Science in the second three-year cycle of Slovenian primary schools. It was confirmed that the problem-based learning is suitable for students with different background knowledge. At the same time the topic of maze-game in Scratch holds the students' engagement and attention.;2017
"Computer games as part of education is a well-established topic for research, suggesting that creating games is linked to a range of cognitive and behavioural outcomes. Creating games in all subject disciplines is becoming increasingly possible due to the increasingly higher status of computing in schools across Europe and the prevalence of visual programming languages such as Scratch and Pocket Code. The use of games within education is not new; in a systematic review of 129 papers [1] found that playing games impacts across a range of areas including engagement, cognitive ability and, most commonly, knowledge acquisition and content understanding. However, while research has thus far examined game play and game based learning in education there is limited work focussing on the process of game creation as a method of classroom teaching. This is a prospect which is increasingly possible with the introduction of visual programming languages such as Scratch [2] and Pocket Code. It is suggested that playful learning through computer games could stimulate students' intrinsic motivation ([3] and that knowledge creation can emerge through the construction of artefacts in a playful learning environment via the co-creation of games [4]. The research presented in this paper is from a pilot study examining the impact of game making in traditional primary and secondary school classrooms (5-18 years) in the United Kingdom (UK). The research, funded by Horizon 2020, is part of a wider European project; No-one Left Behind. In the UK the project has introduced game making into disciplines such as Religious Education, Science and History. Data indicates that although not all students found this a positive experience, computational thinking skills have increased, and students, disaffected with their learning, have re-engaged with learning, increasing their persistence and resulting in a deeper understanding of subject knowledge. In addition initial results suggest that game making has the potential to increase engagement with classroom learning and lead to increased learner satisfaction within lessons. Non-computing teachers have gained in confidence in developing game creation in their subject discipline, increasing their awareness of computational thinking. Barriers identified include teacher familiarity with programming as a means to teach non-STEM subject knowledge, a potential to decrease knowledge acquisition during the process of familiarisation with the teaching tool and a need for software developers to consider design for children with SEND. The project is changing the learning environment and emerging pedagogy has been identified which will be shared in this paper. As a result of the study lesson resources have been created for teachers to use across disciplines which are now available via the project URL; these will be shared in this paper.";2017
Computer programming courses are mandatory for many majors. However, the high rate of failures shows that students have difficulties in assimilating the topics. The objective of this research is to understand these difficulties. Analyzing diaries filled out by students and interviews with instructors, we identified difficulties related to language and understanding and some strategies used to mitigate them. The analysis and understanding of the difficulties may support the creation of teaching strategies and tools to facilitate the teaching and learning of computer programming.;2017
Computer programming is being introduced in schools worldwide as part of a movement that promotes Computational Thinking (CT) skills among young learners. In general, learners use visual, block-based programming languages to acquire these skills, with Scratch being one of the most popular ones. Similar to professional developers, learners also copy and paste their code, resulting in duplication. In this paper we present the findings of correlating the assessment of the CT skills of learners with the presence of software clones in over 230,000 projects obtained from the Scratch platform. Specifically, we investigate i) if software cloning is an extended practice in Scratch projects, ii) if the presence of code cloning is independent of the programming mastery of learners, iii) if code cloning can be found more frequently in Scratch projects that require specific skills (as parallelism or logical thinking), and iv) if learners who have the skills to avoid software cloning really do so. The results show that i) software cloning can be commonly found in Scratch projects, that ii) it becomes more frequent as learners work on projects that require advanced skills, that iii) no CT dimension is to be found more related to the absence of software clones than others, and iv) that learners - even if they potentially know how to avoid cloning-still copy and paste frequently. The insights from this paper could be used by educators and learners to determine when it is pedagogically more effective to address software cloning, by educational programming platform developers to adapt their systems, and by learning assessment tools to provide better evaluations.;2017
Computer science (CS) is becoming an increasingly diverse domain. This paper reports on an initiative designed to introduce underrepresented populations to computing using an eclectic, multifaceted approach. As part of a yearlong computing course, students engage in Maker activities, participatory simulations, and computing projects that foreground the social and collaborative aspects of CS. Collectively, these activities are designed to introduce learners to the growing diversity of what CS looks like in the 21st century. This paper lays out the practical and theoretical motivations for the Computational Thinking for Girls (CT4G) project, specifically highlighting the use of Making through physical and social computing as ways to engage students in CS. A snapshot of one activity from the program is provided-Wearing the Web-in which students use open-hardware programmable badges to explore the underlying structure and technology that enables the Internet. Data from the first year of the CT4G program are presented to show the positive effects that this diverse introduction to CS is having on the students with respect to their attitudes toward CS.;2017
Computer Science (CS) Unplugged activities have been deployed in many informal settings to present computing concepts in an engaging manner. To justify use in the classroom, however, it is critical for activities to have a strong educational component. For the past three years, we have been developing and refining a CS Unplugged curriculum for use in middle school classrooms. In this paper, we describe an assessment that maps questions from a comprehensive project to computational thinking (CT) skills and Bloom's Taxonomy. We present results from two different deployments and discuss limitations and implications of our approach.;2017
Computing curricula are being developed for elementary school classrooms, yet research evidence is scant for learning trajectories that drive curricular decisions about what topics should be addressed at each grade level, at what depth, and in what order. This study presents learning trajectories based on an in-depth review of over 100 scholarly articles in computer science education research. We present three levels of results. First, we present the characteristics of the 600+ learning goals and their research context that affected the learning trajectory creation process. Second, we describe our first three learning trajectories (Sequence, Repetition, and Conditionals), and the relationship between the learning goals and the resulting trajectories. Finally, we discuss the ways in which assumptions about the context (mathematics) and language (e.g., Scratch) directly influenced the trajectories.;2017
Computing is being introduced into the curriculum in many countries. Teachers' perspectives enable us to discover what challenges this presents, and also the strategies teachers claim to be using successfully in teaching the subject across primary and secondary education. The study described in this paper was carried out in the UK in 2014 where teachers were preparing for the mandatory inclusion of Computing into the curriculum. A survey was conducted of over 300 teachers who were currently teaching Computing to elicit their perspectives on challenges and strategies. From the analysis of the data, extrinsic and intrinsic challenges were identified for both teachers and students. In addition, a variety of pedagogical strategies were recommended by teachers from their own practice. In categorising approaches taken by teaching to support students five key themes emerged: unplugged type activities, contextualisation of tasks, collaborative learning, developing computational thinking, and scaffolding programming tasks. Further investigation could support whether these strategies can alleviate the challenges of teaching and learning of Computing for students and teachers. In particular developing student resilience in Computing is seen as a challenge while not many strategies are suggested. The results of this study will be useful for teachers who are new to the teaching of Computing.;2017
Context-based CS1 courses focusing on Media Computation, Robotics, Games, or Art have been shown to improve outcomes such as retention and gender balance, both important factors in CS education. Colby College has offered a Visual Media focused CS1 course since 2008, and in response to faculty and student feedback, we expanded our curriculum to include a second context-based CS1 course focused on Science applications. Our goal was to have completely different projects but teach the same fundamental concepts. In order to measure whether students in each version were learning the same concepts, and to reduce confounding factors, the same professors co-taught both versions of CS1 and students completed the same homework, quizzes, and final exam. Our analysis of the quiz, final exam, and final overall performance showed no statistically significant difference by context or by gender. There was also no difference by context or gender in whether students took additional CS courses in the following two semesters. Furthermore, as a percentage of the students eligible to take the next offering of CS2, Data Structures and Algorithms, 48% of the students in these two offerings of CS1 registered for CS2, with no significant difference between contexts. Our conclusion is that we were successful in achieving similar outcomes, and the benefits of context-based CS1 courses, in both the Visual Media and Science versions of the course.;2017
COPPER (CustOmizable Puzzle Programming EnviRonment) is a meta-configurable tool for creating coding puzzles on a grid using a blocks-based programming language, similar to puzzles in Code.org's Hour of Code. COPPER has the potential to increase student interest and engagement by allowing a teacher to customize levels for individual classes or students. Teachers can create characters for specialized puzzles by uploading pictures to customize their appearance and using the block-language to design the character's behavior. They can then place these characters onto a grid, and arrange them into a puzzle for their students to solve. A teacher can specify the goal of each coding puzzle, as well as restrict which blocks a student may use, allowing a teacher to gradually introduce programming concepts. For example, an elementary school teacher could highlight concepts from a history lesson by building a customized grid where characters from a historical context navigate around objects relevant to the topic being studied. COPPER uses Google's Blockly framework to eliminate the mental overhead of memorizing textual syntax, allowing students to focus on building computational thinking skills. Block-based languages have been shown to be more effective than text-based languages when teaching programming to first-learners. Combined with customization, COPPER has the potential to lead to higher student interest and comprehension of programming concepts in a customized context. This poster will also summarize results obtained through initial experimentation through collaboration with K-8 teachers and their students.;2017
Creative and problem-solving competencies are part of the so-called twenty-first century skills. The creative use of digital technologies to solve problems is also related to computational thinking as a set of cognitive and metacognitive strategies in which the learner is engaged in an active design and creation process and mobilized computational concepts and methods. At different educational levels, computational thinking can be developed and assessed through solving ill-defined problems. This paper introduces computational thinking in the context of Higher Education creative programming activities. In this study, we engage undergraduate students in a creative programming activity using Scratch. Then, we analyze the computational thinking scores of an automatic analysis tool and the human assessment of the creative programming projects. Results suggested the need for a human assessment of creative programming while pointing the limits of an automated analytical tool, which does not reflect the creative diversity of the Scratch projects and overrates algorithmic complexity.;2017
CS for ALL is a new education initiative launched in 2016 to empower a generation of American students with the computer science skills they need to thrive in a digital economy. In order to keep up with trends in the growing technology-driven world, students should have the ability to analyze and consider the consequences of computing problems critically. However, introducing CS and computational thinking skills to the first year students in college is a difficult task because the nature of the subject tends to be dry and conceptual. Thus, we introduce a computer science course that helps all undergraduate students to prepare for digital life as well as enhance their critical thinking skills through hands-on learning experiences. The course contents introduce the general concept of computer science such as computing system, basic networking, algorithms and programming with Scratch and mBot robot exercises. Our student feedback shows a high level of enthusiasm and engagement among the students. The strong hands-on learning nature of the course helped our students to have more engaging and interactive classroom experiences.;2017
Currently, the education sector has been transformed because of the incorporation of information and communication technologies as a valuable support for the formation of digital skills and significant learning. In this article, we present how educational robotics can be integrated into a school environment allowing the achievement of curricular objectives and the development of programming skills and computational thinking. The study was oriented towards a population of 131 students of early childhood education, belonging to a concerted educational center of the autonomous community of Castilla y Leon, during the 2016-2017 academic period. It describes the resources used, the teaching-learning activities developed and shows what was the acceptance expressed by teachers and students about the incorporation of educational robotics in the classroom.;2017
"Currently, there is a boom in introductory programming courses to help students develop their computational thinking skills. Providing timely, personalized feedback that makes students reflect about what and why they did correctly or incorrectly is critical in such courses. However, the limited number of instructors and the great volume of submissions instructors need to assess, especially in Massive Open Online Courses (MOOCs), prove this task a challenge. One solution is to hire graders or create peer discussions among students, however, feedback may be too general, incomplete or even incorrect. Automatic techniques focus on: a) Functional testing, in which feedback usually does not sufficiently guide novices; b) Software verification to find code bugs, which may confuse novices since these tools usually skip true errors or produce false errors; and c) Comparing using reference solutions, in which a large amount of reference solutions or pre-existing correct submissions are usually required. This paper presents a semantic-aware technique to provide personalized feedback that aims to mimic an instructor looking for code snippets in student submissions. These snippets are modeled as subgraph patterns with natural language feedback attached to them. Submissions are transformed into extended program dependence graphs combining control and data flows. We leverage subgraph matching techniques to compute the adequate personalized feedback. Also, constraints correlating patterns allow performing fine-grained assessments. We have evaluated our method on several introductory programming assignments and a large number of submissions. Our technique delivered personalized feedback in milliseconds using a small set of patterns, which makes it appealing in real-world settings.";2017
Data sharing through Cloud technology is one of the most powerful new computer science concepts of the past few decades. As such, developing powerful and easy-to-use tools for incremental learning and application of shared data concepts is an important endeavor. My work focuses on using MIT App Inventor, a popular blocks-based mobile application development tool for teaching computational thinking to young students, to make shared data technology understandable and usable by anyone without the need for extensive computer science training. I present the ongoing development of CloudDB, a set of coding blocks for MIT App Inventor that allows users to store, retrieve, and share various types of data in tag-value pairs on a Redis server for their mobile applications.;2017
Debugging is an over-looked component in K-12 computational thinking education. Few K-12 programming environments are designed to teach debugging, and most debugging research were conducted on college-aged students. In this paper, we presented debugging exercises to 6th-8th grade students and analyzed their problem solving behaviors in a programming game - BOTS. Apart from the perspective of prior literature, we identified student behaviors in relation to problem solving stages, and correlated these behaviors with student prior programming experience and performance. We found that in our programming game, debugging required deeper understanding than writing new codes. We also found that problem solving behaviors were significantly correlated with students' self-explanation quality, number of code edits, and prior programming experience. This study increased our understanding of younger students' problem solving behavior, and provided actionable suggestions to the future design of debugging exercises in BOTS and similar environments.;2017
Design thinking is considered as a creative, human centred, participative, exploratory and problem-solving process that values different perspectives of a problem. In this study, we bring the design thinking in a curriculum framework of K-12 game creation by App Inventor which is currently popular block based programming environments for fostering Computational Thinking. In a case study on a middle-school students game creation course in Beijing, the students' creative thinking process and computational thinking skill are investigated in order to understand perceptions of App Inventor and physics cognitive knowledge involved in the game creation. The future work is to construct a framework of integrating the Design Thinking for cultivating K-12 students' computational thinking.;2017
Developing student's Computational Thinking (CT), which is an essential problem-solving skill for people living in the 21st century, becomes an outstanding purpose of promoting engineering education in K-12 classrooms. In this paper, CT is represented through the graphical programming language Scratch according to the three-dimensional CT framework proposed by Brennan and Resnick [1]. This project aims to explore the classroom effect of using graphical programming tool in learning English dialogue and investigate how to improve the integration of CT into English education with the elements of programming. To achieve these objectives, a qualitative method was adopted to collect data through class observations, programming projects, and semi-structured interviews. Nine primary students (n = 9) were the targeted participants, who attended extra-curricular lessons for computer programming using Scratch at their school in Hong Kong. The preliminary results show that the introduction of CT into English dialogue learning through graphical programming language can motivate primary school students to study English dialogue. To better connect CT with English education via graphical programming tools, students and the teacher in the group under study suggested making computers interact with people autonomically, designing games in graphical programming environments to encourage English learning, keeping the programming language learning skill and their English language skill, and adopting graphical programming language as a tool to finish the summative English language assignments.;2017
Digital games and digital gaming have had a fast expansion in the 21st century and today the vast majority play some kind of digital games. From a teacher's perspective an interesting type of games are the so called learning games and the didactic idea of Game-based learning (GBL). In the last decade GBL has been an emerging field and several researchers have pointed out its strong learning potential. The aim of this study is to describe and discuss the idea of learning to program by game construction. The overall research strategy has been action research where the case study approach has been combined with a content analysis of submitted learning games. Data has been collected from course evaluation questionnaires, postings in online discussion fora and game analyses. Involved informants have been kept totally anonymous and game analyses are also presented with respect for personal integrity. Findings show that game construction can be an appreciated as well as stimulating way of designing course assignments, especially in programming courses involving multimedia and graphical user interfaces. The quality of students' submissions show a wide variety and are strongly dependent on students pre-knowledge. Some of the student built learning games were found to have a potential for reuse as additional learning tools in introductory programming courses. However, to what degree and how needs to be assessed in a future study.;2017
"Digital literacy is a crucial issue in the development of the global economy, demanding the attention of all social-economic sectors. The fast-technological evolution we are witnessing today requires informed consumers and a good digital task force to ensure the development and sustainability of our society. Several related concerns were already identified, namely that by 2020 there will be around one million Information and Communications Technology (ICT) job positions unfilled in the European Union (EU) and about 90% of all jobs will require digital skills. These concerns alert to the need of preparing educational settings and actors to successfully address upcoming challenges and implement innovative learning strategies in line with the demands and evolving pace of the 21st century. Teaching and learning how to code plays a key role in unleashing the students' potential and preparing them for a digital society and upcoming digital jobs. It is also the core priority of the European initiative Junior Code Academy which, promoted by seven organizations from four different countries (Greece, Italy, Poland and Portugal) and supported by the Erasmus+ programme, has the ambition to enhance coding skills through the co-development and testing of a new coding curriculum guide for students between 10 and 15 years old. The project methodology was built-on a collaborative approach that, involving the main stakeholders, comprises several steps, including desk research and literature review, gathering relevant resources into a database, co-designing the curriculum guide, testing the implementation in one school (pilot) and implementing the tool in three additional schools (replication programme). These steps ensured the high-quality of the curriculum and its alignment with the needs, interests and expectations of the target-groups, as the innovative curriculum and set of resources were developed by the partners and validated by students from the 5th to the 9th grade and also teachers from different schools. Four schools from three countries (Portugal - in the pilot phase; Greece and Italy - in the replication stage) implemented a comprehensive set of ten lessons during a scholar term. These lessons were organised in three main components: 1) Learning the basics (analysing key concepts and finding more about computer systems), 2) Guided exploration (enhancing computational thinking and mastering specific tools) and 3) Do it yourself (solving different challenges and developing coding projects). This paper presents the main results and key findings collected during the different steps of the methodological approach, lists lessons learnt relevant for similar initiatives and underlines some recommendations related to the exploitation and sustainability of the project results.";2017
Digital technology in the twenty-first century is characterized by omnipresent smart devices and ubiquitous computing that enable computation to occur almost anytime and anywhere. This contributes to increased complexity, rapidly changing technologies, and big data challenges to professionals in most every disciplinary field. In this environment, computational thinking (CT) becomes a fundamental skill to empower our next generation of the American workforce. Consequently, CT education across all disciplines and grade levels is being advocated by academic institutions, governmental agencies, and private industrial corporations. However, existing academic programs in K-12 schools and small teaching universities are inadequately structured to prepare students with the needed computational thinking skills and knowledge. In addition, there is a scarcity in research on learning CT to guide development of CT curriculum and instructional practices across all grade levels. To mitigate this problem, we propose several model-based learning programs that the authors have been exploring since 2012 to promote active learning of CT for students of different age groups. Most of the programs were designed to exploit out-of-school time education and hands-on team research projects to advance CT education from K6 to K16 students. Under the CT context, the proposed and existing programs emphasize cultivating student problem solving ability through problem-based learning (PBL) in which students learn computational thinking by completing team projects. We also illustrate how small universities and K-12 schools can cost-effectively offer CT education by forming coalitions, leveraging emerging cyberlearning technology, and sharing educational resources.;2017
Disciplinary Thinking is the research object of every subject. To educate good information literacy is the instructional goal of Information technology, which is one of the compulsory subjects in basic schools. However, the information technology course gets much less attention than Chinese and math and other kinds of courses under the background of College Entrance Examination, and the subject thinking hasn't been unified. This paper mainly analyzes articles about information technology disciplinary thinking in CNKI with content analysis method and keywords analysis method, finding that the cultivation of students' creative thinking is the regular topic in information technology filed and the computational thinking is a kind of information technology subject thinking that people are advocating at present.;2017
Dominant approaches to programming education emphasize program construction over language comprehension. We present Reduct, an educational game embodying a new, comprehension-first approach to teaching novices core programming concepts which include functions, Booleans, equality, conditionals, and mapping functions over sets. In this novel teaching strategy, the player executes code using reduction-based operational semantics. During gameplay, code representations fade from concrete, block-based graphics to the actual syntax of JavaScript ES2015. We describe our design rationale and report on the results of a study evaluating the efficacy of our approach on young adults (18+) without prior coding experience. In a short timeframe, novices demonstrated promising learning of core concepts expressed in actual JavaScript. We also present results from an online deployment. Finally, we discuss ramifications for the design of future computational thinking games.;2017
Due to the recent explosion of big data, our society has been rapidly going through digital transformation and entering a new world with numerous eye-opening developments. These new trends impact the society and future jobs, and thus student careers. At the heart of this digital transformation is data science, the discipline that makes sense of big data. With many rapidly emerging digital challenges ahead of us, this article discusses perspectives on iSchools' opportunities and suggestions in data science education. We argue that iSchools should empower their students with information computing disciplines, which we define as the ability to solve problems and create values, information, and knowledge using tools in application domains. As specific approaches to enforcing information computing disciplines in data science education, we suggest the three foci of user-based, tool-based, and application-based. These three foci will serve to differentiate the data science education of iSchools from that of computer science or business schools. We present a layered Data Science Education Framework (DSEF) with building blocks that include the three pillars of data science (people, technology, and data), computational thinking, data-driven paradigms, and data science lifecycles. Data science courses built on the top of this framework should thus be executed with user-based, tool-based, and application-based approaches. This framework will help our students think about data science problems from the big picture perspective and foster appropriate problem-solving skills in conjunction with broad perspectives of data science lifecycles. We hope the DSEF discussed in this article will help fellow iSchools in their design of new data science curricula.;2017
Educational games have a potentially significant role to play in the increasing efforts to expand access to computer science education. Computational thinking is an area of particular interest, including the development of problem-solving strategies like divide and conquer. Existing games designed to teach computational thinking generally consist of either open-ended exploration with little direct guidance or a linear series of puzzles with lots of direct guidance, but little exploration. Educational research indicates that the most effective approach may be a hybrid of these two structures. We present Dragon Architect, an educational computational thinking game, and use it as context for a discussion of key open problems in the design of games to teach computational thinking. These problems include how to directly teach computational thinking strategies, how to achieve a balance between exploration and direct guidance, and how to incorporate engaging social features. We also discuss several important design challenges we have encountered during the design of Dragon Architect. We contend the problems we describe are relevant to anyone making educational games or systems that need to teach complex concepts and skills.;2017
Educational robotics are increasingly integrated from early childhood to postsecondary education. In some cases, robots are used as an extracurricular activity that is not oriented towards the learning objectives of the curriculum. In other cases, the educational robotics activities are aligned to the curriculum objectives or the development of the 21st century skills such as collaboration, problem solving, creativity, critical thinking and computational thinking. In this paper, we introduce a scenario-based approach for designing educational robotics activities aiming to support co-creative problem solving in K12 formal education contexts. After describing the scenario to support planning and orchestration of ER in K12 education, we introduce a taxonomy composed of five different ER activities according to the learners' engagement in the co-creative knowledge building and problem solving process.;2017
Educational robotics has been extensively used to teach hard skills such as computer science, computational thinking and coding because traditional robotics is the outcome of analysis, design and programming. Other approaches to robotics, namely evolutionary robotics, open the way to reflection on emergence, self-organization, dynamical systems. As these issues are relevant in present days society, we propose a robotic laboratory where children are trained to rule complex systems. In particular, the integrated hardware/software system BrainFarm, that allows to evolve and train virtual robots and then test them in physical environments, is employed to train these skills and a successful experience in informal context is described.;2017
Employing metasynthesis as a method, this study examined 52 empirical articles on culturally relevant and responsive science education in K-12 settings to determine the nature and scope of complementarity between culturally responsive and inquiry-based science practices (i.e., science and engineering practices identified in the National Research Council's Framework for K-12 Science Education). The findings from this study indicate several areas of complementarity. Most often, the inquiry-based practices Obtaining, Evaluating, and Communicating Information, Constructing Explanations and Designing Solutions, and Developing and Using Models were used to advance culturally responsive instruction and assessment. The use and development of models, in particular, allowed students to explore scientific concepts through families' funds of knowledge and explain content from Western science and Indigenous Knowledge perspectives. Moreover, students frequently Analyzed and Interpreted Data when interrogating science content in sociopolitical consciousness-raising experiences, such as identifying pollution and asthma incidences in an urban area according to neighborhood location. Specific inquiry-based practices were underutilized when advancing culturally responsive science instruction, though. For example, Using Mathematics and Computational Thinking and Engaging in Argument from Evidence were infrequently encountered. However, culturally responsive engineering-related practices were most often connected with these, and thus, represent potential areas for future complementarity, particularly as the United States embraces the Next Generation Science Standards. In considering innovative directions for advancing equitable science education, several possibilities are discussed in light of the findings of this study.(c) 2017 Wiley Periodicals, Inc. J Res Sci Teach 54:1143-1173, 2017;2017
Enrolling the cultural capital of underrepresented communities in PK-12 technology and curriculum design has been a primary strategy for broadening the participation of students of color in U.S. computer science (CS) fields. This article examines two ways that African-American cultural capital and computing can be bridged in CS education. The first is community representation, using cultural capital to highlight students' social identities and networks through computational thinking. The second, computational integration, locates computation in cultural capital itself. I survey two risks - the appearance of shallow computing and the reproduction of assimilationist logics - that may arise when constructing one bridge without the other. To avoid these risks, I introduce the concept of computational communities by exploring areas in CS education that employ both strategies. This concept is then grounded in qualitative data from an after school program that connected CS to African-American cosmetology.;2017
ENTHUSIASM HAS GROWN in recent years for computer science education in many countries, including Australia, the U.S, and the U.K. 14,15 For example, in 2012, the Royal Society in the U.K. said, Every child should have the opportunity to learn concepts and principles from computing, including computer science and information technology, from the beginning of primary education onward, and by age 14 should be able to choose to study toward a recognized qualification in these areas. 26 And in 2016, the College Board in the U.S. launched a new computer science curriculum for high schools called Computer Science Principles 6 focusing on exposing students to computational thinking and practices to help them understand how computing influences the world. Within the computer science education community, computational thinking is a familiar term, but among K-12 teachers, administrators, and teacher educators there is confusion about what it entails. Computational thinking is often mistakenly equated with using computer technology. 11,29 In order to address this misrepresentation, the scope of this article includes a definition of computational thinking and the core constructs that would make it relevant for key stakeholders from K-12 education and teacher-training programs.;2017
Existing literature presents many cases of computational thinking analysis through the perspective of a skill set for 21st century. However it is important to go deeper and understand how computational thinking activities fosters the cognitive development of the young, especially if we want them to have a significant advantage in problem solving, becoming innovative thinkers [1]. To be innovative it is necessary that a person use sophisticated cognitive structures to reason over abstractions and deal with hypothesis. These are the characteristics of the formal operational thinking [2]. Therefore, this paper is about the use of formal thinking on computational thinking activities over a digital fabrication project developed in a Brazilian makerspace (POALab FabLab). Using a Case Study we want to show that computational thinking and digital fabrication projects demand the use of formal thinking and, since that, the importance of designing learning activities for makerspaces taking in mind the possibilities of cognitive development.;2017
Extensive studies have already documented the importance of introducing computer science into K-12 which lies in equipping students with computational thinking. And professional development accelerates the speed of integrating computational thinking curriculum into K-12 education. This study aims to explore primary school teachers' perception and perspective of attending professional development activities for teaching coding. The context in which this research was undertaken is in mainland China, Hong Kong, Brunei Darussalam. 107 participants (n = 107) in total involved in this research. The result of this study shows that 1) some primary school teachers still have the misunderstanding on the concept of computational thinking. 2) lack of pedagogical content knowledge and content knowledge are major challenges teachers have in teaching coding. 3) non-cognitive factors, such as anxiety, confidence, always influence teachers' teaching which cannot be neglected. 4) School culture plays an essential role in involving.;2017
Faced with the new reality of reform of university computer foundation and teaching, independent colleges have proposed reforms upon university computer foundation teaching in the content, model, methods and management, which are centered around computational thinking, targeted at enhance foundation, application-orientation, and stress computational thinking and promote students' creativity and innovation. By constructing teaching contents which emphasize the application and practicality, and adopting SPOC integrated teaching model and emphasizing diversity of teaching methods, such reforms can not only spur students' initiative and enthusiasm in learning, but also improve their problem solving and innovation.;2017
Fifty years ago, Seymour Papert and colleagues developed Logo as the first programming language for children. Today, millions of children are participating in learn-to-code initiatives, but Papert's dream remains unfulfilled. Papert (who passed away last summer) saw programming not as a set of technical skills but as a new form of fluency - a new way for all children to explore, experiment, and express themselves. In this presentation, I will examine strategies for fulfilling Papert's dream. Drawing on examples from our Scratch online coding community, I will discuss how we can design programming environments and activities to help all children, from all backgrounds, to develop their thinking, develop their voices, and develop their identities.;2017
For many years, several countries have been committed to the introduction of computer science and, more recently, computational thinking in primary and secondary schools. Nevertheless, students of the first year of university often encounter difficulties in dealing with introductory courses in computer science and, in particular, programming. One of the main issues is related to the difficulty of thinking about algorithmic solutions, a skill that should be acquired from secondary school. A good knowledge of difficulties and the discovery of efficient strategies to overcome them are vital tasks. In this work, we discuss a first step in this direction. We have prepared a brief test focused on the algorithmic abilities and other processes potentially involved with it. The idea is to build a useful tool that can give assistance to the introduction of computational thinking skills in secondary school education. The test has been proposed to a small sample of secondary school students, aged 11 to 16 and its outcomes analyzed.;2017
Frequently, the existing resources in Virtual Learning Environments (VLEs), used in distance education courses and blended, are presented in the same way for all students. This may complicate the effective learning process of each student. In order to solve this problem, the approach adopted in this paper is based on a framework called ArCARE, which allows adaptation of resources for students in VLEs, allowing the construction of his knowledge, using multi-agent system technology that handles open learner model ontology. These ArCARE resources are recommendation and adaptation of collaborative activities such as pedagogical architectures for the students have a more effective learning of particular course content. Results obtained in a Computational Thinking course show the feasibility of the proposal.;2017
Frequently, the existing resources in Virtual Learning Environments (VLEs), used in distance education courses and blended, are presented in the same way for all students. This may complicate the effective learning process of each student. In order to solve this problem, one of the original goals of intelligent educational systems is to guide every student to the most appropriate educational contents. So, the approach adopted in this paper is based on a framework called ArCARE (Conceptual Framework of Educational Resources Adaptation in Virtual Learning Environments), which allows adaptation of resources for students in VLEs, allowing the construction of their knowledge, using multiagent system technology that handles an open learner model ontology. These ArCARE resources are recommendation and adaptation of collaborative activities such as Pedagogical Architectures for the students have a more effective learning of particular course content. Results obtained from some tests in a flexible curriculum course of Computational Thinking show the feasibility of the proposal.;2017
"Game-based learning (GBL) is a popular innovative pedagogical framework for developing Computational Thinking (CT) skills. The base idea is to use games to help create awareness and generated needed CT skills and abilities; in short, it is games for CT approach. This is however, one part of the equation for understanding and developing CT in our modern digital age. The other part of the equation lies in using CT for games. This paper addresses this perspective to aid in the understanding and framing of the elusive CT concept. In CT for games, this paper highlights and draws attention to using CT for developing games instead of using games to develop CT. The core contributions of the paper are a CT for games proposed framework; selected variants of health games and observations of Rebel Design. Readers can benefit from a perspective with a different focus and increase awareness and understanding of CT with the hope of grooming future leaders with required CT problem-solving skills and abilities and applying Rebel Design for games.";2017
Game-based learning using interactive environments to impart theoretical and applied knowledge for introductory programming courses is divided in two popular approuches: game making and game playing Various studies have been conducted following greatly the former approach in secondary and tertiary education with controversial results. However, there has been relatively little research shown about how game playing can be associated with the development of computational thinking and how fundamental programming concepts can be supported by playing games. This work investigates how a simulation game should be designed to support the development of computational problem-solving strategies through the medium of learning fundamental computer science concepts, by proposing a theoretical game playing framework.;2017
Here, I argue that computational thinking and techniques are so central to the quest of understanding life that today all biology is computational biology. Computational biology brings order into our understanding of life, it makes biological concepts rigorous and testable, and it provides a reference map that holds together individual insights. The next modern synthesis in biology will be driven by mathematical, statistical, and computational methods being absorbed into mainstream biological training, turning biology into a quantitative science.;2017
How is computational thinking education in Germany? This paper aims to investigate computational thinking education in K12 German secondary schools. The methodology is based on analyzing the competence based curricula frameworks for Computer Science in four highest populated federal states in Germany. In addition to Computer Science education, we also consider other subjects, e.g., Physics, because computational thinking may also exist in other subjects. Finally, we compare computational thinking education in Germany with international level by taking the ACM recommendation for Computer Science curriculum into account.;2017
How to foster not only Software Programming Skill (SPS) but also Computational Thinking Ability (CTA) of students becomes more important. However, students cannot immediately understand learning problems and statuses in terms of SPS and CTA even though Scratch tool can facilitate the programming learning. Therefore, a scheme of Web-based Learning Activity Integrated with Scratch Tool (WeLaS) is proposed to assist learners. In WeLaS, students can learn the programming concepts and knowledge by sequential learning content, hands-on practice the coding skills by embedded Scratch tool, address the task by online prompts, and reflect the learning status by diagnostic report. Consequently, WeLaS can be expected to assist students in achieving the high learning performance.;2017
"In 1979, Seymour Papert first talked about the possibility of children using computers as instruments for learning. These ideas were the embryo of what today is known as Computational Thinking (CT). It was not until 2006, though, that Jeanette Wing recovered the concept and put the eye of the scientific community upon it. Proof of it has been the recent increase in the number of publications centered on this subject. It makes total sense if we think about the Information Technology driven world in which we live in today. Undoubtedly, our lives revolve around technology and if we want to continue moving forward, a good knowledge and proficiency when using these technologies is a must. Furthermore, it leads to a change of our social role in this IT era. As the International Society of Technology in Education calls for, people have to move from being just consumers to being users able to shape and transform the future. It becomes essential, then, to focus specially on K-12 students and teachers working as a pre-service and in-service teacher training. In order to move forward through this change of media literacy conception, both the University of Andorra (Andorra) and the Albert Vives School (La Seu d'Urgell, Lleida, Spain) share a common project about Computational Thinking. The University of Andorra offers an optional subject in their Bachelor in Education (10 students enrolled) and, at the same time, the same project has been implemented in a school with 423 children aged 3 to 12 years. In addition, one of the teachers is coordinating CT both in the school and at the university. The purpose of this study is twofold: 1) to explore whether there are differences between school students and university students and, 2) what are the attitudes and beliefs related to CT in both groups. When talking about data collection techniques, an interview was conducted with the teacher of both groups; two focus groups were used, one per group; and a survey was distributed to all students that took the CT course. The obtained data reveals that there are significant differences between groups. Emotional factors, blockage when problem solving, data interpretation or different ways to ask for help in order to face the proposed challenges are only some examples where these differences are more predominant. On the other hand, the attitude from both groups has been very positive not only due to the importance of acquiring CT skills for their use in daily situations, but also because students are aware of the importance and possible applications of such skills in their future. As future lines of research, collecting more evidences of the impact of Computational Thinking during the process of learning, and going deeper on some dimensions such as the relation between CT and critical thinking, collaborative work and the capability to resolve problems are thought to be essential.";2017
In 2013, ACM recognized Computational Thinking (CT) as one of the fundamental skills desired of all graduates. This means that, especially in liberal education environments, one of the challenges of CT courses is to motivate students who are discouraged upfront as they perceive programming as a difficult task. Applications that have tangible results typically stimulate students' interests. For instance, Educational Robotics (ER) is recognized as a tool to enhance higher order thinking skills and to facilitate teamwork. In this paper, we describe a course that has been designed to use ER (i.e., programming a maze-solving robot) to foster CT. Each activity of the course has been designed to foster specific CT skills and to contribute to CT assessment, which remains a challenge in CT research. We report the results of an experiment, in a liberal education environment, with a total of 13 ninth graders (15.4% M, 84.6% F).;2017
In knowledge-based societies new generations are flooded more and more intensely with narratives of inherited and newly generated knowledge, which is simply accessible for these generations, or to be acquired by them. Informatics and computer sciences are continuously developing new information-storage devices and a multitude of software more rapidly than ever. However, effective information search and processing require an information literacy which the new generations characteristically, and more and more demonstrably, do not have. National and international empirical research proves that the algorithmic thinking of the younger generations, which is indispensable for the world of informatics, is underdeveloped when it comes to the effective and productive use of digital tools. Moreover, the phenomenon of hyper attention invades the everyday life and the learning habits of the younger generation to a greater and greater degree. The essence of the HY-DE model is to aid the students' learning process with the help of the teacher's purposeful control of the phases of attention (hyper, mixed and deep attention). One aim of the present study is to introduce a new application of the HY-DE model, entitled Data-Structure Validator HY-DE model (DaSVa HY-DE). In the introductory phase, the DaSVa model focuses on how the HY-DE attention-divisions manifest themselves in webpage-search as well as in the information retrieval that it yields, and what the roles of the hyper, mixed, and deep attention modes are in the development of computational thinking and algorithmic skills. In the full hyper attention status the search for specified contents is carried out, focusing on webpages which consist of data organized in table or table-like structures. The automated and semi-automated conversion of the webpages however requires the decreasing of hyper attention leading to deep or mixed attention. The final result of this conversion process is/are well-structured table(s) suitable for automated data retrieval in spreadsheets, database management, and programming. The application of the original HY-DE model would lead us to its modification. In the advanced phase of the DaSVa HY-DE model the students can also experience how the webpages are designed and structured, how they support information and data retrieval, how successful the algorithmic based retrieval can be, and how the approach would lead students to the application of the theory of well-structured webpage design. With this model, from the hyper attention data collection status, through a deep and/or mixed attention algorithm building and data analyzing process, students would reach a higher-level hyper attention, the developer status.;2017
"In order to compete in a global economy, higher education institutions, K-12 schools, government officials, school districts, teachers, and afterschool programs must provide students with opportunities to acquire computational thinking and twenty-first century skills. In the United States, thousands of new jobs in areas such as computer science, database administration, software development, and information research open each year; yet, there are not enough American students graduating with those degrees, thus having to fill computing positions with international workers. In addition, other professional fields such as healthcare, education, financial services, and administration are becoming more technology dependent, requiring their employees to acquire computational skills. Recognizing this need, and the often-disheartening lack of opportunities outside the classroom for students to be inspired and to acquire computational skills, the College of Education at the University of West Georgia opened a coding club for kids 7-17 in the spring of 2014 named uCode@ UWG. This chapter presents those efforts, and the current status of the program.";2017
In order to design reusable processes by structuring and designing activities for teams of people through Collaboration Engineering, the Research and Development Group in Software Engineering (IDIS) of the University of Cauca, has proposed the model ChildProgramming-C, which seeks to make a contribution from the Collaborative Engineering approach to the ChildProgramming Software development model. In the progress of the investigation two exploratory case studies have been carried out with children of an Educational institution, where it was evidenced that in spite of theoretically proposing collaborative activities for children to learn to develop software, during practice there are situations that do not guarantee positive interdependence, individual responsibility and equal participation, as fundamental characteristics of collaborative work. Therefore, a preliminary phase is proposed to the Childprogramming model, which seeks to sensitize children about the importance of collaboration by being part of a team, through ludic strategies, allowing the development of social, cognitive and computational thinking skills. This article shows the experience of the sensitization phase and the evaluation through the application of a confirmatory case study.;2017
"In order to meet the needs of China higher education of training students with strong foundation ability and innovation in the filed computer science, in recent years, the computer basic teaching team of Beijing Jiaotong University has carried out a series of scientific and effective educational reforms research and practice: 1. Carrying out MOOC + SPOC + Flipped classroom practice; 2. Construction of series of quality teaching resources; 3. Building training and experimental platform; 4. Internet + innovation practice and makerspace construction; 5. Cooperating with multi-school and enterprise alliance. Through these activities, multi-dimensional computer basic education has achieved good results.";2017
In recent years, how to integrate computational thinking into curriculum construction has been one of the mainstream areas of focus in the research of computer teaching curriculum reform. In this paper, oriented by development of computational thinking ability, the course App-inventor for Mobile Developing was built and practiced. App-inventor is a programming tool for Android application with graphical building blocks, which is suitable for college freshmen without programming skills. Based on popular instruction mode of flipped classroom, with new technologies of WeChat platform and Baidu cloud sharing platform, new teaching methods of cases guidance and project-driven are introduced, which inspired students' awareness of innovation and learning interest, and effectively enhanced the cultivation of computational thinking.;2017
In recent years, teaching and learning process for all educational levels has been reformed in order to rapid growth of technological learning and a variety of tools. Educational computer game, which is one of effective tools, has been used for supporting teaching and learning in various subjects. Therefore, this study developed digital game named CPGame for simulating the compiler working with situation in human daily life in C programming language learning. The developed game was implemented with fifty-university learners to evaluate whether and how the learners with different achieving levels are motivated to learn C programming language through playing the C programming game. The experimental data was analyzed by using MANOVA and found that both high- and low-achieving learners are motivated to learn the topic through the developed game.;2017
In the 21st century, the skills of computational thinking complement those of traditional math teaching. In order to gain the knowledge required to teach these skills, a cohort of math teachers participated in an in-service training scheme conducted as a massive open online course (MOOC). This paper analyses the success of this training scheme and uses the results of the study to focus on the skills of computational thinking, and to explore howmath teachers expect to integrate computing into the K-12 math syllabus. The coursework and feedback from the MOOC course indicate that they readily associate computational thinking with problem solving in math. In addition, some of the teachers are inspired by the new opportunities to be creative in their teaching. However, the set of programming concepts they refer to in their essays is insubstantial and unfocused, so these concepts are consolidated here to form a hypothetical learning trajectory for computational thinking.;2017
In the context of Big data, the ability of the data analysis set new requirements to the students majoring in economics and management. In this paper, on the basis of computational thinking method, taking Python series curriculum as an example, discuss how to train the students majoring in economics and management to calculate the thinking ability, and to improve the ability of data analysis on several aspects,such as curriculum system of the analysis of the data from the specialty of economics and management, combined with case teaching task, network teaching platform, micro video, micro group, WeChat public number, computer contest.;2017
In the context of integrating Computational Thinking (CT) in Primary School Education, we examine the self-development of undergraduate students during their engagement as Teaching Assistants (TAs) in CT Education. More specifically, we propose to adopt the stress-adaptation-growth process of the Intercultural Transformation Theory (ITT) as a framework to provide evidences of the self-development of TAs in the CoolThink@JC project of Hong Kong. The collected data confirms the evidences of the stress-adaptation-growth process of TAs engagement, which helps transforming undergraduate students into co-teachers with commitment to future civic involvement.;2017
In the past years, there was a growing interest in teaching computational thinking in elementary and high school institutions. Although the idea is spread and well accepted among academics, it has been rarely put in practice in the classrooms. Currently, when a programming-related activity is offered, with some few exceptions, it is usually presented as an extra-curricular (optional) activity. However, it does not need to be disassociated from the common school curriculum. The present work is based on the idea that programming logic can be used transversally with different subjects, such as history, geography, science, literacy, mathematics, among others. The authors envisage to accomplish this goal by enabling programming as a supporting tool for teachers and students, allowing them to create digital interactive books. The tool, named piBook, has its main focus in the production of interactive storytelling using non-linear narratives. Besides, it is also possible to create textual games (such as role-playing games), interactive activities (such as quizzes), tutorials, chatbots and similar applications.;2017
"In the past, computer programming was perceived as a task only carried out by computer scientists; in the 21st century, however, computer programming is viewed as a critical and necessary skill that everyone should learn. In order to improve teaching of problem-solving abilities in a computing environment, extensive research is being done on teaching-learning methods, types of teaching software, the educational environment, and related tools. This paper, based on diverse experimental results, proposes an environment where elementary students can easily learn and practice computer programming. The proposed robot game environment used a tangible programming tool with which students can easily create robot programs, without learning syntax, and then validate their programming results; it can also provide various game activities to incite students' interest. Observation of elementary school students placed in the robot game environment confirmed the tool's usability and entertainment aspects, and students' attitudes toward programming and their understanding of programming concepts improved.";2017
In this article a didactic approach is introduced which seeks to integrate the progress made in the context of Block-Based Programming and other didactic approaches developed in the area of computer teaching. The prospects developed in the area of Project Based Learning Approach, Collaborative Learning and Embodied Programming are taken into account. Surrogate Embodiment, in the Embodied Programming context, is a kind of interaction where the movements performed by a person on a stage are directed by students. Furthermore, it is used as a structuring resource in the teaching process, the development of computational devices, paying special attention to skills development in the area of Computational Thinking. This paper presents a Video Game Development Workshop based on this approach with first year students from a state technical school. The experience has shown satisfactory results in connection to the acquisition of concepts and fundamental practices in the area of Algorithms and Programming.;2017
In this chapter you will learn how a community college in rural Wyoming is implementing professional development resources in Computer Science and computational thinking skills for middle and high school teachers in their communities. The objective of the community college was to build relationships with schools to teach Computer Science concepts and computational thinking skills in the classroom. In this day and age, many people young and old are spending time on playing games or simulations. Why not teach Computer Science concepts and computational thinking skills through gaming and simulations? The project included teaching teachers about computational thinking patterns when teaching their students computer gaming and simulation creations. The creation of computer games and simulations requires algorithmic, critical thinking, problem-solving, and computational thinking skills. Teachers were taught what computational thinking patterns are, how to teach their students about computational thinking patterns, and how to create computer games and simulations stressing computational thinking skills. The teacher progress is measured by recorded observations, completed student projects, and surveys.;2017
In this interview, biologist, artist, and shiatsu healer Artemis Papert describes how computational thinking can help people organize their thoughts in a more formal way. She discusses TurtleArt, a software that allows both children and adults to create two-dimensional static art images using geometry and coding as a medium. TurtleArt not only bridges the worlds of math and art, but is also easy to learn. She concludes by reading an excerpt from the article, Teaching Children Thinking-written in 1971 by her father Seymour Papert-as a still relevant starting point for where technology is heading.;2017
In this paper we analyze and propose to the problems of the course of computer science teaching which are based to build the learning platform. We design a hybrid learning model based on computational thinking about computer science in order to achieve the self construction of knowledge truly for students. Finally, the future development of hybrid learning based on computational thinking about computer science is forecasted.;2017
In this paper we describe a comparison between two different approaches to teach some algorithmic and computational thinking to children, mainly in 3rd grade. Children's learning is taken into main consideration and we want to analyze the difficulties students encounter using the different approaches. Before that, an introduction is done, describing the research framework and methodology, offering the background for this research and outlining the larger research project from which the paper is derived. We then describe the tasks used and look at some examples of the difficulties children face, on one side dealing with the problem of abstract thinking while programming, and on the other having troubles relating more practical activity with what the calculator does.;2017
In this paper we describe how to use a Game-Based Learning (GBL) approach to help end-user programmers to develop Computational Thinking (CT) skills. CT represents a framework consisting of a set of skills such as: abstraction, decomposition and more in general problem solving expressed in a computational form (algorithmic thinking) that can be easily formalised into a computer program. Those skills are beneficial for end-user programmers in order to model a task for being tackled with computational tools, e.g. spreadsheets, domain specific and visual languages. TAPASPlay is an engaging GBL platform designed to help end-user to learn algorithmic thinking.;2017
In this paper we investigate whether computer programming has an impact on high school student's reasoning skills, problem solving and self-efficacy in Mathematics. The quasi-experimental design was adopted to implement the study. The sample of the research comprised 66 high school students separated into two groups, the experimental and the control group according to their educational orientation. The research findings indicate that there is a significant difference in the reasoning skills of students that participated in the programming course compared to students that did not. Moreover, the self-efficacy indicator of students that participated in the experimental group showed a significant difference from students in the control group. The results however, failed to support the hypothesis that computer programming significantly enhances student's problem solving skills.;2017
In this paper we report the work that jeKnowledge (junior Empresa da Faculdade de Ciencias e Tecnologias da Universidade de Coimbra), a student-led initiative, has done in the jeKnowledge academy' courses to actively engage Portuguese high-school students in STEM education through hands-on projects based on the low-cost Arduino platform. F2F activities, based on a peer-assisted learning strategy, were complemented with tutorials and more advanced project suggestions in a blog. Pre and post surveys on students' attitudes towards programming and peer-coaching were administered to pre-university and first year college participants, finding an overall increase in the Likert scale for all the programming related constructs under study (confidence, interest, gender, usefulness and professional) after the introductory course. As regards the peer-based learning approach, younger students seemed to be more eager to be taught in a less formal way than their older counterparts. The course resulted in high degrees of satisfaction for both the student tutors and their tutees. (C) 2017 Elsevier Ltd. All rights reserved.;2017
In this paper, we analyzed whether the ability of students to solve problems can be influenced by the implementation of Computational Thinking (CT) in the teaching of mathematics. In this sense, we performed a quasi-experiment with students in the Brazilian's Basic Education Regular System (particularly in a group of students around fifteen years old) comparing their performance after being trained with practical activities using exercises in more or less conformity with well known CT concepts and capabilities. Considering the quantitative results obtained, the experimental group outperformed the control group, which worked with exercises in more and less conformity with CT, respectively. The results were statistically significant, suggesting that bringing together CT and mathematics through proper adjustments of classroom practices can have a positive influence on students abilities of solving problems. In order to strengthen this conclusion we also performed a qualitative analysis comprising students and the teacher involved in the quasi-experiment that reinforced our quantitative results.;2017
In this paper, we are going to present our solid experience in applying constructivism to teach computational thinking and game engineering. Fifty undergraduate students have created nine game based learning applications for a special school in two semesters. This special school caters to children who are severely mentally handicapped, and their day-to-day training consists of repetitive tasks that are designed to help them to express their needs to a certain degree. We will present 1) our timeline and detailed setting of our course which is different from traditional lecture setting. 2) the way to provide situated learning which helps our students to develop better, larger and more linked information. 3) the ways to provide constructivist teaching which helps our students to construct the knowledge of computational thinking and game engineering, so that it can improve their products and have a better interaction with the real world.;2017
In this paper, we combined a visualization tool and Dr. Scratch website service to support instructors evaluating the Scratch projects on an online social networking forum: scratch.mit.edu. Scratch is a visual programming language used by youth to design programs like animation, game, or music. Their computational thinking skills take place around program decompositions, program patterns, and data representation in the shared Scratch programs (called projects). Through the exploratory work, we found that some cues, such as deep nested iteration, may be successfully used as indicators of users' computational thinking skills. This suggests future directions for assessing youth's computational thinking skills development and educational opportunities emerging from shared Scratch projects.;2017
In this paper, we describe the effect of code.org as pre-class resources for flipped learning of Scratch programming education. Pre-class resources are very important for increase the outcome of the flipped learning. These days, there are so many open courseware about coding available for pre-class. The objectives of programming might be to increase the computational thinking for problem solving. In this research, we suggest that flipped learning is very good way to increase the computational thinking for problem solving and code.org is good resource for pre-class.;2017
In this paper, we present the Multi-dimensional teaching mode on Basic Courses of College Computer with the aim of cultivating Computational thinking ability. We reform it from course contents(plan as a whole contents of two computer base courses), teaching mode(IM teaching method), course assessment system(procedure-oriented to multi-evaluation mechanism), make computer thinking innovation implemented effectively, the computer thinking and problem solved capability was raised.;2017
In this paper, we propose the Computational Thinking concept, which is obtained by enhancing by merging the values of Computational Thinking and Agile. We analyze four existing teaching models for training Cooperative Thinkers, supported by experimental data, and propose an educational path that can promote the early development of this complex skill.;2017
In this study we examine how playing Zoombinis can help upper elementary and middle school learners build implicit computational thinking (CT) skills. Building on prior methods used with the digital science learning games, Impulse and Quantum Spectre, we are combining video analysis and educational data mining to identify implicit computational thinking that emerges through gameplay [1]. This paper reports on the first phase of this process: developing a human labeling system for evidence of specific CT skills (e.g., problem decomposition, pattern recognition, algorithmic thinking, abstraction) in three Zoombinis puzzle by analyzing video data from a sample of elementary learners, middle school learners, game experts, and computer scientists. Future work will combine these human-labeled video data with game log data from these 70+ learners and computer scientists to create automated assessments of implicit computational thinking skills from gameplay behaviors in large player audiences. This poster with video examples will share results of this work-in-progress.;2017
In today's modernizing world, computer science has become an important part of many disciplines and thinking computationally has come to be an essential skill for everyone. Recent years have seen a rise of interest in developing computational thinking (CT) already at comprehensive school level. Wing has defined CT as the thought processes involved in formulating problems and their solutions so that the solutions are represented in a form that can be effectively carried out by an information processing agent. Systematic development of CT includes incorporating thought processes that utilize abstraction, decomposition, algorithmic thinking, evaluation, and generalizations. Tasks of the Bebras challenge on informatics have been suggested as part of an instrument to assess those five skills of CT, but this instrument has not been empirically tested. The goal of this study is to test empirically which skills of CT from the Bebras challenge results are well distinguishable. Although five factors were expected to describe five skills of computational thinking assessed in the Bebras challenge, the confirmatory factor analysis did not support that theory. Therefore, exploratory factor analysis with principal axis factoring was used with the Oblimin rotation and Kaiser normalization. Results from 7100 participants of the Bebras challenge, at the age of 11-12 (grade 5-6, Benjamins), show two main factors emerging, which can be characterized as algorithmic thinking (includes mainly tasks of algorithmic patterns and decomposition) and pattern recognition (includes mainly tasks of abstraction, generalization and evaluation). Tasks describing the factors are presented in the paper. The Bebras challenge tasks are rather complex, usually integrating various skills of CT, which leads to the idea of deconstructing the tasks in the future by forming new, smaller but more skill specific tasks. Considering the current lack of a systematic approach to assess the development of the skills of CT, this work contributes to that topic.;2017
"In view of the teaching actual situation of the basic computer course, taking C language programming as an example, this paper analyzes the characteristics of the course, and puts forward the reform program of the blended teaching mode combined with flipped classroom. The teaching effect improved significantly; it strengthens the students' ability of computational thinking, self-learning ability and innovation ability. Finally, this paper carries on the thinking and the summary to the teaching reform work, in order to continuously improve the course quality.";2017
Informatics is recognized as a fundamental discipline in education at all levels. It is also an indispensable subject for scientific and technical studies. Some abilities connected to informatics learning (computational thinking) has being considered to provide fundamental skills for everyone. Programming or, more generally, the ability of solving problems by algorithmic methods is one of these skills. In Italy, many scientific degree courses offer, at the first year, at least an introductory course in programming. Digital expertize and a basic attitude to computational thinking are in general expected. The present study, has been conducted at the University of Verona, in the context of the course Programming with laboratory of Applied Mathematics curriculum. We focus on first period of lessons, when the fundamentals of programming are introduced. Most of the students come from secondary schools, in particular Liceo, a secondary school with emphasis science or humanities, and where the role of informatics is in general not central. So, an academic course in programming can be a difficult task for students. In this paper, we analyze how the cultural background influences the learning of programming and the performance of students.;2017
"International changes in policy and curricula (notably recent developments in England) have led to a focus on the role of computing education in the early years. As interest in the potential of computing education has increased, there has been a proliferation of programming tools designed for young children. While these changes are broadly to be welcomed, the pace of change has arguably led to more attention to the tools than to key questions about pedagogy. This paper proposes three areas of research (Logo; computational thinking; and teaching STEM subjects of science, technology, engineering and mathematics) that may inform computing education for young children and suggests that a greater focus on thinking skills and connections to manifestations of computers in the real world is needed. Above all, the paper calls for an informed debate about the trend towards introducing computing education to children in the early years.";2017
"Intrinsic Motivation Inventory is a self-report instrument used to assess participants' experience regarding a particular activity. This paper examined the psychometric properties of a revised Intrinsic Motivation Inventory in the context of computational thinking learning. A total of 400 students from 4th grade participated in the pilot study. The revised instrument measured students' intrinsic motivation from four dimensions: interest/enjoyment, perceived competence, value/usefulness, and relatedness. The main findings of the study are twofold: (1) primary school students showed moderate to high motivation to learn computational thinking through programming and CS Unplugged; (2) factor analysis revealed that single factor model and multifactor model had good fit indices. However, discriminant validity of multifactor model was poor, suggesting the existence of a general factor.";2017
"It is possible to define Computational Thinking briefly as having the knowledge, skill and attitudes necessary to be able to use the computers in the solution of the life problems for production purposes. In this study, a scale has been developed for the purpose of determining the levels of computational thinking skills (CTS) of the students. CTS is a five-point likert type scale and consists of 29 items that could be collected under five factors. The study group of this work consists of 726 students educated at the levels of associate degree and undergraduate degree with formal education in Amasya University for the first application. For the second application 580 students who were educated in pedagogical formation education via distance education in Amasya University. The validity and reliability of the scale have been studied by conducting exploratory factor analysis, confirmatory factor analysis, item distinctiveness analyses, internal consistency coefficients and constancy analyses. As a result of the conducted analyses, it has been concluded that the scale is a valid and reliable measurement tool that could measure the computational thinking skills of the students. In addition; the digital age individuals are expected to have the computational thinking skill, and at what degree they have these skills, the revelation of whether the levels they have are sufficient or not are a requirement. Within this frame, it could be said that the scale could make significant contributions to the literature. (C) 2017 Elsevier Ltd. All rights reserved.";2017
K-12 classrooms use block-based programming environments (BBPEs) for teaching computer science and computational thinking (CT). To support assessment of student learning in BBPEs, we propose a learning analytics framework that combines hypothesis- and data-driven approaches to discern students' programming strategies from BBPE log data. We use a principled approach to design assessment tasks to elicit evidence of specific CT skills. Piloting these tasks in high school classrooms enabled us to analyze student programs and video recordings of students as they built their programs. We discuss a priori patterns derived from this analysis to support data-driven analysis of log data in order to better assess understanding and use of CT in BBPEs.;2017
Learner modeling has been used in computer-based learning environments to model learners' domain knowledge, cognitive skills, and interests, and customize their experiences in the environment based on this information. In this paper, we develop a learner modeling and adaptive scaffolding framework for Computational Thinking using Simulation and Modeling (CTSiM)-an open ended learning environment that supports synergistic learning of science and Computational Thinking (CT) for middle school students. In CTSiM, students have the freedom to choose and coordinate use of the different tools provided in the environment, as they build and test their models. However, the open-ended nature of the environment makes it hard to interpret the intent of students' actions, and to provide useful feedback and hints that improves student understanding and helps them achieve their learning goals. To address this challenge, we define an extended learner modeling scheme that uses (1) a hierarchical task model for the CTSiM environment, (2) a set of strategies that support effective learning and model building, and (3) effectiveness and coherence measures that help us evaluate student's proficiency in the different tasks and strategies. We use this scheme to dynamically scaffold learners when they are deficient in performing their tasks, or they demonstrate suboptimal use of strategies. We demonstrate the effectiveness of our approach in a classroom study where one group of 6th grade students received scaffolding and the other did not. We found that students who received scaffolding built more accurate models, used modeling strategies effectively, adopted more useful modeling behaviors, showed a better understanding of important science and CT concepts, and transferred their modeling skills better to new scenarios.;2017
Learning about circuitry by connecting a battery, light bulb, and wires is a common activity in many science classrooms. In this paper, we expand students' learning about circuitry with electronic textiles, which use conductive thread instead of wires and sewable LEDs instead of lightbulbs, by integrating programming sensor inputs and light outputs and examining how the two domains interact. We implemented an electronic textiles unit with 23 high school students ages 16-17 years who learned how to craft and code circuits with the LilyPad Arduino, an electronic textile construction kit. Our analyses not only confirm significant increases in students' understanding of functional circuits but also showcase students' ability in designing and remixing program code for controlling circuits. In our discussion, we address opportunities and challenges of introducing codeable circuit design for integrating maker activities that include engineering and computing into classrooms.;2017
Learning how to program can enhance the learners' logic reasoning and computational thinking abilities, so coding education become an important policy in many countries. At the same time, there are many visualized block programming environment developed after MIT Scratch was launched. Nevertheless, how to conduct coding education is still a big problem without appropriate programming competence indicator. As a result, this study is to constructing a series of programming competence indicator for K-12 students by adopting Delphi study technique. This study invites 15 experts including experienced elementary and high schools teachers, to survey and provide suggestions for this indicator. After three rounds of Delphi study, this study completed 5-level programming competence, including detailed content of indicators, learning and instructional methods, and learning environments. The proposed indicators can be used for formal coding curriculum in schools systematically, and informal education such as self-directed learning or cram schools.;2017
Learning to program has been classified as problematic learning with high drop-out rates and low motivation at university level. Like the learning of a natural language the learning of syntax and basic techniques in a programming language is easier and more natural if started at a younger age. This study is based on an evaluation of a pilot project for students in a Primary school where computational thinking and programming concepts have been introduced as play-based learning. Students have learnt concepts such as 'Bubble sort' by playing the algorithm without any computer. Later the learnt concepts and algorithms have been implemented with Scratch and the Python programming language as main tools. The aim of the study is to describe and discuss a model for implementing computational thinking and programming for fifth grade students by play-based learning. As the overall research strategy the case study approach was used to evaluate this pilot project. Data has been collected in a combination of observations, interviews and group discussions during a 15 session pilot course and three workshops on teacher training. Findings have been analysed thematically and presented using the SWOT framework to identify and discuss strengths, weaknesses, opportunities and threats in the Ostersund model. Learning outcomes of the pilot were promising but with individual variations in the student group. The idea of introducing programming and computational thinking as early as in primary school seems like a good idea, but the recommendation is to keep sessions play-based and with enjoyment as the key feature to engage primary school students. Conducted sessions in the pilot are worth replicating and so are the teacher training workshops. However, the challenge that remains is to create a sustainable and scalable implementation of the described model including primary school teachers' professional development.;2017
Many advanced countries are recognizing more and more the importance of teaching computing, in some cases even as early as in primary school. Computational thinking is the term often used to denote the conceptual core of computer science or the way a computer scientist thinks, as Wing put it. Such term - given also the lack of a widely accepted definition - has become a buzzword meaning different things to different people. We investigated the Italian primary school teachers' conceptions about computational thinking by analyzing the results of a survey (N = 972) conducted in the context of Programma il Futuro project. Teachers have been asked to provide a definition of computational thinking and to answer three additional related closed-ended questions. The analysis shows that, while almost half of teachers (43.4%) have included in their definitions some fundamental elements of computational thinking, very few (10.8%) have been able to provide an acceptably complete definition. On a more positive note, the majority is aware that computational thinking is not characterized by coding or by the use of information technology.;2017
Many countries that recognize the importance of Computational Thinking skills are implementing curriculum changes to integrate the development of these skills and to introduce coding into formal school education. Singapore has introduced new programmes from Pre-school to Secondary children to develop Computational Thinking skills and introduce programming A major change in the secondary school syllabus is the introduction of a new Computing subject taken at O levels. The new subject emphasizes on the development of Computational Thinking skills and coding in Python. Students are expected to apply technology for creating solutions to solve problems. In this paper, we describe the various initiatives in Singapore for Preschool, Primary and Secondary schools. From initiatives in these three school going groups, we review Singapore's approach to implementation of learning Computational Thinking Unlike several countries that has decided to implement computing as compulsory education, Singapore has taken a route of creating interest amongst children in Computing in age-appropriate ways. Singapore's pragmatic approach is characterized by opt-in by schools, nurturing students' interest in computing, upskilling teachers in computing, and a multi-agency approach.;2017
Many students are introduced to computing through its infusion into other school subjects. Advocates argue this approach can deepen learning and broaden who is exposed to computing. In many cases, such interdisciplinary activities are student-driven and collaborative. This requires students to balance multiple learning goals and leverage knowledge across subjects. When working in groups, students must also negotiate this balance with peers based on their collective expertise. Balance and negotiation, however, are not always easy. This paper presents data from a project to infuse computing into high school statistics using the R programming language. We analyze multiple episodes of video data from two pairs of students as they negotiated (1) the statistics and computing goals of an activity, (2) the knowledge needed to meet those goals, and (3) whose expertise can help achieve those goals. One pair consistently reached agreement along these dimensions, and engaged productively with both subject matter and computing. The other pair did not reach agreement, and struggled to accomplish their tasks. This work provides examples of productive and unproductive interdisciplinary computing collaborations, and contributes tools to study them.;2017
"Most countries in the Southern Africa Development Community (SADC) have adopted national development plans that recognize ICT as the main driver for economic development. For ICT to effectively contribute to the national development agenda however, there is a need to ensure that citizens are ICT literate. As a result, a number of countries have developed Subject Policy Guidelines aimed at introducing Computer Studies at Secondary School level. While most of these guidelines are carefully crafted, actual implementation in secondary schools has proved troublesome; having under-maintained or non-existent ICT infrastructures along with inadequately trained teachers as major obstacles. Subsequently, most African student's first exposure to computer programming occurs in the first year of university education, thus entering the Computer Science major without any prior hands-on experience. The Namibian Technology Outreach to Secondary Schools (NAMTOSS) initiative is a pilot program started by the School of Computing (SoC) at the University of Namibia (UNAM) in March 2016. NAMTOSS is a partnership between secondary school teachers, learners and the staff members of the School of Computing at UNAM that is designed to introduce computer programming skills and computational thinking at secondary school level. NAMTOSS attempts to address the structural and systemic issues raised by previously unsuccessful outreach efforts conducted in Southern Africa. In this paper, we enumerate the successes and failures of our initial outreach efforts and suggest several enhancements to our program that we feel will lead to its success.";2017
Much application software education in Taiwan can hardly be regarded as practical. The researchers in this study provided a flexible means of ubiquitous learning (u-learning) with a mobile app for students to access the learning material. In addition, the authors also adopted computational thinking (CT) to help students develop practical computing skills. Three classes of first-year students were chosen for the empirical study. They were divided into three groups: two experimental groups (CT& UL group and CT group) and one control group. According to the results in this study, students who received the treatment of ulearning could have significantly better computing skills in using PowerPoint and Word than those without. However, the treatment of web-mediated CT did not result in better development of students' computing skills in this research. Finally, the researchers expect that this study provides a design and illustration of CT in a u-learning environment for schools and educators.;2017
Music Petri nets are a mathematical formalism suitable to express the results of musicological analysis. Being able to infer the structure of a music piece and to represent it through Petri nets is not a trivial task, even for an expert of musicology who is skilled in computational thinking. From this point of view, a computer-based tool can be useful both in the learning phase and in the a-posteriori assessment of the achieved results. After providing the theoretical bases about Petri nets, this paper will describe a web application for music education and dissemination, able to integrate and synchronize the results of music analysis with music-related media content within a single on-line framework.;2017
Navigating the current STEM agendas and debates is complex and challenging. Perspectives on the nature of STEM education and how it should be implemented without losing discipline integrity, approaches to incorporating the arts (STEAM) and how equity in access to STEM education can be increased are just a few of the many issues faced by researchers and educators. There are no straightforward answers. Opinions on how STEM education should be advanced vary across school contexts, curricula and political arenas. This position paper addresses five core issues: (a) perspectives on STEM education, (b) approaches to STEM integration, (c) STEM discipline representation, (d) equity in access to STEM education and (e) extending STEM to STEAM. A number of pedagogical affordances inherent in integrated STEM activities are examined, with the integration of modelling and engineering design presented as an example of how such learning affordances can be capitalized on.;2017
New technological developments, the hyperconnectivity and globalization of the economy are raising important opportunities and challenges to the economy. The labour market must also address these opportunities and challenges, to evolve and accommodate future workers and businesses. The introduction of digital technologies in sectors of the economy allows devices and systems collaborate with each other and with other systems allowing to modify the products, processes and business models. The digitization of society and the economy poses challenges and creates opportunities for all sectors must adapt their processes, products and business models. Educational system cannot be left out of this future and new models like Computational Thinking (CT) can help achieve and better prepare future citizens. But when new skills and techniques such as CT are applied, it is necessary to evaluate them. In this paper a model for evaluating the skills and attitudes of CT for subjects of secondary education is presented.;2017
Non-major education continues to be a growing area of study in computer science education research. This paper focuses on architects as an audience and the teaching of computer science by architects, who successfully applied computer science education research. The author describes the structure and development of a required computational thinking course with an average yearly enrollment of 69 students and how it applied best practices from Media Computation to improve student outcomes and engagement. A four-year impact study found that a flipped classroom model combined with peer learning methods was superior to traditional lectures and labs for improving student performance and reducing attrition. Comparisons of pre-and postclass surveys revealed an improved perception of computing and an increased interest in the subject -a positive outcome for a required introductory course. The author also studied the course's long-term effects. Three years after taking the course, a majority of students felt they retained what they learned and that learning computational thinking helped them to learn new software and perform better in advanced computing courses. By taking into account how architects learn and revising in response to assessments, we believe our course structure and teaching methodology demonstrates an effective case for applying computer science education research within an architectural curriculum.;2017
Nonprofessional end user programs have increased remarkably in volume and diversity. However, for such programs to be usable and reliable, their creators should be familiar with software engineering practices that are typically not part of their range of competence and source of enjoyment. While the expansion of computational thinking acquisition (CTA) initiatives at schools and the availability of improved programming environments have contributed to facilitate the learners' coding tasks, much less has been done to facilitate the acquisition of software quality notions. This paper reports on a Brazilian CTA program guided by semiotic principles and describes a study of how the technology used in it prefigures elements of software engineering in the participants' programs created with AgentSheets. Our research contributions touch on the semiotic potential of CTA infrastructures and on associated pedagogical considerations for expanding CTA programs with software engineering basics. We also propose items for an interdisciplinary research agenda. (C) 2017 Elsevier Ltd. All rights reserved.;2017
Nowadays, many fields of science and engineering are evolving through the joint contribution of complementary fields. Computer science, and especially High Performance Computing, has become a key factor in the development of many research fields, establishing a new paradigm called computational science. Researchers and professionals from many different fields require knowledge of High Performance Computing, including parallel programming, to develop fruitful and efficient work in their particular field. Therefore, at Universitat Autonoma of Barcelona (Spain), an interdisciplinary Master on Modeling for Science and Engineering was started 5 years ago to provide a thorough knowledge of the application of modeling and simulation to graduate students in different fields (Mathematics, Physics, Chemistry, Engineering, Geology, etc.). In this Master's degree, Parallel Programming appears as a compulsory subject because it is a key topic for them. The concepts learned in this subject must be applied to real applications. Therefore, a complementary subject on Applied Modeling and Simulation has also been included. It is very important to show the students how to analyze their particular problems, think about them from a computational perspective and consider the related performance issues. So, in this paper, the methodology and the experience in introducing computational thinking, parallel programming and performance engineering in this interdisciplinary Master's degree are shown. This overall approach has been refined through the Master's life, leading to excellent academic results and improving the industry and students appraisal of this programme. (C) 2017 Elsevier Inc. All rights reserved.;2017
Observations have shown the need of adequate collaboration among the engineering educators for effective achievement of its goals. Nevertheless, there have been reports of the inadequate relationship among engineering educators. Consequently, it is vital to develop strategies to boost the synergy among the parties. Computational Thinking (CT) could be a dependable approach. This paper presents ways of ensuring synergy among engineering educators through computational thinking. A questionnaire survey that sought information from the respondents on the ways computational thinking: promotes thinking abilities, reduces personal clashes, and improves decision-making process among the engineering educators was administered to 400 respondents. 348 survey answers were returned, found reliable and used in the data analysis. The analysis revealed that computational thinking plays vital roles in the repositioning of engineering education for solving of novel problems, assurance of mutual respect among educators, and intensive research for renown engineering education with relative contribution index above 0.8. The paper recommends the development of a computational thinking based comprehensive engineering educators' synergy framework as a suggestion for future research.;2017
"One of the best skills for everyone, for now, and for the future, is problem-solving. Computational thinking is the way to help us to develop that skill. Computational Thinking can be defined as a set of skills for problem-solving based on computer techniques. Computational thinking is needed everywhere and is going to be a key to success in almost all careers, not only for a scientist but for many professionals, like doctors, lawyers, teachers or farmers. For many problems it is a good idea to make a plan for its resolution using some of the techniques of computer science, such as: breaking down a complex problem into smaller parts that are more manageable and easier to understand, or solve-decomposition; looking for similarities among and within problems and others experiences-pattern recognition; focusing on the important information only, and pulling out specific differences to make one solution work for multiple problems: abstraction; developing a step-by-step solution to the problem: algorithms. This plan can be used by everyone, regardless of their area of knowledge, task or age. It is essential that these techniques are practiced and developed very early. In recent years we have to see the proliferation of numerous projects with the specific objective of encouraging the study of Computational thinking. The projects of massification of computational thinking and coding are now starting to be implemented in our education system in Portugal. Most students of the first year of the Computer Engineering course, from the IPG, mostly did not have the opportunity to develop computational thinking throughout their student life. In this paper, we present the results of a case study using follow and give instructions to improve their capacities in Computational Thinking..";2017
One of the major hurdles toward automatic semantic understanding of computer programs is the lack of knowledge about what constitutes functional equivalence of code segments. We postulate that a sound knowledgebase can be used to deductively understand code segments in a hierarchical fashion by first de-constructing a code and then reconstructing it from elementary knowledge and equivalence rules of elementary code segments. The approach can also be engineered to produce computable programs from conceptual and abstract algorithms as an inverse function. In this paper, we introduce the core idea behind the MindReader online assessment system that is able to understand a wide variety of elementary algorithms students learn in their entry level programming classes such as Java, C++ and Python. The MindReader system is able to assess student assignments and guide them how to develop correct and better code in real time without human assistance.;2017
Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear dosage effect of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed.;2017
Over a decade, computational thinking (CT) has been in the focus of educators and researchers in computer science. During this period of time, the term has been developed in different ways, reaching from a fundamental idea for finding a definition what problem-solving in computer science is about to a very particular view that CT is a required skill to code software applications. This paper presents results of the Fulbright project coThink - Computational Thinking carried out at the Missouri State University in Springfield, MO, USA which was based on the research question: How can CT be utilized with computer science algorithms for challenging real-life situations? As a result of a literature review, a CT five-step problem-solving process aimed at improving students' awareness to handle everyday life situations was identified. It was further integrated in classroom lessons, where it was applied at four student groups and evaluated mixing qualitative (analysis of worksheets) and quantitative methods (questionnaire) at a sample size of n = 75. Results showed that students frequently discovered a good approximation to solve real-life challenges following computer science algorithms but we also came to the conclusion to revise our problem-solving process.;2017
Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague & Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.;2017
"Pair programming (PP) is a useful approach to fostering computational thinking for young students. However, there are many factors impacting on the effectiveness of PP. The period of switching roles between the driver and the navigator is often ignored by researchers. Therefore, this study aimed to explore the impact of the switching period on PP. We conducted a PP experiment in four classes in the sixth grade in a primary school. The results indicated that (a) the semi-free switch was more effective for the learning achievement than the fixed periods, and the preference for adopting the fixed time interval to switch roles existed in previous studies seems to be a kind of prejudice; (b) students who switched roles every 5 minutes and semi-freely were more enjoyable than those who switched roles in every task and in every class session. Moreover, the period of switching roles in every class session decreased students' enjoyment after PP; (c) the frequency of switching roles decreased significantly, but the negotiation between the driver and the navigator became more active with time going in the semi-free class. Implications for teaching are also discussed.";2017
Parquet Deformation is an architectural studio exercise introduced by William Huff in 1960s. It aims to improve students' reasoning of spatiotemporal variation by utilizing sequential shapeshifting of patterns. This article examines the outcomes of this educational research from a perspective of design computing with a purpose to remark its pedagogical significance. A multilayered reading about the exercise will reveal its historical, theoretical, and artistic backgrounds. Then the common structural elements and different construction approaches are explained along with a novel design and analysis method. The proposed method embeds variations of two-dimensional pattern deformations on a third dimension. It enables various analyses such as the measurement of regularity and locating the attractor points. This study is expected to exemplify how computational thinking and new digital tools change the way designers would approach to such systematic compositions.;2017
Physics simulations are widely used to improve the learning process in science and engineering education. Deployment of a computational physics simulation/model is extremely complex given the fact that both knowledge and skills for the science equations and the computational and programming aspects are required for a fully functional simulation, typically requiring a science educator and computer scientists/developer to work together. However, when using Easy JavaScript Simulation (EjsS) modeling toolkit, the instructor can be both the science educator and computer programmer, only needing to define the simulation variables, model and view, and the modeling toolkit can generate the computer codes for the physics simulation. Moreover, the programming aspects can become even more complex if simulations require being optimized for both Android and iOS mobile devices. The current version of EjsS provides instructors with an authoring tool that includes facilities for the creation of such JavaScript simulations as mobile apps, thus simplifying the purely programming aspects. This paper presents a new and novel EjsS functionality to generate physics simulation apps for iOS and Android. The generation process is based on the integration of the Ionic/Cordova and AngularJS technologies into EjsS. Finally, we present several working examples based on the works of Open Source Physics at Singapore.;2017
Players can build implicit understanding of challenging scientific concepts when playing digital science learning games [1]. In this study, we examine implicit computational thinking (CT) skills among upper elementary and middle school students during Zoombinis gameplay. We report on the development of a human labeling system for gameplay evidence of four CT skills: problem decomposition, pattern recognition, algorithmic thinking, and abstraction. We define labels that identify use of these skills in three Zoombinis puzzles, based on analysis of video data from both CT novices (upper elementary and middle school students) and CT experts ( computer scientists and expert Zoombinis players). Future work will involve the construction of detectors for implicit CT skills based on these human labels, in order to analyze gamelog data at scale and give feedback to teachers.;2017
Problems involving human activity systems contain a soft element which makes them hard to resolve using traditional approaches. Teaching programming is no difference in this regard. The presence of numerous factors makes it a complex and messy situation. However, one key contributor to this problem is the differences in perception of the parties involved. This paper aims to analyze the problem of teaching programming within a computer science department at Omar Elmukhtar University (OMU) through the application of soft system methodologySSM, in addition to investigating the effects and benefits of using such an approach in order to suggest a solution. Through constructing a root definition and conceptual model, we were able to provide a standard to which the current organization can be compared against, and therefore, achieve a better understanding regarding which changes need to be carried out in order to attain the system's desired results.;2017
Programmable robotics activities in science, technology, engineering and mathematics (STEM) education have been postulated to have positive impacts on Computational Thinking (CT) development. This study aims to discuss how these activities in primary school STEM education should be designed to nurture students with CT abilities. According to Sullivan and Heffernan (2016), CT learning progression with robotics consists of four stages, namely sequencing, causal inference, conditional reasoning, and systems thinking. Three examples about auto-piloting a robotic car to 1) run a square, 2) run along the white track, and 3) slow down and stop when it detects an obstacle are designed to illustrate the learning progression. The first example provides opportunities for students to develop their abilities of sequencing and causal inference. The second example demonstrates how conditional reasoning can be developed. The third example shows how systems thinking can be established. Based on this learning progression for CT development, an outline of STEM education with programmable robotics activities in formal and non-formal learning in primary schools is proposed. The key is that problem-solving should be the core of these STEM activities. Students' knowledge in STEM related subjects in primary schools like science, mathematics and programming should be applied and in turn being consolidated.;2017
Programming and computational thinking are becoming more important in primary education. This raises the question of how different approaches to teaching programming in primary schools compare with each other. We designed two approaches to teach programming to primary school students. One approach uses the instructionistic 4C/ID model, the other approach uses constructionism. The learning gains of these two approaches were compared using a pre-and post test. In total, 129 students from two different schools participated. A significant difference (p = .020, d = .66) between the two approaches was found on one of the schools, favoring the 4C/ID approach. On the other school and for the total group no significant difference was found.;2017
Programming can be a challenging subject for beginners to comprehend but a very satisfying and enjoyable one for those who apply the time and effort required to master it. Students can approach programming with a fixed mindset, perceiving the subject to be difficult before they even start. Such a mindset will result in the student procrastinating, being less motivated to participate and possibly placing metaphorical barriers to their learning where there are none. Certain programming concepts can appear, to the student, abstract in nature and intrinsically linked to the programming language being used. Dispelling this thought is a challenge requiring an approach that decouples the programming language from the fundamental programming building blocks. The fundamental programming building blocks of sequence, selection and iteration can be illustrated and enhanced through the use of computer games designed to teach programming. Such games present the player with a challenge to solve that requires a level of problem solving and computational thinking to achieve the desired solution. The purpose of these programs is to give the student a platform to visualise the abstract concepts of programming allowing them to build on their ability to solve problems and create algorithmic solutions. A genre of such games is the program your robot which offer a maze style approach where the student must use the correct programming building blocks in a suitable order to achieve the goal of safely navigating the robot from the start of the maze to the designated finish. The visual nature of these games allows the students to visualise the problem enabling them to discern the steps required to complete the task. Students are asked to write down the steps needed to solve the problem in a basic algorithm and implement their algorithm. This subsequently leads to the students debugging and amending their initial algorithms thus developing another valuable skill. With each level the nature of the puzzle gets more complex introducing new concepts and reinforcing the fundamental building blocks. The students are also building up a portfolio of problem solving skills and algorithm designs coupled with valuable debugging skills. This paper will discuss an ongoing attempt to introduce problem solving, algorithm development and elementary debugging with second year Game Design students undertaking a C++ game development module.;2017
Programming education requires a high level of cognitive processing related to the steps of problem analysis, comprehension, algorithm design, coding, and debugging. Therefore, coding education at all levels, from elementary students to non-major university students, is considered as an essential to provide future generations with the skills required in the technology-intensive 21st century, especially focusing on Computation Thinking (CT). Due to the nature of the various problem-solving steps involved in programming, it may be difficult for novice programmers to learn programming. To overcome this, teaching method that reduces the cognitive load for novice programmers and non-major students in computer-related subject is required. One possible approach is to develop a teaching method that supports learners by observing their thinking process while attempting to solve programming task. Few studies have focused on the thinking process of the learners doing programming. In addition to that, previous studies relied on indirect methods, such as think-aloud method, interviews, and observations, to examine the thinking process. With advancements of big data and data analysis technologies, there is an opportunity to identify the steps related with programming task through periodic analysis of incomplete programs during the programming activities, i.e., prior to the completion of the programming task. With this rationale, we analyzed the thinking process during a block-based programming task using an eye-tracking technique. This technique allows objective, direct, and immediate recognition of thinking processes according to the learner's gaze based on the eye-mind hypothesis, which states that the position and duration of the learner's gaze indicates the learner's thought process. For this study, six pre-service teachers who took the 'CT and problem-solving' class for 15 weeks were asked to participate. The participants' eye movements were tracked as they performed the block-based programming tasks at various levels of difficulty and analyzed according to the CT-based problem-solving steps, problem analysis, algorithm design, and automation (coding and debugging) processes. The results demonstrated that the pre-service teachers showed different gaze movements according to each step in the task execution process. Consequently, it was concluded that it is possible to grasp the learner's programming progress and diagnose the difficulty in the learning process based on learner's gaze movements. In the future, we intend to perform this experiment with more participants to establish the statistical significance of our results. We anticipate that our findings could be used as base data to diagnose and identify the state and progress of a learner.;2017
Programming tools are being used in education to teach computer science to children as young as 5 years old. This research aims to explore young children's approaches to programming in two tools with contrasting programming interfaces, ScratchJr and Lightbot, and considers the impact of programming approaches on developing computational thinking. A study was conducted using two versions of a Lightbot-style game, either using a ScratchJr-like or Lightbot style programming interface. A test of non-verbal reasoning was used to perform a matched assignment of 40, 6 and 7-year-olds to the two conditions. Each child then played their version of the game for 30 minutes. The results showed that both groups had similar overall performance, but as expected, the children using the ScratchJr-like interface performed more program manipulation or 'tinkering'. The most interesting finding was that non-verbal reasoning was a predictor of program manipulation, but only for the ScratchJr-like condition. Children approached the ScratchJr-like program differently depending on prior ability. More research is required to establish how children use programming tools and how these approaches influence computational thinking.;2017
Programming-based making activities are at the core of teaching strategies to engage young students in learning programming for developing computational thinking skills. Despite the initial evidences of enthusiastic participation in such activities, more systematic studies are needed to better understand drivers of students' intentions to participate in programming-based making activities. In this paper, we present an exploratory study which aim to address this issue by examining the interrelations among cognitive (i.e., perceived usefulness, perceived ease of use) and affective (i.e., enjoyment) characteristics for both boys and girls. To this end, we build on complexity theory and configuration theory, present a conceptual model, and employ fuzzy-set Qualitative Comparative Analysis (fsQCA) on a sample of 105 young students, to identify such interrelations. The findings provide insights on how the examined factors may have a different influence for boys and girls, an outcome that can be used to redesign educational programs targeting maximizing engagement regardless gender.;2017
Purpose - The purpose of this paper is to examine the intersection of artificial intelligence (AI), computational thinking (CT), and mathematics education (ME) for young students (K-8). Specifically, it focuses on three key elements that are common to AI, CT and ME: agency, modeling of phenomena and abstracting concepts beyond specific instances. Design/methodology/approach - The theoretical framework of this paper adopts a sociocultural perspective where knowledge is constructed in interactions with others (Vygotsky, 1978). Others also refers to themultiplicity of technologies that surround us, including both the digital artefacts of our new media world, and the human methods and specialized processes acting in the world. Technology is not simply a tool for human intention. It is an actor in the cognitive ecology of immersive humans-with-technology environments (Levy, 1993, 1998) that supports but also disrupts and reorganizes human thinking (Borba and Villarreal, 2005). Findings - There is fruitful overlap between AI, CT and ME that is of value to consider in mathematics education. Originality/value - Seeing ME through the lenses of other disciplines and recognizing that there is a significant overlap of key elements reinforces the importance of agency, modeling and abstraction in ME and provides new contexts and tools for incorporating them in classroom practice.;2017
"Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft 's Kodu Game Lab; the second group was also given four semantic Laws of Kodu to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.";2017
Reasoning about programs is an important component of computational thinking. Laws of computation give meaning to the formalisms in which programs are expressed, and can be used to predict or explain program behavior, or to uncover bugs. This paper presents Calypso, a language inspired by Microsoft's Kodu Game Lab but designed for programming actual mobile robots rather than characters in a virtual world. The initial implementation of Calypso uses the Cozmo robot by Anki. Like Kodu, the Calypso interpreter can be described by five key laws. An understanding of the laws and how to apply them constitutes a mental model of computation. Calypso provides a variety of affordances and scaffolding techniques to foster development of effective mental models and facilitate computational thinking.;2017
Research on appropriate topics and goals for computer science (CS) education in elementary and middle school has been ongoing for decades, but the recent movement toward CS for all requires the research community to gain a better understanding of what is most important to teach, to whom, and in what order. We conducted a literature review with specific attention to cataloging computer science learning goals that experts theorize are important to teach as well as learning goals that have been explored and researched with students in K-8. By mapping the former onto the latter, we discovered six categories of goals that are theorized as important but, according to our review, are yet to be researched with K-8 students. We discuss the potential implications of these gaps for future research.;2017
Researchers and educators continuously remark on the importance of integrating creativity into the learning process. This study proposes a creativity approach to facilitating participatory learning for the sustained engagement of young learners based on the principle of remix practice, which consists of learning to generate online artefacts, endless hybridization and scaffolding. This study investigated students' engagement in and perceptions of the creative learning process during a two-year participatory learning program. Data collected included students' flow perceptions during a 39-week activity, their motivation and creative self-efficacy before and after the intervention, as well as their creative products. The findings indicated that the remix-oriented approach led to a higher level of intrinsic motivation and sustained flow compared to a model-based approach, especially interest and curiosity, in this participatory learning program. The approach also helped the students to perceive a significant increase in their level of creative self-efficacy associated with strategies to generate creative ideas. The results of this study suggest that the principle of remix practice is helpful for leveraging knowledge acquisition and the creative nature of participatory learning activities to sustain student engagement in participatory learning programs. (C) 2017 Elsevier Ltd. All rights reserved.;2017
Researchers and educators have designed curricula and resources for introductory programming environments such as Scratch, App Inventor, and Kodu to foster computational thinking in K-12. This paper is an empirical study of the effectiveness and usefulness of tiles and flashcards developed for Microsoft Kodu Game Lab to support students in learning how to program and develop games. In particular, we investigated the impact of physical manipulatives on 3rd - 5th grade students' ability to understand, recognize, construct, and use game programming design patterns. We found that the students who used physical manipulatives performed well in rule construction, whereas the students who engaged more with the rule editor of the programming environment had better mental simulation of the rules and understanding of the concepts.;2017
Researchers have hypothesized strong connections between Computational Thinking (CT) practices and STEM learning. However, there is a lack of consensus on what constitutes an adequate set of CT knowledge and skills. In this paper, we present an initial framework for evaluating students' CT learning. We introduce the primary CT concepts and practices that students can learn and apply in a learning by modeling environment. Our overall goal is to develop assessments that study the synergy between STEM and CT concepts in K-12 curricula. Towards this end, we discuss the results from a teacher-led classroom study we conducted on STEM- and CT-learning in our CTSiM environment.;2017
Researchers in the past have explored several interactive tools and techniques to teach students abstract concepts of programming and computational thinking. They have explored playful and collaborative way to do so which includes text-based, visual or tangible programming toolkits. In CodeFruits, we are exploring hand gestures as an input interaction mechanism. These hand gestures represent different elements of programming languages such as functions and parameters. We have developed a gesture based interactive game which implicitly helps K-12 students to learn abstract concepts of computational thinking and write a computational code in an easier, playful and engaging way.;2017
ScratchJr is a free programming application for young children ages 5-7, available for most tablet devices. This programming environment, developed by the DevTech Research Group at Tufts University, the Lifelong Kindergarten Group at MIT, and the Playful Invention Company, was launched in July, 2014. During the first year after the app's launch, no information was collected regarding usage other than informal communication with local educators and parents. Starting in January 2016, the ScratchJr team began to use the tool Google Analytics to gain a deeper insight into user behavior, and began to investigate the learning analytics data that could shed light on computational thinking in early childhood. This paper presents the first year of user data collection of ScratchJr.;2017
Serious Games have been the focus of different research works in last years, as a consequence of their possibilities for educational scenarios. These games are used for purposes other than mere entertainment, but they are still motivating and attractive to users. More recent research works have also emphasized the potential of serious games for learning, skill acquisition, and attitude and behavior changes considering that they allow learners to experience situations that are impossible in the real world and provide engaging activities which are stimulating, generate strong emotions, require complex information processing, and provide challenges. On the other hand, programming teaching is a growing area that is spreading beyond computer science courses of studies. Computational Thinking (CT) is related to a problem solving process that involves a number of characteristics and skills such as applying abstraction and algorithms design. CT is important in computer applications, but it can also be used to support problem solving across all disciplines. Today, there is a growing corpus of experiences whose goals include CT skills development. This paper presents AstroCode, a serious game which is oriented to introduce players to CT skills such as algorithm design using variables and control structures. The description of the game and the test sessions held with different students of the National University of La Plata are detailed in this article. The first results show student engagement and motivation using these types of games in an educational scenario, as well as the difficulties they face in the use of control structures and how AstroCode helps students apply them.;2017
Several instruments have been used for assessing Computational Thinking (CT) abilities. In this exploratory and preliminary study, we investigate how appropriate the Bebras challenge is as an instrument to assess and measure CT abilities. Bebras is an international challenge whose goal is to promote Computer Science and CT. The test can be answered without any prior knowledge on computer science. Our broad research question is whether we can evolve Bebras into a full fledged instrument to assess and measure CT abilities. In this paper, we instantiate a few more specific research questions: Is Bebras performance a good predictor of success for students within programming courses? Is there any correlation between Bebras performance and students' grades? Do students improve their performance in Bebras tests when exposed to the contents of a programming course? Our dataset consists of the grades of 138 students who attended introductory programming courses at two Brazilian universities and their performance in two simulated Bebras tests. The first test was applied at the beginning of the term and therefore before any exposition to programming classes. The second one was applied at the end of the term. The results suggest that the performance on Bebras is only moderately correlated to the student grades. We conclude that it is not very likely that CT measures can be derived from the Bebras test as it is currently designed. While further research is needed on how we can leverage the Bebras effort to extend it into a CT assessment instrument, we performed a preliminary study on the use of Item Response Theory (IRT) as a means to improve the selection of questions and the design of the test. We expect the results of this research can contribute both to the development and discussion on CT assessment as well as to the Bebras effort to educate CT.;2017
Seymour Papert-a major philosopher of education, a great educator of modern age, and the father of constructionism-passed away in summer 2016. The floor and screen turtles he added to the Logo programming language provided visualization and objectification of the processes, as well as conciseness of programming. As a result, Logo developed into a unique environment that millions of children in dozens of countries use to learn algorithmic (or computational) thinking. Professor Seymour Papert visited the Soviet Union and Russia a number of times. He played a key role in the establishment of the post-Soviet school's educational philosophy. The article describes a number of crucial ideas and events associated with the development of Papert's education philosophy, the implementation of his educational conception in Russia, his visits to Russia, and his meetings with Russian educators, which were first of all attended by the author.;2017
Significant research has been done on gender disparities in STEM and computer science with the goal of broadening participation in these male-dominated fields. At the same time, the role of computational thinking (CT) as a tool to improve computer science skills along with STEM learning is becoming increasingly significant. This work seeks to add to this research through an analysis of the role confidence in computational thinking plays in developing STEM engagement and abilities. In the study reported in this paper, 40 high school students (21 girls and 19 boys) completed a Scratch project on modeling inelastic collisions in their Physics class. Pre- and post-surveys were conducted to analyze confidence levels in CT. Results showed a statistically significant difference in confidence levels in four CT dimensions: abstraction, flow of control, decomposition, and conditional logic. The results show that boys were more confident than girls in applying each of these dimensions. However, performance on the modeling assignment showed no statistical difference. We discuss the results and its applications to future work.;2017
"Since its introduction by Papert[1] and its application to the educational field by Wing[2], computational thinking has been experiencing a growing development in recent years in all levels of compulsory education and also in the informal field. Undoubtedly, computational thinking helps individuals to better cope with learning challenges and even with everyday life challenges themselves; in addition, it is motivating for young people, and because of that, it is frequently offered as a common activity outside school or inside the curriculum. In Catalonia, different governmental initiatives consider the inclusion of programming and robotics in the ordinary classroom as a result of that; in fact, it is considered positive to generalize the computational thinking in the compulsory education system, because of its many possibilities and its many potentialities. However, nowadays the Faculties of Education do not form teachers prepared to teach computational thinking to their future students, which may run the risk of not having professionals prepared enough in this regard. Because of this, the PECOFIM project is investigating the most effective ways to train future teachers in computational thinking. As a first part of this project, a descriptive analysis of the initial level of knowledge and expectations on computational thinking as a training strategy for the pre-service teachers of the two participating universities has been carried out, and preliminary data offer us an interesting view on the status quo in this regard. Although the informants generally offer a precise definition of computational thinking, the preconception we detect in them is always closely linked to the experiences they have had in this respect and, therefore, it is related to robotics or programming, in an often quite restrictive vision. Students show a high level of expectations about the educational possibilities of computational thinking in Primary Education, although their expectations are excessively linked to the instrumental domains related to programming itself and not to its incidence in the development of the other literacies and abilities. In addition, they are able to recognize in general terms which are the most relevant elements of the didactic strategies that allow students to develop it. However, even those who have been trained in robotics feel unprepared to act as teachers in computational thinking. As a last positive, it is important to emphasize that in any case the interest of the pre-service teachers to train in computational thinking is high.";2017
Since the 1980s, scholars have had visions about how computers can change how we think and learn and may support more engaging learning processes. Recently many countries have extended their formal school systems to teach students about computational thinking, with the aim to support children in mastering digital materials, becoming digital producers, and using technology to develop the ability to use their creativity and develop problem-based digital projects. One of the questions in this new area of formal educational is whether acquiring computational thinking (CT) skills should be a goal in itself-that is, a new subject matter in the curriculum-or whether CT should become part of cross-disciplinary projects in school. The basis for the current experiment is a longitudinal (four years), design-based research experiment, where CT was used as one of the means to reach learning goals in cross-disciplinary academic subjects. In the current part of the experiment, adult high school students (K-11) created digital learning games using the game design tool Scratch. The purpose was to teach their classmates about specific learning goals in geography, chemistry, biology, and social studies within their digital learnings games while they themselves learned about these subject matters through the learning game creation process. The findings were that game design and CT could be used as means to reach learning goals and spark reflections about cross-disciplinary academic subject matter and that the learning game construction process involved the students' considerations about four central areas and processes within these areas. Also, as the students transformed their games from a vision to a concept and into a concrete digital object, they were challenged to become innovative and creative and were supported in their thinking and learning processes, developing knowledge about problem-based work and CT competencies.;2017
Smart Cities development has progressed rapidly with Internet of Things (IoT), ambient intelligence and increasingly, crowdsourcing. Engaging the community thus plays a key role in developing meaningful communal growth along with other stakeholders. This paper briefly presents a pilot study on developing computational perspectives for community-based engagement and innovations in Smart Cities for the young and thereafter, to explore possibilities of engaging seniors in self and community development, and the young and old in community-based engagement and possibly in the future, the development of viable values-based innovations in information systems.;2017
Software quality is seen as an integral part of CS education. Two of the key concepts concerning software quality are testing and debugging. Testing is considered important to verify the students' underlying model or algorithm. Debugging is an approach related to computational thinking which is distinct from general programming skills and fosters abilities like logical reasoning and independent problem solving. However, approaches, teaching materials, and studies on how to teach and integrate those concepts effectively into K12 classrooms are lacking. Therefore, both debugging and testing are often neglected in teaching practice, despite them being represented in many (but not all) curricula. In the following, we present a research project with the intention of providing adequate and evaluated strategies for addressing software quality in the classroom and its rationale. For this purpose, the model of Beizer's testing levels has been utilized and didactically transposed, thereby making it applicable to CS education in K12. The resulting categories may provide a basis for teaching and research.;2017
Students are nowadays being introduced to the digital age as part of their formal education. This includes practical programming skills as well as more conceptual thinking tools developed in the discipline of computer science, sometimes denoted Computational Thinking (CT). The connection between CT and doing programming is sometimes thought of as the connection between theory and practice. The pragmatic thinker Dewey embraced practice in learning and argued that learning and knowing always come from experiencing the world. According to this view, there are no epistemological differences between theory and practice. In computer programming the student's active learning in the form of physical motor movement is important. Using the pragmatic way of analyzing learning to program puts a focus on the situated thinking during the practical programming, which relates to theories about CT. This research is focusing on the practical hands-on part of novice programming and in this aims at getting insights about factors important when learning to program that could inform teachers in the Computer Science classroom.;2017
Students in secondary education strive hard enough to understand basic programming concepts. With all that is known regarding the benefits of programming, little is the published evidence showing how high school students can learn basic programming concepts following innovative instructional formats correctly with the respect to gain/enhance their computational thinking skills. This distinction has caused lack of their motivation and interest in Computer Science courses. This case study presents the opinions of twenty-eight (n=28) high school students who participated voluntarily in a 3D-game-like environment created in Second Life. This environment was combined with the 2D programming environment of Scratch4SL for the implementation of programming concepts (i.e. sequence and concurrent programming commands) in a blended instructional format. An instructional framework based on Papert's theory of Constructionism to assist students how to coordinate or manage better the learning material in collaborative practice-based learning activities is also proposed. By conducting a mixed-method research, before and after finishing several learning tasks, students' participation in focus group (qualitative data) and their motivation based on their experiences (quantitative data) are measured. Findings indicated that an instructional design framework based on Constructionism for acquiring or empowering students' social, cognitive, higher order and computational thinking skills is meaningful. Educational implications and recommendations for future research are also discussed.;2017
Studies have shown that learning approaches are able to promote the developments of computational thinking on students, including cooperative learning, project-based learning, online communication, Academic dialogue etc. Therefore, these learning approaches can combine with the traditional teaching in a more effective way. Blended learning may promote the developments of computational thinking on students. The paper takes the junior College students as the experimental objects, and carries a pretest-posttest study through unequal experimental and control groups. It approved that blended learning has a positive impact on the college student's computational thinking, i.e., they have an obvious progress.;2017
Studies on digital game construction in classroom contexts indicate compelling links between digital game construction and increased confidence in computational literacy for middle and high school students. However, research continues to demonstrate sex-based differences related to computer programming confidence and STEM-related educational and career choices - girls and women are under-represented in computer science and engineering programs and the tech-industry in general. The goal of this study was to address this gap by administering a classroom-based digital game design program in same sex girls and boys only groups. The results demonstrate the importance of explicitly targeted learning experiences especially for girls related to game design, computer programming and computational thinking. Keywords: Game design, digital literacies, game maker, computational thinking, computer confidence. The belief that youth exhibit an inherent digital affinity partly undergirds the push towards an inclusion of digital games in the classroom. Supplementing a curriculum with games is built on the assumptions that these digitally connected youth are already playing games in their leisure times and that games are somehow more engaging than the books, worksheets or lectures commonly used as teaching tools. This paper will report on a study of game-based learning that took place in Ontario, Canada in 10 different school boards, 20 different grade 7 and 8 (ages 11 to 14) classrooms, and a total of 768 student participants. The study focused on the implementation of a digital game that was developed explicitly to support physical geography concepts, Sprite's Quest. Participants were given a pre-survey which included questions related to physical geography in general and concepts reinforced in the game in particular, as well as a post-survey that asked the same questions as the pre-survey, in addition to game-focused questions. A total of 435 surveys were matched for pre- to post-survey analysis which was carried out in the software R. Results from the pre-post comparison analysis show statistically significant improvement for participants overall. This paper contributes to ongoing work that attempts to demonstrate how and in what ways digital games can be used in everyday school-based contexts to support learning.;2017
Studying computer programming helps children develop computational thinking, a problem-solving methodology that can be transferred to solve everyday problems. Additionally, exposing children to an advanced computational concept of search algorithm allows them to see how different problem-solving techniques are designed to tackle more challenging tasks, and improve their ability to solve problems. We present a block-based programming game called Tuk Tuk for children in kindergarten level (junior version), and elementary and middle school level (standard version). With Tuk Tuk, learners create a computer program in a block-based language to control a car to complete a given task, earn money, reach the next level, and unlock new coding blocks. By completing each task, learners will learn important computational concepts and algorithms, a basis of computational thinking, such as conditionals, iterations, depth-first search (DFS) and breadth-first search (BFS).;2017
Systematic endeavors to take computer science (CS) and computational thinking (CT) to scale in middle and high school classrooms are underway with curricula that emphasize the enactment of authentic CT skills, especially in the context of programming in block-based programming environments. There is, therefore, a growing need to measure students' learning of CT in the context of programming and also support all learners through this process of learning computational problem solving. The goal of this research is to explore hypothesis-driven approaches that can be combined with data-driven ones to better interpret student actions and processes in log data captured from block-based programming environments with the goal of measuring and assessing students' CT skills. Informed by past literature and based on our empirical work examining a dataset from the use of the Fairy Assessment in the Alice programming environment in middle schools, we present a framework that formalizes a process where a hypothesis-driven approach informed by Evidence-Centered Design effectively complements data-driven learning analytics in interpreting students' programming process and assessing CT in block-based programming environments. We apply the framework to the design of Alice tasks for high school CS to be used for measuring CT during programming.;2017
Teacher training in computational thinking is becoming more and more important, as many countries are introducing it at all K-12 school levels. Introductory programming courses are known to be difficult and some studies suggest they foster a fixed-mindset views of intelligence, reinforcing the idea that only some people have the so called geek gene. This is particularly dangerous if thought by future school teachers. Interventions to stimulate CS growth mindset in students and their teachers are fundamental and worth CS education research.;2017
Teaching computational thinking can be viewed as cultivating the capacity for logical thinking and problem-solving skills applied to foundational subjects such as mathematics. We report a pilot study on how carefully designed mobile app games that gamify elementary algebra learning are used in an annual computer science tournament and also at an annual mathematics festival in Hong Kong. We define mathematics gamification as the process of embedding mathematical concepts and their logical manipulations in a puzzle game-like setting aided by computing technologies. We have evaluated the learning efficacy of our mobile app games to gain numeracy proficiency in an annual computer science tournament for middle school students in Hong Kong.;2017
Teaching computer science offers more than algorithmic thinking (or more general and as recently presented: computational thinking). To understand this claim, one has to have a more careful look at the development of human culture, science, and technology. This helps not only to recognize that the computer science way of thinking was crucial for the development of human society since anyone can remember, but it helps to make a good choice of topics for sustainable computer science education in the context of science and humanities. This leads to the creation of textbooks that do not focus on particular knowledge for specialists, but offer serious contributions in the very general framework of education.;2017
Teaching HCI in an undergraduate course for computer scientists is often a challenging experience, because the skills that characterize HCI are different from scientific and computational thinking that are the focus of most subjects of the curriculum. Often HCI teaching is organized as a set of lectures that are useful to learn concepts, but don't increase the design skills of the students. This work reports the results of an educational experience where both learners and teachers were actively involved in a process of knowledge construction and design. This process usually happens in other domains, such as architecture or industrial design, but is not part of most computer science curricula. We chose as project a challenging theme: the design of eco-feedback interfaces that inform people about the consequences of their actions for the environment and help to take decisions for lowering energy consumption. Eco-feedback interfaces are also representative of the gap between the products available on the market and the results of scientific studies, evidenced also by a recent workshop about HCI education. The workshop evidenced a number of pitfalls in HCI education that in our educational experience we tried to overcome with appropriate methodologies. An additional challenging task was the attempt to organize all the design activities taking advantage of a platform for remote learning, stressing its limits. The paper will discuss all these issues, evidencing where the applied methodologies gave good results and where they need further improvements, with the final goal of giving useful advices for HCI educational experiences to come.;2017
Textile and apparel industry has long been stereotyped as traditional and old-fashioned. As a non-traditional company in a traditional industry, Esquel encourages employees to innovate and to challenge the status quo. You can code campaign was initiated in 2015 to engage and propel staff at all levels towards its vision of Making a Difference. The campaign aims to drive a sustained cultural transformation to turn the less technically minded employees into confident users of technology with computational thinking (CT) ability, through developing a mobile apps. Many useful mobile apps have been developed and some have been commercially adopted. The campaign helps the Company to nurture a culture of innovation, problem-solving and collaboration.;2017
That parametricism goes social is not a concession to the prevailing winds of political correctness (that divert and dissolve the innovative thrust of architectural discourse). Rather, it is a sign of parametricism's maturity, confidence and readiness to take on the full societal tasks of architecture, i.e. it implies the inauguration of Parametricism 2.0... After 15 years of muscle flexing it is high time to put these innovations to more serious work. Patrik Schumaker (Schumaker, 2015) The 'more serious work' presented here is the presentation of craft, and specifically digital craft, as a historic and theoretic framework that extends the agency of computational thinking and parametric design in the social project of architecture. Ultimately, this paper argues for the development of a more robust theoretical position about the social application of advanced parametric design as a means to expand architectural agency in the discourse surrounding parametric design's relationship to large scale social issues.;2017
The ability to select or customize characters in educational applications and games has been shown to influence factors related to learning effects such as transfer, self-efficacy, and motivation. Most previous conclusions on the perception of virtual characters and the effect of character assignment in interactive applications have been reached through short, one-task experiments. To investigate more long-term effects of assigning versus customizing characters as well as explore perceptions of personal character appearance, we conduct a study in which sixth and seventh grade students are introduced to programming concepts with the software VEnvI (Virtual Environment Interactions) in seven one-hour sessions over two weeks. In VEnvI, students create performances for virtual characters by assembling blocks. With a between-subjects design, in which some of the students can alter their character and others are not given that possibility, we examine the influence of the presence or absence of character choice options on learning. We hypothesize that students have higher learning outcomes when they can choose and customize how their character looks compared to when they are assigned a character. We confirm this hypothesis for a category of learning (Remember and Understand) and give insights on students' relationships with their character.;2017
The article is aimed at providing an overview of current trends and innovations in teaching of introductory programming. It is focused mainly on teaching programming as a part of Informatics subject with secondary school students (15 - 19 years old) as a target group. Teaching of informatics and programming has an important role in the education to develop students' skills which are important for success in the 21st century, such as problem solving skills, computational thinking, or critical thinking. The hypothesis is presented in the article that one of the ways to realize up-to-date and attractive teaching of programming is to use mobile devices in the teaching and to develop mobile applications for these devices. The article attempts to verify the hypothesis. Analysis of 37 articles about trends and innovations in teaching of programming is done too. The articles are collected from indexed scientific databases, i.e. Science Direct, SCOPUS, Web of Knowledge, Wiley Online Library, Knovel Library and ProQuest Central. Approximately 30% of examined scientific articles mention that programming is hard to learn. For this reason, the article is focused on the importance and challenges of teaching informatics and the used approaches in teaching programming. Approaches based on 'learning by doing' concept and constructivism are most often used. The programming environment and the programming language (textual, visual) also play an important role in teaching of programming. A link between learning and object of interest may have positive influence on students' engagement. For this purpose, various programming environments have been developed to program mobile applications. On the basis of examined source studies, recommended features of programming environment suitable for teaching of introductory programming are presented in the article. Common features of already existing educational software solutions designed to teach introductory programming are presented in the article too.;2017
The authors of this case study examined the transformation of a suburban Pittsburgh school district curriculum from traditional to one that includes computational thinking (CT) concepts and practices for all students. They describe the district model that guided the curricular transformation, implementation of CT lessons and processes at all grade levels, and metrics used to evaluate student performance in CT activities. Four themes emerged as critical factors for successful application of the district's STEAM Studio district-wide integration of CT: First, school district reform was aligned with regional efforts to improve K-12 learning through CT initiatives. Second, integration of CT built upon effective teaching and learning practices across all core content areas. Third, research partnerships helped to identify continuous improvements in CT implementation. Fourth, changes to existing faculty positions, student schedules, learning projects, and school spaces were necessary and were customized for this district CT implementation plan.;2017
The challenges of addressing increasing calls for the inclusion of computational thinking skills in K-12 education in the midst of crowded school curricula can be mitigated, in part, by promoting STEM learning in after-school settings. The Visualization Basics: Using Gaming to Improve Computational Thinking project provided opportunities for middle school students to participate in after-school clubs focused on game development and LEGO robotics in an effort to increase computational thinking skills. Club leaders and teachers, however, first needed to develop proficiency with the computational tools and their understanding of computational thinking. To achieve these goals, teachers participated in two online professional development courses. After participating in the courses, teachers' understanding of and attitudes toward computational thinking skills were mostly positive. Observations of club sessions revealed that teachers provided a mix of structured and open-ended instruction. Guided instruction, such as using detailed tutorials for initial exposure to a concept or process, was most commonly observed. One area identified for improvement was the duration of the courses, which provided limited time for teachers to develop deep and robust computational thinking skills. Despite this limitation, the data collected thus far suggest that teachers' understanding of and attitudes toward computational thinking skills improved.;2017
The city of Lodz is bidding for hosting International EXPO in 2022. The proposed theme is City Re: Invented''. The paper presents the EXPO project experiment conducted at Lodz University of Technology in cooperation with Lodz City Council. The idea was to prepare design proposals for promotional purposes, first in the form of computer visualisations, then as physical scale mock-ups produced in a digital fabrication laboratory. It is planned that the best solutions would be adopted and built in 1: 1 scale if Lodz received a nomination. The results of the project are illustrated in the paper by selected examples. The main aim of this study is to examine computational thinking as a design medium. The paper presents background studies in this regard. It also looks into the approach to articulate digital fabrication and robotics as not merely the methods of delivery of a final product but their role in a design process. It deliberates pros and cons of computational design and its influence on creativity. It concludes with a statement that computation may help to construct, reveal, enhance and develop logic in a creation process.;2017
The college computer basic course is compulsory course for students of all majors. With the rapid development of information technology, in order to adapt to the demand for talents from the perspectives of social, economic and technological development, it is quite significant to further enhance the instruction and cultivation of undergraduates. This paper mainly aims at the problems existing in the college computer course, and reform from the teaching concept, teaching methods and other aspects which is based on the computational thinking. Through the practice of teaching reform, the students' learning interests are greatly improved, and the teaching effect is improved which is helpful to the new talent training mode.;2017
The Computational Thinking (CT) conceptual framework is entering its second decade of research yet still lacks a cohesive definition by which the field can coalesce. The lack of clear definition makes assessment tool challenging to formulate, pedagogical efforts difficult to compare, and research difficult to synthesize. This paper looks to operationalize differing definitions of CT enhancing the ability to teach then assess the presence of CT. Expanding upon CT definitions, industry practices and processes, and educational theory, we link existing concepts and propose a new element to model an active definition of CT as a theoretical framework to guide future research. Our model updates existing CT definition by formally including Modeling, introducing Socio-Technical processes, separating Information Gathering from Data Collection and adding emphasis to Testing as a vital CT concept. We feel these elements and interconnections make CT is easier to describe and measure.;2017
The computer age is changing the face of education. To realize the full potential of such change, we need to move beyond a simple adoption of IT in the classroom. Students will benefit most when they learn to use computational thinking (CT) while applying the principles and best practices of computing to solve all sorts of real-world problems. This message (Wing, Communications of the ACM 49(3): 33-35, 2006) was pioneered by Jeannette Wing, Corporate Vice President at Microsoft Research, which is also the main theme of the Computational Thinking Forum held in Seoul, South Korea. There has been a big step forward through the collaborative efforts of many, including the Korean Information Science Education Federation, governors, policy makers, faculty members, teachers, and industry leaders such as Microsoft. The Korean government and its Ministry of Education (MoE) decided to include software education to be compulsory at K-12 schools by 2018, with the Korean MoE also having operated pilot programs at 72 schools nationwide in 2015. This article reports the showcase projects for K-12 and higher education presented at the aforementioned forum.;2017
The continued call for twenty-first century skills renders computational thinking a topical subject of study, as it is increasingly recognized as a fundamental competency for the contemporary world. Yet its relationship to academic performance is poorly understood. In this paper, we explore the association between computational thinking and academic performance. We test a structural model-employing a partial least squares approach-to assess the relationship between computational thinking skills and academic performance. Surprisingly, we find no association between computational thinking skills and academic performance (except for a link between cooperativity and academic performance). These results are discussed respecting curricular mandated instruction in higher-order thinking skills and the importance of curricular alignment between instructional objectives and evaluation approaches for successfully teaching and learning twenty-first-century skills.;2017
The CS for All initiative places increased emphasis on the need to prepare K-12 teachers of computer science (CS). Professional development (PD) programs continue to be an essential mechanism for preparing in-service teachers who have little formal background in CS content, skills, and teaching pedagogy. While increased investment by federal agencies and the industry has raised the number of CS PD opportunities for K-12 teachers, there has been limited study of how teachers apply what they learn back in their classroom. This paper describes an in-depth qualitative study through interviews of 28 elementary, middle and high school teachers who participated in summer PD in preparation of teaching a full CS course or integrate CS modules into existing courses (e.g., science, engineering, business, technology, etc). The interview protocol focused on educators' involvement in the PD, specific skills and strategies they learned, whether and how they have been able to apply these new skills in the classroom, what facilitated or impeded this application, and how students have responded.;2017
The cultivation of computational thinking ability is an important part of general education in universities. At present, there are some problems in the teaching of computer programming course in Colleges and universities. These problems form obstacles to the cultivation of students' Computational Thinking ability. Through the analysis of computational thinking, from the aspects of re organizes teaching content, strengthen teaching reform and enrich the second classroom for students of reform and practice of computer programming course based on computational thinking.;2017
The current curricular changes across Europe towards the inclusion of computational thinking through coding in comprehensive schools have prompted new challenges for teachers that may not be confident nor have a scripted pedagogy to teach the core concepts, as well as for students that may have a negative bias towards such subjects. In this poster, we present our exploratory experiences using music improvisation as facilitation medium for presenting computational concepts to students, through a relaxed and anxiety-free atmosphere. We show the results of preliminary experiments in the wild, indicating that the emotional state of the participants is positively enhanced after a short section of music improvisation. Furthermore, we pose open questions to the CSE research community on the value of including short improvisation activities prior teaching programming concepts such as data, sequence, loops and conditionals, which are, oftentimes, perceived as difficult.;2017
The current impetus for increasing STEM in K-12 education calls for an examination of how preservice teachers are being prepared to teach STEM. This paper reports on a study that examined elementary preservice teachers' (n = 21) self-efficacy, understanding of science concepts, and computational thinking as they engaged with robotics in a science methods course. Data collection methods included pretests and posttests on science content, prequestionnaires and postquestionnaires for interest and self-efficacy, and four programming assignments. Statistical results showed that preservice teachers' interest and self-efficacy with robotics increased. There was a statistically significant difference between preknowledge and postknowledge scores, and preservice teachers did show gains in learning how to write algorithms and debug programs over repeated programming tasks. The findings suggest that the robotics activity was an effective instructional strategy to enhance interest in robotics, increase self-efficacy to teach with robotics, develop understandings of science concepts, and promote the development of computational thinking skills. Study findings contribute quantitative evidence to the STEM literature on how robotics develops preservice teachers' self-efficacy, science knowledge, and computational thinking skills in higher education science classroom contexts.;2017
The demand for computer programming professionals in STEAM-related areas has rocketed in the last decade. Initiatives such as the Hour of Code or CodeWeek take advantage of online platforms like Code.org to reach millions of students through a one-hour introduction to computer science and computer programming. Despite the excellent curricular design of Code.org courses, we believe that learners could benefit from a platform where they can create their own programming challenges that can be shared, assessed and remixed by the rest of the users. We named this platform Make World (http://makeworld.eu). After more than one year of use, we studied how students and teachers used this tool to propose and solve learning activities where computational thinking and STEAM skills are developed at the same time. This paper describes the main characteristics of Make World and analyses the use and piloting phase where more than 500 students of primary education have participated to measure the impact of Make World in their learning. The result of this analysis provides a better understanding of the difficulties students face when using a technological platform for STEAM and computational thinking education.;2017
The demand for cybersecurity professionals is projected to grow substantially, with the US Bureau of Labor Statistics reporting that employment in cybersecurity within the US will grow by 18% from 2014 to 2024, much faster than the average for all occupations. As creating a cyberspace workforce has become a matter of national security for every country, cybersecurity needs to be taught at all levels, to all students, in the educational system. The good news is that cybersecurity is also a topic that students from a wide variety of backgrounds find interesting, and as a result, it motivates them to study computing too. Over the past two decades, there has been an increased effort worldwide to incorporate computer science and computational thinking into the middle and high school curriculum. The CS10K initiative in the US has led to projects to introduce computer science at the K-12 educational level. One of these initiatives, the new Advanced Placement (AP) course in Computer Science Principles (CSP), was designed to introduce computer science in an engaging way, show students how computing is relevant in their lives, and to attract a diverse group of students to computing. The CSP Curriculum Framework allows for multiple implementations of the CSP course, permitting course designers to develop courses to engage and attract specific groups of students and that focus on specific themes in computing. This paper describes an approach to develop a new CSP course, CyberCSP, which integrates cybersecurity first principles throughout the course. The approach builds on an CSP course that was created from a previous collaboration between the Computer Science Department at Rochester Institute of Technology, Rochester, New York, and the Webster Central School District in Webster, New York. The paper discusses the background, details of the earlier CSP course, how relevant cybersecurity content was identified, and then integrated into the CSP course to create the CyberCSP variant of the Computer Science Principles course.;2017
"The diffusion of Specific Learning Disabilities (SLDs), in an evolving theoretical and clinical scenario, afflicts the ability of experts to diagnose, differentiate and provide early support of students suffering from an SLD. It is necessary to correctly assess the presence of this type of neurodiversity in the learning style since the pupil attends Primary School, limiting the important damage caused by not considering the emotional and relational framework beyond the cognitive one. Considering the SLDs as a category including various ways of processing information, the purpose for those who work in the education field is to find new strategies of teaching in the classroom. Currently, there are several technology tools with a compensating purpose which have a different effect on the main ways an SLD child organizes, processes, accesses and uses information. Among these, Coding has become world-class for the ability to develop a paradigm shift in the way an SLD person thinks, which is the main issue of the disorder. Coding is a powerful instrument to include and integrate the different learning styles and the cognitive peculiarities of every student: coding 1) reinforces some critical skills (problem solving, the sense of orientation, logical-computational thinking and ability to synthesize information); 2) it generates positive emotionality in the child by involving him in a fun and motivating activity; 3) it offers strategies for dealing with dysgraphia. However, Coding is an instrument and it should be integrated as a part of a training path in order to be effective. The learning courses have to be both designed according to a rigorous method and tailored-made for the specific context (classroom, children, training need analysis). The paper describes in detail the design of a standard-lesson to teach Coding in schools. First of all, we put together the existing platform of coding with compensating software Super Quaderno, a special text editor which can overcome the problems of coordination and short-term memory typical of dysgraphia thanks to its features: phonetic spelling, multimedia objects, automatic association of images, reading word-by-word. The lesson is structured into a) a series of stimulating questions to introduce the topic, dealing with the main resistances and correcting wrong believes; b) a role play that introduce the learners to machine language, stimulating their ability to communicate in a simple and clear way, which is essential for programming; c) a creative exercise that consists in creating an ex novo story using visual blocks of programming: in the first phase the pupil writes a short story, which will be associated with images and sounds; in the second phase, the images are arranged in order to create a labyrinth, while the text disappears; in the last phase, the pupil has to follow the path, made of images and synthesized sounds, in order to recreate the original story. The purpose is to a) stimulate the mind to identify the logical and chronological sense of a text, b) train writing in a ludic manner and c) enhance the typical learning style of children with SLDs, giving way to their talents and creativity. This collaboration can also be extended to other software, to create an interconnected network between programming and compensation tools, potentially useful in different school environments.";2017
The Finnish primary school curriculum will feature programming and computational thinking as mandatory cross-curricular elements in all teaching starting from the first grade. Many teachers are quite concerned about this and feel ill-prepared. A group of volunteers created a MOOC for teachers and, with no budget, trained over 500 primary school teachers to be competent teachers of programming (38% of the participants). The results from a study conducted within the course indicate that Finnish teachers seem to think that coding is an important addition to the school curriculum and they exhibit low levels of anxiety over it. The MOOC design focused on connectivist design principles (cMOOC) and was considered extremely successful by the participants. The MOOC participants seemed confident that the MOOC would equip them to face the new challenge, and indeed, the feedback from the MOOC and its results support this.;2017
The first aim is to conduct a general analysis of countries which have integrated coding training into their curricula, and the second aim is to conduct a content analysis of studies on coding training in Turkey. It was identified that there are only a few academic studies on coding training in Turkey, and that the majority of them were published in 2016, the intended population was mainly undergraduate students and that the majority of these students were Computer Education and Instructional Technology undergraduates. It was determined that the studies mainly focused on the subjects of programming and Scratch, the terms programming and coding were used as synonyms, most of the studies were carried out using quantitative methods and data was obtained mostly by literature review and scale/survey interval techniques.;2017
The focus of this research is to develop and verify the 3-level-5-guidance (3L5G) Task-driven Instructional Model aimed at fostering Computational Thinking (CT) of junior high school students in an application software course. As one of the most popular pedagogies in Informational Technology (IT) instruction, the task-driven learning approach is receiving increasing attention as it facilitates the development of CT among junior high school students. Instructional problems existed in task-driven learning applications as well as the status quo of the development of CT in IT courses were reviewed through document analysis. After the development of the framework of CT in application software learning, an empirical investigation was conducted to develop and refine the 3L5G Task-Driven Instructional Model from the perspective of task levels and cognitive guidance guiding. This investigation was conducted over two iterations of an action research effort with 8th-grade students of a public junior high school in Guangzhou. The model was verified through a practical study with students (N = 301) from two junior high schools in Guangzhou, China.;2017
The German school system is very complex and inconsistent, due to the policy of states being responsible for the state curricula. One of the most heterogeneous fields is the teaching of computer science (CS). Although the topic is becoming more and more important for students growing up in a digital media society, stakeholders are not able to find common ground on the matter of whether and how computer science should be taught at German schools. With the beginning of the 2016-2017 school year, the State of Baden-Wurttemberg is planning to introduce a new state curriculum. In this curriculum, named Educational Plan 16, computer science is integrated into the higher secondary track schools as an interdisciplinary task. This chapter introduces computational thinking as a thinking method that (1) enables stakeholders in Germany to integrate computer science into their classes and (2) close the gap between different classes to support an interdisciplinary approach to computer science teaching. Reaching these targets involves meeting specific personal, institutional, and systemic conditions and overcoming existing limitations. This chapter also describes the possibility of strengthening an approach to an international computer science education by developing and distributing computational thinking projects across national borders.;2017
The global video game industry's revenues reached 7.2 billion in 2007 and over $65 billion in 2012 with projected growth over $80 billion by 2017. As new consoles, PC, and mobile devices penetrate more foreign markets, revenues derived from these devices and software will continue to increase. In a nationally representative sample of U.S. teens, 99% of boys and 94% of girls played video games. Over 45% of women play video games and 30% of people over the age of 50 play games on a regular basis. Overall, 72% of Americans play video games in the U.S. and the amount of time spent playing games continues to increase, as do foreign markets. The increased market capitalization of the industry increases demand of qualified applicants. Other industries leveraging similar technology are beginning to grow and have topped over $10 billion in revenue in 2014. Students with expertise in game and related technology will have an advantage in these new job opportunities. Christian Brothers University (CBU) seeks to fill this need by the creation of a Bachelor of Science in Engineering Management (BSEM Information Management) in Video Game Design. This degree will give students the skills needed to pursue a career within the game industry and others while developing engineering skills.;2017
The goal of this paper is to promote computational thinking among mathematics, engineering, science and technology students, through hands-on computer experiments. These activities have the potential to empower students to learn, create and invent with technology, and they engage computational thinking through simulations, visualizations and data analysis. We present nine computer experiments and suggest a few more, with applications to calculus, probability and data analysis, which engage computational thinking through simulations, visualizations and data analysis. We are using the free (open-source) statistical programming language R. Our goal is to give a taste of what R offers rather than to present a comprehensive tutorial on the R language. In our experience, these kinds of interactive computer activities can be easily integrated into a smart classroom. Furthermore, these activities do tend to keep students motivated and actively engaged in the process of learning, problem solving and developing a better intuition for understanding complex mathematical concepts.;2017
The government of the Czech Republic approved in November 2014 Strategy of Digital Education 2020 which defines the priorities in the field of the use of new methods and ways of learning with the support of digital technologies, strengthening of digital literacy and the development of both digital competences and computational thinking of pupils. To fulfil the strategy, there is a necessity to assure the conditions and adjust the curricular documents which are the base of the educational programmes of individual schools. Our survey is aimed to contribute to this process, describe and explore what way and to what degree the work with robotic kits is currently integrated into the lessons at the primary schools in the Czech Republic and Slovakia. Robotics and robotic programming are not included in the Czech curricular documents. However, there are some primary schools where robotic kits are used in lessons in spite of its unfavourable initial position and hereby robotics has its role not only within leisure time activities. To map the way and range of robotics teaching, Czech primary schools and lower level of grammar schools were addressed by means of the online questionnaire which target group were the teachers of higher primary schools and lower level of grammar schools. From the obtained responses is evident that robotic kits LEGO Mindstorms are used in Czech schools the most frequently. To be more specific robotic kits are used in technically oriented subjects such as Informatics, Technical Education and Physics, not only in algorithm and programming teaching but also in a variety of further activities. We focused on the school educational programmes of some representative schools to find out how robotics is integrated in lessons despite the absence in the frame educational programme. An interesting point is that despite its absence in the curriculum of primary education, robotic kits are used by the teachers all school year long usually in middle big groups which size is typical for language lessons. From the responses, there are also evident some deficiencies which emerge from the current position of robotics in Czech education, e.g. the absence of sufficient amount of robotic kits and/or an adequate time grant.;2017
The idea of computational thinking (CT) has resulted in widespread action at all levels of the American educational system. Some action focuses on programming, some on cognition, and some on physical action that is seen as embodying computational thinking concepts. In a K-12 educational context, the observation that computing is usually about some non-computational thing can lead to an approach that integrates computational thinking instruction with existing core curricular classes. A social justice argument can be made for this approach, because all students take courses in the core curriculum. Utilizing university students in co-development activities with teachers, the current study located and implemented opportunities for integrated computational thinking in middle school in a large, suburban, mixed-socioeconomic standing (SES), mixed-race district. The co-development strategy resulted in plausible theories of change and a number of different educational projects suitable for classroom instruction. However, a major outcome of the study was to advance the importance of proto-computational thinking (PCT). We argue that, in the absence of preexisting use of representational tools for thinking, proto-computational thinking may lead to enhanced facility in computational thinking per se. At the same time, the absence of opportunities for proto-computational thinking may leave students less open to acquiring sophisticated approaches to computational thinking itself. An approach that values proto-computational thinking may be uncomfortable because it calls attention to implicit ceilings in instruction, especially in low-SES circumstances. We argue for addressing those ceilings through proto-computational thinking.;2017
The idea of computational thinking as skills and universal competence which every child should possess emerged last decade and has been gaining traction ever since. This raises a number of questions, including how to integrate computational thinking into the curriculum, whether teachers have computational thinking pedagogical capabilities to teach children, and the important professional development and training areas for teachers. The aim of this paper is to address the strategic issues by illustrating a series of computational thinking workshops for Foundation to Year 8 teachers held at an Australian university. Data indicated that teachers' computational thinking understanding, pedagogical capabilities, technological know-how and confidence can be improved in a relatively short period of time through targeted professional learning.;2017
The importance of Computational Thinking (CT) as a goal of science education is increasingly acknowledged. This study investigates the effect of computationally-enriched science curriculum on students' development of CT practices. Over the course of one school year, biology lessons featuring the exploration of NetLogo models were implemented in the classrooms of three 9th grade biology teachers at an urban public secondary school in the United States. One-hundred thirty-three biology students took both pre- and post-tests that were administered at the beginning and end of the school year. The students' responses to relevant assessment items were coded and scored using rubrics designed to evaluate their mastery of two learning objectives relating to modeling and simulation practices. The first learning objective was to explore the relationship between a system's parameters and its behavior. The second learning objective was to identify the simplifications made by a model. Each item's pre- and post-test scores were compared using a Wilcoxon signed-rank test. Results indicate a statistically significant improvement with respect to the second of the two learning objectives, suggesting that the computationally enriched biology curriculum enhanced students' ability to identify the simplifications made by a model.;2017
The inaugural launch of the College Board's Advanced Placement Computer Science Principles (AP CSP) course coincided within the same year of the announcement of CS For All, a bold national initiative that seeks to support the expansion of computer science education in America, and to empower students to learn computer science and obtain the computational thinking skills needed to thrive in today's transforming digital world. The intent of the AP CSP course supports this initiative as it aims to promote social justice and equity in computer science education. The course is designed to be appealing to a broader audience, including females and minority students, who are underrepresented in computer science, thus providing increased access and opportunity for students to study computer science at the secondary level.;2017
The introduction of computational thinking (CT) and computer science (CS) in the K-12 curricula highlights the need to understand young learners' various perceptions and attitudes towards CT and CS. To address this challenge we draw on the work of Bourdieu's capital and Archer et al.'s science capital to propose a new capital digital capital as a theoretical framework. We believe that a study on young people's development of digital capital is long overdue and can give a good indication of pupils' potential for developing CT skills, as well as CS aspirations in the future.;2017
The KIBO robotics kit offers a playful and tangible way for young children to learn computational thinking skills by building and programming a robot. KIBO is specifically designed for children ages 4-7 years old and was developed by the DevTech research group at Tufts University through nearly a decade of research funded by the National Science Foundation. KIBO allows young children to become engineers by constructing robots using motors, sensors, and craft materials. Children also become programmers by exploring sequences, loops, and variables. Through programming KIBO, children engage with computational thinking skills and ideas including algorithms, modularity, and control structures. Unlike other programming interfaces for children, the KIBO robot is programmed to move or to respond to sensor input by using tangible programming blocks no computer, tablet, or screen-time required. This paper provides an overview of the design features of KIBO and a synthesis of the research that has been done throughout the development of this kit. It provides examples of curriculum for playfully engaging young children with computational thinking using KIBO.;2017
The learning style in these day has been changed since the traditional style has been replaced by the modern style of learning processes using new technology such as social media, smart phone or edutainment. Nowadays, simulation game plays an important role in educational ground because its characteristic can enhances the learners' motivation. The paper aims to purpose the novel idea of how to identify appropriate factors which relate to the learner's motivation for supporting the computational thinking skills via simulation game. This is importance because games are considered as efficiency tools in which lecturers can employ to escalate the interest of lessons and to make the learning to be more effective.;2017
"The main objective of present work is to show the results of interventions carried out in front of a group of three educational strategies that allowed having better percentages of accreditation and qualification, as well as decrease of dropout compared to those obtained in the last 8 years in initial courses of programming at the Technological University of Puebla. The first intervention involved evaluation of computational thinking through skills of generalization, decomposition, abstraction, evaluation and algorithmic design, this evaluation was the first strategy that allowed offering students 10 learning scenarios for Programming Methodology course. In the second intervention, 4 elements were manipulated to offer study options in Programming course, which were content, work modes, rhythms and time and evaluation; it was the second strategy with intention of creating personalized education. In both interventions, use of Moodle platform allowed exposing learning content and having an extra tool for students; the third strategy was consequently the use of b-learning. The main result obtained through voluntary surveys carried out by students, was the generation of a learning experience that contributed to motivation of student in line with academic goals of the aforementioned courses, so it can be concluded that combination of the strategies carried out in the two interventions improved accreditation rates and decreased percentage of dropouts, although there is still work to be done to improve average rating.";2017
The new information and communication technologies (ICTs) are part of the daily life of the students, but not always of the teachers. In order for a paradigm change in the teacher's role, from producer to knowledge mediator, it is necessary to develop new skills to teach, emphasizing computational thinking. This article reports the experience of an introduction to the new ICTs course, which was offered as continuing education for teachers, using a methodology based on the andragonic model, placing them as collaborators and creators of their knowledge, co-responsible for the directions of their teaching learning process.;2017
The new K-12 computing curriculum draft for Taiwan secondary schools was designed to launch in 2018 but the draft only outlined themes and contents for students to learn, without further details on key concepts to be covered in the contents. Therefore, in 2016, a Delphi study was conducted to survey the opinions about what key learning concepts should be included for implementation at the secondary level based on the draft. By adopting the Delphi method, different viewpoints from computer scientists and secondary school computing teachers were collected to build consensus of key concepts through a series of convergence. Based on the research results, we found the computer scientists and computing teachers had opposing opinions about whether the secondary school students should learn the advanced concepts. The purpose of this study was to understand the different views on learning concepts of the draft between two groups. The data analyzed in this study were based on the Delphi survey in 2016. This study found computer scientists tended to be more conservative about this issue, therefore they suggested that the advanced and theoretical concepts are not essential at the secondary level, e.g., recursion, searching, sorting, data compression, data conversion, and divide and conquer. This was because the computer scientists considered these concepts as what they had studied in college. Rather, computing teachers knew how to simplify these concepts for teaching at the secondary level. The research findings can serve as useful references for revising and implementing the computing curriculum in the future.;2017
The paper analyses contest management systems used by the multicultural Bebras challenge community. Starting as a single annual contest in 2004 in a few countries, the Bebras challenge on Informatics and Computational Thinking has spread to over 60 countries and successfully developed a worldwide network. A requisite tool to perform the challenge is a Contest Management System (CMS). Countries have been developing various systems, depending on their practice, the number of participants, financial issues, etc. The overview and analyses of the Bebras CMS used by various countries are presented here. The main focus concerns the Lithuanian Bebras CMS, its development, architecture, functionalities, and thoughts for future improvements.;2017
The paper deals with the contest management system (CMS) of the International Bebras challenge on Informatics and Computational Thinking. The challenge is established in 2004 in Lithuania with the aim to engage children in learning Informatics (Computer Science or Computing). Started as a single annual contest on Informatics in a few countries, the Bebras challenge has upraised to over 50 countries and successfully developed a worldwide network of Informatics educators. The challenge is one of informatics activities provided for students during informatics lessons. The paper overviews various contest-based learning environments used to engage student's in learning informatics, discusses the main features of activities development and illustrates how Bebras CMS is used for purposes of challenge management in Lithuania. This is demonstrated through the description of a system architecture, functionality and tasks development.;2017
The paper outlines how computer science students in developing countries can acquire computational skills using visual game programming environments aimed at motivating them to learning programming. The study shows how visual game programming using Alice supports various concepts of computational thinking and also how these concepts enhance the learning of introductory computer programming. We based our analysis on 15 first-year computer science students of the American University of Nigeria who used Alice in their introduction to computer science course. The results of the study show that Alice motivates students to learn programming and also enhances the successful use of computational thinking skills such as problem solving, debugging, simulation, algorithm building, and collaboration. The study concludes with some implications for theory and practice.;2017
The paper presents the purpose of learning programming language is to master the method of learning the language, rather than just master the language itself. Therefore, the cultivation of Computational Thinking is an important goal of language learning. After analyzing the teaching of Programming Languages in university, this paper put forward the Problem-Based Learning is beneficial to achieve this aim. During teaching process, Collaborative Learning and Grouping Learning can improve teaching effectiveness. A new method, which is to carry out these ideas and organize Problem-Based Learning and Grouping Learning, is given after reconstructing the teaching contents. The result of reform reveals that students' test scores have been greatly improved, the quality and quantity of the completed design work are greatly improved, the number of programming competition awards also increased significantly. In order to make computing thinking deeply rooted, this method may be extended to other important computer basic courses.;2017
The pedagogical integration of computing is interesting in educational contexts based on the contributions of Seymour Papert and Wing's concept of computational thinking. Integrating arts in education can lead to the design of activities using Scratch combined with devices. The main goal is to evaluate the integration of computational thinking in art education making use of technological resources, sensor cards and minicomputers, with a student-centred pedagogical approach. This research assesses the results of a control group of 35 students and an experimental group of 109 students in four different schools, using Mann-Whitney's U-test for independent samples assessing 'Active Learning', 'computational concepts' and 'fun' scales. Applying data triangulation, and consistent with design-based research, the results of interviews and focus groups reinforced the results obtained in the aforementioned test, providing validity to the study. There are advantages regarding student interest, motivation and commitment related to programming technologies in art and education, particularly pedagogical sessions with music. Handling devices, sensors and Raspberry Pi provides participating students with a factor of commitment and enthusiasm, with significant improvements. Working with coding and devices brings an additional advantage in the development of computational thinking and digital competence. The results show an increase in creativity and artistic competence related to the ability to create music from the activities and technological resources described in the technological intervention.;2017
The PhD project presented here is concerned with teaching introductory programming to non-STEM students. Particularly students in the field of Information Studies and HCI. The research is carried out through three Teaching and Learning Explorations (TLE-I-III) which are set in an inductive action research approach. Computational thinking plays a significant role in computing education but it is still unclear how it should be interpreted to best serve its purpose. Constructionism and Computational Making seems to be promising frameworks to do this. In regards to specific teaching activities, the translation-grammar method of a structural approach to natural language teaching shows promising results when actualized in a concrete exercise named code-labelling.;2017
"The prerequisite knowledge regarding Computer Science (CS) varies strongly among freshmen at university and it seems advisable to compensate for these differences before the first lecture starts. Massive open online courses (MOOCs) might represent a possible solution. We therefore designed and developed a MOOC (called LOOP: Learning Object-Oriented Programming) which provides a gentle introduction to computational thinking and object-oriented concepts before the programming part. In addition to the common quizzes, we developed various we-based interactive exercises to enable the learners to experiment and interact directly with the presented concepts. Furthermore, we implemented programming exercises with constructive feedback for the learners using a web-based integrated development environment and additionally an automatic grading system. The target group of the course are prospective students of science or engineering that are due to attend CS lessons in their first terms. The course was conducted as a prototype with a limited number of participants. In a concluding survey, the participants submitted textual feedback on the course; some of them proposed specific improvements for the employed interactive exercises. Yet, the overall feedback was encouragingly positive. In this paper, we describe the design and the development of the course, as well as our initial results.";2017
The purpose of this study was to deduct guidelines from an introductory programming course to understand the critical points based on the opinions of the students. These critical points could be a guide for future course designs. An introductory visual programming course was designed for novice learners during 2014, fall term at Middle East Technical University, Turkey. Qualitative data were collected with interviews and observations. From the interviews, five themes emerged: communication, computational thinking, environment, motivation, and course recommendations. Results of the study revealed what motivates students, what parts of the course students found useful, and what parts should be replaced. An environment which is easy, visual, and communicative through an informal interface could be useful, especially in terms of motivation. Additionally, examples with useful products rather than meaningless algorithm examples could motivate students better. Interviews also revealed topics students found to be difficult. Results of this study could be a guide for future visual programming course designs.;2017
The recent spread of coding literacy initiatives, such as Hour of Code, Europe Code Week, or Africa Code Week, have underlined the growing importance and interest for computational thinking, often channeled through the use of innovative teaching tools, which foster creativity, collaboration, and interactivity. Learning coding notions is generally tied to the use of computers or other electronic devices, and most recent educational tools are based on online visual programming platforms, which may lead to discrimination because of the digital divide, the lack of sufficient infrastructure, or cultural and linguistic barriers. However, many code learning activities can be performed in an unplugged scenario, often with as little as a pencil and some paper. In fact, CodyRoby is an example of a do-it-yourself unplugged programming kit, published in the end of 2014. Through the use of color-coded cards, inspired by the building blocks of visual programming tools, and the use of intuitive symbols instead of words, the kit enables various fully inclusive coding experiences. In this work we present a smartphone-based augmented reality system that empowers this simple tool and transforms a CodyRoby session into an immersive experience. A printable additional kit of markers allows a smartphone app to detect game components, such as the chessboard on which to play, and to present additional gaming elements on screen or to draw customizable decorative elements to stimulate engagement and creativity, especially in younger players. Several different game modes are presented and discussed. The suitability of the system to intimate, small-scale, or even large-scale coding events is also discussed.;2017
The results obtained by the elementary school students in subjects like math and Portuguese mother language have been worrisome during the last few years. There are several reasons for this, but opinions point to the student's inability to solve problems, difficulties in logical reasoning and lack of critical attitude. The Portuguese Ministry of Education proposed in 2015/2016, in extracurricular period, the Getting Started with Programming challenging in primary School activities, with the intention of promoting computational thinking competences in students. Two schools from Coimbra city opted to use Scratch software for the implementation of this project aiming to promote school success in subjects already mentioned. The project, based on the academic curriculum of 4th grade, intends to link the theoretical knowledge with the practical knowledge, promoting the characteristic values of the city of Coimbra. This project implementation resulted in different applications (computer games) created by students, covering the contents of the mentioned subjects, but concretizing these knowledge with the socio-cultural and environmental realities of the city of Coimbra. The following study demonstrates the results obtained in 5 classes in 2015-2016 and six classes in 2016-2017, according to student satisfaction and project evaluation.;2017
The results of this study indicated that design-based learning (DBL) improves computational thinking (CT) in a sample of elementary school students. The experiment consisted of participants using the Scratch Program and Creative Computing Guidebook, both developed by the MIT (Massachusetts Institute of Technology) media laboratory, for a total of 15 hours. An experimental group and a control group were formed and consisted of fourth to sixth graders. DBL was applied to the experimental group, while a traditional, direct method of teaching was applied to the control group. The experiment was designed to examine several aspects of learning: self-efficacy, self-interest, and self-CT. Moreover, we compared changes in students' perceptions of computers and analysed differences in students' responses between the two groups according to each of the steps of DBL. Then, we verified the effects of DBL by examining the progress of each group and the differences between the two groups. At the end of the experiment, we found that both groups showed enhanced self-efficacy, self-interest, and self-CT. However, the experimental group had a greater number of significant positive changes than the control group did in all areas (p < .01). In conclusion, the findings presented herein demonstrated that applying DBL is more effective for improving CT than traditional methodologies are.;2017
The Sprego (Spreadsheet Lego) programming method facilitates the use of different educational tools and environments to provide better understanding of spreadsheet programming while developing computational thinking and algorithmic skills. With virtual reality technologies gaining attention and popularity, our goal was to investigate and create a virtual workspace in which the students can find all the information and resources they need while learning spreadsheet programming, computer problem solving, and understanding, building algorithms. Following on this principle, we developed a 3D virtual collaboration space to provide students with one interface featuring the information and resources required to practice the Sprego method outside of and during classes. We have collected, refined, and structured the available sources and developed detailed tasks with explanations for students in the form of online documents. Our goal was to provide an all-in-one environment for the Sprego method to learn, explore, and practice all its aspects without leaving the 3D space. For our work, we examined different applications that provide virtual 3D spaces with educational support in mind. Our choice was the Max Where Seminar system, based on its innovative and effective approach in the field.;2017
"The subject of computer science (CS) and computer science education (CSE) has relatively recently arisen as a subject for inclusion within the compulsory school curriculum. Up to this present time, a major focus of technologies in the school curriculum has in many countries been on applications of existing technologies into subject practice (both software such as office applications, and hardware such as robots and sensors). Through uses of these applications, information and communications technologies (ICT) have focused on activities to support subject and topic learning (across wide age and subject ranges). Very recently, discussions for including computers in the curriculum have shifted to a much greater focus on computing and CS, more concerned with uses of and development of programming, together with fundamental principles of problem-solving and creativity. This paper takes a policy analysis approach; it considers evidence of current implementation of CSE in school curricula, the six main arguments for wider-scale introduction of the subject, the implications for researchers, schools, teachers and learners, the state of current discussions in a range of countries, and evidence of outcomes of CSE in compulsory curricula. The paper concludes by raising key questions for the future from a policy analysis perspective.";2017
The task of learning programming is a complex process that requires students to simultaneously master the syntax and programming tool while applying problem-solving skills to the given situation. Failure to do so have led to students dropping out of computer science programs and students being disenchanted with programming to the point that these graduates are reluctant to practice in the field. To counter this issue, problem-solving training is sometimes introduced before programming to introduce them to primary concepts of program design and programming without the complexity of syntax and tools as a hindrance. However, problem-solving skills is not something that can be developed over a short period of time. For some, it takes time, practice and effort in which semester long courses do not permit. Previous studies have shown that games can be used as educational tools in the classroom. However, video games are frequently overlooked as an educational tool in favor of serious games. In this paper, we analyze the game play of selected game titles to determine if existing video games contain activities that can be associated to each of the five core skills that characterize computational thinking within the Computer Science discipline.;2017
The teaching of introductory computer science can benefit from the use of real-world context to ground the abstract programming concepts. We present the domain of pencil puzzles as a context for a variety of introductory CS topics. Pencil puzzles are puzzles typically found in newspapers and magazines, intended to be solved by the reader through the means of deduction, using only a pencil. A well-known example of a pencil puzzle is Sudoku, which has been widely used as a typical backtracking assignment. However, there are dozens of other well-tried and liked pencil puzzles available that naturally induce computational thinking and can be used as context for many CS topics such as arrays, loops, recursion, GUIs, inheritance and graph traversal. Our contributions in this paper are two-fold. First, we present a few pencil puzzles and map them to introductory CS concepts that the puzzles can target in an assignment, and point the reader to other puzzle repositories which provide the potential to lead to an almost limitless set of introductory CS assignments. Second, we have formally evaluated the effectiveness of such assignments used at our institution over the past three years. Students reported that they have learned the material, believe they can tackle similar problems, and have improved their coding skills. The assignments also led to a significantly higher proportion of unsolicited statements of enjoyment, as well as metacognition, when compared to a traditional assignment for the same topic. Lastly, for all but one assignment, the student's gender or prior programming experience was independent of their grade, their perceptions of and reflection on the assignment.;2017
The traditional information technology course focuses on the learning of programming tools and ignores the development of students' Computational Thinking. The emergence of visual programming tools provides a new opportunity for the training of Computational Thinking. On the basis of studying the limitations of thinking training in the traditional information technology class and the advantages of visual programming in computational thinking, this paper proposes a computational thinking training model based on visual programming. The model based on project adopt the combination of teaching plan and learning plan to design teaching and cultivate Computational Thinking. Applying this model to the actual teaching process by designing a teaching case based on the visual programming tool App Inventor, the experimental results show that the Computational Thinking of students in this model is improved in formalization and modeling. Through proposing this model and verifying its validity, we can provide the feasibility and research ideas for further studies by using visual programming to cultivate students' Computational Thinking.;2017
"The transformation of traditional education into a Sensitive, Manageable, Adaptable, Responsive and Timely ( SMART) education involves the comprehensive modernisation of all educational processes. For such a transformation, smart pedagogies are needed as a methodological issue while smart learning environments represent the technological issue, both having as an ultimate goal to cultivate smart learners. Smart learners need to develop 21st century skills so that they can become into smart citizens of our changing world. Technology and computers are an essential aspect for this modernisation, not only in terms of technological support for smart environments but also in terms of offering new methodologies for smart pedagogy and the development of smart skills. In this context, computational thinking appears as a promising mechanism to encourage core skills since it offers tools that fit learners' interests and gives them the possibility to better understand the foundations of our ICT-based society and environments. In this work, we raise to make an effort to encourage the development of computational thinking as an opportunity to transform traditional pedagogies to smarter methodologies. We provide a general background about computational thinking and analyse the current state-of-the-art of smart education, emphasizing that there is a lack of smart methodologies which can support the training of 21st century smart skills. Finally, we provide - to those educators interested in pursuing the philosophy of smart education-information about initiatives devoted to the dissemination or promotion of computational thinking; existing tools or materials which support educators for the development of computational thinking among the students; and previous experiences and results about the application of computational thinking in educational environments.";2017
"The use of computation and digital tools is actively shaping the way that designers approach design problems. The emergence of computational logic as a parallel design thinking approach is gradually redefining design reasoning patterns within architectural discourse. While computation offers a multitude of creative spheres for exploration and research, it also poses some unforeseen cognitive and technical challenges, which if not resolved can potentially drive the educational experience out of focus. Increasingly architecture students are required to learn and apply a vast host of digital and computational tools without a proper understanding of their internal algorithms or operating logic. Struggles arise when students depend on the tool's specific architecture and workflow to inform their design processes, without a conscious realization of such influences. These challenges are provoking critical pedagogical debates; raising many questions concerning the affect that this technological-driven shift has on architectural products and discourse. To contribute to this critical discussion, this paper explores the nature of computational logic, as the foundation for understanding the integration of computational thinking into architectural discourse. After looking analytically at the different digital computational models at a cognitive level, it is evident that computational-driven processes often follow a path of rational deductive reasoning, which is more suited for exploring a 'well-defined' design problem. However, when approaching an 'ill-defined' design problem, deductive reasoning can pose limitations on design thinking. Moreover, the type of knowledge-base and digital skills that are required to support advanced computational reasoning paths are often not provided by the architectural curriculums.";2017
There has some initial work on using game play and game development to engage young children in STEM learning [5, 22, 23]. However, there not been a lot of recent work on using game development to engage young children in improving computational thinking. In this paper, the author provides an overview of an exploratory study of a group of forth grade and a group of fifth grade students during summer 2017. Both groups of students used a free game development platform from Microsoft (Kodu Game Lab) to make computer games. The results found that the participants in both camps demonstrated significant changes in attitudes and perceptions of CS.;2017
There is a number of emerging educational needs planned to be integrated into school curriculum. Computational thinking education, an important trend in school education in the 21st century, is one of these educational needs advocated to be integrated into school curriculum. The integration of all these educational trends into school curriculum at a time may have two problems, although it seems to address the concerns of all relevant stakeholder groups. The first problem is a lack of sufficient curriculum time to incorporate all newly added curriculum elements. The second problem is a lack of coherence in implementing the initiatives as there are so many stakeholders involved in such integration and there are so many concerns about the curriculum. To respond to the accommodation of all changes incurred in the emergence of digitalization in every aspect of daily life, there is a need to make a holistic review of the existing school systems for well-planned changes related to the school buildings, school structure, school curriculum and pedagogy. This panel aims to discuss critical issues for the need of making a holistic review of the existing school systems to accommodate the need of such changes incurred in the digitization in every aspect of the daily life in the digital era and how to transform.;2017
"This article documents the design and evaluation of a teacher development programme in computational thinking (CT) education. The results suggested that after taking a teacher development course (TDC), teachers enhanced their CT content knowledge; however, some teachers still did not have sufficient confidence in teaching CT in their classrooms. Subsequent modification to address this lack of confidence among this cohort of teachers is discussed.";2017
This article examine a new method of learning to solve problems using the concepts of computer science named computational thinking, which is a new term emerged in the last decade and was the subject of experts, researchers, associations, scientific bodies and academic institutions. we will study the approach of computational thinking and then we will develop this approach through a descriptive methodology based mainly on the specification and algorithms and achieve the concepts of computational thinking called Relational Algorithmic Approach and highlight the effectiveness of this methodology in education.;2017
This article examines the articulation of computational journalism, focusing on how the meaning of the computational is discursively constructed and mobilized as a specific constellation of intelligibility within news organizations. Relying on the concept of articulation developed in cultural studies, the article asks what, exactly, is meant by the computational in the context of journalism? Drawing on interviews with key managerial staff, editors and developers at Scandinavian news organizations, three broad claims about the linkage between the computational and journalism emerged. These articulations include the notion that machines don't have instincts, that democracy can never be personalized and finally that the computational is something to think with, rather than simulate. The argument is made that what can and cannot be calculated is not merely a technical question, it is also a deeply social, cultural, political and economic one. Thus, the computational emerges as an important organising framework and discursive order for thinking and talking about journalism in the digital age.;2017
This article presents a teaching intervention where programming was used to facilitate preschoolers' learning of mathematics, especially in their development of spatial thinking. In the intervention, the programming was made with a small programmable robot especially designed for young students. The results indicate that the children developed their ability to mentally compare and connect movements in reality with maps and symbols. Further, the children showed ability to mentally envision, hold in mind, and conceptualize actions and relationships between paper maps, gridded maps, and symbols. Thus, the intervention indicates potential in teaching mathematics through programming in preschool.;2017
This current study as part of multi-year design-based research reports our attempt to design and implement a course in teacher education in Korea. We have incorporated design thinking (DT) into the course design and investigated how primary teachers appreciate the role of DT and recognize the connection between teaching computational thinking and DT. This paper reports the course design, its progression, reflections, and learning outcomes.;2017
This document briefly explains the context, motivations, background and research design of a PhD project titled Developing Teachers as Computational Participants. This PhD project will explore how Australian Primary School teachers learn and teach the core CS skills (computational thinking, computer programming and systems thinking), their experiences implementing lessons that impart these skills and the challenges they encounter when implementing these lessons.;2017
This document is a scientific contribution to the teaching of information and communications technologies, from which the potential and educational privileges offered by computer science for the development of skills related to creative solving problems are evident. It is developed through a quasi-experimental study from a methodological proposal based on computer programming through visual programming language Scratch mediational main teaching tool.;2017
This paper argues that the various problems caused by the traditional mathematical approach to teaching discrete mathematics to computing students can be alleviated by way of integrating computational thinking into discrete mathematics. The paper proposes a combination of three ideas to facilitate such integration: (a) aiming at understanding the notion of computation, (b) emphasizing both abstraction and automation, and (c) incorporating a functional programming language. The paper exemplifies a plausible approach to developing computational thinking in higher education, namely, through integrating it with an existing subject.;2017
This paper describes the findings from the Education Development Center's (EDC) project on Computational Thinking (CT) called Broadening Participation of Elementary School Teachers and Students in Computer Science through STEM Integration and Statewide Collaboration. It presents the process used to define the primary job functions and work tasks of a CT Integration Specialist in today's education settings. Authors describe how the requisite knowledge, skills and practices of the CT integration specialist were assembled and vetted. The article presents ways this profile can be used to guide elementary school teachers in integrating CT into their classrooms and as a framework to guide the development of CT learning activities and assessments, then sets the directions for future work.;2017
This paper discusses how a few changes in some computational thinking tasks proposed during the Bebras challenge affected the solvers' performance. After the 2016 challenge held in November in our country (Italy), we interviewed some participants on the difficulties they had faced and we modified some of the tasks accordingly. We then proposed the whole set of tasks, with some of them modified, to pupils who had not participated to the challenge in November and compared performances in the two sessions. Using Item Response Theory, we measured the change in the distribution of difficulty and discrimination of the modified tasks. On the basis of the obtained results, we tried to better understand the many factors which influenced the difference in performances, both in the conceptual and cognitive task content and in its presentation (text, images, layout).;2017
This paper discusses the opportunities presented by the growth of the Internet of Things (IoT) to provide youth opportunities to develop their computational thinking and digital empowerment. This paper argues that to support youth in developing these literacies, we need to develop platforms that reduce the barriers of entry while still allowing them to explore and develop their computational identities. To this end, this paper introduces an extension to App Inventor by MIT that enables students to quickly design, develop, and implement IoT applications. We outline one IoT activity for youth and future directions for both curricular and technical development.;2017
This paper examines the growing field of computational thinking (CT) in education. A review of the relevant literature shows a diversity in definitions, interventions, assessments, and models. After synthesizing various approaches used to develop the construct in K-16 settings, we have created the following working definition of CT: The conceptual foundation required to solve problems effectively and efficiently (i.e., algorithmically, with or without the assistance of computers) with solutions that are reusable in different contexts. This definition highlights that CT is primarily a way of thinking and acting, which can be exhibited through the use particular skills, which then can become the basis for performance-based assessments of CT skills. Based on the literature, we categorized CT into six main facets: decomposition, abstraction, algorithm design, debugging, iteration, and generalization. This paper shows examples of CT definitions, interventions, assessments, and models across a variety of disciplines, with a call for more extensive research in this area. (C) 2017 Elsevier Ltd. All rights reserved.;2017
"This paper highlights creative computing in elementary education from a playful and active perspective through visual programming languages using Scratch with a pedagogical approach. Participatory activities focused on game-based learning were implemented. The study sample consisted of an experimental group of 109 6th-grade students. Averages are compared statistically with a control group and non-parametric analysis, providing data triangulation with group interviews. The research process focuses on the implementation of a design-based research strategy using complementary methods, data analysis and tools from quantitative and qualitative approaches. The Mann-Whitney U Test showed significant improvements with regard to sequences to create music. Advantages were found in the use of computational concepts, especially when working with loops; elements which allow for parallel execution and the ability to create and play music through educational technology.";2017
This paper introduces a proposed didactical model for organizing educational robotics activities, addressed to primary and secondary school, and called CPG+ after Collaboration, Problem, Game - competition, while + stands for supplementary teachers' supportive interventions such as promoting students' problem solving and computational thinking skills. Then, a study conducted in an elementary school is presented, which was based on the CPG+ model and investigates the development of computational thinking and problem solving skills, focusing on the role of guidance (strong vs. minimal). For developing computational thinking skills we focused on the following basic concepts: abstraction, generalization, algorithm, decomposition, modularity, and debugging. The results show that: (a) educational robotics activities fringed by the didactical model CPG+ can be a vehicle for the development of high order skills, (b) although providing written answers is tiring and boring for students, it is an important learning tool.;2017
This paper introduces the concept of a virtual reality (VR) programming environment that allows youth to both develop immersive VR experiences while enhancing computational thinking (CT). Specifically, we extended a blocks -based programming platform, MIT App Inventor, to allow youth to make VR Android apps (Al/VR). We compare AI/VR's support for CT to other existing VR editors using the CT concepts established by Brennan and Resnick (2012). Comparisons showed that AI/VR' s support for all CT concepts and its ease of use for kids, makes it more preferable for teaching CT compared to other editors.;2017
This paper is about studying and exploring how to Integrate Computing Thinking into Program Design Courses. First, this paper will provide theoretical analysis of computing thinking. Second, it will analyze existing problems of program design course with traditional teaching method. Third, it will propose ideas of integrating computing thinking into Program Design Courses. Last, the results of new ideas will be analyzed and reviewed through teaching practices.;2017
This paper is about various aspects of the Computational Thinking and Problem Solving course offered to entry-level undergraduate engineering students across 7 engineering disciplines at Amrita University, India. The various aspects include the motivations for offering the course, aims and objectives of the course, course design as well as the delivery and assessment of the course. The paper also shares the experience of conducting the course to a very large number of students and the lessons learnt during the process.;2017
This paper outlines a new kind of degree that has technology at its core, but is transdisciplinary in nature. Rather than students learning knowledge in discrete disciplinary blocks, they are exposed to ideas and practices from a wide variety of disciplines, and use these to create new ways of working that are underpinned by capabilities in computational thinking, complex systems, data and reasoning.;2017
This paper presents a teaching methodology mixing elements from the domains of music and informatics as a key enabling to expose primary school pupils to basic aspects of computational thinking This methodology is organized in two phases exploiting LEGO bricks respectively as a physical tool and as a metaphor in order to let participants discover a simple notation encoding several basic concepts of the classical musical notation. The related activities, grounded on active learning theory, challenge groups of students to solve musical encoding problems of increasing difficulty. (C) 2017 The Authors. Published by Elsevier B.V.;2017
This paper presents an integrative standards-based STEM curriculum that uses robots to develop students' computational thinking. The need for the project is rooted in both the overall lack of existing materials as well as the need for materials that directly address specific STEM standards in an integrative fashion. The paper details the first mesocycle of an educational design research project (EDR) in which a robust theoretical framework was created to support the development of a 2-week series of robotics lessons. Analysis of evaluation data from 5 fifth-grade teachers and their students revealed that the integrative curriculum supported student problem solving and teacher practices that supported cognitive demand. Implications for research, design, and instruction are discussed.;2017
This paper presents RITA en RED, an improvement of RITA (Robot Inventor to Teach Algorithms) that came as a results of field tests in high schools of Great La Plata. The goals of the design of RITA en RED are: to promote the introduction of block programming competitions in the classroom, providing a collaborative space for the creation and analysis of programmed robot strategies, while favoring the teaching practice through the development of proposals for teaching programming in the classroom. This paper describes experiences with RITA and the results that led to the design of RITA en RED, preliminary results of a first implementation of RITA en RED and a new design that attempts to improve the experience of the students participating in the competitions.;2017
This paper presents the design research process of CataKit, a construction kit for children inspired by catapults, Rube-Goldberg chain reaction machines, and mechanical automata. We set out to promote children's initiative, positive risk-taking, and procedural thinking, all in the context of their bedrooms. Our motivation is to contrast the rising smart home movement in industry, which we fear may decrease children's initiative if children's bedrooms become too automated. We describe our design research process with six children followed by a low fidelity prototype design and evaluation. We present the qualitative analysis of children's reactions to the prototype and show support for our initial goals: encourage systematic exploration of mechanical concepts and initiative over automation. We hope that construction kits like Catakit will empower children to develop curiosity about the mechanical world around them, to think about risk taking as a potentially positive experience, and to think more critically about initiative in the smart home era.;2017
This paper presents the results of a preliminary investigation into how the teaching of computational thinking -- particularly algorithmic thinking and programming -- to university undergraduate students varies depending on aptitude and perceived enjoyment of STEM subjects during their secondary-level (pre-university) education. We investigated a specific component of computational thinking, algorithmic thinking, comparing against a student's ability to develop knowledge and understanding of introductory programming.;2017
This paper proposes and analyzes the use of the Arduino Zero board as the lab platform for the Computer Structure course that constitutes an essential part of Computer Science studies. The understanding of the main functional blocks of a computer, addressing the main concepts included in the course syllabus, is reinforced by mean of the hands-on experience acquired in the lab sessions and the completion of a project based on a mobile robot. Special care has been devoted to link the theoretical concepts with their practical application. The inclusion of a debugging chip (EDBG) in the Arduino Zero board is one of the main assets to enable exploring the architecture and analyze the execution of programs down to the assembler instructions level.;2017
This paper provides the motivation for the design of a web-based planning tool called AgentDesign, a description of its components, and a discussion of elementary students' ability to use it for creating games. The planning tool presented in this paper was used to engage elementary students in an activity to design and then create a video game using an agent-based programming environment. The design of the planning tool was informed by prior research and literature on concept development. The tool scaffolded the design process by having students (1) describe their game, (2) identify agents, (3) describe agent behavior, and (4) use those descriptions to identify useful algorithms. The set of algorithms used were called computational thinking patterns (CTPs), and sample code was provided for each CTP to assist the programming process. From the information provided by the student a summary was created to show needed agents and helpful programming code.;2017
This paper reports on the results of a study of teacher preparedness and practices in relation to teaching computing and computational thinking at schools in Sweden, Finland and Lithuania. The study was conducted as part of a NordForsk funded project to explore how Computing Education Research in the Universities can help the development of teacher training and K-12 curriculum and teaching practices. The study found that many teachers are already engaged in teaching relevant material in the schools, and that many have good support in their local school environment. However, there are also significant challenges which emerge from the new curricula that have been introduced in Sweden and Finland. To meet these challenges new teacher training programmes will be needed, and we recommend that computational thinking and computing concepts be introduced into the core subject content of teacher education programmes in order to better prepare teachers to meet the educational demands of our increasingly digitalised society.;2017
This research categorizes the different breathable wall systems designed by students and describes their potential. Also included is a discussion of the results of both the physical analyses and digital simulations of these students' designs. To optimize the environmental performance of each proposed system, this work also engages in a more specific discussion of the advantages and limitations of these designs. Finally, this research concludes with a summary of the evidence of the benefits and risks of employing simulation tools in architecture studios.;2017
This research explores the psychology of programming and the pedagogical environment in a certificate granting urban immigrant engineer retraining program in New York City. The program is aimed at teaching under-represented immigrant engineer students to learn how to program in the Java programming language. The programming concepts and the fostered pedagogical environment were implemented in three-hour evening sessions over 15 weeks in which the students were encouraged to develop programming communities while working on computational thinking concept strands. The research findings that we report are threefold. First, we report on how we fostered building programming concepts into the curriculum into a set of activities specifically designed for an immigrant engineer retraining program with students ranging in backgrounds. We found that at that the program curriculum must be flexible enough for student learning regardless of the fact that a student may miss sessions. Second, we report on how an effective pedagogical environment, which fosters student-centered learning, was promoted so that the students could construct their own meanings of the programming concepts. Third, we report on implementation strategies unique to a retraining program, such as specific environmental constraints as well as how sessions were partitioned into components that fostered computational thinking while learning Java. Our findings provide unique insights into intervention constraints for an urban retraining program which can be used to guide and inform further retraining computer learning program research.;2017
This research intends to study how to integrate programming and robotics in kindergartens and primary schools, through a transversal intervention in all the areas of knowledge. This will allow the development of a theoretical framework based on research, able to support the formulation of a proposal of intervention extended to the Portuguese national context. For this project, we will be designing a physical and a mobile laboratory, equipped with tablets and robots, which will facilitate, on the one hand, the initial, postgraduate and continuous training of teachers and, on the other hand, the accomplishment of several case studies throughout Portugal. In addition, the training of teachers and also the participation of the children in the expected activities of this project will enable the designing a theoretical framework about the development of a competences profile for education professionals in this area.;2017
This study aimed to uncover the underlying mental processes that might facilitate creative thinking after listening to a 10-min music excerpt. A qualitative component was incorporated in a quantitative study regarding the effect of music listening on creative thinking Among 192 participants, a total of 24 college students were interviewed immediately after they listened to the 10-min music excerpts and completed some creativity tasks. The results suggested a possible facilitative role of music listening on creative thinking through optimizing individuals' arousal level, and strengthening individuals' associative abilities, holistic perception and abstraction. As these mental processes are also important attributes of computational thinking (CT), the findings may shed light on the favourable impact of music listening on CT.;2017
This study details the analysis regarding practice and integration of visual programming with blocks in Primary Education in Social Sciences through the Scratch application. The research analyzes benefits and practices measured in intervention from a Design Based Research, data triangulation, Bloom's classical taxonomy, the TPACK model and Flipped Classroom model. In this case, 46 primary school students in 6th grade participate in the academic year 2013-14 creating animations and interactive environments that enable the development of content in Art History through the paintings of El Greco, Velazquez, Picasso and Dali. Learning processes and creation of multimedia products by visual programming are accurately measured from the mentioned models. In the process of analyzing active learning, content in Art history and computational concepts, results highlight the ability of students to understand, apply, and synthesize contents. We conclude that these practices support improvement, motivation, satisfaction, fun, useful and commitment from students, enabling understanding of contents and logic and computational concepts Through multimedia activities with visual programming blocks.;2017
This study examined 12 preservice teachers' understanding of computational thinking while planning and implementing a computational thinking activity for fifth grade students. The preservice teachers were enrolled in an add-on computer education license that would certify them to teach computer courses in addition to their primary major area (11 elementary education majors, 1 secondary social studies education major). The preservice teachers were asked to develop a 2 h instructional project for fifth grade students to build on the computational thinking concepts learned during the Hour of Code activity. Data was collected from preservice teachers' initial proposals, two blog posts, video recordings of in-class discussions, instructional materials, final papers, and a long-term blog post 3 months after the intervention. Results showcased that the process of developing and implementing computational thinking instruction influenced preservice teachers' understanding of computational thinking. The preservice teachers were able to provide basic definitions of computational thinking as a problem-solving strategy and emphasized that learning computational thinking does not require a computer. On the other hand, some preservice teachers had misconceptions about computational thinking, such as defining computational thinking as equal to algorithm design and suggesting trial and error as an approach to computational problem solving. We provide recommendations for teacher educators to use more directed activities to counteract potential misconceptions about computational thinking.;2017
This study investigated introductory computer science (CS1) students' implicit beliefs of intelligence. Referencing Dweck and Leggett's (1988) framework for implicit beliefs of intelligence, we examined how (1) students' implicit beliefs changed over the course of a semester, (2) these changes differed as a function of course enrollment and students' motivated self-regulated engagement profile, and (3) implicit beliefs predicted student learning based on standardized course grades and performance on a computational thinking knowledge test. For all students, there were significant increases in entity beliefs and significant decreases in incremental beliefs across the semester. However, examination of effect sizes suggests that significant findings for change across time were driven by changes in specific sub-populations of students. Moreover, results showed that students endorsed incremental belief more strongly than entity belief at both the beginning and end of the semester. Furthermore, the magnitude of changes differed based on students' motivated self-regulated engagement profiles. Additionally, students' achievement outcomes were weakly predicted by their implicit beliefs of intelligence. Finally, results showed that the relationship between changes in implicit intelligence beliefs and student achievement varied across different CS1 courses. Theoretical implications for implicit intelligence beliefs and recommendations for STEM educators are discussed. (C) 2016 Elsevier Inc. All rights reserved.;2017
This study presents a 10-year (2006-2016) systematic literature review related to the digital tools which have been used into K-6 education in order to develop Computational Thinking (CT) skills which are of great interest in the research community over the last years. In fact, many attempts have been conducted by various researchers for the development of CT skills in all educational levels using diverse ways. One of these ways is through the use of various digital tools which have been used in students of all ages and across different subjects. Thus, the aim of this paper is to review the CT-literature of the last decade related to primary education with the intention to: (a) identify the digital tools which have been used for the development of CT skills, (b) describe their characteristics and their potentials as educational tools in terms of CT-skill development, (c) demonstrate the ways these tools have been integrated in diverse educational contexts. The analysis of the data shows thatfor students' CT skills' cultivation: (a) twenty-six different digital tools have been used by primary school students, (b) most of these tools are graphical environments which use visual programming languages which were utilized to involve students in learning programming, construct games, develop simulations/models, and program robots, and (c) the most common educational use of these digital tools was for learning programming and in a less extend for game programming and game activities, for collaboration and pair programming, as well as for simulation, modeling and robotic education. It is hoped that, the systematic review that is presented in this study would help other researchers and primary education level educators to devise new digital tools which could be used to develop students' CT skills.;2017
This study presents a sequential analysis of the relationship of emergent roles to student collaboration and computational thinking in the multi-dimensional problem space of educational robotics. The interactions of six groups (n=17) of middle-school aged girls participating in a one-day introduction to robotics workshop were video and audio recorded. Here we analyze one group of three girls' interactions and the emergence of distinct roles that correlate with periods of collaboration and periods of parallel solo work, which, in turn, impact student's engagement in computational thinking including solution planning, algorithmic operations, and design of the robotic device. Suggestions for future research are provided.;2017
"This study presents an interdisciplinary learning model that puts students in a historical context, in which they have to apply their knowledge of history, geography, math, physics, mechanics and natural sciences to achieve the goal of the game. In the learning scenario, students' critical thinking, creative thinking, computational thinking, and problem-solving abilities, as well as cooperative and competitive gaming strategies are used and enhanced. From the research results, it is evident that the Maker Game for Great Voyage has succeeded in the instructional design of technology-integrated game-based learning with STEAM and maker, and with the rich historical context of the Age of Discovery. Also, from pre-test and post-test evaluations and questionnaires, this research looks into students' learning effectiveness; and through qualitative research methods, students' group cooperative styles and competitive gaming strategies are analyzed in terms of students' personality traits.";2017
This study presents the design of an educational technology course for pre-service teachers specific to incorporating computational thinking in K-8 classroom settings. Subsequently, it examines how participation in the course influences pre-service teachers' dispositions and knowledge of computational thinking concepts and the ways in which such knowledge can be combined with content and pedagogy to promote meaningful student outcomes. Data were collected from a self-reported survey and case reports focusing on the design, implementation, and outcomes of computational thinking related lessons in K-8 classrooms. Results indicated that the course positively influenced pre-service teachers' knowledge of computational thinking concepts, tools, and practices. Yet, some participants demonstrated only surface understanding of computational thinking and were unable to design lessons that meaningfully integrated computational thinking concepts and tools with disciplinary content and pedagogy. Findings have implications for the design of teacher education experiences that help prepare pre-service teachers develop technological pedagogical content knowledge in relation to computational thinking concepts and practices.;2017
This study put four steps, problem decomposition, pattern recognition, abstraction, and algorithm, into practice by integrating the blocky programming language, Scratch, into a mathematics course. The teacher guided the sixth-graders to apply the four steps of computational thinking to writing a blocky program to solve daily-life equality axiom mathematics problems. The results showed that the method was beneficial for promoting the learning effectiveness of mathematics, and also found that there was a significantly positive correlation between the performance of blocky programming and the mathematics post-test. There was no significant correlation between creative tendency and self-efficacy after the experiment. Self-efficacy had a positive correlation to learning motivation both before and after the experiment.;2017
This study was conducted to assess African-American student's problem-solving strategies and solutions between similar mathematics and computer science tasks. Six African-American participants comprised of five high school students and one high school graduate who had taken or jointly enrolled in precalculus and AP computer science courses participated in the study. Data collected were precalculus and computer science problem solutions, think-aloud and retrospective interviews, problem-solving strategies used to solve problems, and analytic scoring rubric scale scores. Student problem-solving strategies when engaged in solving precalculus and computer science problems were coded by the researcher and co-rater to determine inter-rater agreement. Student precalculus and computer science solutions were graded using an analytic scoring rubric scale to determine levels of problem-solving ability. Results found that students did not exhibit the same problem-solving strategies in both contexts. Implications of this finding between mathematical and computer science problem-solving are presented.;2017
This WIP exposes the design and implementation of Midroid, an open mobile platform focused on microcontrollers' education. The platform has been designed with the aim to address both the problems detected as the educational gaps associated to the acquisition of the algorithmic thinking needed in the conceptualization and structuring of a program or algorithm determined. To technical level, the platform consists in two elements: a mobile application for Android operating system and a development board which the students can debugging their algorithms. Thereby, the educational concept of the platform takes into account the challenges related to the mobility of technology, learning and the learner. As educational framework, it has selected the concept of Computational Thinking (CT) in the stages of design of the platform. The CT is a kind of process that allows solve a problem through procedures such as abstraction, modeling, arguing and algorithmic processing. Furthermore, the CT allows the use of computers or tools such as mobile devices or both computational and mathematical programs as way to resolve the formulated problems in a knowledge area. These aspects were needed in the design and implementation of the platform in the areas of hardware and software respectively. It is expected with this research, the design and implementation of a mobile platform related to microcontrollers' area which addresses the problems mentioned and also enhances the learning process in the students. The educational and technical validation of the platform will be developed through qualitative study between different groups of students in the subjects of the curriculum concerning the microcontrollers' area, thus, validating the impact of the platform.;2017
This work describes a preparation strategy for first year Computer Science students at the Universidad Nacional de Nordeste. This work consisted of the development of a set of activities aimed at stimulating computational thinking through the use of playful tools with the goal of motivating students and also providing them with problem-solving skills that will facilitate the understanding of the basic concepts of programming.;2017
To foster new generations becoming creators of technology, CoolThink@JC (Computational Thinking Education, n.d.), a four-year project sponsored by Jockey Club Charities Trust in Hong Kong, aims to advocating that computational thinking is a fundamental skill for everyone (Wing, 2006, p.33). The project targets to upper primary school students, and in that parent education is one of the components. Particularly, parent education focuses on parent-child relationship in learning computational thinking Thus, we propose several approaches involving coding hands-on workshop, instructional video learning and unplugged activities to enhance the parent-child mode of learning in a large-scale project involving 32 primary schools in Hong Kong.;2017
To improve undergraduates' practical ability, strengthen their computational thinking training, and meet the social requirements for computer talents, Agricultural University of Hebei (AUH) in China has reformed practical teaching for computer major since 2013. Practical ability training program is made to guide the practical teaching reform. The reform includes four aspects, i.e. project-driven teaching methods, teaching staff construction, teaching support platform, and creative ability training methods. After implementing the reform for several years, AUH have achieved satisfying results. In this paper, the concrete contents and measures of the reform is introduced to provide reference to other colleges and universities.;2017
To successfully bring introductory computing to non-CS majors, one needs to create a curriculum that will appeal to students from diverse disciplines. Several educational theories emphasize the need for introductory contexts that align with students' long-term goals and are perceived as useful. Data Science, using algorithms to manipulate real-world data and interpreting the results, has emerged as a field with cross-disciplinary value, and has strong potential as an appealing context for introductory computing courses. However, it is not easy to find, clean, and integrate datasets that will satisfy a broad variety of learners. The CORGIS project (https:/ /think.cs.vt.edu/corgis) enables instructors to easily incorporate data science into their classroom. Specifically, it provides over 40 datasets in areas including history, politics, medicine, and education. Additionally, the CORGIS infrastructure supports the integration of new datasets with simple libraries for Java, Python, and Racket, thus empowering introductory students to write programs that manipulate real data. Finally, the CORGIS web-based tools allow learners to visualize and explore datasets without programming, enabling data science lessons on day one. We have incorporated CORGIS assignments into an introductory course for non-majors to study their impact on learners' motivation, with positive initial results. These results indicate that external adopters are likely to find the CORGIS tools and materials useful in their own pedagogical pursuits.;2017
To understand computational thinking in App Inventor, it is important to be able to effectively evaluate computational complexity in block-based programming languages. In the past, there have been a handful of complexity measures proposed for textbased languages (Weyuker, 1988). In this paper, we will attempt to implement 2 such measures, Halstead's Programming Effort and statement count, in App Inventor on a dataset of projects from 50 random users. The goal is to determine whether or not text programming standards for complexity can be generalized to block programming languages. This paper shows that the 2 complexity measures we implemented are not adequate measures for complexity in App Inventor. This result indicates a need for different measures of complexity that more accurately portray block programming proficiency. We hope this study will be a gateway into a better understanding of the intricacies of App Inventor's block programming language and its unique contributions to the development of computational thinking;2017
Understanding how teachers promote students' computational thinking in computer science classes addresses a critical need. We report on how high school teachers implemented a 30-40 hour electronic textile unit in which students designed different wearables with the LilyPad Arduino as part of the Exploring Computer Science curriculum in two classrooms. Our analysis focused on how teachers brought out computational thinking through students' interactions and projects in three key areas: strategic problem solving, iteration, and interfacing between abstract and tangible computation. In the discussion, we address what we learned about teachers' pedagogical content knowledge to make computational thinking tangible to students.;2017
Unlike enrollment in undergraduate computer science degree programs, there are no gender or ethnic imbalances in K-12 enrollment. This chapter discusses an approach to broadening minority participation in computing through the integration of computer science (CS) into history courses. It presents an alignment between computational thinking and historical thinking that makes history courses an attractive fit for CS integration. It also presents a project-based approach using MIT App Inventor that leverages students' interests in mobile technology to facilitate the creation of historical mobile applications. This chapter outlines key findings from a two-year study on integrating cross-disciplinary curricula into history courses and the impact on minority students as they become knowledge, artifact, and technology producers rather than mere consumers.;2017
Utilizing concepts derived from computational thinking a method of thinking coined by Jeanette Wing a problem-solving paradigm is presented to demonstrate the applicability of thinking computationally beyond the realm of computer science. The 17 Sustainable Development Goals (SDGs) are used as a set of real world problems to elaborate the function of the proposed four-stage paradigm. The paradigm seeks to provide a method of approaching problems with the aim of finding local and contextualized solutions that reach all members of different societies. This paper also serves as the foundation of further research in the development of computational thinking as a fundamental tool for finding solutions in a broad scope of disciplines and real-world situations.;2017
Various didactic strategies to develop Computational Thinking (CT) skills have been successful in terms of student engagement and educational outcomes. However, monitoring the learning progress of students is still a hurdle to teachers and researchers. In this context, we explore the use of self -organizing maps for analyzing games produced in a game building workshop offered simultaneously to technical education students in Brazil and to undergraduate students in Computer Engineering in Chile. Metrics from seven CT features present in the games were extracted with the Dr. Scratch tool and used as an input in the training process. The results allowed a clustering analysis considering the identified features and the correlation between learning behaviors. The organization of the map reflected a progressive skill acquisition identified by features present in the developed games. Also, it could be identified that students of both educational levels reached similar levels of CT skill development.;2017
We are proposing to reframe computational thinking as computational participation by moving from a predominantly individualistic view of programming to one that includes a greater focus on the underlying social and creative dimensions in learning to code. This reframing as computational participation consists of three dimensions: functional, political, and personal. Functional pertains to the basic programming skills and concepts that someone needs to learn in order to participate in society. Political purposes capture why understanding programming skills and concepts is relevant in society. Last, personal purposes describe the role that these skills and concepts play in personal expression for building and maintaining relationships. We discuss three focal dimensions-creating applications, facilitating communities, and composing by remixing the work of others-in support of this move to computational participation by drawing from examples of past and current research, both inside and outside of school with children programming applications such as games, stories, or animations to design artifacts of genuine significance for others. Programming in a community suggests that such significance ultimately lies in the fact that we design to share with others. Programming as remixing code makes clear that we build on the work of others and need to better understand the ramifications of this approach. We situate these developments in the context of current discussions regarding broadening access, content, and activities and deepening participation in computing, which have become a driving force in revitalizing the introduction of computing in K-12 schools.;2017
We have administered the extended attitude test of the Testing Algorithmic and Application Skills project (TAaAS) to reveal the computer problem solving approaches of first year students of informatics, their expectations considering tertiary studies, and their relationship with computer sciences/informatics. The results clearly indicate that the students selected this major on their own, based on their previous experiences in informatics, but that these experiences caused misconceptions rather than creating a true picture of the nature of computer sciences. Based on the analysis of the students' answers, we concluded that they are in great need of institutional support, especially at the beginning of their tertiary studies, to introduce them to computer sciences/informatics. Beyond this, we have revealed another misconception that Software Engineering students tend to focus on the coding aspect of informatics, and especially those who have taken the advanced level school leaving exam are over-confident as regards their programming skills.;2017
"We live in a century where technology has become part of our lives, and it is crucial that we become active creators of technology, not just passive users. Learning to program computers enables a person to create twenty-first-century solutions. Computer programming is more than just learning how to code; it also exposes students to the opportunity to develop computational thinking (CT), which involves problem-solving using computer science concepts. In this chapter, we explore strengths and weaknesses of students' CT skills and compare a group of seventh- and eighth-grade students who engaged in a Scratch programming environment. Scratch is a popular visual programming language that introduces computer programming to youth. We use Dr. Scratch, a CT assessment tool, to analyze students' Scratch projects for evidence of CT. The results of this study can show researchers and educators how they might use Dr. Scratch to analyze students' Scratch data to help improve their CT.";2017
We present a block-based language for specifying feedback to novice learners about the programs they are constructing in a block-based programming language. In addition to feedback based on run-time and output checking, we are particularly interested in immediate feedback: corrective guidance given as the program is being constructed. Immediate feedback is a natural extension of the block-based language philosophy. Block-based languages prevent by design certain types of mistakes in all cases. Immediate feedback guides against, without fully preventing, problem-specific mistakes (i.e., constructions that are erroneous in only some cases). A feedback specification contains a block pattern and a set of actions that can be taken whenever the corresponding pattern is present or absent in the student's block program for a given problem. The paper illustrates the language through several examples derived from misconceptions found in the block-based programs of students taking a university-level Computational Thinking class. The feasibility of the proposed approach is shown by the translation of a specification using an evolving programmatic interface in BlockPy, a dual block/text programming environment for a subset of Python.;2017
We present a first prototype of an open-ended interactive physical game aiming at developing children's understanding of dynamic systems in a playful and embodied way. We use a swarm user interface, Zooids, developed by Le Goc et al., made of independent self-propelled elements that move collectively and react to user input. Papert promoted an active way of developing a computational literacy, through programming a turtle with LOGO, from which Resnick proposed StarLogo, a multi-turtles language to simulate complex systems behaviors. Our interface is positioned in between these two perspectives: it allows to physically interact with multiple turtles, each having its own dynamic. Each Zooid can be assigned an action that will affect the system behavior. Based on this principle, our first prototype invites children to resolve situations by changing individual actions in a dynamic system.;2017
"We present a new technology-based paradigm to support embodied mathematics educational games, using wearable devices in the form of SmartPhones and SmartWatches for math learning, for full classes of students in formal in-school education settings. The Wearable Learning Games Engine is web based infrastructure that enables students to carry one mobile device per child, as they embark on math team-based activities that require physical engagement with the environment. These Wearable Tutors serve as guides and assistants while students manipulate, measure, estimate, discern, discard and find mathematical objects that satisfy specified constraints. Multi-player math games that use this infrastructure have yielded both cognitive and affective benefits. Beyond math game play, the Wearable Games Engine Authoring Tool enables students to create games themselves for other students to play; in this process, students engage in computational thinking and learn about finite-state machines. We present the infrastructure, games, and results for a series of experiments on both game play and game creation.";2017
We present an educational design for an undergraduate university course meant to engage Geography majors with computing and computational thinking. For that matter, we use the pedagogical principle of contextualization, relating computing topics to the discipline of Geography using climate change modeling with geographic information systems as a context. Following a design-based research approach, we first present considerations and arguments that form the basis for our educational design, and then discuss initial results of implementing and teaching a corresponding course to Geography Education majors.;2017
We present the initial design process of Scratch Nodes, a sensor-based prototype designed to augment children's social-physical outdoor play. Scratch Nodes has two main components: a hardware device and a tablet-based coding environment. The prototype was designed for 8-12 year old children with the goal of encouraging physical play, social interaction, and changing the rules through coding. We extend prior work in the Heads-up Games (HUG) domain by adding a real-time coding environment that directly controls the hardware device, empowering children to change the game's rules in real-time. We argue that the combination of physical play, social interaction, and coding strikes the right balance between the societal need to increase outdoor play & enhance computational thinking skills on one hand and children's need to play, measure, and define their own rules on the other. We present our initial design and implementation process as well as our insights from a preliminary evaluation with six children who tested the prototype.;2017
We propose a framework and a setup for presenting complex models for curriculum contents in both augmented reality and virtual reality environment. After constructing some three-dimensional models representing real world objects such as trees, stones, rivers, dams, and buildings, our workflow uses the Unity engine in combination with Virtual Reality headset devices to create interactive applications for both Virtual Reality and Augmented Reality environments to support students understanding the curriculum contents through their surrounding. Typical challenges are addressed when creating 3D curriculum contents, integrating these models into Unity and solutions are proposed where possible. The overall structure of the project is described with some functionalities added to Unity for visualization and interaction with the models.;2017
We propose a methodology especially conceived to exploit the musical media in order to vehiculate some aspects in the realm of computational thinking to pupils of the lower secondary school (6th to 8th grades). The related activities are based on a visual programming language whose execution generates a melody shown using both its traditionally-notated musical score and its audio reproduction. This language provides the basic programming tools, such as simple and structured variables, iterations and so on. The learning activities are based on challenging small groups of students to solve programming exercises of increasing difficulty.;2017
What could it mean to have a project with goals that take decades or even a century to realize? In this talk, I reflect on my own intention to work toward a genuinely new and deep literacy-computational literacy-which I would place in eventual impact about halfway between algebra/calculus (as a literacy) and the root prototype, mass literacy centered on written text. I start by explaining what I mean by computational literacy and what experiences have concretized it for me and made it an attractive and plausible goal. Because of its nature as a cultural phenomenon, a literacy can only be achieved by a long and meandering path of social genesis. I illustrate the nature of such development with phenomena-cultural memes, movements, sensitivities, and values (MMSVs)-as they influence development. Example MMSVs include computational thinking as construed by the computer science community, and the widespread current popularity of coding academies. Finally, I position some of the best modern allies in the quest for computational literacy-such as constructionism and computer modeling-in what I take to be the larger frame: the development of a true computational literacy.;2017
While in the workplace are highly demanded work-related awareness of computing and information technology, this discipline does not have sufficient and accurate dissemination, especially in schools. New technologies have positioned more as a communication tool than as a means for building innovative products. On the other hand, it has missed the application of own abilities in the area, such as the development of logical reasoning, algorithmic thinking and problem solving, both the school curriculum as well as in instances of informal learning of students. In literature and on the web, there are tools that are accessible by both self-study students to be used as a complement to other activities. However, these tools seek the development of computational thinking itself, and not within a broader framework, which allows to present the computer science as an area of professional development, for example, inserted in a context where should solve problems requiring support programming and algorithms. Problock is proposed as a tool to (1) develop computational thinking, in a context of learning based on addiction problems, (2) disseminate and motivate students for future professional development in higher education in computer science and disciplines related. In this paper, the results of the construction of the tool are presented and the work in progress in a Chilean school.;2017
"While there is growing recognition of the need to support young learners as they develop computational thinking (CT) skills, this paper advocates for an increased focus on computational identity (CI) and digital empowerment (DE) in particular, as we posit that these CT skills will help young learners become self-motivated, innovative creators. When nurturing identity and empowerment, it is a persistent challenge to provide youth with real-world experiences and suitable development tools. This paper advances two key approaches to address these issues: 1) A critical computational literacy approach to engage youth in developing personally meaningful applications that have impact in the real world; 2) the use of a tool, like MIT App Inventor, that lowers barriers to creating useful, impactful technology. Using two case-based studies, we show how these two approaches have supported youth in developing applications that respond to meaningful challenges in their communities and helped them to establish their computational identities and digital empowerment.";2017
With the increasing status of computers in human society, how to train more innovative talents in line with new forms and computational thinking has become one of the new tasks of higher education in the country. The computer is an elective course for basic courses for non-computer majors, the main purpose is to popularize computer education, so that more students can master the modern computer tools, however, in the specific teaching process, colleges and universities have encountered some practical problems. In the analysis of the current teaching situation, combined with the actual teaching experience, this paper puts forward some reform ideas.;2017
With the rapid development of computer science and technology, especially the development of various numerical algorithms and intelligent algorithms, the calculation and algorithm have been promoted to the philosophical category, and the practical application of computer science has gradually generated. Through the introduction of computational thinking, the development of domestic computational thinking, the combination of university computer education and computer application, this paper studies and expounds the application of computational thinking in university computer curriculum.;2017
With the recent introduction of Programming in the K-12 curricula there is an opportunity to include Computer Science fundamental concepts. This paper presents the origin and evolution of Python as well as their main features that configure it as an ideal programming language. We also review and classify some educational tools in the Python ecosystem. Such tools cover a wide-open spectrum of resources from interactive books to libraries which ease the construction of student elaborated software artefacts. This work presents a multidisciplinary proposal to use the Python programming language in all levels of Secondary Stage.;2017
Within the scope of this article, primarily, Computational Thinking, STEM approach which emphasizes computational thinking as one of the basic points and the STEAM (Science-Technology- Engineering, Arts and Mathematics) approach which rose from critics of STEM are addressed with an emphasis on different perspectives in different countries. At the end of the article, in light of the literature in our country and across the world, some suggestions are presented for future research upon STEAM and Computational Thinking.;2017
WYRED (netWorked Youth Research for Empowerment in the Digital society) European H2020 project was born with the aim of knowing better what young people think, giving them the opportunity of rising their voices, about the technology influence in every aspect of their daily living. Currently, this project is near to finish its first year, building a different Social Sciences research approach, with a focus more oriented to open science related areas such as crowd science, citizen science, or network- connected science.;2017
yy This article refers to a pilot experience in educational science course from the Faculty of Psychology and Educational Science of the University of Coimbra. We used the visual Scratch programming tool for the development of recreational, educational and dynamic projects. The use of this software made it possible, on one hand, by improving the interest and involvement in the tasks, and on the other hand, in terms of professional development, maximising the use of Scratch while conception tool and production of educational materials.;2017
Warm Robot classroom is related to answer the question of introduce computational thinking teaching aids and course design by studies robots and wearables with social humanity. The discussion is about how to cultivate students with the rational technology thinking and humanity empathy? The research method includes design and research on cultural response teaching curriculum with the composition of product designers and electronic engineers, planning of teaching contents, and solicitation of teaching and learning of cultural responses from more than five kinds of different cultural backgrounds through the a one semester course. Develop the performances from different cultural groups through 3D printing, laser cutting and digital embroidery creations and assess the applicability of course design. This course was held with 64 participants (9 different countries, 5 backgrounds). We describe our experience in designing and organizing a wearable course. We will show that (1) Three interactive modules of difficult levels of soft wearable prototypes. (2) The culturally responsive curriculum. (3) The learning outcome of the teaching implementations with interactive toolkits from the final performance. The result shows that curriculum with different background works together can built students from either side to response to each other.;2018
"A course in computational biology that introduces undergraduate biology students to mathematical modelling and computer simulations is described. Spreadsheets offer the perfect environment to introduce our biology students to computational thinking and the increasing role that computer simulations are playing in biology research. Here, we detail the spreadsheet modelling of some of the simulations covered in the course; the Lotka-Volterra predator-prey model, a cellular automaton model of tumor growth, and a model of an infectious disease outbreak. The experience of implementing computational biology simulations in a spreadsheet environment encourages and enables our biology students to use computer simulations and spreadsheets more in their future research, and makes our students more comfortable when interpreting scientific literature that pertains to computational biology research. These are important skills that our biology students will need in their future careers as researchers and scientists.";2018
"A number of efforts have focused on preparing teachers to integrate CT within secondary disciplinary subject areas; however, there is little research on how CT ideas could be embedded within elementary subjects. We designed a professional development activity for elementary teachers to embed CT within science and examined how their understanding of CT emerged over the course of PD. This paper reports results from qualitative analysis of teacher responses to vignettes and open-ended questions, which presented teaching scenarios related to CT. We found that the vignettes allow us to see shift in teachersa(sic)(TM) thinking about CT from broad and generalized ideas to more elaborate versions of those ideas. We discuss that while vignettes provided a good method to portray changes in teacher views about CT, we need additional mechanisms to monitor how teachers conceptualize and come to integrate computational thinking into elementary schools.";2018
A technique that is frequently used in modern software development is the so-called pair programming. The proven idea behind this technique is that innovative work in a highly complex environment can benefit from the synergy between two persons working together with well-defined roles. The transfer of this technique as a metaphor for teaching has repeatedly been reported as a successful teaching strategy called pair teaching. In this paper, we describe our experiences with designing and teaching a complete lecture on software development as a pair. Our contribution is the definition of patterns for role-assignments to both persons. These include patterns for the design of the lecture as well as patterns for the teaching in class itself. Our experience shows that there also exists a couple of anti-patterns namely role distributions that should be avoided. First evaluation results are promising in the sense that the reception of structure and content as well as students' satisfaction increased significantly with the introduction of pair design and pair teaching.;2018
Academic self-concept, motivational beliefs, and attitudes towards a school subject are relevant for learning and educational achievement. A positive self-concept in science and mathematics is argued to motivate students to persist and advance in studying these subjects. In particular, self-concept, motivational beliefs, and attitudes towards STEM domains were found to be predictive of educational achievement. Recently, programming was suggested to be a key competence in education. To assess self-concept, motivational beliefs, and attitudes towards programming, we developed a new questionnaire based on existing scales for mathematics. The new questionnaire assesses the same aspects for programming on seven subscales, such as self-concept, belief about usefulness, and self-reported persistence when working on programming tasks. We conducted a pilot study in which we used this questionnaire to measure self-concept, motivational beliefs, and attitudes towards programming. The study was set in the context of an extracurricular course on computational thinking (CT) for elementary school students between the ages of seven and ten years. Before the start of the course, we assessed all 31 participating students' self-concept, motivational beliefs, and attitudes towards programming using the developed questionnaire and their CT skills using the Computational Thinking test (CTt). Our results confirmed the expected associations between the aspects assessed by our questionnaire. However, we did not find significant associations of questionnaire results and CT skills. Consequently, future research involving a larger sample is needed to better understand the association between children's actual performance and their self-concept, motivational beliefs, and attitudes towards programming.;2018
Advancing computational thinking in elementary education has been rapidly gaining attention due to the prospective of developing 21st century skills. However, interventions in this domain risk failure if they do not explicitly address the particular sociocultural traits of the deployment scenario. This is the case in most countries of Latin America, where computing has not reached a sustainable penetration in K-12 education. In order to bridge this gap, we designed a one-week workshop for advancing computational thinking targeted to 10-12 years old Chilean students with no prior experience in programming. This paper describes our intervention and presents the results of a qualitative study analyzing positive and negative aspects of the experience. Although most participants effectively acquired basic programming skills by the end of the intervention, we also identified several inaccurate views on computing and computer scientists. For instance, computing was mostly perceived as a set of informal experiences rather than a way for enabling creation, automation, and work. The word hacking appears to be used as a metaphor for more technical terms, such as programming or algorithm. Finally, negative stereotypical views of computer scientists resulting from the intervention were not as frequent as initial perceptions. These results provide fresh evidence on how to design, adapt, and evaluate computational thinking interventions targeted to K-6 students in Latin America.;2018
After the computational thinking sessions in the previous 2016 and 2017 editions of TEEM Conference, the third edition of this track has been organized in the current 2018 edition. Computational thinking is still a very significant topic, especially, but not only, in pre-university education. However, an important debate exists about how computer science concepts should be introduced in pre-university studies. Most of the proposals join computational thinking issues and programming, but there are many options and opinions. In this track, some interesting contributions are presented.;2018
"Aim/Purpose Research shows that students encounter difficulties in identifying the structure of argumentation texts and in understanding the main message of the argument. The research examined the effect that learning Logic Programming (LP), while applying logic inference, has on students' understanding of argumentation texts. Background Understanding an argumentation text means exposure to its structure, which requires the ability to identify the argument presented and to distinguish between the argument and its justifications. Argumentation is an important cognitive capacity for handling conflicting information, viewpoints, and opinions. Students' lack of ability to identify the structure of argumentation texts, and to understand its' main message, affects the understanding of texts in general, the writing of texts, and the presentation of oral arguments. Since Logic Programming is based on inference that is similar to the way in which people commonly believe that human inferential thinking is performed, our research approach was to investigate how learning LP in Computer Science affects the understanding of argumentation texts in Linguistics. Methodology The research population included 319 11th-grade students from five high schools, divided into a study group and a control group. Students' understanding was tested using knowledge questionnaires after completing their language studies, before (pre-study) and after (post-study) a year of learning LP. The knowledge questionnaires included argumentation paragraphs where students were asked to give each paragraph a title and to analyze the argument structure. In addition, an attitudes questionnaire was administered at the end of the school year in order to examine the students' attitudes towards the connection between the two disciplines. The research applied a mixed method approach, combining both qualitative and quantitative methods. Contribution The research and its' findings contribute to the previous body of knowledge with relation to students difficulties in understanding argumentation texts in Linguistics studies. Moreover, it suggests a new approach of using argumentation in the framework of inference as apply in LP to scaffold students' conceptions. The use of an interactive computerized system (like the logic programming language Prolog) can scaffold students in constructing their knowledge, develop their computational thinking skills, and also enables to vary the teaching methods. Findings Findings show that the students' understanding of argumentation texts improved after learning LP. The study group students' achievements were explicitly better compared with the control group students, who did not learn LP, though this was not always reflected with significant statistics. Students' attitudes questionnaire revealed that students did not identify on their own the connections between the two disciplines and so could not explicitly use it to promote their understanding. Recommendations for Practitioners The analysis tool we developed and apply can be used by educators and researchers to evaluate the understanding of argumentative texts by learners. It can be used in language classes at all levels as well as by educators in other disciplines in which the understanding of the argumentative structure is fundamental. Recommendations for Researchers The analysis tool we developed and apply can be used by educators and researchers to evaluate the understanding of argumentative texts by learners. It can be used in language classes at all levels as well as by educators in other disciplines in which the understanding of the argumentative structure is fundamental. Impact on Society Developing argumentation skills and computational thinking skills. Future Research Vary future possible research can follow the presented approach: examining how LP teachers expose the logical structure of an argumentation paragraph when they write logic programs that describe the inference represented in texts; examining how language teachers coupe with learning and using LP; examines the knowledge and skills of students that experienced a mediate learning process in the two disciplines in parallel.";2018
Algorithm courses are the core of the curriculum system of computer science and technology and play an important part in cultivating students' creative ability. In this paper, the teaching status of the course of Introduction to Algorithmic Design & Analysis in our school was analyzed from the views of students and teachers. Then, aiming at developing students' ability of analyzing and solving problems, specific ideas for curriculum teaching reform were put forward, namely, task module division, teaching content design, visualization teaching based on mind map and problem driven teaching. In addition, specific examples of problem-driven teaching and visualization teaching were also provided. It is worth noting that the introduction of problem-driven cases has promoted students' deep thinking and improved their computational thinking ability. At the same time, the introduction of visual teaching method helps students get better understanding and memory effect.;2018
Algorithmic thinking is at the core of computational thinking. Tangible interactive solutions can help children develop algorithmic thinking skills. This paper focusses on exploratory research concerning tangibles for graph algorithmic thinking for primary and middle schools. By following an action-research process, tangibles evolved through prototyping and actions-studies. The paper overviews their evolution and delves into its most recent action: an ecological study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. It ends by reflecting on results and future work.;2018
Algorithmic thinking is at the heart of computational thinking: it requires to abstract a problem and to model it, as well as to specify a sequence of instructions for solving it, that is, an algorithm. In many countries, computer science education in primary or secondary schools is moving towards computational thinking and, partly, algorithmic thinking education. This paper supports the idea that algorithmic thinking should be taught from primary schools, through physical activities, without sitting in front of a computer screen, and by exploiting Internet of Things technologies, specifically, by using inter-connected interactive tangible objects. The paper focuses on the design of such tangibles for teaching graph algorithmic thinking. It shows in what sense their design was participatory and followed an action-based re-search approach, moving from the context of use analysis to iterative design sessions and field studies with tangible prototypes, used by teachers or children. The paper presents one of such tangibles and field studies with children. The paper ends by reflecting on the design process of tangibles for graph algorithmic thinking.;2018
Algorithmic thinking is one of the main key concepts in computational thinking. With using computers in close to all areas of our lives, the progress of algorithmic solutions to problems is very crucial. The comprehension of the character of problems and their algorithmic solutions is enormously most important for everyone. Algorithmic thinking is the capability to realize, execute, assessment, and create computational procedures for solving problems. This paper presents Alg-Design, a visual and block based programming environment to facilitate novices to improve the comprehension of Algorithmic thinking using programming and computing. The visual programming environment motivates students and they find enjoyable while creating personally meaningful projects.;2018
Algorithms are a central concept in computer science. Therefore, it is necessary that undergraduate students in computer science get deep knowledge in popular algorithms. Moreover, they have to get background knowledge about the underlying ideas and some important properties. Also, it is very important to get the ability to transfer and apply the knowledge to new problems. The sum of all these skills is called algorithmic resp. computational thinking. Lecturers apply different teaching methods to teach these skills. The paper describes the skills and some learning aims in detail and shows which skill can be reached by which learning method.;2018
All primary school children in England are required to write computer programs and learn about computational thinking. There are moves in other countries to this effect such as the U.S. K-12 Computer Science Framework (CSF) for development. Debates on how to program and what constitutes computational thinking are ongoing. Here we report on a study of programing by children aged 7 - 11 using Java and elements of computational thinking they experience. Our platform comprises a novel Story-Writing-Coding engine we have developed. We compare novice (children's) processes of coding an animated story with that of experts (college students) and evaluate the differences using four measures based on the progressive coding of a complete program. We also analyze the use of novice (children's) computational thinking in this coding process. This research is set against a backdrop of approaches to teaching programing and concepts of computational thinking in recent educational literature.;2018
Although educators, researchers, and designers have increasingly advocated for developing computational thinking (CT) in young children, the vast majority of CT learning environments fail to support the development of positive attitudes towards problem solving, confidence in dealing with complexity, and communicating and working with others to achieve a goal. To address this issue, our design team developed a music-based puzzle game called SynthSync. The game challenges players to work collaboratively to debug jumbled musical compositions through close listening, tinkering, and communication. SynthSync players manipulate controls to adjust musical variables (pitch, note length, and the length of rests) in arhythmic and dissonant musical puzzles based on popular songs until they discover the original piece of music.;2018
Among the 17 sustainable development goals specified by United Nations organization in 2015, goal four is the key for progress towards the achievement of all the other goals. However, studies show that this goal is yet to be achieved among African universities in terms of supervision due to inadequate availability of supervisors to their research students. Ambient learning approach promises to address the problem by allowing access to education services like research supervision at anytime, anywhere and anyhow. Nevertheless, little research has been conducted to assess its effectiveness towards achieving sustainable development goal four. The aim of this paper is to describe a model that illustrates how ambient learning systems can be combined with decision support tools to support evaluation of its effectiveness.;2018
APP Inventor is a visual programming software developed by MIT that can quickly develop android APP without code writing. In the traditional non-computer professional C programming language courses, students generally poor acceptance, teaching is not good. Now cultivate students' computational thinking by piloting in the non-computer major with APP Inventor as their first computer language course for students. At the same time, students in the learning process generally feel easy to learn, interesting, high degree of acceptance, and achieved good teaching results.;2018
Art and science are homologous. Their development evolves from the initial mixed chaos, to separation in the development process, and to the current equifinality, which is historically inevitable. In this Paper, the author analyses connotation and their respective constitute elements and ways of thinking of artistic thinking and computational thinking, explores both similarities and differences of the two in intuitive cognition, abstract probing and creative process, and takes the thinking mode education of professional art academies as an example to discuss the breakthrough and practice of computational thinking education in an environment with enriched artistic thinking education atmosphere.;2018
Artificial Intelligence (AI) thinking is a framework beyond procedural thinking and based on cognitive and adaptation to automatically learn deep and wide rules and semantics from experiments. This paper presents Cloud-eLab, an open and interactive cloud-based learning platform for AI Thinking, aiming to inspire i) Deep and Wide learning, ii) Cognitive and Adaptation learning concepts for education. It has been successfully used in various machine learning courses in practice, and has the expandability to support more AI modules. In this paper, we describe the block diagram of the proposed AI Thinking education platform, and provide two education application scenarios for unfolding Deep and Wide learning as well as Cognitive and Adaptation learning concepts. Cloud-eLab education platform will deliver personalized content for each student with flexibility to repeat the experiments at their own pace which allow the learner to be in control of the whole learning process.;2018
As a cognitive ability computational thinking describes a specific way of algorithmic reasoning building on concepts and processes derived from computer programming/coding. Recently, computational thinking was argued to be a fundamental and educationally relevant 21st century skill that should be fostered already in childhood. Accordingly, we developed three life-size board games - Crabs & Turtles: A Series of Computational Adventures - aimed at providing an unplugged and low-threshold introduction to computational thinking. In particular, the games aimed at introducing basic coding concepts and computational thinking processes to 8 to 9-year-old primary school children. In the current study, we first describe the design of the games in detail to explicate the development process and allow for reproducibility. We then report on a first empirical evaluation of feasibility and user experience of our educational board games in a two-phase approach. We conducted quantitative analyses of player experience and qualitative feedback of adult student participants (Phase 1) and a sample of gamification experts and teachers (Phase 2). We examined users' game experience with an adult population to ensure the game's appropriateness. Results indicated overall positive game experience for all three games. Future studies would be desirable, which should evaluate player experience and learning outcomes in the primary target population of children.;2018
As computational thinking becomes increasingly important for children to learn, we must develop interfaces that leverage the ways that young children learn to provide opportunities for them to develop these skills. Active Learning Environments with Robotic Tangibles (ALERT) and Robopad, an analogous on-screen virtual spatial programming environment for educational Human Robot Interaction (HRI), have been developed. Evaluations of these in the context of free play and open-ended learning activities show that both systems afford opportunities for young children to engage in spatial programming, creating improvisational and sequential programs that mediate interactions between the environment, robots, and humans in responsive and creative ways. These systems demonstrate innovative opportunities for advancing mixed reality spatial programming activities as a form of HRI that fosters engaging seamless cyberlearning experiences, across formal and informal environments.;2018
As computing skills become necessary for 21st-century students, infused computational thinking (CT) lessons must be created for core courses to truly provide computing education for all. This will bring challenges as students will have widely varying experience and programming ability. Additionally, STEM teachers might have little experience teaching CT and instructing using unfamiliar technology might create discomfort. We present a design pattern for infused CT assignments that scaffold students and teachers into block-based programming environments. Beginning with existing code, students and teachers work together 'Using' and comprehending code before 'Modifying' it together to fix their programs. The activity ends with students 'Choosing' their own extensions from a pre-set list. We present a comparison of two implementations of a simulation activity, one ending with student choosing how to extend their models and one having all students create the same option. Through triangulating data from classroom observations, student feedback, teacher interviews, and programming interaction logs, we present support for student and teacher preference of the 'Student-Choice' model. We end with recommended strategies for developing curricula that follow our design model.;2018
As final event of the project Informatics -A Child's Play?!, which aimed at introducing computational thinking in primary and secondary schools, the authors initiated the first Children's Congress in 2016 with the main theme of Languages -Pictures -Information. This is now an annual event, where all participating children can slip into the role of researchers and present the results of their projects accomplished together with their teachers as well as teacher students of different master courses. As preparation the project teams get an introduction into computational thinking and several computer science concepts with the task of applying at least one of them in their project and the development of creative products. The themes of the Children's Congress are relatively open and fit into every subject, because our main aim is introducing computational thinking by the way to all participants. During their work on cross-curricular or even subject specific projects, pupils, students and teachers learn that basics of computational thinking are or can be integrated in every subject. This paper reports on the implementation and procedure of the Children's Congress and gives an overview of the projects accomplished in the first two years (2016 and 2017). It describes how and where computational thinking has been integrated and presents the main results of the evaluation gained from interviews and questionnaires.;2018
As metaphorical representations showed beneficial effects on several parts of computer science, this paper focuses on the question: How can metaphorical representations in VR enhance the understanding of theoretical computer science concepts? A concept for an immersive educational virtual environment for learning the theoretical computer science concept of finite state machines is presented. A first draft for the virtual reality aims to immerse students in a world of islands (states) with treasure islands (final states). Each symbol from the input alphabet is illustrated through another boat on every island. Students navigate through the islands by looking at one of the boats on the current island using a head-mounted-display. They then take the shipping route of the selected boat (the state-transition function) by pressing a button on a controller. The goal of the game can either be to reach Treasure Island and open the treasure chest or to complete the map.;2018
As new initiatives in computational thinking and computer science (CS/CT) are being developed and deployed, it is important to identify and understand the key concepts that are essential for student learning. In this study, we present the phases of construction of a learning trajectory (LT) for Decomposition in the context of CS/CT in K-8 education. From an extensive literature review, 63 learning goals representative of decomposition understanding and practices were identified and synthesized into 13 consensus goals. The focus of this paper is how relationships between these consensus goals were identified and used to place the goals into a learning trajectory. We discuss the theories and frameworks that guided the trajectory's construction as well as the methodology and justifications used to draw pathways through the trajectory in each phase. Finally, we discuss potential uses for the trajectory and suggest further explorations for decomposition in CS/CT.;2018
As the importance of computational devices grows in today's technology-driven society, tools for teaching computational literacy are becoming more necessary. While microcontrollers have been shown to be an effective way to develop computational literacy in young learners, microcontrollers' accessibility is limited due to their cost. We present domino, a mobile platform that turns the phone into a microcontroller using its inbuilt sensors and actuators. Learners can create their own cause-and-effect apps with the phone's sensors as inputs and existing applications as outputs. In this paper, we reflect on the design aspects of domino that enable learners to use their phones to problem-solve in everyday life, as well as the app's implications for future work in the area of computational literacy.;2018
As the number of teachers teaching computer science grows, it is increasingly important to be mindful of the training they receive with respect to broadening participation in computer science. Through our program, we have trained over 50 teachers in the greater Boise Metropolitan region, who have in turn taught over 1400 students computing concepts through courses such as Exploring CS, AP CS Principles, and AP CS A. These courses have an excellent curriculum that contains a mix of computational thinking concepts such as a focus on creativity, abstraction, coding, as well as increasing awareness about the cyber footprint of the students with respect to security and privacy. While the curriculum is excellent, we need to be more mindful about incorporating pedagogical strategies that promote inclusive teaching especially for women and minorities who are traditionally underrepresented in computer science. To address the challenges associated with teaching a truly inclusive course, we developed a new course titled Inclusive Strategies for Computer Science Education that draws attention to the strategies that have been studied over the years in STEM and CS education literature. We present the contents of the course along with a post-hoc qualitative survey on the applicability and practicality of the material discussed in the course.;2018
Building on Seymour Papert's view of empowering students by mastering programming, this study conceptualized programming empowerment as consisting of four components: meaningfulness, impact, creative self-efficacy, and programming self-efficacy. A sample of 287 primary school students in grades four to six completed a corresponding survey. Confirmatory factor analysis validated the proposed components of the programming empowerment instrument. A structural equation model indicated that students with greater interest in programming perceived it as more meaningful, had greater impact, had greater creative self-efficacy, and had greater programming self-efficacy. Also, students with attitudes toward collaboration that were more positive than others had greater creative self-efficacy. Boys showed more interest in programming than girls did. Students in higher grade levels than others viewed programming as less meaningful and had lower programming self-efficacy. These results support future studies that evaluate the impacts of interest-driven computational thinking and programming curricula with ample collaboration opportunities.;2018
By definition, technology seeks to exploit scientific knowledge in order to serve today's practical human needs. The promotion of IT-related technologies such as Ubiquitous Computing, Mobile Computing and the Internet of Things (UMI) is a matter of great concern to the scientific community due to their diffusion in all areas of human activities. The educational community recognizes the above technologies as a tool that can be used to improve the quality and effectiveness of the education, while, at the same time, is facing the challenge to highlight ways to utilize the technical characteristics of UMI technologies in order to lead to learning, not just the information accessibility. The presented research contains a proposal for the exploitation of innovative technologies in the field of education and presents the results of its implementation. More specifically, it is a proposal to use UMI technologies in the field of formal Secondary Education based on educational scenarios. Additionally, it is investigated if using UMI while teaching the 15-17-year-old students provides learning-not only ubiquitous access to information-and if it serves as a motivator for choosing a career in science and technology.;2018
Can digital competencies be acquired by solving real problems? The educational intervention MadeByKids called an external educational provider to 17 schools to conduct a series of workshops, having pupils age 7 12 solve challenges such as designing the schoolbag 4.0 or the future classroom. The workshops were designed by adopting the Stanford Design Thinking Method for Kids (http://www.ideaco.org) and digital technologies with the goal to teach children computational thinking, collaborating in teams, resolving conflicts, presenting, giving/receiving feedback, etc. In this paper, we take a participatory action research (PAR) approach with the goal of exposing significant chunks of the incredibly rich experience. A content analysis of a qualitative survey among teachers and findings from a focus group reflect the teachers' view. The study indicates that the acquisition of digital competences needs to be backed by personal and social capacities that take time to mature. Furthermore, we learned that the children's teachers must be included consistently to ensure their cooperation and improve sustainability. Besides providing inspiration for teachers, implications for teacher education are derived and the national project is related to the findings from studies conducted abroad in order to contribute to constructive educational innovations crossing national boundaries.;2018
Coding and computational thinking have recently become compulsory skills in many school systems globally. Teaching these new skills presents a challenge for many teachers. A notable example of professional development designed using Constructionist principles to address this challenge is ScratchEd. Upon reflecting on her experiences designing and running ScratchEd, Karen Brennan identified five tensions faced by professional development providers, and proposed that these tensions could be used for scrutinising and critiquing professional development. In this paper we analyse, through the lens of Brennan's tensions, the process we have followed to design, evaluate and improve professional development. We argue that while we have experienced the same tensions, the extent to which we assess learning is a new tension that extends those identified by Brennan. There are strong reasons to assess teachers' knowledge, however, quantitative measures of learning could be at odds with Constructionism: as Papert argued in Mindstorms, constructionist educators should study their learning environments as anthropologists. Consequently, we have called this new tension the tension between anthropology and assessment.;2018
Coding as a practical skill and computational thinking (CT) as a cognitive ability have become an important topic in education and research. It has been suggested that CT, as an early predictor of academic success, should be introduced and fostered early in education. However, there is no consensus on the underlying cognitive correlates of CT in young elementary school children. Therefore, the present work aimed at (i) assessing CT and investigating its associations to established cognitive abilities, and (ii) evaluating a newly developed CT course for elementary school children. As such, 31 7-10-year-old children took part in 10 lessons of a structured CT course. The course aimed at introducing and fostering CT concepts in both unplugged and plugged-in ways, incorporating life-size board games, Scratch, Scratch for Arduino, and Open Roberta programming environments. In a pre-/post-test design, we assessed several cognitive abilities using standardized tests on nonverbal-visuospatial and verbal reasoning abilities, numeracy, as well as short-term memory, and measured CT using an adapted version of the only existing validated test CTt, to accommodate it to the younger sample. We identified significant associations between CT and nonverbal-visuospatial reasoning, as well as different aspects of numeracy (e.g., fact retrieval and problem completion). In line with recent theoretical accounts and empirical investigations for other age groups, these findings specify the underlying cognitive mechanism of CT in elementary school. Moreover, our results indicated that students were able to specifically improve their CT abilities through the course, as assessed by the adapted version of the CTt.;2018
Collaborative learning can help reduce the anxiety level of learners, improve understanding and thus create a positive atmosphere for learning. This study analyzes students' collaborative learning experiences within small interdisciplinary cohorts while learning computational thinking in a university-level class. The cohort allows students from different disciplines to contribute diverse perspectives, socially interact with each other and in turn create situations where two or more students learn together. This study uses both qualitative and quantitative means to explore students' collaborative learning experiences. Ethnographically-informed qualitative data using Stahl's collaborative framework is analyzed. The analysis revealed that most students found the cohort model to be valuable in learning computational thinking by allowing them to ask about and explain problems, especially with students from different disciplines who perceive and explain a problem differently. Quantitative data from a multi-term survey complements and confirms the findings from the qualitative data. Our study helps to inform those teaching foundational computing concepts to a diverse audience of learners.;2018
Computation is the third research paradigm, alongside theory and experimentation. Computational thinking is the term that refers to the thought processes involved in performing computational research, including the design and use of computational tools. Given the increasing need to provide students with computational education, this paper describes a novel way for the development of computational thinking among high school and university students. The proposed approach is based on Papert's theory of constructionism. In this approach, the student forms his/ her knowledge while constructing the difference equation that describes a physical (or engineering) phenomenon, based on scenarios investigated in spreadsheets. The method is illustrated in the cases of a damped harmonic oscillator and a parallel RLC circuit.;2018
Computational complexity is regarded by many Computer Science students as extremely difficult and as a topic to be avoided. However, the concepts of an algorithm and of computational complexity as a means of characterizing the resource consumption of algorithms are fundamental in Computer Science and are included in all curricula for it. To better motivate students and to increase their interest in computational complexity, this paper suggests introducing it by examining algorithms, a.k.a. recipes, for making noodles. This paper describes several traditional algorithms for making Chinese and Italian noodles and classifies each according to its computational complexity. It compares the power of the algorithms. It considers the nature of variations of the traditional algorithms. It examines machines that implement some of the algorithms. It cites a world speed record for making a large number of noodles using the algorithm with the maximal complexity. It shows how computational thinking and other topics can be introduced in the same manner. It concludes by mentioning avenues for further studies.;2018
Computational thinking - the ability to solve problems using concepts from computer science - has been widely discussed in the computer science education field. However, the relationship of computational thinking to intelligence - seen as the general ability to understand and solve complex problems - is contestable and has not been extensively explored. The present study addressed the question of how computational thinking is related to intelligence. To find an answer to this question, 71 pre-service teacher students completed a survey with 20 Bebras tasks as a measure of computational thinking and a non-verbal intelligence test (TONI-3) to assess their general problem-solving ability. The large and significant correlation of r(70) = .53, p < .001, indicates that both concepts are highly related. Implications of the findings are discussed, including the meaning of the relationship between computational thinking and intelligence during teaching and assessment, and the possibility of more holistic measures of computational thinking that incorporate procedural aspects.;2018
Computational thinking (CT) ability has been described as a new training objective of basic computer courses in Chinese university. Currently, contents and methods of basic computer course teaching in college have been unable to meet the actual needs to develop CT ability. This paper firstly makes an analysis of possible reasons for the above challenge and then aimed to how to teach and what to teach in a practical way. Our research discussed the basic concept and research status of computing culture discussed and extracted above 60 typical cases based computing culture. These cases focused on discovery joinery of prophetic computer scientists etc. As the main line of teaching, these cases run through in-class teaching and organize every teaching step, such as leading-in, explanation, discussion, dialogue, and conclusion and so on. The several years teaching practice prove the strategies for teaching design put forward in this study is effective to foster a student's sense of computing and to arouse the students' interest. The finding concludes that developing the broader value of computing-culture and continued investing in the refine of computing-culture based cases are valuable.;2018
Computational Thinking (CT) has become popular in recent years and has been recognized as an essential skill for digital citizen. As the literature grows rapidly, a systematic review of CT and its current challenges becomes essential. Taking 395 pieces of journal articles and proceeding papers about CT research included in ISI Web of Science from 1979 to 2018 as samples, this study adopts bibliometric analysis method and visual knowledge analysis tool CiteSpace to carry out in-depth exploration of aspects such as development status, developing trend, and hot subjects of computational thinking research. The result identifies time and spatial distribution, major intellectual cooperation network, cooccurrence keywords, research clusters and landmark articles of CT.;2018
Computational Thinking (CT) has been identified in the last few years as a fundamental skill that should be developed by all people. This has motivated multiple initiatives, whether governmental, through organizations, or by individuals. However, upon realizing a literature review, to the best of our knowledge no initiatives that include minority groups such as those within the Autism Spectrum Disorder (ASD) were proposed. Furthermore, in this context there are no guidelines to orientate the creation of didactic activities that will bring about the benefits of CT. Due to the aforementioned information, in this article we present the definition of a collection of guidelines for the construction of didactic activities (CT4AII) that aim to promote Computational Thinking in adolescents with ASD through the construction of digital games. The proposed guidelines were instantiated in a Digital Games Programming Workshop with Scratch. The workshop was offered to four adolescents with ASD, obtaining the development of high-level CT skills and stimulating interpersonal skills that are diminished in this public. Furthermore, a posttest was executed 5 months later, with the objective of determining if the developed skills had been maintained over time. The results evidenced that the skills were in fact maintained in a sustained manner, demonstrating promising results.;2018
Computational thinking (CT) has gained wide recognition as an important K-12 educational goal, initially in the context of computer science (CS), and more recently also beyond CS. The development of CT teaching materials and approaches is therefore of prime importance. Here, an online learning platform for CT, named Co-De, is presented. It addresses five major aspects of CT explicitly, in the context of a variety of computational problems. Students using Co-De, work through classes, individually or in teams, doing a mixture of unplugged and online exercises and quizzes, as well as some programming. Teachers can fine-tune the default Co-De learning paths to cater for their specific groups of students and/or specific learning goals. Co-De is implemented on top of the open-source learning platform Moodle. It can be used directly at a central server, or a customised version can be installed and used locally.;2018
Computational thinking (CT) is being consolidated as a key set of problem-solving skills that must be developed by the students to excel in our software-driven society. However, in psychological terms, CT is still a poorly defined construct, given that its nomological network has not been established yet. In a previous paper, We started to address this issue studying the correlations between CT and some fundamental cognitive variables, such as primary mental abilities and problem-solving ability. The current work deepens in the same direction as it aims to extend the nomological network of CT with non-cognitive factors, through the study of the correlations between CT, self-efficacy and the several dimensions from the 'Big Five' model of human personality: Openness to Experience, Conscientiousness, Extraversion, Agreeableness, and Neuroticism. To do so, the Computational Thinking Test (CTt) and some additional self-efficacy items are administered on a sample of 1251 Spanish students from 5th to 10th grade (N = 1251), and the Big Five Questionnaire-Children version (BFQ-C) is also taken by a subsample from the above (n = 99). Results show statistically significant correlations between CT and self-efficacy perception relative to CT performance (r(s) = 0.41), in which gender differences in favor of males are found (d = 0.42). Moreover, results show statistically significant correlations between CT and: Openness to Experience (r = 0.41), Extraversion (r = 0.30), and Conscientiousness (r = 0.27). These findings are consistent with the existing literature except for the unexpected correlation between CT and the Extraversion factor of personality, which is consequently discussed in detail. Overall, our findings corroborate the existence of a non-cognitive side of CT that should be taken into account by educational policies and interventions aimed at fostering CT. As a final contribution, the extended nomological network of CT integrating cognitive and non-cognitive variables is depicted. (C) 2017 Elsevier Ltd. All rights reserved.;2018
Computational Thinking (CT) is seen as an important competence that is required in order to adapt to the future. However, educators, especially K-12 teachers and researchers, have not clearly identified how to teach it. In this study, a meta-review of the studies published in academic journals from 2006 to 2017 was conducted to analyze application courses, adopted learning strategies, participants, teaching tools, programming languages, and course categories of CT education. From the review results, it was found that the promotion of CT in education has made great progress in the last decade. In addition to the increasing number of CT studies in different countries, the subjects, research issues, and teaching tools have also become more diverse in recent years. It was also found that CT has mainly been applied to the activities of program design and computer science, while some studies are related to other subjects. Meanwhile, most of the studies adopted Project-Based Learning, Problem-Based Learning, Cooperative Learning, and Game-based Learning in the CT activities. In other words, such activities as aesthetic experience, design-based learning, and storytelling have been relatively less frequently adopted. Most of the studies focused on programming skills training and mathematical computing, while some adopted a cross-domain teaching mode to enable students to manage and analyze materials of various domains by computing. In addition, since the cognitive ability of students of different ages varies, the CT ability cultivation methods and content criteria should vary accordingly. Moreover, most studies reported the learners' CT performance and perspectives, while their information society ability was seldom trained. Accordingly, the research trends and potential research issues of CT are proposed as a reference for researchers, instructors, and policy makers.;2018
Computational thinking (CT) or thinking like a computer scientist is defined as formulating problems and their solutions in a way that a machine (computer) can be used to represent the problem and carry out a solution. Increasingly CT is considered to be a foundational STEM skill needed for success in our world driven by technology and essential for success in future work at the human-technology frontier. Educational policy makers responsible for preparing students for future success are including CT in compulsory education in countries around the world. At the same time education practitioners are challenged to find ways to integrate CT into their curricula. Though computer science educators may believe CT is best taught through programming, how can teaches of science, mathematics and the humanities integrate CT in the service of their disciplines, and what are its advantages? Funded by the U.S. National Science Foundation, Education Development Center convened two workshops to develop a framework for computational thinking from a disciplinary perspective. Workshop participants included 54 of the foremost U.S. researchers and practitioners focused on computational thinking education. The goals of the workshop were to draft a framework for defining computational thinking from a disciplinary perspective and to develop assessment recommendations or new research questions to close the gap between when CT assessments are already developed or in progress, and assessments needed to measure CT from a disciplinary perspective. Participants provided examples of their work in the form of curriculum and activities that illustrated CT in action in their classrooms. Researchers shared their lessons learned through research on various aspects of CT skill development and integration. Ten common elements emerged from a review of these examples. CT practices in scientific work environments at the Human-Technology frontier were used to refine these elements so that they better defined what students could do more effectively/efficiently with CT that without. Five elements with corresponding examples in grade spans K-2, 3-5, 6-8 and 9-12. These five elements form an initial framework for CT within disciplines. They connect what students do using CT within disciplines and what CT enabled scientists/engineers do in practice in scientific workplaces. This research concluded that through the use of computational thinking, both students and practicing scientists better: 1. Understand (complex) systems 2. Innovate with computational representations 3. Design solutions that leverage computational power/resources 4. Engage in collective sense making around data, and 5. Understand potential consequences of actions. This presentation will share these elements and examples of what CT looks like in practice from a disciplinary perspective.;2018
Computational Thinking (CT) represents a possible alternative for improving students' academic performance in higher level degree related to Science, Technology, Engineering and Mathematics (STEM). This work describes two different experimental proposals with the aim of introducing computational thinking to the problem solving issue. The first one was an introductory course in the Faculty of Physical, Mathematical and Natural Sciences (FCFMyN) in 2017, for students enrolled in computer science related careers. The other experience was a first attempt to introduce CT to students and teachers belonging to not computer related faculties at the National University of San Luis (UNSL). Both initiatives use CT as a mean of improving the problem solving process based on the four following elementary concepts: Decomposition, Abstraction, Recognition of patterns and Algorithm. The results of the experiences indicate the relevance of including CT in the learning problem solving issue in different fields. The experiences also conclude that a mandatory CT related course is necessary for those careers having computational problems solving and/or programming related subjects during the first year of their curricula. Part of this work was presented at the XXIII Argentine Congress of Computer Science (CACIC).;2018
Computational thinking (CT), a transversal intellectual foundation integral to computer science, is making its way into compulsory comprehensive education worldwide. Students are expected to attain skills and knowledge in such interdisciplinary CT principles as Algorithmic thinking, Data representation, and Debugging. Problem-solving by designing and manipulating interactive media with Scratch, a graphical programming tool, is popular especially at the primary school level. However, there has been confusion regarding how introductory CT can be operationalized for educational practice. Teachers and students need research-based knowledge for setting appropriate learning goals in addition to instruments for formative assessment that potentially improve the quality of learning. This study contributes to these issues by developing the assessment for learning of CT via Scratch in primary school settings. A review on prior studies involving the assessment of CT-related computational ideas in Scratch has led to the conceptualization of a revised assessment framework. Next steps in the study are analyzing fourth grade students' (N=58) Scratch projects and exploring complementary methods for analyzing CT in video recordings of the students' programming processes.;2018
Computational thinking and coding has received considerable attention over the past several years. Considerable efforts worldwide suggest the need for more empirical studies providing evidence-based practices to introduce and engage children with coding activities. The main goal of this study is to examine which programming concepts students use when they want to develop a game, and what is the interrelation among these concepts. To achieve our goal, a field study was designed and data were collected from coding activities. In detail, during a two-week period, one-day workshops were organized almost every day on which 44 children participating in, with ages between 8-17. The workshops follow a constructionist approach and comprise of two parts. First the children interact with robots, and then develop a game using Scratch. The findings provide a deeper understanding on how children code by showing the use of specific programming concepts to develop their projects and their correlations. Hence, we improve our knowledge about children's competences in coding.;2018
Computational thinking has recently gained more and more relevance as problem-solving competence of the 21s t century. Taking Wing's [1] grand vision into account, each student should have certain skills in computational thinking in order to be able to participate adequately in social life and in his/her future profession. Thus, the International Computer and Information Literacy Study (ICILS 2018) does in addition to other student competences also measure their achievement in computational thinking [2]. In this internationally comparative large-scale assessment with a representative sample, a sound body of information is gathered that is used, among others, to explain variation in students' achievement in computational thinking. One field that represents a national extension in Germany is problem-solving. This paper presents a PhD project that focuses on this field and provides an analysis model that examines the relationship between students' self-perceived problem-solving skills and their computational thinking skills, taking into account further variables of influence and aims to explain variation in students' achievement of computational thinking.;2018
"Computational thinking is a cognitive process that allows generating solutions to problems through the use of skills, such as abstraction, decomposition, and algorithmic design. This paper presents the proposal to evaluate computational thinking of new students to relate knowledge indicated in the subject methodology of programming and to offer an initial environment of learning. This paper describes the exercises selected to evaluate the previously mentioned skills, and correspondence between the different contents of the course; using a qualitative methodology, the experiences of 65 students were evaluated. The results obtained favored activity carried out, and they also indicated improvements for future generations.";2018
Computational thinking is a fundamental skill for everyone, not just for computer scientists. Teaching computational thinking in primary and secondary school will not only help to inspire kids to continue their studies in Computer Science, but also will provide a set of valuable skills to use during their professional life in the Computer Science field or in any other field. In this work we present a Codimo's activity called Numeric Line. This activity was designed for students between 6 and 8 years old and with the goal of encourage, in a transparent way, one of the aspect of computational thinking: Algorithm design. The students play using a set of simple blocks (commands), trying to put a number in a numeric line, moving it across a maze. With this, the student reinforce their knowledge taught in classroom about natural and integer numbers, using computational thinking.;2018
Computational thinking is a much-used concept in computer science education. Here we examine the concept from the viewpoint of the extended cognition hypothesis. The analysis reveals that the extent of the concept is limited by its strong historical roots in computer science and software engineering. According to the extended cognition hypothesis, there is no meaningful distinction between human cognitive functions and the technology. This standpoint promotes a broader interpretation of the human-technology interaction. Human cognitive processes spontaneously adapt available technology enhanced skills when technology is used in cognitively relevant levels and modalities. A new concept technology synchronized thinking is presented to denote this conclusion. More diverse and practical approach is suggested for the computer science education.;2018
Computational Thinking is argued to be an essential skill for the workforce of the 21st century. As a skill, Computational Thinking should be taught in all schools, employing computational ideas integrated into other disciplines. Up until now, questions about how Computational Thinking can be effectively taught have been underexplored preventing efforts to cross the large gap between early adopters and the early majority, conceptualized as the Computer Science Education chasm. A promising strategy to cross the chasm is underway in Switzerland. Switzerland recently introduced a national curriculum, called Lehrplan 21, mandating Computer Science Education. This mandate requires the Computer Science education of elementary and middle school students. In 2017, the School of Education of Northwestern Switzerland (PH FHNW), introduced a mandatory pre-service teacher Computer Science Education course, to satisfy this mandate. All the PH FHNW students who study to become elementary school teachers must pass this two-semester course. The first part of this course was taught for the first time in fall of 2017. This paper presents the philosophy of this course and an initial analysis of both qualitative data capturing the students' perceptions of Computational Thinking and quantitative data describing shifts in students' skills and attitudes as effect sizes. The data suggest that it is possible to teach a basic understanding of programming to non-self-selected pre-service elementary school teachers.;2018
Computational thinking is becoming common in K-12 curricula, and at the same time there is interest in how STEM subjects can be integrated with the Arts (referred to as STEAM). There are some obvious connections between music and computation, but the idea of engaging with genuine computational thinking while also having authentic music learning experiences for students provides new opportunities. In this paper we consider ways to explore computational thinking ideas such as decomposition, patterns, abstraction and algorithms in a meaningful way while also exploring key concepts that a music educator would expect to work with. We review some existing ideas for doing this, and also provide novel approaches that connect computational thinking and music. This is done through a series of vignettes that describe creative ways to connect the two subjects using approaches that have been used successfully with school students. The first approach is based on the use of comparisons in sorting, which can be used to have students physically compare musical elements such as note pitches. The second uses simple programming on physical devices to represent music notation. Further examples include exploring binary representations using sound, writing programs for musical scales, understanding musical phrases in the context of programming, and using programming for music composition. Integrating the opportunity to learn about computational thinking and music at the same time has the benefit that some efficiency can be gained in teaching, but more importantly, students are able to experience the relevance of these two subjects to each other, when they might otherwise pigeonhole them into separate areas of their lives.;2018
Computational thinking is one of the hot spots in the current field of computer education. As the course of computer fundamentals is offered as a general course in colleges and universities, it is of great significance to introduce the concept of computational thinking in the course. This article expounds the basic concept of computational thinking and the importance of the course of computer fundamentals in the design of classroom teaching and discusses how to guide students to foster computational thinking in the teaching practice.;2018
Computational thinking is one of the skills critical for successfully solving problems posed in a technology driven and complex society. The limited opportunities in school settings to help students develop computational thinking skills underscores the need for helping teachers integrate it in their practices. Besides developing the knowledge of technology, content, and pedagogy, teachers need to recognize the relevance of computational thinking to their teaching, a factor influencing their future practice with it. Drawing from the literature on problem-solving and TPACK framework, this paper discusses strategies, including content-specific examples, problem-solving nature of computational thinking, and the methods of teaching problem-solving for enabling teachers to make the connections between computational thinking and their practices.;2018
Computational thinking lies at the intellectual core of computing. Promoting computational thinking ability requires that students are provided with a clear understanding of the fundamental principles and concepts of computer science, including abstraction, logic, algorithms, and data representation. We propose to use force-feedback educational robotic devices for hands-on teaching of computational thinking. The addition of haptic feedback for teaching abstract concepts of computer science offers several advantages, as haptic feedback (i) enables an effective means of data hiding, (ii) ensures a high level of student engagement by adding another pathway for perception and enabling active physical interaction, and (iii) improves student motivation through the novelty effect. Moreover, visually impaired students may benefit from replacement of visualization with haptic feedback. We present a force-feedback application for teaching sorting algorithms and report initial student evaluations of integrating haptics to promote computational thinking.;2018
Computational Thinking represents a terminology that embraces the complex set of reasoning processes that are held for problem stating and solving through a computational tool. The ability of systematizing problems and solve them by these means is currently being considered a skill to be developed by all students, together with Language, Mathematics and Sciences. Considering that Computer Science has many of its roots on Mathematics, it is reasonable to ponder if and how Mathematics learning can be influenced by offering activities related to Computational Thinking to students. In this sense, this article presents a Systematic Literature Review on reported evidences of Mathematics learning in activities aimed at developing Computational Thinking skills. Forty-two articles which presented didactic activities together with an experimental design to evaluate learning outcomes published from 2006 to 2017 were analyzed. The majority of identified activities used a software tool or hardware device for their development. In these papers, a wide variety of mathematical topics has been being developed, with some emphasis on Planar Geometry and Algebra. Conversion of models and solutions between different semiotic representations is a high level cognitive skill that is most frequently associated to educational outcomes. This review indicated that more recent articles present a higher level of rigor in methodological procedures to assess learning effects. However, joint analysis of evidences from more than one data source is still not frequently used as a validation procedure.;2018
Computational Thinking, through robotics or coding experiences, is being included in the school curriculum around the world. It is considered one of the necessary skills for surviving in the 21st century. However, teachers have often not been trained to teach Computational Thinking at school and do not even know exactly what it is. Therefore, we try to understand the concept of Computational Thinking by teachers in training through a mixed methodology, which allows us to detect important knowledge and errors in relation to this concept. However, on the other hand, good initial attitudes toward Computational Thinking are diagnosed, which can allow the specific training received in this field to be transferable to future contexts of teaching practice.;2018
Computational tools and methods have permeated multiple science and engineering disciplines, because they enable scientists and engineers to process large amounts of data, represent abstract phenomena, and to model and simulate complex concepts. In order to prepare future engineers with the ability to use computational tools in the context of their disciplines, some universities have started to integrate these tools within core courses. This paper evaluates the effect of introducing three computational modules within a thermodynamics course on student disciplinary learning and self-beliefs about computation. The results suggest that using worked examples paired to computer simulations to implement these modules have a positive effect on (1) student disciplinary learning, (2) student perceived ability to do scientific computing, and (3) student perceived ability to do computer programming. These effects were identified regardless of the students' prior experiences with computer programming.;2018
Computer programming tools for young children are being created and used in early childhood classrooms more than ever. However, little is known about the relationship between a teacher's unique instructional style and their students' ability to explore and retain programming content. In this mixed-methods study, quantitative and qualitative data were collected from N = 6 teachers and N = 222 Kindergarten through second grade students at six schools across the United States. These teachers and students participated in an investigation of the relationship between teaching styles and student learning outcomes. All participants engaged in a minimum of two lessons and a maximum of seven lessons using the ScratchJr programming environment to introduce coding. Teachers reported on their classroom structure, lesson plan, teaching style and comfort with technology. They also administered ScratchJr Solve It assessments to capture various aspects of students' programming comprehension, which were analyzed for trends in learning outcomes. Results from this descriptive, exploratory study show that all students were successful in attaining foundational ScratchJr programming comprehension. Statistically significant findings revealed higher programming achievement in students whose educators demonstrated flexibility in lesson planning, responsiveness to student needs, technological content expertise, and concern for developing students' independent thinking. Implications for research in the development of computational thinking strategies are discussed, as well as suggestions for successfully implementing early childhood classroom interventions with ScratchJr.;2018
Computer science (CS) education advocates argue that integration of computational thinking (CT) into instruction in other subjects has promise for providing a strong foundation in computer science ideas for elementary school students. Less attention has been given to the role that CT may play in improving learning in subjects other than computer science. This document summarizes my plans to study how teaching elementary level mathematics through computational thinking practices can improve mathematics learning.;2018
Computer science education, including computational thinking, has received considerable attention over the last few years as more and more countries are expanding or starting efforts in the primary and secondary schools. In this chapter, we provide examples of computer science efforts in a number of countries, including the United States, and discuss how these efforts to increase the role of computing in schools gives us a unique opportunity to expand computing education research, which has significantly lagged the rapid growth of computer science. We have laid out directions for future research under two broad areas of teaching training and student learning. Specifically, we discuss potential research areas around knowledge teachers need to teach computing ideas and factors that influence students learning to program. The child programs the computer and, in doing so, both acquires a sense of mastery over a piece of the most modern and powerful technology and establishes an intimate contact with some of the deepest ideas from science, from mathematics, and from the art of intellectual model building - Seymour Papert;2018
"Computer Science is seen in many different ways in society; some may consider it to be an esoteric collection of jargon-laden skills, while others view it as an essential topic of study for all citizens. Many of us are very passionate about sharing our enthusiasm for the subject with others, and we are at a time in history where much of the hard work to get the public to understand that it is something special is starting to bear fruit, as we see Computer Science and Computational thinking appearing in K-12 curricula around the world. But what is it about Computer Science that makes it so important and exciting? Is it a subject in its own right that deserves space in the curriculum? We will explore the reasons that young students should become engaged with the subject, illustrated using an Unplugged perspective.";2018
Computing literacy is currently becoming a much valued and necessary skill. Therefore, computing science teaching in primary schools is very important for the professional prospects of pupils. Informatics is a discipline that has been rapidly developing and changing. New opportunities are emerging within the discipline as regards the teaching content and also the teaching methods that may be applied. One of the many possibilities of supporting the development of computational thinking is to use the Scratch programming language in school teaching. In the paper, we will deal with the visual Scratch programming language which is intended for children from 8 years old. Children can use it to easily work with multimedia and create a wide range of projects, such as games, animated stories, tutorials and videos. In the Scratch language, the text commands, parentheses and semicolons of standard programming syntax are replaced with colourful blocks that create a functional program after they have been connected to each other correctly. This enables a pupil to concentrate more on understanding the programming principles and problem solving. The subject of the paper is to present the Scratch programming environment and the opportunities for developing computational thinking in pupils during lessons.;2018
Contemporary educators have been advocating that teaching and learning in schools should go beyond knowledge acquisition. A critical challenge is how to help students learn like expert creators who constantly display active engagement and personal autonomy and who are keen to collaborate with others. Recently, construction-to-learn activities have received even more attention than before. The maker movement is occurring in many educational settings. However, the setup of makerspaces does not necessarily guarantee a positive impact on students' learning. Too much emphasis on the hardware tools may blur the educational focus and the merits of maker activities. This article summarizes and presents studies related to construction-to-learn activities that support students in their learning as creators. It revisits the key design principles of learning systems based on the needs of student makers: supporting students to express their imagination, facilitating endless remixing, and low-threshold/high-ceiling. Design examples and research findings will be presented based on a series of studies in the field. These can shed light on the design of maker activities that can continuously engage students in construction-to-learn activities.;2018
Contemporary research has introduced educational robotics in the classroom, but there are few studies about the effects of alternative embodied interaction modalities on computational thinking and science education. Twenty-six middle school students were asked to program interfaces for controlling the heading and speed of a robot using two types of embodied interaction modalities. We compared touch and full-body gestures to autonomous control, which does not require any embodied interaction. We assessed the development of their computational thinking skills by analyzing the projects they created during a problem-solving task and examined their understandings of science concepts related to kinematics. We found that novice students preferred full-body interfaces, while advanced students moved to more disembodied and abstract computational thinking. These findings might be applied to focus computing and science education activities to the right age and abilities groups of students.;2018
"Crumble is an easy-to-use programmable controller. Its programming interface uses a block programming language that makes it easy for children above 10 to use. In addition, the hardware elements associated with Crumble are very intuitive and easy to connect. For this reason, educational robotics can be easily implemented thanks to the card connectors. The motors and servos can be managed by Crumble. Different sensors such as the ultrasonic distance sensor, infrared distance sensor and line sensor can also be connected. In addition, Crumble can handle up to 32 RGB (Red, Green and Blue) LEDs (Light Emitter Diodes) independently and with 24-bit color resolution. Robotics and computational thinking are ideal tools for developing science, technology, engineering and mathematics (STEM) pedagogy. Today, robotics training tools are raised with the aim of promoting innovation and motivation of students during the learning process. Robots are becoming more and more common in our daily lives; therefore, it is important to integrate robots into all levels of our society. This document presents a workshop that focuses on two main objectives. The first is to make an event to promote Crumble locally. On the other hand, the aim of this event is to present a robotic teaching tool so that people can take their first steps in the world of robotics. This workshop is aimed at those children and adults who want to discover the possibilities that Crumble brings in the introduction to robotics. An introduction to Crumble in the context of educational robotics is developed throughout this workshop.";2018
Data analysis for formal methods is constrained due to the lengthy dominance of the econometric view within economics. Best practice in statistics suggests a shift in emphasis from making statements about the sampling distribution of numerical data summaries to seeking data summaries that communicate well. The process philosophy perspective informing the original institutionalists and also evident in the tradition of Keynes is amenable to drawing from current developments in the field of statistics toward this goal. Compared to the econometric approach, it emphasizes data analysis over statistical inference, problem-solving over theory testing, and algorithmic over analytic mathematics. In the choice of tools made possible by current technology, it favors general purpose tools that are adaptable. It favors the instrumental efficacy of computational thinking, visualization, exploration, and discovery over the ceremonial aspects of the mathematical rhetoric of economics. It also encourages the attention to ethics and assumptions stressed by statisticians. Our aim is to provide an overview of the philosophical foundation and intellectual history of an alternative to the econometric view and to give some examples of how it might be applied to the data needs of formal methods for social economics.;2018
Data science keeps growing in popularity as an introductory computing experience, in which students answer real-world questions by processing data. Armed with carefully prepared pedagogical datasets, computing educators can contextualize assignments and projects in societally meaningful ways, thereby benefiting students' long-term professional careers. However, integrating data science into introductory computing courses requires that the datasets be sufficiently complex, follow appropriate organizational structure, and possess ample documentation. Moreover, the impact of a data science context on students' motivation remains poorly understood. To address these issues, we have created an open-sourced manual for developing pedagogical datasets (freely available at https://think.cs.vt.edu/pragmatics). Structured as a collection of patterns, this manual shares the expertise that we have gained over the last several years, collecting and curating a large collection of real-world datasets, used in a dozen of universities worldwide. We also present new evidence confirming the efficacy of integrating data science in an introductory computing course. As a significant extension of our ongoing work, this study not only validates existing positive assessment, but also provides fine-grained nuance to the potential of data science as a motivational educational element.;2018
Despite a growing effort to implement computational thinking (CT) skills in primary schools, little research is reported about what CT skills to teach at what age. Therefore, the research questions that guide this study read: (1) How is age related to students' success in computational thinking tasks? (2) How are computational thinking tasks perceived by students? (3) How do students' experience learning with respect to computational thinking? 200 primary school students between the age of 6 and 12 participated in this study. These students got introduced to two CT subjects: abstraction and decomposition. We found that age seems to be related with these concepts, with an interaction effect for gender in the abstraction task. No differences found between young and older students in the constructs perceived difficulty, cognitive load, and flow indicate that young primary school students can engage in learning these CT skills.;2018
Digital pedagogy is a learning paradigm that can allow learners to be active partners in discovering and developing their own mathematical knowledge. In this sense, Piaget's constructivist principles lay the foundation for developing digital pedagogy. In the paper that follows, we present a novel, intuitive, digital mathematical learning model. The model is focused on problem solving through computational thinking and is targeted to empower teenagers. More features and outcomes of this model will be discussed as well. As a foundation moving forward, the use-modify-create framework offers a helpful progression for developing computational thinking over time. It illustrates the benefits arising from engaging youth with progressively more complex tasks and giving them increasing ownership of their learning. The gained knowledge and skills of this cognitive learning both empower learners and enhance creativity. In its essence, we aim to develop the utopia of digital pedagogy in mathematical learning.;2018
"Digitalization is one of the most promising ways to increase productivity in the public sector and is needed to reform the economy by creating new innovation related jobs. The implementation of digital services requires problem solving, design skills, logical thinking, an understanding of how computers and networks operate, and programming competence. These abilities can be considered as coding skills. The aim of the study is to find and classify the different approaches and methods of promoting and learning coding skills. In addition, coding initiatives in Finland are analyzed both from both an historical and a present-day point of view. As a result, we identified three different approaches to learning coding skills: 1) in formal settings (schools within the curriculum); 2) in non-formal settings (online, after school clubs); 3) in informal events (hackathons, jams etc.). In many cases, schools are utilizing coding events and materials created by non-profit organizations, governments, or companies. Coding is also learned in after school clubs on robotics or by creating devices using cheap computing hardware such as the Raspberry Pi.";2018
Diverse initiatives have emerged to popularize the teaching of computing in K-12 mainly through programming. This, however, may not cover other important core computing competencies, such as Software Engineering (SE). Thus, in order to obtain an overview of the state of the art and practice of teaching SE competences in K-12, we carried out a systematic mapping study. We identified 17 instructional units mostly adopting the waterfall model or agile methodologies focusing on the main phases of the software process. However, there seems to be a lack of details hindering large-scope adoption of these instructional units. Many articles also do not report how the units have been developed and/or evaluated. However, results demonstrating both the viability and the positive contribution of initiating SE education already in K-12, indicate a need for further research in order to improve computing education in schools contributing to the popularization of SE competencies.;2018
During the last decade, coding has come to the foreground of educational trends as a strong mean for developing students' Computational Thinking (or CT). However, there is still limited research that looks at coding and Computational Thinking activities through the lens of constructionism. In this paper, we discuss how the knowledge we already have from other thinking paradigms and pedagogical theories, such as constructionism and mathematical thinking, can inform new integrated designs for the cultivation of Computational Thinking In this context, we explore students' engagement with MaLT (Machine Lab Turtle-sphere)', an online environment of our design that integrates Logo textual programming with the affordances of dynamic manipulation, 3D graphics and camera navigation. We also present a study on how the integration of the above affordances can promote constructionist learning and lead to the development of CT skills along with the generation of meanings about programming concepts.;2018
"During the last few years, there has been a growing interest in students getting engaged in digital game-making activities so as to enhance their thinking skills. The findings of studies that have examined the impact of such initiatives are quite positive, especially concerning the promotion of 21st century skills; however, many students seem to face difficulties in getting a deeper understanding of the game development life cycle. Additionally, students often have difficulties in meaningfully reusing and applying the concepts from various subjects, mainly mathematics and physics, into their game-making tasks or in understanding advanced programming commands while creating their games. The present study presents an innovative game-making teaching approach that suggests a series of steps for the systematic design and rapid development of motion-based touchless games, i.e., games that are based on natural user interaction technologies, like the Microsoft Kinect camera. Findings from evaluation studies in two (2) secondary schools indicate that this approach can increase student motivation, strengthen their computational thinking, enhance their understanding of geometric principles and improve their social skills.";2018
EarSketch is a curriculum and learning environment designed to engage diverse student populations in introductory computing courses through an approach that connects coding and computational thinking with the composition, production, and remixing of popular music. Prior studies at the high school level have shown significant impacts on student engagement and intention to persist in computing, especially for female students. This paper describes an adaptation of EarSketch for use in an introductory undergraduate-level programming course for non majors at an open-access four-year college. The paper describes a quasi-experimental study comparing student engagement, content knowledge, and intention to persist between course sections using EarSketch and non-EarSketch flavors of the curriculum, along with a path analysis exploring factors related to student engagement and intention to persist. The findings suggest that STEAM learning interventions such as EarSketch can significantly impact gains in student content knowledge, engagement, and intention to persist across diverse undergraduate student populations.;2018
Educational Robotics (ER) has revealed several benefits in the educational context, not only helping the teaching of disciplines, but also making possible the development of several abilities, such as teamwork, problem-solving, and creativity. Among various robotics kits, LEGO (R) Robotics has been shown one of the best results considering some evaluated criteria (modularity level, hardware, curriculum, price, etc.). Some studies analyze the teaching practices, some compare technologies, and others evaluate the kits in a pedagogical way. However, it is essential to investigate all these contexts together in order to improve the impact produced by the ER in education and to know the best teaching practices associated with the most powerful technologies. The objective of this Research Full Paper is to identify: a) environments and programming languages adopted in the LEGO (R) Robotics context, b) educational practices applied during classes based on LEGO (R) Robotics, and c) the educational levels in which robotics has been applied with positive results. To achieve these goals, we planned and carried out a systematic review of the literature. Our main findings are: a) the most widely used environment and programming language are LabVIEW along with the LEGO (R)'s block-based programming language, b) we identified LEGO (R) Robotics is used for teaching programming, interdisciplinary contents, participation in tournaments, robotics, and computational thinking, c) LEGO (R) Robotics is used with success by students of different levels, such as K12, undergraduate, and graduated. Finally, we discuss some problems and limitations related to ER and point out that there is no standardization of teaching practices or methodologies for evaluating results, indicating that more research is needed to find the best scenario regarding technologies, methods, and target audience.;2018
Educational robotics (ER) is an innovative learning tool that offers students opportunities to develop higher-order thinking skills. This study investigates the development of students' metacognitive (MC) and problem-solving (PS) skills in the context of ER activities, implementing different modes of guidance in two student groups (11-12 years old, N1 = 30, and 15-16 years old, N2 = 22). The students of each age group were involved in an 18-h group-based activity after being randomly distributed in two conditions: minimal (with minimal MC and PS guidance) and strong (with strong MC and PS guidance). Evaluations were based on the Metacognitive Awareness Inventory measuring students' metacognitive awareness and on a think-aloud protocol asking students to describe the process they would follow to solve a certain robot-programming task. The results suggest that (a) strong guidance in solving problems can have a positive impact on students' MC and PS skills and (b) students reach eventually the same level of MC and PS skills development independently of their age and gender.;2018
Educational robotics are increasingly appearing in educational settings, being considered a useful supporting tool for the development of cognitive skills, including Computational Thinking (CT), for students of all ages. Meanwhile, there is an overwhelming argument that CT will be a fundamental skill needed for all individuals by the middle of the twenty-first century and thus, should be cultivated in the early school years, as part of the child's analytical thinking and as a principal component of Science-Technology-Engineering-Mathematics (STEM) education. This study reviews published literature at the intersection of CT and educational robotics, particularly focused on the use of educational robotics for advancing students' CT skills in K-12. The reviewed articles reveal initial evidence suggesting that educational robotics can foster students' cognitive and social skills. The paper discusses specific areas for further inquiry by learning researchers and learning practitioners. Such inquiry should start from a widely agreed definition of CT and validated measurement instruments for its assessment. A practical framework for the development of CT via robotics is next in demand, so as instructional designers and educators can implement it consistently and at scale.;2018
Educational Robotics has proven a feasible way of supporting and exemplifying Computational Thinking. With this paper, we describe the user-centered iterative and incremental development of a new educational robotic system, BRICKO, to support tangible, social and playful interaction while educating children in Pt - 3rd grade in Computational Thinking. We develop the system through seven main iterations including a total of 108 participant pupils and their teachers. The methodology is a mixture of observation and interviews using Wizard of OZ testing with the early pilot prototypes as well as usability and user experience testing with the following incrementally improved digital prototypes. Our results for development and evaluation are presented for each iteration leading onto the next and describes the evolution of both the BRICKO driving robot as well as the BRICKO programming-board and its different categories of command-bricks. We discuss the methodologies used for assuring a playful and social educational robotic system and conclude that we achieved a useful prototype for supporting education in Computational Thinking.;2018
Educational robotics programs offer an engaging opportunity to potentially teach core computer science concepts and practices in K-12 classrooms. Here, we test the effects of units with different programming content within a virtual robotics context on both learning gains and motivational changes in middle school (6th-8th grade) robotics classrooms. Significant learning gains were found overall, particularly for groups introduced to content involving program flow, the structural logic of program execution. Relative gains for these groups were particularly high on items that require the transfer of knowledge to dissimilar contexts. Reaching units that included program flow content was also associated with greater maintenance of programming interest when compared with other units. Therefore, our results suggest that explicit instruction in the structural logic of programming may develop deeper transferrable programming knowledge and prevent declines in some motivational factors.;2018
Educational robots have been used in schools for STEM education and for teaching students programming and computational thinking (CT) for many years. The look and feel of traditional robots for educational purposes such as LEGO Mindstorms and NXT have been mostly engineering-oriented. Not until recently, have robotic products such as Dash & Dot utilized physical appearance which were cute and kid-friendly. This study compared the effects of using two kinds of robots-- Dash & Dot and LEGO NXT, in terms of students' performance, student's attitudes about learning activities, and how different genders respond to various robots. A Quasi-Experimental Design was conducted. The participants consisted of 106 6th graders from four classes of students. Two classes were designated as the experimental groups which used Dash & Dot robots,). The other two classes of students were the control groups which used NXT robots. With respect to students' attitudes toward learning, the study showed no significant difference between experimental and control groups. With respect to learning programming skills, it was found that females in the experimental group prefer to use robots. Females showed a definite preference for using the Dash & Dot robots.;2018
Engaging youngsters with ancient approaches in education, especially reading, grows ever tougher in the face of their attachment to tablets and PC games. In this paper, we explore the digital storytelling more interesting and memorable for children. Digital storytelling is recognized as a motivating instructional approach that engages learners in 21st century learning skills which will be essential to success in the future. Digital storytelling is one of the latest pedagogical approaches that can engage learners in computational thinking. Educators are in search of recent technologies and education approaches to engage students in computational thinking. Digital storytelling using MIT Scratch have the potential to meet this demand.;2018
For a number of years, education authorities have responded to the importance of school students developing computer literacy by including it as part of the school curriculum, directly as a cross-curriculum capability, and by assessing the extent to which students are computer literate. Computer literacy and related concepts, such as ICT literacy, are defined so as to include both technological expertise and information literacy. Assessments of computer literacy, even though they vary, indicate that there are substantial variations in levels of computer literacy among students in the lower years of secondary school. In technologically developed countries, approximately one half of Year 8 students demonstrate proficiency, or advanced proficiency, in computer literacy, but up to 10% have very limited computer literacy. Assessments of computer literacy can also provide the basis for progression maps that could be used to inform curriculum development. Those progression maps will be more valuable if the frameworks on which they are based become more strongly integrated with each other. In addition, computer literacy appears to be influenced by student background, including familiarity with computers, as well as the emphases placed on it in classrooms and schools and the support provided by ICT in education systems. At present, there is less information about school and classroom influences on computer literacy than there is about student background influences. In the immediate future, the construct of computer literacy may need to accommodate increasingly to changes in software and hardware contexts in which it is manifested.;2018
For a number of years, various games have been used as an educational tool at different academic levels, especially in primary education. However, only recently games that teach coding and algorithmic thinking or even broader, computational thinking, emerged. Initiatives like Hour of Code and similar online activities or block-based programming games popularized the field, while at the same time, projects like CSU nplugged showed that the idea of programming can be learned even without using the computer. In this paper, we present our experience so far in creating and implementing different unplugged activities that teach students of different age levels, from early primary school to the university students, the simple programming concepts and algorithms. As a part of Science, Technology, Engineering, Mathematics and Computer Science (STEM-C) outreach program named SUZA - From school to science and the academic community at University of Zagreb Faculty of Electrical Engineering and Computing, Croatia, we conducted a number of game-like activities based on graph paper programming, block-based programming and using the existing board games. Although this is a work in progress project, the participant reactions so far, collected through interviews and questionnaires, indicated that the conducted activities were well accepted by students and their teachers. We also received a number of useful feedback comments and proposals, such as to expand the activities to include the homework part, or to make them more physical and relocate them outdoors.;2018
For some years now, many teachers around the world have explored programming with their pupils in K-9 education. Research has shown that educational games of different kinds are often utilized by teachers as a mean for teaching programming and developing computational thinking. However, teaching and learning programming and computational thinking trough educational games is associated with a number of challenges. One of those challenges are related to that teachers are presented with an ever increasing amount of educational games, and not supported with tools that, one the one hand, can help them evaluate the didactical affordances and potentials of specific games so they can select curriculum appropriate games, and on the other hand, that can help them design and orchestrate game-based learning activities. It is against such a background this paper presents a framework for the evaluation and orchestration of game-based learning activities that fosters computational thinking. The framework consists of two dimensions, namely game mechanics and learning mechanics. These two dimensions consists of a number of aspects that teachers and researchers can take into account in order to evaluate and design activities, reaping the benefits of the didactical affordances of the games and the available scaffolding resources built inside games and available outside of them.;2018
Full paper, Research-to-Practice. With the nation's continuing shortage of scientists and engineers, there is an urgent need for diverse students, especially Hispanic students, to enter and complete science, technology, engineering and math (STEM) education at all levels. Contributing factors to the low representation in STEM areas are the lack of Hispanic youth's exposure to engaging and relevant experiences with science in their early stages of development and the lack of Latino scientists as role models that are visible, tangible, real, and inspiring to their communities. In addition, student experiences in math and science in the middle grades have emerged as a filter that prevents many students from pursuing advanced STEM courses in high school and, therefore, limits their knowledge of and interest in exploring STEM subjects and careers later in their education. This paper presents a research-based approach to attract middle school students to STEM fields in a majority Hispanic region, using a game-based learning platform. The platform integrates computational thinking in the area of water conservation at middle-school level by using simulations and data visualization in concurrent learning modules. The concepts introduced in the platform are universal enough to be successfully employed in other geographical regions with different student demographics.;2018
Game-based approaches can be a motivating and engaging way of teaching and learning, in particular for younger students. To evaluate the suitability of game-based approaches for teaching programming in primary school, we conducted a field study on Computational Thinking (CT). CT can be characterized as the ability to understand, formulate, and systematically solve complex problems, which typically requires abstraction, generalization, parameterization, algorithmization, and partitioning as processes of CT, which are also vital to programming. The employed CT course focused on fostering students' conceptual understanding of computational thinking independent of specific technological applications and was based on course material from code. org. Lessons primarily addressed algorithms as a core CT concept and used game-based learning material to increase students' understanding of algorithmic CT concepts such as sequences, loops, branches, and events. These concepts were first introduced through unplugged game-based activities using tangible everyday objects (e.g. pencils, playing cards, etc.) instead of abstract code. In more advanced lessons, students' conceptual understanding was applied and deepened through plugged-in programming exercises. The 18 sessions (45 minutes each) of the course were taught to 33 3rd and 4th grade primary school students. At the end of unplugged lessons, students' understanding of newly introduced CT concepts was assessed by short tests. Students' interest in and motivation for programming education was measured with pre-and post-course self-assessment questionnaires. Results indicated benefits of the unplugged game-based approach for teaching CT concepts. In particular, we observed (a) for all but one of the CT concepts, students reached on average 82% of the learning objectives or more, and (b) students rated their learning experience in the course positively and reported high levels of interest in learning more about computation-related topics. In addition, qualitative analyses indicated part of the curriculum was very complex for the target group (e.g. nested conditionals). This finding is of particular interest for the development and evaluation of future programming courses for primary school students.;2018
Game-based learning is an emerging field with learning games played for various learning objectives In different educational contexts. One context where several research studies have reported on positive outcomes is for programming education. In the wide variety of games for learning to program this study reviews games and gamified concepts that have been developed for K-9 students to learn basic programming with the aim to identify important factors to consider when using learning games for K-9 programming education. The study was designed and carried out inspired by the six step method described by Machi and McEvoy (2016). This type of literature study could be described as exhaustive with selective citation, with the aim of considering all the relevant sources, but only describing a selected sample. Findings show that there is a wide variety in the use of games for learning of basic programming concepts and also different game types. Through a thematic analysis best and worst practices in recent research have been grouped into categories, as well as a number of factors to consider when implementing game-based learning of programming in K-9.;2018
Having got to grips with the basic building blocks of programming, novice programmers must progress to more challenging concepts such as functions and recursion. To get the most from their programming journey novice programmers must attempt to bridge the gap between the solid foundation they have built and the more challenging programming concepts that will help expand their programming armoury. Functions and recursion can present a stumbling block for the novice programmer as they can be difficult to visualise, especially, recursion. The novice programmer can find it difficult to understand the flow of control of a program and this can be compounded by having to understand the backward flow of control of recursion. This unfamiliarity with recursive activities, like Alice, can lead the novice programmer down a rabbit hole of confusion from which they find it difficult to escape, shattering their confidence. The stumbling block for novice programmers is building a mental model of the program stack and subsequently identifying the backward flow of control from the last invocation of the recursive method. Novice programmers can find themselves caught in a web of code that helps little with their ability to understand this powerful programming technique. Hence, the ability to visualise such a technique could open the door to better understanding for the novice programmer. There are many computer games available which are designed to teach programming concepts using a visual interface, requiring the programmer to apply problem solving and computational thinking to derive a solution to the puzzle posed. Such programs offer a way to visualise abstract concepts such as recursion and offer a solution mechanism that does not require the novice programmer to implement their solution steps using a programming language. Offering a program language agnostic approach, the novice programmer, can build an understanding of the concept of recursion such that they should be able to develop an algorithm that could be programmed using any programming language. This paper will discuss an ongoing attempt to introduce functions and recursion to second year Game Design students undertaking a C++ game development module.;2018
Identifying engaging programming tasks to teach computational thinking and programming skills, especially to students of post-secondary education, is a challenging problem for lecturers. Physical computing is a potential solution that provides ample opportunities for creative development of such skills. The availability of pre-assembled physical computing tool kits often do not offer the right level of abstraction and flexibility to suit educator's needs. Consequently, this paper presents the design of a custom physical computing tool kit, T{h}inker, primarily for learning and teaching computational thinking and programming skills. Prior to design discussions, the context and motivation behind designing T{h}inker has been presented. Preliminary pilot deployment sessions of T{h}inker for both teachers and students confirm its potential as an effective tool for both teaching and learning of thinking skills.;2018
If computational thinking is really a fundamental skill for all humans, we need to know the best way to nurture this type of pupils' thinking. One interesting approach is to use algorithmic competitions. Although problems in them are often difficult and exceed contents of high school curriculums, we believe that they explore interesting parts of computer science and when appropriately modified, they can be used in high school lessons. In this paper, one task focusing on the topic of binary search trees from middle school competition was chosen. Participants' solutions to this task were collected, analysed and based on this analysis, this task was modified by adding easier subtasks, to fit a high school lesson. This activity was then tested with two groups of high schoolers during their regular computer science classes, and with one group of high schoolers consisting of participants of summer programming school. In this paper, our preliminary results are summarized. Modifications done to the problem and reasoning behind them are outlined, most noticeably the addition of easier subtasks. At the end of the paper it is concluded that the students did not have any problem with orientation in this structure, but rather with generalization and formalization of their solutions. Keywords: Binary search trees, competition, high school, informatics.;2018
"In 2008, Portugal joined the global network of tracking stations of the European Space Agency (ESA), with the Satellite Tracking Station on the island of Santa Maria-Azores. Since 2011, Azorean secondary education teams have won some national and European competitions for the CanSat educational project (literally satellite in a can) promoted by ESA. In Portugal there are no studies on problem solving in educational space technology projects such as Cansat. The Azorean team participating in the study won the Cansat national and European in 2016. CanSat translates the construction of a minisatellite launched up to 1000m that provides data by telemetry in its fall. How can problem solving be solved in secondary level students within the framework of the CanSat space technology project that takes place in a collaborative and non-formal environment? Methodology: Instrument validation by a senior researcher and two teachers of secondary education. Case study with four secondary school students guided by a teacher at Cansat Acores-2016. The students were between the ages of 17 and 19. The coordinating teacher had 20 years of service and experience of participating in projects. Qualitative techniques of data collection and analysis: Phase I-In the course of project development Semi structured interviews with students and the coordinating teacher; Questionnaire to students and teacher; Direct observation during problem solving activities (November 2015-April 2016); Phase II After project completion-Semi structured interviews to the students and the coordinating teacher, questionnaires to the students; Direct observation of students in the national and European competitions (May-July 2016). For the analysis of problem-solving data, the study used the categories described in the literature, but given the specificity of the study, some categories emerged from the analysis. Results: Strong motivation of the students, the teacher, the participating school and the parents on the development of CanSat. Advantages of cooperative / non-formal and competitive context. Students use complex strategies to process information, namely they research on the Internet, analyse and synthesise relevant information, and use important theoretical knowledge to give meaning to the information collected. Cognitive testing, cognitive organisation, cognitive regulation and monitoring, in addition to physical-mathematical calculations, are cognitive and metacognitive behaviour strategies revealed in problem solving in the CanSat project. Problem solving reveals dimensions beyond the traditional trial error, suggesting a specific model, where students' higher cognitive and metacognitive ordering processes deepen in project development. Computational thinking, lateral, divergent and convergent thinking were detected as thinking types of students associated and mobilized in the course of problem solving. These aspects are comparable to the complex thinking present in scientific investigations. It is a project that can successfully infer some didactic implications for the teaching of science in a collaborative and non-formal context. The results of this study recommend the introduction of problem solving project's space technology, or even robotics and drones, in order to promote meaningful learning that reduces the barrier between school walls and real life, through learner practices that are more anchored in success factors and metacognitive strategies.";2018
In a time when digital technology is used not only in schools but also in other institutions, everyone is expected to be digitally competent, information and communication literate and be capable of computational thinking. The question is how to develop these skills, and at what educational level they should be developed. The goal is to change the perception of informatics, i.e. to encourage students to analyze information and solve problems step by step, i.e. algorithmically. As a result, students should be able to apply the acquired skills not only in other school subjects, but also in everyday life. We can start with children by teaching them to think algorithmically in a fun way, using various tools and programs such as the Bee-Bot robotic toy, Ozobot or LighBoth and Scratch Junior programs. The paper is aimed at those tools, i.e. tools used for developing computational and algorithmic thinking. It describes the individual tools and explains how they can be effectively used in instruction.;2018
In contrast to the field of computer-supported or computer-assisted language learning (CALL), which has been investigated intensively for the last decades since the beginning of e-learning and technology-enhanced learning, computational thinking and computer science concepts are not quite common in the context of language lessons. Computational thinking is a problem solving process that, at first sight, has not much to do with language learning. However, as demanded by Jeannette Wing in 2006, it should be taught to everyone like reading, writing and mathematics. By introducing computational thinking in language lessons e.g. through modeling we could kill two birds with one stone: On the one hand, we can teach computational thinking and basics of computer science at all school levels even if there is no related subject, e.g. in primary schools. On the other hand, computational thinking tools like modeling can support language learning in different ways and help to train text comprehension, to acquire and elaborate vocabulary or to visualize grammar rules etc. This paper describes some creative possibilities of introducing computational thinking through modeling in language lessons in primary and secondary education. Besides best practices, it further presents some experiences and results gained from teacher observation, interviews and informal feedback from students and teachers.;2018
In Mexico there are very few studies on the effect of educational programs in the area of computing at the basic and medium level. However, a study on the use of educational software in primary schools [Salinas, 1998] confirmed that the development of computational thinking skills through educational software programs is unsatisfactory in primary students at the public level, since the activities in the computing area are more focused on learning to acquire information, rather than developing their computational thinking, as it is almost non-existent the teaching of programming. In 2014, the Institute of Innovation and Technology Transfer and the Tec de Monterrey (ITESM) made an adaptation of the Scalable Game Design (SGD) from University of Colorado and the research group of Alex Reppening, to develop a pilot project in Nuevo Leon, which was applied in the Computer Science Education Week 2014. SGD contains a set of projects in simulation and games that allow the gradual increase in computational thinking skills to the participants. In 2015, the Scalable Game Design Project was formally implemented: Chic@s Code, an innovative project that develops logical thinking in a fun way, by integrating girls and boys from primary and secondary school, regardless of their origin or previous experience in activities of video game programming. The objective is to introduce methodology and systematic teaching of computer science, besides motivating the interest in science and technology, boosting participation of the students in other activities, such as the State and national Science Fairs and the Computer Science Education Week. The metrics managed to measure the impact in girls and boys are based in the Number of Children Trained in Programming Tool (NCHP), one is the Short Term version (NCHP-ST), and other is the Long Term version (NCHP-LT). The NCHP-ST activities are carried out during the year at events such as Tec-Monterrey's Semana-i, the B-Tec event, Hour of Code, in which students perform an activity of approximately four hours, designing and programming of the Frogger game online or use the autonomous version Agent Cubes 2.5 where schools were attended or received at Tec de Monterrey facilities. The NCHP-LP activity takes place from August to November, directly presented by the teacher assigned to the group by the Ministry of Education, previously trained in the technological and pedagogical tools to implement Chic@s code, and advised by a Tec de Monterrey professor. By 2017, 17,017 students, 5,022 (NCHP-ST) and 11,995 (NCH-PLT) were trained under the program. The contributions demonstrated by the project over 3 years of implementation are: a) Systematically develop computational thinking in a large number of children, b) Retention of children's attention when using the SGD program, c) Evaluation with computational instruments of learning outcomes and d) Training for teachers using new methods of teaching computer science.;2018
In our time human depends to solve his problems on the machine and the technology, however, there is a gap between the human thinking and the implementation of these ideas in the machine. From this point we try, in this article, to find a common language between machine and human thinking, that is to say the use of the concepts of computer science to solve problems. We propose in this study a new methodology called Algo-think Approch serving as a bridge between computer processing, practice and human activities;2018
In recent years there has been a marked interest in the development of computational thinking (CT) at different educational levels. Computational thinking is a skill that everyone should develop. It is a skill that does not focus only on the Information Technology area - it involves a method for approaching problem solving where problems are represented as an information process with an algorithmic solution. Computational thinking is an approach that involves the development of metacognitive skills in students by acquiring the ability to break down problems into small parts in order to solve them by means of a computer. It is considered to be part of the intellectual heart and soul of 21st century science and, therefore, is one of the essential skills of the 21st century workforce. AstroCode is a serious game, aimed at introducing players to basic programming concepts and skills and bringing them closer to computational thinking. The game has 3 basic components: 1) the website from where the game can be downloaded and users can register, 2) the game in Story Mode and Custom Mode and 3) a tool for creating custom programming scenarios. In the past year, we carried out several experiences with AstroCode. In particular, this paper presents the experience with the pre-entry course to the School of Computer Science of the UNLP. In general, the students in this course have different approaches to computational thinking. The possibilities of AstroCode were studied to help them during the first stage of their development of computational thinking skills. For this, a methodology of contrasted groups was applied, where 3 groups of students of the pre-entry course used AstroCode during the first week, while all other groups followed the traditional practice of using print-out materials with exercises. After the first week, all groups continued the course with the same methodology. The results obtained from this experience and the main conclusions are analyzed and presented here.;2018
In recent years we are witnessing movements around the world to bring computer programming to schools. Lots of these initiatives, however, have been conceived to address the shortage of professionals in the technology sector, an approach that is encouraged by the software industry. On the contrary, this article argues that the focus should swift towards computational thinking, an ability that goes far beyond computer science or technology, fostering fundamental skills for the citizens of the twenty-first century. In this paper we summarize the findings of recent investigations that study computational thinking from different perspectives, explaining what this new skill is made of, presenting outcomes of school interventions showing relationships between the development of this ability and improvements in different subjects and soft skills, presenting technologies to foster its development, and reviewing tools that support educators in the assessment of this skill.;2018
"In recent years, engineering education has become one of the challenging issues in Thailand education. By teaching and learning subjects independently, students are limited to subject-oriented problems, which are not in reality. To address these flaws, integrating knowledge across disciplines becomes significantly necessary. In the past years, STEM has been accepted as one of the effective strategies to bridge the difference in nature of each field to construct more practical projects and innovations. Moreover, the educational robot can be employed as a learning tool in that strategy since it not only provides challenging learning missions but also promotes computational thinking for the students. Therefore, this research study proposed STEM learning activities on three-day workshop to lay out the foundation to the high-school science-and-technology students who are becoming the engineering students. The workshop comprises of eight phases to facilitate their learning inquiry process with hands-on experience; moreover, the activities were designed in consideration of promoting computational thinking with challenging learning missions. The findings of this study showed that the proposed workshop activities are beneficial for the students who outperformed on robotics with higher computational thinking; meanwhile, they could provide more relevant responses regarding the proposed learning activities.";2018
In recent years, many developed countries have addressed computing education in primary or secondary education. Potential benefits for students in these educational stages and for the society are great, existing a wide range of approaches to such a computing education. The Spanish Computing Scientific Society (SCIE), with the support of the Spanish Board of Deans of Computing Schools (CODDII) created in September 2017 a working group formed by experts in either computing or computing education with the goal of elaborating a report with specific recommendations about this issue for the Spanish government. The report was issued in July 2018 and recommends, in conformance to Spanish educational laws, to establish a matter called Informatics. This matter would preferably be implemented as a mandatory course offered from primary to secondary education. The course contents comprise six areas: programming, computers and operating systems, networks and the Internet, data, digital content, and security. The course would include issues of both digital literacy and computing as a discipline, with digital literacy contents based on the European DIGCOMP framework.;2018
In Singapore, O-Level Computing for grade 9 and 10 students was first offered as part of formal education in 2017. Due to a lack of computing teachers, the initial batches of O-Level Computing teachers were professionally developed from those who were already teaching other subjects such as math and science via a conversion course conducted by the Ministry of Education, Singapore. Beyond merely teaching about computer programming, the teachers would need to be trained to teach Computational Thinking (CT), as CT has many practical applications in real-world problem-solving. Therefore, it is imperative to understanding more about in-service teachers' perceptions about CT when they were converted into computing teachers from other subjects. In the current paper, we proffer unplugged approach that could be deployed for teachers to develop notions and confidence about Computational Thinking, which could have implications for teacher professional development at a larger scale.;2018
In the context of Computer Science (CS) education, one of the most important goals is the development of computational thinking (CT) and problem solving skills. Computational thinking skills are closely related to the CS concepts and approaches. These skills cover fundamental programming concepts such as task decomposition, abstractions and generalization, data structures and algorithms. On the other hand, CS education challenges, promote the search for new educational tools, methods, activities and resources. Consequently, CS education should be extended by adding the STEM (Science, Technology, Engineering and Mathematics) paradigm principles. The aim of this paper is to show how STEM-driven CS education supports and ensures the development of computational thinking at the high school. We present the already published STEM-driven CS education approach aiming at extending it by introducing a model to assess student achievements, according to the revised Bloom's taxonomy in the connection with CT skills. As a practical implementation, we describe a curriculum of Programming Basics at the high school with respect to STEM-driven aspects and CT skills. We introduce two case studies implemented in the real educational environment. They provide the evidence of availability of our approach.;2018
In the Fate il vostro gioco project, students in the last year of an Italian primary school have been involved in a game making activity, using Scratch. The aim of the project was to define guidelines for teachers to help them design a series of lessons aimed at developing basic computational thinking skills. According to the learning by doing approach, students learn through an active participation in project-based activities, allowing them to make new connections and generate new ideas. In the first phase of the project, an introduction to coding with Scratch was carried out. In the second phase, students, divided into groups developed a game according to the requests of a client, related to game characteristics and the type of game. Each group chose the game they wished to develop among a restricted number of possibilities. At the end of the project, a presentation was organized involving families, other classes and teachers. Scaffolding was provided to all groups according to their needs: examples of complete games were shown, the game elements were identified and, in some cases, a closer guidance was given. A lesson involving the whole class was devoted to solving some of the most difficult issues related to the development of some games. Big differences with respect to students' abilities and level of independence in managing their work was detected. Qualitative data was collected during each meeting: two trainee teachers observed the students working in groups, and students were asked to fill in a diary after each meeting, stating their opinions, problems, plans, etc. Based on the collected data and the problems that arose, guidelines for primary teachers wanting to design an intervention aimed at game making for their class are being produced. These address the organization of the groups and of their work, indications for the observations as well as the level and type of scaffolding to be offered according to the planned activities and the students' needs.;2018
In the last few years, there has been a groundswell of programs to support more and better computer science (CS) education in K-12. A large number of organizations and institutions including ACM, Code.org, CSTA and the National Science Foundation (NSF) have worked to make CS more available and engaging and in this way increase the CS into post-secondary CS programs. NSF's CS10K initiative, for example, aimed to have rigorous, academic curricula incorporated into computing courses in 10,000 high schools, taught by 10,000 well-trained teachers [3]. These initiatives have energized the education world and have resulted in sweeping changes in the way that computing is being taught at in K-12. Examples include the College Board's CS Principles Course [1], the Beauty and Joy of Computing [2,4], UTeach CS Principles [5, 41], and Mobile CSP [6, 7]. These courses are attracting a broad and diverse collection of students to computing and teaching them basic computational thinking skills. To date almost all efforts to broaden computing education have focused on students at the K-12 level. As these more computationally literate students enter college they will expect the same relevant and meaningful educational experiences that they have had during their K-12 educational career. This new generation of students, who have a deeper understanding of computing, will require introductory courses that engage, excite, and retain them. The higher education community has a rare opportunity to change the content of introductory courses and the pedagogy used in these courses. The design of introductory course experiences can now leverage the high level of computational sophistication of incoming students and integrate computation, appropriate to the discipline, from the very start of a student's educational career. While computing departments will be impacted the most, it is a mistake to think that only computing departments will be affected. All higher education programs, both STEM and non-STEM, need to rethink and redesign their core curricula to accommodate these students and develop new content and pedagogical approaches that leverage the knowledge set brought in by these students. Unless higher education rethinks and retools the way in which students are taught in the first year of their college experience, the potential gains in diversity and depth of coverage that has been fueled by these initiatives will not be realized. This panel will explore post-secondary CS education in a post AP CS Principles world. It will examine the impact recent K-12 CS developments have had on student knowledge, skills, and expectations, focusing specifically on ways in which incoming students are likely to change as CS becomes a staple in pre-college education. It will introduce participants to pedagogy being used in K-12 classrooms to teach the course and introduce strategies that higher education institutions are undertaking prepare for the students who have taken these courses. The session will conclude with a discussion session that will focus on strategies that participants can use to adopt similar models at their institutions.;2018
"In the last two decades, educators have been following the terminology of Computational Thinking first posed by Wing. Different viewpoints and commentaries have been adopted, and accordingly course syllabi and learning materials were developed, particularly for K-12. The field has become a mandatory part of the curriculum in various countries, even for preschool age. The paper presents an academic course for pre-service teachers with the main aim to facilitate and instruct students in the process of building their understanding and interpretation of Computational Thinking, in the context of teaching their own discipline. The course pedagogical approach emphasizes the adoption of Computational Thinking while identifying significant, non-trivial, computational processes in different disciplines. The course model was implemented with three pre-service teacher populations studying for their teaching certificate in: (1) sciences for high school; (2) humanities and social sciences for high school; and (3) various disciplines for elementary school. The course allows future teachers to experience for themselves learning activities that are recommended for implementation with their future students. The course pedagogical approach and rationale are presented, followed by detailed course structure and learning assignments. The teaching, learning, and assessment approach yielded impressive achievements, although not without obstacles and difficulties. The details of the course presentation enable its implementation with different populations of pre-service and in-service teachers, and can also be implemented in schools.";2018
In the last years, many didactic activities have been proposed to develop Computational Thinking (CT) skills in children and adolescents. Among these activities, the digital game programming stands out as a promising alternative considering that it is related to a familiar and motivating context for students. These initiatives are not specifically aimed at individuals with special needs such as the autism spectrum disorder (ASD). Children and adolescents with ASD usually have some limitations related to communication, cognitive flexibility, and interpersonal relationships. However, it seems natural that the skills potentially developed through game programming activities are especially beneficial for the public with ASD. In this paper, we describe the offering and evaluation of a Game Building Workshop adapted to adolescents with this condition. The guidelines used to define the workshop activities are described. An assessment based on the classroom observation and analysis of produced artifacts indicate that the participants acquired CT skills related to programming at a high level. In addition, the collaborative nature of the activities offered a stimulating and welcoming environment for individuals with ASD.;2018
In the light of the involvement of information and communication technologies, Teaching the concepts of computer science, programming and algorithms has become necessary. We study in this article the approach of computational thinking and then we develop this approach through a descriptive methodology based mainly on the specification and algorithms and achieve the concepts of computational thinking called Relational Algorithmic thinking Approach and highlight the effectiveness of this methodology in education.;2018
In the second decade of the 21st century, we see the proliferation of cloud computing, Internet of Things/People, and big data/analytics, and the rejuvenation of Artificial Intelligence, robotics, virtual realities and augmented realities, etc., which have triggered the trends of building smart nations, smart cities, smart offices and smart homes all over the world. Such a trend has also shown its influence in the learning technology field where scholars and developers have begun to adapt and synthesize such state-of-the-art technologies to construct smart learning environments and tools. Notwithstanding, it is the time for us to take a step back and reflect upon-in the era where even intelligent robots could sit in high-stakes examinations and perform better than most of the human students, what kind of smart students and smart citizens do we really need and want to foster? What kinds of smart learning environments do that we need to develop to achieve the stated aim? What are the underpinning educational principles that the designers of such environments should adopt? This panel aims to bring together scholars who have worked in specific learning technologies or technology-aided pedagogies to co-identify the human-oriented (rather than technology-driven) objectives of the smart learning wave, and to possibly relook or even re-define the notion of smart learning.;2018
In this article we examine key issues and tensions for developing and specifying Computing-related elements of curricula design, particularly the role of Computer Science in the curriculum. The article is based on a series of discussions and analyses of curriculum design across various countries with different approaches and traditions of Computing in the curriculum.;2018
"In this article, we investigate the artistic puzzle of designing mathematics experiences (MEs) to engage young children with ideas of group theory, using a combination of hands-on and computational thinking (CT) tools. We elaborate on: (1) group theory and why we chose it as a context for young mathematicians' experiences with symmetry and transformations; (2) our ME design principles of agency, access, surprise and audience; (3) the affordances of CT that complement our design principles; and (4) three ME variations we tested in grades 3-6 classrooms. We then reflect on the ME variations based on our design principles and the affordances of CT, and consider how the MEs may be further adapted and improved.";2018
In this article, we present DBugs, a large-scale physical tool designed for school children to learn computer programming. DBugs was designed to support the social aspects of classroom learning. In user two studies we found DBugs supported collaboration between students as the large-scale tangible cubes meant each student found a role in the group work. We also found that with the larger size of artefacts the individual students' actions became public and this promoted communication and collaboration between the group members for a successful outcome.;2018
In this panel, there will be presentations by panelists from different countries/regions on their experience in practicing and promoting computational thinking education (CTE) in their own countries/regions. The aim of the international forum is to share the insightful experience and good practices, as well as spell out the worth-noting challenges encountered during the implementation of CTE in K-12. According to the experience of the project CoolThink@JC in Hong Kong, there are lessons learned in the aspects of curriculum development, teacher development, teaching assistant development, school leadership, and parental education. A national/regional strategy is genuinely needed for addressing these aspects in the promotion and implementation of a promising CTE in K12. This panel will serve as an international forum for a discussion about national/regional policies on CTE in K-12, with the major concerns on an actionable curriculum in programming education, a short-/long-term teacher development plan, a sustainable parent education campaign, and a social consensus from the whole nation/region with determination to promote CTE for nurturing the competitiveness of next generation.;2018
In this paper we describe the special case of an informatics curriculum implemented in a primary school, and the observed learning outcomes. The particularity of this curriculum is based on both the variety of the contents and on their apparent complexity. The children experienced different programming languages, including one text-based, and became confident with many educational robotics kits such as Lego WeDo, MBot and Arduino. During this path, children appeared strongly involved also in dealing with complex challenges and seemed to have developed their mathematical thinking. In particular, even if they had never worked with the formal structures of algebra during the math classes, children appeared confident with the concept of variable found in programming. For this reason, we decided to investigate whether these competencies applied even to mathematics, using a well-known national test developed to gauge the level of skills and selecting some questions related to algebra and designed for 8th grade students. The results that emerged were encouraging, suggesting that informatics could be useful in reinforcing algebraic thinking and introducing some mathematical concepts particularly complex for many students, such as variables.;2018
In this paper we report the work that jeKnowledge (Junior Empresa da Faculdade de Ciencias e Tecnologias da Universidade de Coimbra), a student-led initiative, has done in the 'jeKnowledge academy' courses to actively engage Portuguese high-school students in STEM education through hands-on projects based on the low-cost Arduino platform. F2F activities, based on a peer-assisted learning strategy, were complemented with tutorials and more advanced project suggestions in a blog. Pre and post surveys on students' attitudes towards programming and peer-coaching were administered to pre-university and first year college participants, finding an overall increase in the Likert scale for all the programming-related constructs under study (confidence, interest, gender, usefulness and professional) after the introductory course. As regards the peer-based learning approach, younger students seemed to be more eager to be taught in a less formal way than their older counterparts. The course resulted in high degrees of satisfaction for both the student tutors and their tutees. (C) 2017 Elsevier Ltd. All rights reserved.;2018
In this paper, we deliver insights into our work with the Calliope system. We underline the usefulness of the Calliope system and its positive characteristics relating to an evaluation we did with 50 pupils in German schools. Additionally we report about the learning scenarios we conducted and illustrated how the learning of the IFTTT conditions and according to that Computational Thinking skills can be taught during school lessons by using computational devices like the Calliope mini.;2018
In this paper, we explore the possible contribution of game modification (or modding) process to the development of Computational Thinking skills by discussing the design of ChoiCo (Choices with Consequences), an online digital environment for game creation and modding. ChoiCo integrates three different affordances for designing its games: a map-based (GIS) game scene, a simplified database and block-based programming editors. We also present a pilot study in which Junior High School students used ChoiCo for creating mods of a given digital game, based on a three-step modding scenario.;2018
In this paper, we present a browser-based, visual and media-rich programming platform for K-12 schools that allows novices to create complex 3D shapes. This provides an easy way for designers, architects, and artists to imagine the development of an object. The word computation has received increased attention in today's world because of its applicability in all fields. This tool is very helpful for the user who doesn't have prior programming knowledge and they want to learn and apply the computational concepts as part of their design process. 'Building-Blocks' is a graphical programming language used for generation of 3D structures using computational algorithms. This helps to create personally meaningful projects: designing a model, getting the physical object from a model, sharing ideas and project activities with others in Building-Blocks community.;2018
In this paper, we propose that paper circuitry provides a productive space for exploring aspects of computational thinking, an increasingly critical 21st century skills for all students. We argue that the creation and operation of paper circuits involve learning about computational concepts such as rule-based constraints, operations, and defined states. Moreover, paper circuitry materials are low cost, provide a low threshold to entry, and draw upon the familiarity that already exists with respect to paper as a hands-on and interactive medium. Paper circuitry thus provides multiple points of entry for students who are unfamiliar with computational thinking ideas while also supporting creative, artistic and crafting activities. It also provides an important alternative to the typically steep learning curve associated with learning a programming language. We define paper circuitry and associated technologies, show how they afford key dimensions of computational thinking, and present examples of paper circuit projects created by students.;2018
In this study, it was aimed to determine in which level science teachers use argumentation in their science classroom. Case study was used as a research model. This study has been carried out in a province in Aegean Region with a participating group that consists of 6 volunteer science teachers. In order to collect data, the observation form which is consisted of 24 items was used to decide in which level teachers' using argumentation and intervention form consisting of 13 questions about argumentation were used. According to results of the study, science teachers did not commonly use argumentation. In the light of the interviews, it was seen that most of the teachers did not have any real qualifications about argumentation, the concepts in argumentation and the activities used in argumentation.;2018
In this study, we investigated the debugging process that early childhood preservice teachers used during block-based programing. Its purpose was to provide insights into how to prepare early childhood teachers to integrate computer science into instruction. This study reports the types of errors that early childhood preservice teachers commonly made and how they debugged the errors. Findings are discussed in relation to research and practice that could benefit from debugging instruction. This study provides directions for future computer science education research that aims to prepare teachers for programming, computational thinking, and STEM education. Though this study used robotics as a programming context, findings on early childhood preservice teachers' debugging processes could be applicable to other contexts involving block-based programming.;2018
Incorporating computer programming exercises into introductory physics is a delicate task that involves a number of choices that may have an effect on student learning. We present a hybrid approach that speaks to a number of common concerns regarding cognitive load which arise when using programming exercises in introductory physics classes where many students are absolute beginner programmers. This hybrid approach provides the student with a highly interactive web-based visualization, not unlike a PhET or Physlet interactive, hut importantly the student is shown only the subset of the code where the initial conditions are set and the system variables are evolved. We highlight results from a coding activity that resembles the classic game Asteroids. The goals of this activity are to show how a simple ID code can be modified into a 2D code, and to reinforce ideas about the relationship between force, velocity, and acceleration vectors. Survey results from four semesters of introductory physics classes at the Ohio State University's Marion campus, in which a high percentage of the students are weak or absolute beginner programmers, provide evidence that most students can complete coding tasks without severe difficulty. Other survey results are promising for future work where conceptual learning will be assessed in a direct way using metrics like the Animated Force Concept Inventory [Dancy and Beichner, Phys. Rev. Spec. Top. Phys. Educ. 2, 010104 (2006)]. The exercise highlighted here and others from our group are available for general use at http://compadre.org/PICUP. (C) 2018 American Association of Physics Teachers.;2018
Increasingly human interaction with technology and the increasingly complex development of digital technology world make the theme of computer science education interesting to study. Previous studies on Computer Literacy and Competency reveal that Indonesian teachers in general have fairly high computational skill, but their skill utilization are limited to some applications. This engenders limited and minimum computer-related learning for the students. On the other hand, computer science education is considered unrelated to real-world solutions. This paper attempts to address the utilization of NCLab-Karel in shaping the computational thinking in students. This computational thinking is believed to be able to making learn students about technology. Implementation of Karel utilization provides information that Karel is able to increase student interest in studying computational material, especially algorithm. Observations made during the learning process also indicate the growth and development of computing mindset in students.;2018
Information technologies are the base of the world infrastructure. In this social context, education, like any productive or service sector, is affected by technology. Faced with this reality, educational systems must prepare our young people to live in the digital world, for which they must be proficient in a new language without which they will become digital illiterates. Therefore, in school we should not only train in linguistic and numerical literacy, but also in digital literacy. So far, the effort has been oriented mainly to convert our young people into users of computer tools. This has gone from being necessary to being insufficient, because the use of software applications means to manage a digital language that is obsolete in a time that is not proportional, in effort, to the time that has been invested in acquiring these skills. Therefore, the challenge is to prepare our young people to face the world in which they live, giving them the necessary cognitive tools to succeed in the digital world. That is, instead of teaching students only the syntax of a changing language, they should be instructed in the rules that allow them to know how the digital language is constructed. Thus, computational thinking emerges as a paradigm of work, and the programming is stablished as the tool to solve problems.;2018
In-spite of facilities and ambiances available in an organization, novice students often face challenges to develop a right attitude and framework for productive learning. Through a case study in our university, we explore some difficulties and challenges faced by the freshers to strengthen and enhance their learning skills. We focus on generating questions from trivial to nontrivial level in a systematic way to explore the learning patterns. We propose a learning model, which we popularly call as What-Why-How (WWH) model, for providing a framework to strengthen learning skills. Computational thinking will be a fundamental skill, which can be used by everyone in future to strengthen and enhance learning. It is a thought process that involves formulating problems so that solutions can be represented as computational steps and algorithms. In our work, we integrate the computational thinking approach in our proposed WWH model of learning and develop a novel framework to resolve some of the challenges associated with learning skills of freshers in educational institutions.;2018
Interest in studying computer science has been extended to children. However, it is unclear which educational method should be used. Teachers need help to tackle this task. Therefore, this paper proposes using metaphors, such as recipe/program (and sequence), pantry/memory, and boxes/variables. It also illustrates the possibility of applying these metaphors to any resource available to the teacher. Four step-by-step scripts of how to use the metaphors in class are provided, with the opinions of sixty-two children (enrolled in grades fourth, fifth, and sixth of Spanish Primary Education, 9 to 11 years in age) and their teacher's opinion.;2018
Involving computer programming in primary and secondary school is an urgent issue in many countries, and in Sweden this should be rapidly implemented during 2018 and 2019. First subjects that should implement programming in the teaching and learning activities are mathematics and technology. Some teachers have earlier experiences of programming, but for many primary and secondary school teachers programming is a new discipline. The aim of this paper is to describe and discuss how requirements have been gathered and implemented in a course for teacher training on programming for mathematics and technology in K-12 education. The study was carried out as three phases of a development process inspired by design science. In the first phase the main problem was formulated, and in the second phase requirements were gathered and discussed in a brainstorming workshop were the course developers tried to align learning outcomes with suitable didactic ideas. In the third phase the requirements from the first phase were implemented in the actual course development. Conclusions are that the idea of teaching the teachers needs a different course outline than how traditional design of programming courses. Higher education has a tradition of training students for system development in the industry. Teacher training should have a focus on didactic concepts that later could be reused in courses on mathematics and technology in K-12 settings. Examples of such didactic concepts are, computational thinking, pair programming, visualisation and game-based learning. Important also that teachers taking the course should produce material that can be useful in their future daily teaching.;2018
It is now required for teachers to incorporate computational thinking (CT) into their science classes. Our research modifies the existing structure of a science methods course for preservice teachers to include CT via modeling and simulations. In the first study, preservice teachers were introduced to the basics of coding through an Hour of Code tutorial, followed by an exercise where they programmed an animated model of the solar system using Scratch. In the second study, we created a web-based simulation to visualize Newton's second law of motion (F = ma) with a dynamic graph feature. The simulation is a race between two cars with interactive settings that the user can change, such as changing the mass and force of each car. Results from both studies reveal that after completing the exercises, preservice teachers learned the material effectively, felt that CT exercises would be beneficial in K-8 education, and plan to incorporate CT into their future classrooms.;2018
It is widely accepted that computer foundation course will benefit from the research and application of Computational Thinking in China. It is in fact that most research work in Computation Thinking have served for students but much less for teachers. College teachers in China took less systematic training in order to adequately prepare them for increasingly higher teaching requirements. To address this issue, this paper first proposes an outcomes-based teacher education program distinguished from CT principles under teaching and learning perspective, decomposed an abstract computational thinking idea into a definite coursework content. This paper then describe an outcomes-based evaluative frame which supports teachers to ensure a successful application of CT theories and concepts into practical skill development. Results from practice showed that the current research work is effective and widely accepted for which evidence is also provided.;2018
Learning Computational Thinking concepts by all has gained quite importance in last years. Scratch is also one of the most used products to promote it worldwide. Yet, most teachers face difficulties when using it in the classroom with their students. With this idea in mind we developed and run a distance education course under the Project of Distance Education of the University of Coimbra specially designed for elementary school teachers to learn both Computational Thinking concepts and Scratch via an e-learning course using Moodle as a Learning Management System. In this paper we describe this first experience of teaching and learning online, the results obtained and also our future work about this course. Results of this first experience showed that it was possible for the trainees to learn Computational Thinking concepts and Scratch programming and also to develop useful products for their classroom practice using this modality of teaching and learning. As such, a second edition of the course is already planned to take place shortly. (C) 2017 Elsevier Ltd. All rights reserved.;2018
Learning to program is difficult and requires a lot of work, dedication, and training. The difficulties of teaching and learning programming are a cause for concern for everyone where this subject is needed. It is a universal problem. The theme of teaching and learning programming difficulties is a serious problem not only for the important concepts underlying and structuring the course, but also for the lack of motivation, the failure, and abandonment that such frustration may imply for the student. It is important to act quickly. The follow-up of each student must be immediate and personalized. It is not possible to follow a traditional system of exposing the syntax and semantics of a language, with demonstrative examples of the concept, something more is needed. It is important to make an individual and constant evaluation of all the concepts that are part of the programming course. With this constant and personalized evaluation, it is possible to build a profile of each student's competences - building skills in introductory programming. Giving each student the opportunity to improve particular skills. This concept is very similar to the skills of a character in a computer game, which can be acquired through training, performing tasks or practicing a certain ability. The paper goal is to describe a system that allows us to suggest exercises and to evaluate the results automatically. That will allow to construct the profile of the student in programming, according to the different phases of learning. This set of skills allow the teacher to have complete and updated information of the students' knowledge at all times, and thus minimizes the students' demotivation and failure.;2018
Making technology and computer science learning experiences accessible to students with disabilities is an important step in preparing them to enter the workforce of the future-one in which many jobs will require skills to solve problems with technology. This paper presents the tool and curricular enhancements developed to make the Exploring Computer Science Robotics unit accessible to students with visual impairments (VI). It describes the evolution of enhancements, based on formative evaluation studies, to increase support as VI students engaged in building and programming LEGO Mindstorms robots. Results describe the ways in which enhancements were iteratively designed in response to student engagement and confidence, as well as their emerging understanding of top-down and bottom-up processes in robotics design and programming.;2018
Many countries around the world have introduced programming curriculum at K-9 level. For a number of years, a lot of studies have surfaced demonstrating enactments of programming education, for instance through the use of visual programming languages as Scratch in different contexts. However, these studies have had a dominating focus on students of age 7 and older and there are few studies reporting on implementation of programming activities for younger children at preschool. This gap is addressed by this study that focus exclusively on learning of programming in a preschool class of six year olds. We have followed one teacher during six months conducting both classroom observations and interviews. In this paper we report on the didactical methods the teacher used when teaching programming through unplugged (analogue) and digital means, with BlueBot robots, and through Scratch Jr. We end the paper by a discussion reflecting on challenges and lessons learned in relation to introducing programming for young children.;2018
Many countries have included or consider to include computational thinking in their educational curricula. This creates the need for a carefully planned educational approach involving different stakeholders as policymakers, educators and students. These stakeholders are the main carriers of the educational reforms thus their perspectives create various challenges and risks. In this paper, we propose a pedagogical approach of teaching coding through games and gamification of the learning process. The flipped classroom is used in order to address the shortcomings in teacher training and deliver learning outcomes in student-centred, fun and engaging way. Proposed solution includes a spiral curriculum implemented in 4 cycles that alternate cooperative and individual learning approach. The approach was evaluated with more than 199 students from 6 different schools. Evaluation analyses were focused on the achieved learning experience identifying differences between male and female students, as well as students with different level of access to ICT resources. The results confirm the benefits of the proposed solution.;2018
Many problems related to the real world admit a mathematical description (i.e., a mathematical model) based on what is studied at school. Solving the mathematical model, however, often requires a higher level of mathematics, and this is the reason for not including such problems in the curriculum. We present several problems of this kind and propose solutions to their mathematical models by means of widely available dynamic mathematics software (DMS) systems. For some of the problems, it is possible to directly use the in-built functionalities of the DMS and to construct a computer representation of the problem that allows exploring the situation and obtaining a solution without developing a mathematical model first. Using DMS in this way can broaden the applicability of school mathematics and increase its appeal. The ability of students to solve problems with the help of DMS has been tested by means of two types of competitions.;2018
Many programs offer informal experiences in programming for select students who may qualify or whose parents pay fees for attending. Integrating computational thinking (CT) in the formal classroom setting provides equal opportunities to develop valuable problem-solving skills for all students. However, such integration poses challenges since teachers may have limited experiences in computing and may be pressured by time constraints due to the need to cover Common Core and Next Generation Science Standards (NGSS) as well as district specific initiatives. A 2-year intervention has been designed to target upper elementary level self-contained classrooms to increase teachers' knowledge and ability for integrating CT into science lessons. Twenty teachers from four school districts in Southern California participated in the first year of the project's professional development activities. These schools have varying levels of diversity and socioeconomic status of student populations. Instead of using popular drag-and-drop programming tools such as Scratch or Tynker, the first year of the project focused on key CT concepts and helped teachers connect these concepts with skills important for student success in science activities. This paper reports on the study of the project's impact on student learning of key CT concepts among students from project classrooms. The main elements of the professional development are also described.;2018
Modern technology permeates almost every area in society and thus necessitates the development of new skillsets-including computer coding. Many leaders around the world consequently encourage students to learn to code, as this may help them to develop other skills, including problem solving, reasoning, and numeracy. The current study, based on a meta-analysis, puts to test this largely accepted claim that learning how to code improves other cognitive skills. We identified 105 relevant studies that examined the transfer of coding skills to other cognitive skills, such as reasoning, problem solving, creativity, literacy, and numeracy. These studies provided more than 150 effect sizes and followed experimental and quasi-experimental designs across all educational levels. A three-level random-effects model was specified to the resultant dataset to summarize the transfer effects. Hedges'. formed the basis for this modelling approach. The aggregated size of the transfer effects-independent of the context of transfer-was positive and mediocre (g = 0.49, 95% CI = [0.37, 0.61]), and showed considerable variation within and between studies. At the same time, this effect differed across transfer contexts-for skills closer to computer coding, effects were larger (near transfer) than for skills that overlap only marginally with coding (far transfer). Moreover, the purpose of coding moderated the overall effects. Our response to the question whether learning to code improves other cognitive skills is positive: Indeed, positive transfer effects can be detected. Nevertheless, learning to code has differential rather than uniform effects on other cognitive skills.;2018
More and more K-12 schools are paying attention to the training of Computational Thinking A considerable amount of K-12 use blocked-based visual programming platforms such as Scratch, App Inventor, Alice and etc. MIT App Inventor is one of the more popular mobile application visualization programming platforms. Visual programming is based on the 'You see what you get' doctrine. Its simplicity and ease of use coheres with K-12 teaching principles and allows students to access to computational thinking without the burden of learning Coding grammar. Recently App Inventor is gaining momentum and traction in China at a very high speed and is expected to grow even faster in the future. Teachers using App Inventor for teaching face the problem of having to go through a very high number of App Inventor apps without any way to catalogue them. The 2017 Google App Inventor Competition alone received over 1300 entries. This article aims to devise an automated scoring method based on TF-IDF and clustering to help teachers evaluate App Inventor apps, thus greatly reducing their workload. Evaluating the method gives us an 75.42% with space for further improvement in the future.;2018
Most efforts to incorporate computational thinking in K-12 education use visual tools (e.g., Scratch) and focus on students in their first grades. Fewer projects investigate the development of computational thinking in students in the last years of school, who usually have not had early formal preparation to acquire these skills. This study provides evidence of the effectiveness of teaching C++ (a low-level programming language) to develop computational thinking in high school students in Chile. By applying a test before and after a voluntary C++ workshop, the results reveal a significant improvement in computational thinking after the workshop. However, we observe that there was a tendency to drop out of the workshop among students with lower levels of initial computational thinking. Besides, tenth-grade students obtained lower final scores than eleventh and twelfth-grade students. These results indicate that teaching a low-level programming language is useful, but it has high entry-barriers.;2018
"Much can be learned from the vast work on the use of computer simulations for inquiry learning for the integration of modeling and simulation practices in engineering education. This special issue presents six manuscripts that take steps toward evidence-based teaching and learning practices. These six studies present learning designs that align learning objectives, with evidence of the learning, and pedagogy. Here we highlight the main contributions from each paper individually, but also themes identified across all of them. These themes include (a) approaches for modeling-and-simulation-centric course design; (b) teaching practices and pedagogies for modeling and simulation implementation; and (c) evidence of learning with and about modeling and simulation practices. We conclude our introduction by highlighting desirable characteristics of studies that report on the effectiveness of modeling and simulation in engineering education, and with that we provide some recommendations for improving the scholarship of teaching and learning in this field.";2018
Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.;2018
Nowadays programming and computational skills are of great importance in working and social life. Knowing how to code is empowering. It allows to understand the digital world we live in and to shape it. Basic coding skills are essential for accessing the jobs of today and tomorrow and for achieving a better skills-match between education and the labor market. This paper presents a European Project entitled Coding and Youth: An innovative program in the digital era (Code@Youth), which attempted to utilize constructively the long period of summer vacations in European countries in order to introduce students to the world of programming and robotics by offering hybrid learning activities in parallel with on-line learning facilities. The main purpose of this program was to plan, implement and evaluate these activities for young people, through the on-line platform, in order to lead to the acquisition, recognition and validation of computational skills obtained through non-formal learning.;2018
Nowadays, computational thinking skills are considered as fundamental for our future daily life and many initiatives and tools are created to foster these skills. In this paper, we present the Kniwwelino, a new platform for prototyping physical computing projects based on WiFi. The novelty of our solution lies in the use of a WiFi chip on a small, extendable board, programmable via a block based visual programming language, making the platform compact, low-cost, WiFi enabled, and accessible to children. This paper presents the design rationale and implementation of the platform as well as two simple, example projects making use of the new WiFi-based functionalities.;2018
Nowadays, school systems are underlining the relevance of computational thinking and educational robotics not only in STEM (science, technology, engineering and mathematics) education, but also in other humanistic disciplines as reinforcement of student creativity and problem-solving capacity. This paper presents an example of educational robotics tool used to engage students in their learning process through the manipulation and construction of artifacts.;2018
Objects are everywhere. People deal with them from the beginning of their lives. From babyhood, they start to recognise them and, progressively, learn to define their attributes and designate the actions related to them. Although the basis of object-oriented programming is translating real-world objects into the object-oriented code, learning object-oriented programming is still a difficult task. To overcome this difficulty, we have to specify the right starting point of teaching basic object-oriented concepts and mark out the appropriate educational tools. In this paper, trying to answer the above questions, we present a research proposal on how fundamental object-oriented programming concepts could be introduced to children in early childhood education when physical science courses take place. The backbone of our research is the digital environment PhysGramming, through which children turn into creators, according to the theory of constructivism. The innovative aspect of PhysGramming is that children create their own games while studying physical science, in a way that provides familiarity with the basic principles of object-oriented programming and computational thinking, even though no specific reference is made to these principles.;2018
One of the eight Next Generation Science Standards (NGSS) scientific practices is using mathematics and computational thinking (CT). CT is not merely a data analysis tool, but also a problem-solving tool. By utilizing computing concepts, people can sequentially and logically solve complex science and engineering problems. In this article, we share a successful lesson using protein synthesis to teach CT. This lesson focuses primarily on modeling and simulation practices with an extension activity focusing on the computational problem-solving practices of CT. We identify and define five CT concepts within the aforementioned practices that form the foundation of CT: algorithm, abstraction, iteration, branching, and variable. In this lesson, we utilize a game to familiarize students with CT basics, and then use their new CT foundation to design, construct, and evaluate algorithms within the context of protein synthesis. As an optional extension to the lesson, students enter the problem-solving environment to create a program that translates mRNA triplet codons to an amino acid chain. We argue that biology classrooms are ideal contexts for CT learning because biological processes function as a system, and understanding how the system functions requires algorithmic thinking and problem-solving skills.;2018
One of the objectives of the introduction of educational robotics in the schools is the need to adapt the curriculum of the technology to the today's requirements of the students and the development of the skills, competencies and disciplines involved of STEAM. In this paper cover related aspects of the computational thinking, the engineering thinking required to develop the context-oriented activities through technological platforms based on educational robotics. The contextualization of the activities worked with Scratch and LEGO Mindstorms are the basis of two study groups. Different methodologies of learning of the technological platforms are used in these groups. The methodology developed during several sessions of the academic course is the main argument to introduce the Educational Robotics and the development of the STEAM in a traditional school of Barcelona.;2018
One of the priorities in the current educational process is the search for ways to improve student involvement, being an active player in the learning process, appearing different solutions. One of the possibilities that are being used is the involvement of the student in the evaluation itself. This work presents an experience carried out at the Universidad Rey Juan Carlos, in a programming subject, in which a peer evaluation methodology has been applied together with a contest, based on a team practice. The results of the grades have been analyzed, comparing them with those of the teacher, besides studying the opinion of the students and the relationship with the grades obtained.;2018
Part of our research and teaching agenda at the School of Architecture of the Technical University of Crete focuses on algorithmic design with parametric models, its methodological characteristics and the study of applied and theoretical work that defined this architectural design thinking. Our work challenges architectural design processes, through the systematic study of parametric models. This paper presents three projects from the undergraduate elective course Special Topics in Architectural Design'', which took place during the spring semester of 2017, that investigated parametric models for a given architectural problem, inspired, to some extent, by precedents in 20th century architecture where students traced algorithmic design thinking. Although students understood well the concept and function of parametric models and in many cases applied them successfully for their design objectives, several of them did not fully assimilate some critical aspects of computation. This allowed us to determine areas of improvement and points of complete reevaluation in our educational strategy approach.;2018
"Past efforts have demonstrated efficacy in broadening maker learning and participation by leveraging the material affordances and implicit presumptions associated with content creation tools. Past work has found that the purposeful integration of activities that blend multiple toolkits to create integrated designs [17; 19;20] can both broaden the understanding of these affordances and demonstrate equitable and inclusive outcomes for adolescent youth. We illustrate early stage findings from an interaction analysis of the micro- and meso-level learning and collaborative processes that children and early adolescent learners engaged in throughout purposefully arranged multi-interface design projects to understand their agency and engagement over time and across activities.";2018
Pencil puzzles (puzzles such as sudoku and many others that are designed to be solved by humans, promoting computational thinking) provide a natural context for CS1/2 assignments. In a prior work we analyzed Likert-scaled student responses and assignment/course grades to show that not only are such assignments effective but are also largely independent of gender and prior computing experience. This paper focuses on open-ended student comments, both to see if they provide additional insights about the assignments and student perceptions not apparent from the Likert-scaled responses, and to see if these comments are consistent with the results from the prior work. We surveyed over 1000 students who had used pencilpuzzle-based assignments and invited them to make open-ended comments in their survey responses. We used grounded theory to develop codes for the large volume of student survey comments, as well as for semi-structured interviews with the instructors and focus groups with student TAs. Statistical analysis of the coded comments identified several interesting relationships, such as students being appreciative of their learning even when they perceived the assignments as difficult, which were not available from the Likert-scaled data. The analysis also confirmed that these assignments are largely gender- and experience-neutral. We conclude by discussing how these results and the coding process lead to improvements in assignment development and inform future research directions.;2018
"Policy makers worldwide argue that children should be taught how technology works, and that the 'computational thinking' skills developed through programming are useful in a wider context. This is causing an increased focus on computer science in primary and secondary education. Block-based programming tools, like Scratch, have become ubiquitous in primary education (5 to 11-years-old) throughout the UK. However, Scratch users often struggle to detect and correct 'code smells' (bad programming practices) such as duplicated blocks and large scripts, which can lead to programs that are difficult to understand. These 'smells' are caused by a lack of abstraction and decomposition in programs; skills that play a key role in computational thinking. In Scratch, repeats (loops), custom blocks (procedures) and clones (instances) can be used to correct these smells. Yet, custom blocks and clones are rarely taught to children under 11-years-old. We describe the design of a novel educational block-based programming game, Pirate Plunder, which aims to teach these skills to children aged 9-11. Players use Scratch blocks to navigate around a grid, collect items and interact with obstacles. Blocks are explained in 'tutorials'; the player then completes a series of 'challenges' before attempting the next tutorial. A set of Scratch blocks, including repeats, custom blocks and clones, are introduced in a linear difficulty progression. There are two versions of Pirate Plunder; one that uses a debugging-first approach, where the player is given a program that is incomplete or incorrect, and one where each level begins with an empty program. The game design has been developed through iterative playtesting. The observations made during this process have influenced key design decisions such as Scratch integration, difficulty progression and reward system. In future, we will evaluate Pirate Plunder against a traditional Scratch curriculum and compare the debugging-first and non-debugging versions in a series of studies.";2018
Programming education is a hot topic in many countries around the world. Also, in Sweden this topic has received a lot of attention lately due to formal introduction of programming curriculum as of 2018. Mathematics is one of the subjects that is most affected by the curriculum changes as the government in Sweden has decided that teachers of mathematics are to teach programming in compulsory school in order to support problem-solving in mathematics. Albeit there are some previous research investigating questions related to how programming can enhance mathematics education, for instance in form of the seminal work of Papert through the LOGO language, more research is required that scrutinize how new visual block programming language such as Scratch can be used for mathematical learning. It is against such a background we in this paper report on how Scratch has been used in primary school for two years to teach mathematics. We will present four different projects that a teacher has planned and conducted with 68 students that target four different areas of mathematics. As such we describe the didactical strategies that were employed to help students achieve the learning goals, and the associated challenges. We hope that the presentation can be helpful for other teachers and researchers interested in using visual block programming languages for teaching and learning mathematics.;2018
Programming education was recently added to the national curriculum of Japanese primary schools, which will be enforced in 2020. The main purpose is to foster logical thinking, which is necessary to make computers perform intended processing functions through programming experience. This logical thinking is regarded as programming thinking in Japan. Although programming education practices in primary school have just been started to be reported, it is necessary for not only the school but also the local community to cooperate mutually to foster programming thinking. Therefore, we performed programming education for primary school pupils in cooperation with regional communities. Specifically, we performed two programming education methods that take advantages of student volunteers. The first was in an after-school care program and the other was at a university's school festival, one of the cooperative events between the university and its regional community. In this paper, we describe the results we obtained for each.;2018
Programming is an effective way to foster children's computational thinking. We present AR-Maze, which is a novel tangible programming tool using Augmented Reality (AR) technology for young children. AR-Maze superposes constant feedback on the physical world and maintains a positive, low-cost learning environment. Using this system, children could create their own programs by arranging programming blocks and debug or execute the code with a mobile device. In addition, they will be able to learn fundamental programming concepts, such as parameters, loop logic, debug, etc. We design and implement this system, as well as conduct a preliminary user study and analyze the results, which can guide a better design of AR-Maze. With this work, we intend to help children programming in an interesting and intuitive way.;2018
Programming is being included in educational curricula around the world to develop computational thinking. However, there is no consensus on what processes this thought implies, nor on how to intervene and evaluate its development. Therefore, the objective is to propose a teaching strategy for programming and robotics, which really develops this thinking and can be applied to solve problems, from a maker perspective that facilitates the transfer of knowledge to real contexts. To this end, a robotics course has been taught, insisting on the cognitive processes of this thinking that are commonly used in problem solving (abstraction, data processing, creation of an algorithm), and encouraging the use of a computational strategy, using the processes of this thought not employed in problem solving (decomposition of the problem, automation, parallelism, simulation). To measure it, digital tests have been created based on the multiple complex-systems approach, used in PISA 2012. The results indicate that computational thinking is applied more easily to the execution of the algorithm than to the representation of the problem. This finding allows us to establish a programming learning process that facilitates the development of computational thinking, to solve any problem by applying a computational strategy: focusing first on applying this strategy to the creation of the algorithm and then to the representation of the problem.;2018
Programming is one of the key assets in the modern society. In addition to teaching programming to future programmers, it has become more and more important to teach it alongside computational thinking to all students. We designed and implemented a programming course aimed for teacher students at our university. The goal of the course was to teach programming, computational thinking and the methods and tools used in programming education. The course was divided into two parts: first, the students were taught basic programming skills by utilizing tutorial-based learning with automatically assessed electronic exercises and play-based programming tasks. In the second part, the students utilized the acquired skills by teaching programming integrated into mathematics to children at elementary school level. The students worked really hard throughout the course, completing more than 90 % of all tasks in average. Moreover, the feedback from the tutorial sessions and the practice lessons at schools was mainly positive.;2018
Programming learning is becoming more and more popular among educational institutions, especially in secondary schools. Schools and researchers believe that computational skills are and will be one of essential skills for human beings in the future. Most of researches focus on pedagogical methods and resources of programming learning. However, there is still a gap about learners' attitude toward it. In order to address this gap, we picked up 12 programming workshops in year 7 and 8 and analyzed the process of students' changed ideas about programming throughout workshops. Two hundred thirty students from different countries were involved in these workshops. In this paper, we discuss about students' attitudes and opinions about programming learning before and after attending workshops. We used questionnaires as the way to collect data and analyze them to explore their attitude changes. We present the process of attitude changes to explore difficulties of programming learning and places need to be improved.;2018
Programming logic thinking is the most important competence for computer science students. However, programming is one of the difficult subject in computer science program. This paper reports our work about enhancing students' programming logic thinking using Analogy Mapping for basic programming subject. Analogy Mapping is a computer application which converts source code into analogies images. This research used time series evaluation and the result showed that Analogy Mapping can enhance students' programming logic thinking.;2018
Purpose The purpose of this paper is to present computational algorithms as potential bearers of biases and also tools for reflection, and to advance strategies for engaging with them in education. Design/methodology/approach Three example games (Dwarf Fortress, RimWorld, FreeCiv) are provided for introducing algorithms as meaningful and critical processes. Therefore, a three-step instructional strategy is advanced for introducing students to the topic. Findings The examples reported point to hidden values embedded in the computational algorithms and opportunities for reflecting about their role, setting the stage for critical thinking and participative design sections. Originality/value The originality of this paper relies on framing algorithms beyond their functional orientation (the current emphasis in literature), targeting critical connotations and biases that they may imply. Such an attention can make a difference in fostering awareness toward the topic in young learners, and entail novel possibilities for creativity and inclusiveness with and through coding.;2018
Rapid technological developments ask for so called 21st century skills or competences to prepare citizens for living, working and learning in our current society. Due to these changes many countries worldwide are in the process of redesigning their curricula. This section elaborates on the role of technology in 21st century curricula. First the notion of 21st century competences is elaborated upon. This is followed by research on emerging domains in 21st century curricula, such as new literacies, digital citizenship, digital literacy and computational thinking. The section finishes with pointing to the need to align school curricula with students' digital practices.;2018
Recent developments in pedagogy have focused upon computational thinking. Computational thinking provides a way to solve the problem and it is a key practice of science education. The importance of computational thinking is rarely found in K-12 education. Computational thinking is a an important skill everyone needs and it is correlated with many other concepts. These factors have made the development of new tools and syllabus. In this paper, we aim to show the experiments of fractal geometry using MIT Scratch. These computational exercises facilitate to learn many of computational thinking skills that are very important for the people in the near future. Based on our experience with students, we claim that the concept of fractal and its implementation in MIT Scratch is the best practices to improve computational thinking in K-12 school level students.;2018
Recent literature reports a fair amount of initiatives on how to engage younger populations in achieving computational literacy. However, there is considerable less research on how to effectively deliver software development skills in a way that can be accepted and ultimately adopted by this user group. As a way to bridge this gap, we ran an extracurricular project-based workshop, targeting 10-12 years old learners with no prior coding experience, delivered over five days in the computer labs at the University of Chile. In this workshop, participants follow hands-on activities where they acquire the basics of computer programming and develop a small-scale software application using Scratch. These activities showcase that good software engineering practices can be taught to K-6 students, where these students are guided by experienced computer science undergraduate and graduate students. This paper presents a descriptive case study that focuses on assessing how K-6 learners assimilate and use these practices when developing their first computing application in a non-traditional learning experience. In order to do this, we designed and calibrated a rubric to evaluate the software products generated by the workshop participants. Our findings provide further evidence that it is indeed possible to teach initial notions of software engineering to this user group, structuring these constructs in a non-technical language that can be assimilated by novice developers. Furthermore, we did not observe significant differences in this matter according to gender and socio-economic status.;2018
"Reform of teaching content, teaching methods, and evaluation of examination system is an urgent issue of current teaching reform in higher education. Python language is released under the background of calculating ecology, which is concise, clear, elegant, and easy to learn. There are more than thousands of third-party programming libraries. Rich resources of an open community also incur new problem, much information will consume large amounts of attention. How to make students absorb more knowledge and master more skills in the limited class time? Also, it is important for teachers to think about how to improve the efficiency of information cognition. The paper puts forward a teaching method of Python language based on minimum knowledge sets, combining with the characteristics of different major students; the method can not only help students understand the ideas and methods of solving practical problems with the concept of calculation ecology but also raise good computational thinking, innovative thinking, and programming ability, and then effectively improve the quality of teaching and promote the development of higher education.";2018
"Research continues to demonstrate gender-based differences related to computer programming confidence and STEM-related educational and career choices: Girls and women, we well know by now, are under-represented in computer science and engineering programs and the tech-industry in general (Hill, Corbet & Rose, 2010). A factor contributing to women's under-representation in undergraduate computer science and engineering programs has been seen as being their 'choice' not to take these courses or being 'unaware' of programming and other courses in high school (Howe, Berenson & Vouk, 2007). Meanwhile, girls and women continue to self-report that they feel less confident when it comes to programming and general IT related skills than their male peers (NSF, 2011; Wang, Eccles & Kenny, 2013). This study sought to use game design as a pathway for supporting the acquisition of programming skills in young students. We examined whether factors such as the learning community (instruction in mixed or same gender groups; teacher supervision), and children's pre-existing biases and previous experiences related to computer science and programming, were associated with change in computational knowledge following participation in an intensive, 1-week game design program. A 15-hour instructional game design unit was given to two separate cohorts of grade 6 students (ages 11 to 12) at the same school (N = 119). Cohort 1 was comprised of 3 mixed gender groups (girls: n = 30, boys: n = 30), and Cohort 2 was comprised of 4 single gender groups (girls: n = 32, boys: n = 27). The two cohorts received the same instruction and curriculum, led by a female facilitator with support by a team of near-peer, mixed gender mentors, and supervision by female classroom teachers. In general, we found that all students performed better from pre-to post, and that prior programming knowledge had a significant effect on learning outcomes. We argue that more opportunities early on in school-based settings are necessary if we would like to support all learners to acquire STEM-related skills and competencies.";2018
Researchers suggest students in early elementary grade levels are active learners and creators and need to be exposed to science, technology, engineering, and mathematics (STEM) curriculum. The need for student understanding in STEM curriculum is well-documented, and positive results in robotics and computer programming are leading researchers and policy makers to introduce new standards in education. The purpose of this single-case design study is to research the potential for PreK-1st grade students with intellectual disabilities (ID) to learn skills in computer programming through explicit instruction, concrete manipulatives, and tangible interfaces. Students were assessed through baseline, treatment, and generalization phases. The students with ID were found to successfully program the robot, following explicit instruction, although they had difficulty generalizing skills to tablet application. Discussion of results, future research, and limitations is provided.;2018
Robotics and computational thinking are ideal tools for developing science, technology, engineering and mathematics (STEM) pedagogy. A multitude of educational robotics tools have emerged in recent years. Some with a high price and great features, and others with a lower price and lower performance. There are also cost-effective options that allow you to tailor your services to tighter budgets. The presence of robots in our daily lives is becoming more and more common. Therefore, it is interesting that we are oriented to integrate robots in the different levels of our society. This workshop is focused on driving the same content across three different low-cost robotic educational tools. The first one is Scratch, interactive stories, games and animations can be programed. The second tool is Crumble, it is an easy-to-use programmable controller. Its programming interface uses a block programming language which eases its use by children aged below 14. The last but not the least is Arduino, Arduino is an open-source electronics platform based on easy-to-use hardware and software. It is a platform that incorporates a simple microcontroller and an interface development environment to create the applications to be downloaded into the board. This workshop is aimed to present the mentioned platforms as robotic educational tools for people as the first step to get into robotics world. Throughout this workshop an initiation to robotics is developed in the context of educational robotics.;2018
"Robotics and computational thinking are ideal tools for developing science, technology, engineering and mathematics (STEM) pedagogy. Today, educational robotics tools emerge with the aim of promoting innovation and motivation of students during the learning process. Robots are becoming more common in our daily lives; therefore, it is important to integrate robots into all levels of our society. This demonstrator focuses on driving the same content through three low-cost robotic educational tools. The first is Scratch, where you can schedule interactive stories, games and animations. The second tool is Crumble, an easy-to-use programmable controller. Its programming interface uses a block programming language that facilitates its use. Finally, Arduino is an open source, hardware- and software-based platform that is easy to use and has great potential for developing robotic applications. This demonstrator aims to present the above platforms as educational robotics tools as the first step into the world of robotics. Throughout this demonstrator an introduction to educational robotics is developed.";2018
Robotics and computational thinking are valuable tools for developing science, technology, engineering and mathematics (STEM) pedagogy, and to promote inclusion and integration of students. We currently have a multitude of robotic education tools at our disposal. These tools arise with the aim of promoting innovation and student motivation during the learning process. Robots are becoming more and more common in our society today. Therefore, it is important to integrate robots into all levels of our everyday life. This work is focused on presenting Raspberry Pi as enhancer of educational robotics. The first step is presenting robotics as a tool for promoting the inclusion and integration of students. For this work a background and overview is also provided. The third part proposed different setups to prepare a Raspberry Pi for remote activities and robotics using Arduino as hardware interface. The last but not the least is an open discussion with the aim of exchanging impressions and getting feedback from the attendees.;2018
"Science, technology, engineering and mathematics (STEM) and the inclusion of art and design into STEM (STEAM) as a mediator are increasingly emphasized in innovation and entrepreneurial blueprints across countries due to smart cities. Knowledge creation/construction towards a thriving ecosystem however, is not a given. This exploratory study aims to derive design factors for community engagement and possible mashable opportunities/innovations in smart city communities. We present a meta-analysis of two gamified media-model maker opportunities carried out among Malaysian high school students. These are designed based on computational thinking and different design theories which take into account: a) deriving design factors/requirements (success factors) and barriers to gamified learning; b) mapping and intertwining of different models as genetic blueprint for gamified learning; c) refinement of the authors' socio-cognitive-HCI framework; d) possibilities for personalized inclusive design.";2018
Scratch Day is made up of a global network of events. Its main goal is to bring people together to celebrate Scratch. Scratch is a free encryption platform that can be used online and offline for children. Scratch Day events bring together young people from the Scratch community. During these meetings, attendees share projects, learn from each other and welcome newcomers. Robotics and computational thinking are ideal tools for developing science, technology, engineering and mathematics (STEM) pedagogy. Currently, innovation and motivation of students during the learning process are promoted by educational robotics tools. Robots are increasingly integrated into our society. To such an extent that robots arc becoming more and more common in our everyday environment. This paper presents a workshop which is focused on two main objectives. The first one is to celebrate Scratch Day promoting Scratch locally. On the other hand, this event is aimed to present a robotic educational tool for people as the first step to get into robotics world. This workshop is aimed on those adults who want to discover what possibilities Scratch brings in the introduction to robotics. Throughout this workshop an initiation to Scratch is developed in the context of educational robotics. As the most significant results throughout the workshop, it is clearly demonstrated that Scratch is an ideal tool for children and adults with no previous programming or robotic experience to begin learning both through hands-on experiences. Throughout this work the importance of combining theory and practice is shown in order to include fun tasks intertwined with the challenges of applying theory to problem solving.;2018
Scratch is a visual, block-based programming language, adopted as a computational thinking development tool in elementary education among many countries. Thailand has also recently included Scratch as part of the computing science course in its basic education. However, Thailand is facing a shortage of ICT teachers who are skillful in Scratch programming, especially in small provincial schools. This research aims to overcome the shortage by developing ScratchThAI, a Scratch tutorial chatbot. It is designed to assist young learners directly through a messaging platform. By giving supports through a textual conversation, more relevant advice, knowledge, and resources could be provided precisely. Different levels of each computational thinking concept are extracted and evaluated by the designed assessment algorithm. Extra predefined exercises are assigned based on the analyzed learner's strengths and weaknesses in order to actively improving the learner's understanding. Moreover, gamification is incorporated to engage and motivate young learners in computational thinking development.;2018
Several countries have usually adopted several priorities for developing ICT competences from kindergarten to secondary education. Most of them are focused on the development of key competences and/or coding skills. Although coding may be very attractive for young students and a very good practice or experience, it could be more interesting to develop students' logical thinking skills and problem-solving skills throughout programming approaches or computational thinking. This is a very exciting challenge with lots of possibilities regarding coding, robots, mobiles devices, Arduino-based application, game based learning and so on. Thus, it is very important to explore the effect that these experiences have been taking into the pre-university students, both at primary and secondary education, with a special focus on the computational thinking as one of the components inside the toolbox to develop a reflexive and critical education in order to help children to solve problems using the technology with which they will live daily. (C) 2017 Elsevier Ltd. All rights reserved.;2018
"Since autumn 2018, teachers throughout Sweden are obliged to relate to programming in one way or another in the teaching, especially in the subject of mathematics and technology education. Although teachers should formally work with programming teaching from the autumn of 2018, programming has been taught in primary school for several years. While there is some research on younger students, most of the research has almost exclusively focused on didactic approaches and strategies used by teachers, educational values and practices that accompany programming teaching, and views of teachers regarding programming teaching. What is still missing is research that highlights how younger students experience these new practices and how they primarily perceive programming in traditional school subjects, such as mathematics. Thus, this paper reports on a thematic analysis of younger students' (n=44) perceptions of programming; students who have been introduced to and been taught programming in mathematics in grade 5.";2018
Since computers are used everywhere in the current society, it is important that science communication is implemented actively. In addition, it is also important that people actively participate in this and deepen their understanding of science. However, few studies have been done to deeply explore the mechanism of the secondary and tertiary derivation of science communication. Furthermore, programming education has attracted attention as a means of learning computational thinking for every child living in an information society. However, even though children are interested in programming and computer science, the continuous framework of programming education is insufficient. And there is room for consideration about mechanisms and systems that encourage the derivation of science communication in computer science and support continuous learning. In this research, in order to solve the above problems, we have designed and evaluated a cloud-based system that is a place of science communication and support programming learning, exceeding distance and temporal constraints. As the result of research, the proposed system in this paper intended the potentials of promoting the derivation of science communication and supporting continuous programming learning. However, there is room for improvement of the system design and the verification in detail.;2018
Soft skills are important criteria in preparing for a viable future employment, the lack of which, may result in a low employment rate among university graduates. These skills can be acquired via the use of Computational Thinking (CT) to cultivate problem solving and thinking skills. Since the inception of CT, however, not a single unified model has been developed as a guideline for educators. Based on the relevant articles available in IEEE Xplore Digital Library, Springer and ScienceDirect Journal, this paper comparing different CT models that focus on different CT dimensions which is concepts, practices and perspectives.;2018
Some curriculum of making computer games were developed to engage students in digital game-making activities so as to enhance their computational thinking skills during the last few years. The findings of those studies are quite positive, especially concerning the promotion of computational thinking skills. However, many students seem to face difficulties in the processes of the game development, such as debugging, applying mathematics, or physics subjects. Additionally, students often have solved the problems and understood concepts, mainly math formulas and physics concepts, alone while creating their games. This study presents an innovative curriculum design that suggests two students playing different role to make motion-based touchless games (i.e., games that are based on natural user interaction technologies, like the Microsoft Kinect camera or Leap Motion). Based on the requirements of the innovative curriculum and interaction technologies, students can naturally fulfill the ideal of pair programming and get various benefits from each other.;2018
Stress memory and an effective signaling among individuals in a given community are recognized to improve plant performance under recurrent stressful conditions. As living beings with memory and signaling abilities, plants can be considered as processing units and then be trained - or programmable from a computational viewpoint - and prepared for facing biotic and abiotic stresses. Here, we propose that sentinel plants could improve the resilience of agricultural and natural communities by reducing the impact of biotic or abiotic stressors on their neighbors. Modeling plants as programmable (or trainable) processing units compels us to think about a multidisciplinary perspective for integrating stress memory, signaling, and resilience of biological systems into executable programs, fostering the creation of applications and technologies that would benefit from the spatiotemporal dynamics related to plant-plant and plant-environment interactions.;2018
Students in introductory programming courses struggle with how to turn a problem statement into code. We introduce a technique, The Seven Steps, that provides structure and guidance on how to approach a problem. The first four steps focus on devising an algorithm in words, then the remaining steps are to translate that algorithm to code, test the algorithm, and debug failed test cases. This approach not only gives students a way to solve problems, but also ideas for what to do if they get stuck during the process. Furthermore, it provides a way for instructors to work examples in class that focus on the process of devising the code-instructors can show how to come up with the code, rather than just showing an example. We have used this technique in several introductory programming courses-both in the classroom and online. We describe this technique and results from its use in fall 2017 courses.;2018
Studies of African indigenous games often focus on a specific game or on games from different regions. This article, rather, examines five popular African board games in order to find the similarities and differences among these games. The analysis shows similarities among them. However, these similarities do not necessarily mean that these games are identical. The review of the games indicates that these games are different when elements such as rules and play are used to study them. This article also demonstrates that these board games are tools that can be integrated into the curriculum through a discussion of the educational affordance of each game. The article is an invitation to educators and game researchers to broaden the definition and exploration of game-based learning.;2018
Synergistic learning of computational thinking (CT) and STEM has proven to effective in helping students develop better understanding of STEM topics, while simultaneously acquiring CT concepts and practices. With the ubiquity of computational devices and tools, advances in technology, and the globalization of product development, it is important for our students to not only develop multi-disciplinary skills acquired through such synergistic learning opportunities, but to also acquire key collaborative learning and problem- solving skills. In this paper, we describe the design and implementation of a collaborative learning-by-modeling environment developed for high school physics classrooms. We develop systematic rubrics and discuss the results of key evaluation schemes to analyze collaborative synergistic learning of physics and CT concepts and practices.;2018
Teacher educators play an important role in preparing student teachers to integrate technology into their classrooms. This article presents an overview of research literature on teacher educators' competences in preparing their students to teach with technology. A literature search yielded 26 relevant research articles. Four domains of competence were identified: technology competences, competences for pedagogical and educational technology use, beliefs about teaching and learning and competences in professional learning. The literature focuses on teacher educators' competences in using technology for teaching. Research on the competences that teacher educators need and have as second-order teachers is lacking. Recommendations for future research are discussed. (C) 2017 Elsevier Ltd. All rights reserved.;2018
"Teaching informatics with a socio-constructivist approach is the theme of the Professional Development (PD) proposal for teachers we present in this paper. This proposal is built upon the expertise we developed in the last few years by designing and delivering enrichment activities to school students, where constructivist strategies are used to let students discover informatics as a scientific discipline, and to promote computational thinking skills and problem solving competences. Starting from the analysis of teachers' training needs, we structured the proposal into different units. We highlight their goals and contents, and illustrate some of the proposed activities. We held some training sessions to test our proposal; we report our findings and the feedback from the participants who amount to a total of ninety-five in-service and prospective teachers.";2018
Teaching programming concepts to enhance students' problem solving and computational thinking skills is a challenging task, especially when students enter college with little to no preparation, or they lack the interest or capacity for programming. Online platforms that serve as automated practice and assessment systems have been offered as potential tools for supporting programming skills development, providing feedback, and motivating students. The present article discusses the use of an online automated practice and assessment system called Kattis for homework assignments and final project in three computer science courses. The goal of the present study was to ascertain students' continuance intentions to use Kattis. We attempt to address this by using partial least squares on data from a survey of 50 students. The findings of the present study suggest that continuance intentions to use Kattis is driven by students' level of satisfaction with the system, the degree of students' confirmation of expectations, and the perceived usefulness of the system.;2018
Teaching style and personalized content delivery may have a significant impact on learning. While personalization for learners takes center stage in many research efforts, the same is not so true for teaching. A critical step in teaching is designing effective and customizable lesson plans using best-practices. In this paper, we present a web-based lesson plan design tool, called vTutor, that is designed keeping personalization for teachers in mind. We present and discuss content authoring using vTutor for web-based computational thinking classes.;2018
Technologies are growing rapidly and its applications are enormous in different strata of society. In this paper especially we are talking about educational technologies. We could see there is a significant change in elementary and secondary education over the past 10 years like classroom teaching, information and communications technology (ICT), and now everything is all about the cloud computing. Cloud computing technologies play a big role in the development of educational technologies. CT-Blocks is a virtual private cloud system developed for K-12 schools. The importance of the word computational thinking makes everyone to the development of educational tools to impart computational thinking to primary, middle and high school students. CT-Blocks is a cloud and block based programming language that reinforces the word computational thinking in all types of users.;2018
Technologies for development have great potential in accelerating the socio-economic progress of disadvantaged communities. But these technologies are usually developed by people removed from the daily realities of fieldwork. This paper explores the need and the possibilities of educating rural populations and social workers on the use of technology to create their own digital artifacts. We discuss two workshops, one for villagers in the state of Telangana and the second one for graduate students of a university social work department exploring the use of MIT's Scratch software as a tool for assisting in social interventions. We also discuss the results of an acceptability study among the social work students to gauge the potential for such a tool to be used in the field.;2018
The 12-year Basic Education Curriculum Guidelines by the Ministry of Education in Taiwan includes learning performances related to computational thinking and programming languages in technology courses. The students will develop other important competence through programming. Learning a programming language should not only involve focus on writing the programs, but should also stimulate students' computational thinking competence and allow them to solve daily problems through information techniques. Situated learning emphasizes students' learning in real scenarios where knowledge is applied as the tool in these real situations. Without such scenarios, the tool has limited value. Like-wise, computational thinking competence can be translated as effective problem-solving by the means of information technology. Hence, the thinking process involves analyzing the problems resulting in answers. In addition, the Bebras learning model is based on a concept of informatics which supports comprehension of information science phenomenon and development of computational thinking. This study explored the effects of computational thinking competence on the Bebras test performance. The study targeted senior high school students' who learned program design using a situated learning strategy. The results confirm the importance of the situated learning strategy when cultivating students' computational thinking competence. Based on homogeneity of two groups of students, the experimental group's posttest score of computational thinking is higher than that of control group. The experimental group were exposed to a situated learning strategy and the control group was not. Significant difference between the two groups shows that the situated learning strategy reinforces computational thinking competence.;2018
The A me gli occhi project was organized to support the development and consolidation of visuospatial abilities in students of the last two years of the Italian primary school, with the hypothesis that such a training would have a positive impact on their performance in mathematics. Twenty game based training sessions were set up along the whole school year, involving two experimental classes, while another two classes served as control group. Students' mathematical abilities were measured at the beginning of the project and at the end using a math test that had been standardized on the Italian population. Results show a statistically significant improvement in the experimental group when compared to the control one for nearly all the indicators considered, confirming the initial hypothesis.;2018
The aim of the study was to examine the effects of different cognitive styles on the elementary students' learning performance and play behavior in a programming board game. This quasi-experimental design study lasted two weeks with 3 hours per week. The subjects were 25 field-independent and field-dependent 6th grade students (assessed by the Group Embedded Figures Test) who participated in a learning programming board game course. An ANCOVA (analysis of covariance) and t-test analysis were performed on the definitive test data. Conclusions of the findings are as follows. First, in the programming board game, field-independent learners achieved significantly improved learning outcomes over field-dependent learners. Second, although no significant difference was found in gaming behavior between field-independent and field-dependent learners, the field-independence group demonstrated more learning behavior related to the execution of complex thinking. This study suggests to provide differentiated instruction for learners of different cognitive styles, should be more to enhance the effectiveness of programming performance and positive gaming behavior.;2018
The aim of this article is to provide an overview of the opportunities for developing computational thinking in young learners. It includes a review of empirical studies on the educational technologies used to develop computational thinking in young learners, and analyses and descriptions of a selection of commercially available technologies for developing computational thinking in young learners. The challenges and implications of using these technologies also are discussed.;2018
The aim of this report is to describe some aspects of teaching programming to teenagers from 10 to 13 years old. The examples, data and impressions were taken from some courses given in public and private schools in Mexico, Switzerland and Colombia. The paper is organized as follows: It starts with a description of the didactic proposal of ABZ-ETHZ under which the courses were given. Then the observations and reflexions are described with respect to several considerations: (a) The ubiquitous recreational and social use that children and young people make of the technology, (b) their motivation for programming, (c) reading and writing in language acquisition and ((d) strengthening and applying mathematics as a decisive aspect of the ability to think logically.;2018
The aim of this research was to develop a STEAM-based program for teaching middle school students the concept of time to enhance their computational thinking skills. The proposed Time Teaching Program (TTP) consists of modules and activities on the definition of time, historical development of time measurement tools, universal time measurement system, space-time theory, and time as a fourth dimension. To determine the effectiveness of TTP and its effect on middle school students' computational thinking skills, a mixed methodology was adopted in which both a quasi-experimental design including a pretest-posttest control group and an observational case study were used concurrently. The study group consisted of eighth-grade students from a public middle school in Turkey, selected according to the convenient sampling method. A computational thinking test was used to collect quantitative data, and observations and semi-structured interviews were utilized for the collection of qualitative data. According to the results of analyses, when the effects of the pretest scores were not considered, there was a significant difference (F.(469), 1, R-2=.518) between the final test scores of the experimental and control groups in favor of the former. Based on these findings, it can be stated that the proposed STEAM-based program significantly improves the computational thinking skills of eighth-grade middle school students.;2018
"The aim of this study is to determine how much various variables explain students' computational thinking (CT) skills. Furthermore, it was aimed to produce a model that explains and predicts the relations between computational thinking skills and various variables. Study group consists of 156 students who were studying in 5-12. Class in 2015 2016 academic year in different schools in Ankara. Relational screening model was used in this research. Two different data collection instruments were used in this research. The first one is Personal Information Form. The second one is Computational Thinking Skills Scale. Structural Equation Model was used in data analysis so as to produce a model that explains and predicts the relations between computational thinking skills and various variables. According to research results, it was found that computational thinking skill was highly predicted by variables, respectively; thinking styles, academic success in mathematic class, attitude against mathematic class. (C) 2017 Elsevier Ltd. All rights reserved.";2018
The aim of this study was to assess elementary teachers' pedagogical content knowledge (PCK) of and confidence in their ability to support students in enacting the science and engineering practices (SEPs) of the Next Generation Science Standards. Findings from this study were used to inform the planning of a professional development program for these teachers. This was a mixed-methods analysis of teachers' responses to a survey that included self-assessment ratings of their knowledge and confidence as well as open-ended questions about how students enact the SEPs in class. Responses detailing how students could enact SEPs were used to ascertain teachers' PCK via a modified novice-expert scale as well as coded for examples of PCK. Findings from the self-report portion revealed remarkable consistency between teachers' ratings of their perceptions of knowledge and confidence: The highest score was in SEP 4 (analyzing and interpreting data) and the lowest score was in SEP 5 (using mathematics and computational thinking) for both knowledge and confidence. Results from the open-ended questions showed that most teachers' examples were scored as competent on the components of PCK assessed. Teachers scored highest in SEP 1 (asking questions and defining problems) and lowest in SEP 8 (obtaining, evaluating, and communicating information). Qualitative coding of responses revealed that teachers were able to describe their knowledge of curriculum, students' ability to enact SEPs, instructional strategies, as well as limitations. Implications for science education research and teacher professional development are discussed.;2018
The benefits of developing children's computational thinking have been widely discussed with various approaches and learning tools. This paper reports the piloting of second-year longitudinal study, aiming to examine the effect of computational thinking education on the 5th grade students (n = 85) as they develop their algorithmic thinking and debugging skills. The results show that students benefited from our designed curriculum with learning gains in algorithmic thinking, especially in analyzing and finding the essential instructions to solve computational problems. Students also achieved significant gains in debugging programs. The study demonstrated that with age-appropriate learning materials and learning approach, even young children can develop computational thinking skills important to thriving in 21st century. This pilot study sets the direction of analyzing the rest of the 5th grade students' performance as well as the next year study.;2018
The chapter presents a summary of developments in relation to Information and Communication Technologies (ICT) in educational policies in Australia and New Zealand. It provides important insights into how policy decisions are influenced by the national and local contexts in those countries, and how policies are influencing the integration of ICT in teaching and learning in primary and secondary education. Trends and developments are identified through the analysis of policy documents and published research to highlight differences and similarities between the two countries. The chapter indicates that both countries have introduced digital technologies in schooling in ways which reflect learning with digital technologies, and are shown to be influenced by international trends. Both Australia and New Zealand have been developing curriculum to guide the teaching of students to learn about digital technologies, through computational thinking and coding. A key challenge continues to be providing equitable access to opportunities for teachers and students to integrate digital technologies effectively into teaching and learning. However, New Zealand has a nationally funded policy of providing universal access to Broadband Internet to all schools which research has found to correlate with improved achievement in the primary years and similar infrastructure priorities were evident in Australia. A further challenge is building teacher capability with and dispositions about digital technologies for effective implementation of policies in both countries.;2018
"The complexity of computational problems which real world professionals face is constantly increasing and requires critical thinking (CRIT). Many researches consider that CRIT refer to abilities, such as analysis, assessment, and reflection that affect a person's decision on what action to take. Indeed, CRIT is an important component in problem solving; It assists in deciding what knowledge is needed, and in considering why, how, and when to use that knowledge to solve a given problem. In the context of learning, students' CRIT could be enhanced by exposing them to complex problems and compound systems. Usually, teaching computer science (CS) in high school provides opportunities for students to acquire critical thinking abilities at a basic level since problems are well defined and not compound. However, complex problems contain many components and interrelations and aspects of uncertainty, which require high-level CRIT. In this study, we describe a workshop in which 36 high-school CS students participated. The workshop was based on case studies related to a number of robots that help people perform various tasks. The workshop was designed to engage students in varied aspects of critical thinking. The purpose of the study was to examine: (a) the quality of students' demonstrated CRIT, and if and how it related to the quality of the students' solution, and (b) the workshop's contribution to students' CRIT. Data: Using pre/post-questionnaires, we asked students to analyze and design different robots that perform certain actions. Analysis method: initially, we divided students' responses to fragments, where each fragment referred to perspectives related to the robot system (e.g., functionality, user-experience, structure). Next, we used the cognitive dimension of Bloom's revised taxonomy and each fragment, for every perspective that appeared in it, we identified the cognitive category that was articulated in it. Finally, responses were rated as high quality if they demonstrated higher cognitive categories and included multiple perspectives. A preliminary analysis of the findings shows that in the post-questionnaire, in comparison to pre-questionnaire, the students demonstrated higher levels of CRIT in more perspectives of the robot system. They asked more critical questions about the robot, and were more sensitive to the users' experience and to the robot's robustness, i.e., its ability to deal with unexpected problems. In this paper, we discuss the findings, insights and implications of this study regarding enhancing advanced computational problem solving and CRIT in computer science education.";2018
The Computer Science Unplugged activities and project has been an influential STEM (Science, Technology, Engineering & Mathematics) initiative, providing enrichment and teaching activities supporting computational thinking. Many of its activities are suitable for children. One of the most popular Unplugged activities is Kid Krypto, invented by Mike Fellows and Neal Koblitz. Kid Krypto demonstrates the mathematics underlying public-key cryptography without using advanced mathematics. The paper gives an example of a Kid Krypto-style encryption system that is based on disjoint cycles in a graph or network and which is accessible to a very young audience. Also described is the original Kid Krypto system which is based on a version of dominating set called perfect code. The paper urges research scientists to participate in mathematical sciences communication and outreach.;2018
The concept of decomposition in computer science and engineering is considered a fundamental component of computational thinking and is prevalent in design of algorithms, software construction, hardware design, and more. We propose a simple and natural formalization of sequential decomposition, in which a task is decomposed into two sequential sub-tasks, with the first sub-task to be executed out before the second sub-task is executed. These tasks are specified by means of input/output relations. We define and study decomposition problems, which is to decide whether a given specification can be sequentially decomposed. Our main result is that de-composition itself is a difficult computational problem. More specifically, we study decomposition problems in three settings: where the input task is specified explicitly, by means of Boolean circuits, and by means of automatic relations. We show that in the first setting decomposition is NP-complete, in the second setting it is NEXPTIME-complete, and in the third setting there is evidence to suggest that it is undecidable. Our results indicate that the intuitive idea of decomposition as a system-design approach requires further investigation. In particular, we show that adding human to the loop by asking for a decomposition hint lowers the complexity of decomposition problems considerably.;2018
The course Computer Basic is the core course of basic computer teaching in Colleges and universities, and it is an important part of general education in universities. The teaching goal is to cultivate students' information literacy, computational science literacy and Computational Thinking Ability in an all-round way, improve students' computer application level and computer problem solving ability, and lay a solid foundation for subsequent courses.;2018
The cultivation of computational thinking is not a requirement of computer science, but an important part of general education in the whole university. Thinking cannot be restricted by professional. Students of different professional backgrounds have common characteristics in thinking problems, solving problems and dealing with problems. This paper discusses two unique properties of computational thinking, which can be used to explain and relate the world. These two qualities are the boundaries between computational thinking and empirical thinking and logical thinking. This paper theoretically expounds the connotation of these two characteristics and their position in computational thinking. At the same time, the significance and function of these two characteristics to computer science and computer engineering are further discussed, especially in Computer Engineering, which become the important theoretical basis and background, and influence the quality standards and development standards of engineering technology. Combined with the practice of teaching reform, this article puts forward that we should strengthen the understanding of this aspect in teaching contents.;2018
The development of computational thinking is a major topic in K-12 education. Many of these experiences focus on teaching programming using block-based languages. As part of these activities, it is important for students to receive feedback on their assignments. Yet, in practice it may be difficult to provide personalized, objective and consistent feedback. In this context, automatic assessment and grading has become important. While there exist diverse graders for text-based languages, support for block-based programming languages is still scarce. This article presents CodeMaster, a free web application that in a problem-based learning context allows to automatically assess and grade projects programmed with App Inventor and Snap!. It uses a rubric measuring computational thinking based on a static code analysis. Students can use the tool to get feedback to encourage them to improve their programming competencies. It can also be used by teachers for assessing whole classes easing their workload.;2018
"The development of elementary-aged students' STEM and computer science (CS) literacy is critical in this evolving technological landscape, thus, promoting success for college, career, and STEM/CS professional paths. Research has suggested that elementary-aged students need developmentally appropriate STEM integrated opportunities in the classroom; however, little is known about the potential impact of CS programming and how these opportunities engender positive perceptions, foster confidence, and promote perseverance to nurture students' early career aspirations related to STEM/CS. The main purpose of this mixed-method study was to examine elementary-aged students' (N = 132) perceptions of STEM, career choices, and effects from pre- to post-test intervention of CS lessons (N = 183) over a three-month period. Findings included positive and significant changes from students' pre- to post-tests as well as augmented themes from 52 student interviews to represent increased enjoyment of CS lessons, early exposure, and its benefits for learning to future careers.";2018
"The DIVAS (Digital Imaging and Vision Applications in Science) project addresses workforce challenges in science, technology, engineering, and mathematics by creating a pedagogical and programmatic on-ramp that empowers natural science majors to engage in authentic computational problems as members of skilled, professional teams. We are developing and testing institutional practices and curricular innovations that engage and train STEM undergraduate students to use Python programming, and image processing in particular, in their undergraduate research projects. Students are recruited into the DIVAS program in the first semester of their first year. DIVAS scholars and other participating students can experience a variety of interventions including: 1) a one-credit DIVAS seminar exploring several imaging and computing topics; 2) image capture and analysis modules in introductory-or upper-level biology and chemistry courses; 3) a week-long, intensive coding bootcamp that introduces bash, git, Python programming, and the OpenCV image processing library; 4) pair programming exercises to solve genuine morphometric and colorimetric problems; 5) an extended summer research project involving image processing; and 6) weekly code reviews to check on progress and provide guidance. The DIVAS projects measures the impact of these interventions on students' self-reported efficacy in using computation to solve problems, their attitudes towards computation, and their computational thinking skills, using both established and newly developed instruments. Our first year results show that multiple interventions have had significant positive impact on students' self-efficacy and interest in using computing in their future careers, and certain computational thinking skills.";2018
The digital world is generating data at a staggering and still increasing rate. While these big data have unlocked novel opportunities to understand public health, they hold still greater potential for research and practice. This review explores several key issues that have arisen around big data. First, we propose a taxonomy of sources of big data to clarify terminology and identify threads common across some subtypes of big data. Next, we consider common public health research and practice uses for big data, including surveillance, hypothesis-generating research, and causal inference, while exploring the role that machine learning may play in each use. We then consider the ethical implications of the big data revolution with particular emphasis on maintaining appropriate care for privacy in a world in which technology is rapidly changing social norms regarding the need for (and even the meaning of) privacy. Finally, we make suggestions regarding structuring teams and training to succeed in working with big data in research and practice.;2018
The discipline of professional archivists is rapidly changing. Most contemporary records are created, stored, maintained, used and preserved in digital form. Most graduate programs and continuing education programs in Archival Studies address this challenge by introducing students to information technology as it relates to digital records. We propose an approach to addressing this challenge based on introducing computational thinking into the graduate archival studies curriculum.;2018
The European Commission Science Hub has been promoting Computational Thinking (CT) as an important 21st century skill or competence. However, despite the high interest in developing computational thinking among schoolchildren and the large public and private investment in CT initiatives, there arc a number of issues and challenges for the integration of CT in the school curricula. On the other hand, the Digital Competence (DC) Framework 2.0 (DigCom) is promoted in the same European Commission Science Hub portal. It shows that both topics have many things in common. Thus, there is the need of research on the relationship between CT and digital competence. The goal of this paper is to analyse and discuss the relationship between DC and CT, and to help educators as well as educational policy makers to make informed decisions about how CT and DC can be included in their local institutions. We begin by defining DC and CT and then discuss the current state of both phenomena in education in multiple countries in Europe. By analysing official documents, we try to find the underlying commonness in both DC and CT, and discover all possible connections between them. Possible interconnections between the component groups of approaches are presented in Fig. 1. [GRAPHICS] .;2018
The fundamental of programming course is a professional basic course offered by institutions of higher learning, and C language is usually chosen as the programming language to help cultivate students' comprehensive quality and ability. Taking the fundamental of programming course as an example, aiming at the problems existing in traditional theory teaching and practice teaching, it proposes the theoretical teaching reform that stimulates students' interest in learning and develops the ability of computational thinking, constructs stage and hierarchical practice teaching system, improves continuously teaching methods and introduces the mobile cloud platform to assist teaching. The practice has proved that the students' comprehensive ability has been improved and the teaching effect has been achieved.;2018
The goal of this paper is to explore dynamic geometry environments (DGE) as a type of computer programming language. Using projects created by secondary students in one particular DGE, we analyse the extent to which the various aspects of computational thinkingincluding both ways of doing things and particular conceptswere evident in their work, drawing specifically on frameworks for computational thinking that are designed for the purpose of mathematics education. We show how many of the practices associated with the use of propositional programming languages also feature in the more spatial and temporal register of the geometric language' of DGEs.;2018
The Italian Ministry of Education is promoting the introduction of coding and computational thinking at compulsory school level. One of the research initiatives being taken in this regard is Programming to Learn in Italian Primary School. The project's aim is to develop a vertical curriculum for the introduction of programming in Italian primary schools as a new expressive language for children. All the schoolchildren involved in the project attend a weekly computer lab class held throughout the school year. They work on individual projects during the first half of the year. Then, in the second half of the year, they work in small groups on a common theme that the teacher selects from those studied in class. In this poster, we report the work of a fifth-grade class (24 students - 7 females and 17 males, aged 10-11) in the 2017-2018 school year. Findings from individual and group Scratch programs produced, self-evaluation questionnaire and semi-structured interviews with the groups are presented.;2018
The impact of information coupled with the effects of innovation is profound on all aspects of city life, from transport planning and energy use reduction to care provision and assisted living. But it also includes new ways of organising communities, as well as access to political process. The idea that information is key for the design and management of future cities matures in the relevant communities of architects, planners, engineers, computer scientists and urban innovators, so the time is right to also consider what citizenship skills are required. Familiarity, if not proficiency, in `digital' skills emerge as essential aspect of future citizenship. We don't only mean however efficient digital consumption skills, but also digital creation skills such as computational thinking and coding, entrepreneurship and systems thinking, information architecting as well as a risk-informed perception of data privacy and security. The challenges of delivering such a skillset are many, from designing a 21st century curriculum, to ensuring fair access to technology for people of all abilities, race, gender, age and class.;2018
The impact of technology on workforce development and socioeconomic prosperity has made K-12 computing engineering and STEM in general a national educational priority. However, the integration of computing remains obstructed by resources and lack of professional development to support students' learning. Further challenging is students' STEM attitudes and interest do not matriculate with them into higher education. This issue is especially critical for traditionally underrepresented and underserved populations including females, racial/ethnic minority groups, and students of low-socioeconomic status (SES). To help mitigate challenges, we developed an unplugged (computer-less) computing engineering and robotics lesson composed of two introductory computing concepts, sequencing and decision-making, using a small robot arm and tangible programming blocks. Through students' sequencing of operations, debugging, and executing complex robotic behavior, we seek to determine if students' interest or attitudes change toward engineering. Nine one-hour introductory pilot lessons with 148 students, grades 6-10, at two public middle schools, and one summer camp were conducted. We measured students' engineering interest and attitudes through a 15 question pre-and post-lesson survey and calculated aggregate factor scores for interest and attitudes. We found low-SES students' a priori interests and attitudes tend to be lower and more varied than those of their high-SES peers. These preliminary results suggest that the integration of introductory computing and robotics lessons in low-SES classrooms may help students reach similar levels of engineering interest and attitudes as their high-SES peers.;2018
The increasing of ICT utilization brought the increasing of energy consumption which causes global emission. In fact, ICT utilization produces two percent of global emission of CO2. Most studies focus on reducing global emission of CO2 through energy-efficient software and hardware utilizations. However, how to improve energy-efficient programming skills for students has not been investigated well. To address this issue, this work proposes exploring computational thinking which is a teaching learning model adopted computer works. Computational thinking is applied in Fundamental programming subject for eight meetings. Energy-efficient programming skill of students is evaluated before and after the implementation of computational thinking In addition, the instruments to evaluate energy-efficient programming skill is adapted from previous related work. Finally, statistical analysis reveals that computational thinking improves student's skill in energy-efficient programming.;2018
The introduction of computational thinking into primary/secondary or K-12 education has been widely attempted. In Japan, programming education will be introduced into primary school in 2020. The role of parents in primary education is highly important, and their attitude towards education has a considerable influence on children's attitudes. To investigate parents' concerns regarding programming education in primary school, a preliminary questionnaire survey has been conducted as a first step of the study. (C) 2018 The Authors. Published by Elsevier Ltd.;2018
"The K-12 Computer Science Framework has established that students should be learning about the computer science concept of variables as early as middle school, although the field has not yet determined how this and other related concepts should be introduced. Secondary school computer science curricula such as Exploring CS and AP CS Principles often teach the concept of variables in the context of algebra, which most students have already encountered in their mathematics courses. However, when strategizing how to introduce the concept at the middle school level, we confront the reality that many middle schoolers have not yet learned algebra. With that challenge in mind, this position paper makes a case for introducing the concept of variables in the context of middle school science. In addition to an analysis of existing curricula, the paper includes discussion of a day-long pilot study and the consequent teacher feedback that further supports the approach. The CS For All initiative has increased interest in bringing computer science to middle school classrooms; this paper makes an argument for doing so in a way that can benefit students' learning of both computer science and core science content.";2018
The Maryland State Archives (MSA) and the Digital Curation Innovation Center (DCIC) of the University of Maryland's iSchool are collaborating on a digital project that utilizes digital strategies and technologies to create an in-depth understanding of the African-American experience in Maryland during the era of slavery. Utilizing crowdsourcing for transcription, data cleaning and transformation techniques, and data visualization strategies, the joint project team is creating new avenues for understanding the complex web of relationships that undergirded the institution of slavery. iSchool students, full participants on the project team, are learning digital curation and other technical skills while gaining insights into the multiple uses of how cultural Big Data can penetrate the past and illuminate the present.;2018
The Ministry of Information Technology, Information and Communication, under the aegis of the Mauritian government aims at developing digital learning to improve the potential of Mauritian students for the future. As the country posits itself as a cyber-island with a fully developed information technology hub, it has become imperative to think about leveraging the teaching of computer science in lower secondary schools (Grades 7-9). So far, this has been limited to basic courses in computing that are essentially theory focused. This paper states that students at this stated level need to develop 'computational thinking' so that they are ready for the workplace and will effectively enter the digital world. It limits itself to two key variables resource leveraging and teaching computing. In the first case, it raises arguments on programming languages, hardware and software that might apply to students in the new curriculum. In the teaching area, the paper suggests that a combination of teaching programming, inclusion and informal learning will be the possibilities to accompany students overcome the digital divide and get the opportunity to become effective as learners and trained ICT students to serve their nation.;2018
The most popular technologies such as artificial intelligence and big data are inseparable from the support of computers. Those who are proficient in the working principle of computer systems and innovative in using computer technology to solve real problems in production and life have become the shortages required in the current stage of social development. By analyzing the law of students' cognitive development, we plan to implement a program that can gradually cultivate students' innovative ability, and design targeted practical cases and assessment methods for each level of cognition. The results of teaching practice in the past three years show that this process is not only conducive to systematically cultivating students' computational thinking ability, but also better able to train students' comprehensive ability to solve complex engineering problems. In addition, the process also demonstrates the level of teaching and research to instructors and the output of cooperative enterprise R&D results will be accelerated.;2018
The need to attract learners and improve retention in computational thinking classes has never been greater than presently. Alarmingly, research suggests that the relative popularity of computer science in K-12 and colleges is not increasing while other STEM subjects are witnessing substantial rise in enrollment. Moreover, more than one third of those who choose computer science, drop out or fail the first programming class dashing hopes of building a computationally savvy workforce for the emerging global economy. In this paper, we introduce a novel social networking system, called OpenSchool, for learners and educators alike, which is able to double as a contemporary social networking system along the lines of Facebook for instance, and serve the special needs of free-choice STEM learners, computer science learners in particular. We discuss its salient features, highlight its advantages, collaborating capabilities, and learning support for STEM, especially computational thinking, learners.;2018
The Next Generation Science Standard (NGSS) is designed to shift how teaching framework from teaching facts to construct explanations from the phenomena. In particular, the science and engineering practices (SEPs) interrelate and represent the knowledge and reasoning skill necessary for students to build a rich network of connected ideas that serve as a conceptual tool for explaining phenomena, solving problems, and making decisions. However, knowledge and reasoning skills are less implemented during teaching process. Therefore, the aim of this research was to identify the profile of teacher experiences in implementing the NGSS SEPs in their learning process. This research was conducted by a descriptive research method. The number of participants involved in this research is 21 taken by random sampling technique. The data of teacher instructional practice was collected using teacher questionnaire concerned teacher instructional practice. The survey tool consists of 24 questions covering the following six areas of instructional practices with four of these are linking to the NGSS SEPs. The result revealed the lowest score was collecting data and analyze which is linked to NGSS SEPs 3-5 (planning and carrying out investigation, analyzing and interpreting data, and using mathematic and computational thinking), closely followed by instigating and investigating which is linked to NGSS SEPs 1 and 3 (asking question and defining problem, and planning and carrying out investigation. Modeling which is linked to NGSS SEPs 2 (developing and using model) and critique, explanation, and argumentation which is linked to NGSS SEPs 6-7 (constructing explanations and designing solutions, and engaging argument from evidence) have the same score in the higher level. Traditional instruction's score was relatively high and the highest score was prior knowledge. The result showed that teacher's experiences in learning process are dominated by traditional instruction and using student's prior knowledge. The teacher's experiences in implementing the NGSS SEPs is still rare. In order to help engaging students in the NGSS SEPs, instructional practices based on the NGSS SEPs need to be more implemented.;2018
"The Next-Generation Science Standards (NGSS) challenge primary teachers and students to work and think like scientists and engineers as they strive to understand complex concepts. Teachers and teacher educators can leverage what is already known about inquiry teaching as they plan instruction to help students meet the new standards. This cross-case analysis of a multiple case study examined teacher practices in the context of a semester-long professional development course for elementary teachers. We reviewed lessons and teacher reflections, examining how kindergarten and first grade teachers incorporated NGSS scientific and engineering practices during inquiry-based instruction. We found that most of the teachers worked with their students on asking questions; planning and carrying out investigations; analyzing and interpreting data, using mathematics and computational thinking; and obtaining, evaluating and communicating information. Teachers faced challenges in supporting students in developing their own questions that could be investigated and using data collection strategies that aligned with students' development of number sense concepts. Also, some teachers overemphasized the scientific method and lacked clarity in how they elicited and responded to student predictions. Discussion focuses on teacher supports that will be needed as states transition to NGSS.";2018
The objective of this work is focused on the definition of a methodology for the development of computational thinking and the subsequent measurement of the development obtained in the students. The methodological proposal includes specific tasks or activities to develop computational thinking as well as tests that allow analyzing the extent to which computational thinking or skills related to problem solving have been developed in a scientific, specific, or even general or of practical application in situations of daily life. Once the methodological framework was defined, we proceeded to develop a computer tool that provides global support for the implementation of this methodology. The implemented platform has a simple and intuitive design that allows an easy use of it since it is aimed at pre-university students and teachers who necessarily do not have advanced knowledge of Computer Science. Finally, the platform automatically provides progress reports and course development, including statistical data by age or gender, among others.;2018
The objectives of computer education had been transited from general information literacy to problem-solving capabilities. Therefore, the programming and software education is more getting important and critical for computational thinking. So far, many researches verified that Scratch programming is very useful subject to improve the problem-solving capability and computational thinking skills. In this paper, we analyzed the previous researches in perspectives of academic achievements. And we suggested further research directions based on their limitations.;2018
The paper describes the initial research on the integration of Computational Thinking, through the dissemination of skills and practice of exercises in a context of Gamification, within the framework of a pilot program called Apadrinamiento, aimed to students of high school who visit the facilities of the Universidad Tecnologica de Puebla, and that are considering studying in the Division of Information and Communication Technologies. The main objective is to increase the confidence of students in the solution of problems through the skills that exercise Computational Thinking. This report details the planning of the activities, the indicators to be measured and the scenarios where the interventions will be carried out that allow, in a second stage, the creation of strategies to avoid desertion. The main conclusion of the paper is to have created an academic strategy to benefit the understanding of pre-university students in the current computer world through the exercise of Computational Thinking.;2018
The paper presents the Olimpiadi di Problem Solving, a mild and inclusive competition aimed to promote computational thinking and general problem-solving in Italian schools. We describe motivation, teaching strategies behind the initiative, as well as its structure, organization and give some sample of the problems proposed to students. We also present some data that show the broad participation of Italian schools to the initiative, and a preliminary analysis of the results obtained by the students in the last 5 editions, which suggests that the competition fosters deep learning of computational thinking knowledge and skills.;2018
The paper presents the results of the research conducted in 2018 among 240 randomly selected teachers from the Kujawsko-Pomorskie Voivodeship. It aimed at recognizing the main barriers and difficulties that teachers face while implementing the elements of computational thinking and coding into IT education in grades I-III. Such changes have been introduced recently into the primary school curriculum by the Ministry of Education in Poland. The data collected from the surveys and the individual interviews allowed for identifying the main problems, among which the lack of experience and limited access to educational materials are the most commonly listed. The participants of the research study were also supposed to take the test aimed at verifying their general knowledge of IT tools as well as their programming skills. While the first one could be assessed as satisfactory the level of the later was much lower than expected. During the interviews, the teachers also complained that activities such as planning, analyzing and constructing exercises corresponding with the level of children's maturity are time-consuming. Relatively high number of students in the classes and insufficient infrastructure also do not help to ease the problem.;2018
The paper tries to answer the question - can the basics of algorithms and programming at faculties other than computer science (informatics) be taught more effectively using spreadsheets, computer algebra systems and e-Learning tools and materials like e-Books, software animations and specialized flowchart software. The first part of the paper gives a critical review of the literature of the subject. In the second part of the paper the programme of an applied computer science course devoted to algorithms programming is presented. The third part shows results of two surveys.;2018
The pervasiveness of information and communication technologies in everyday life imposes the need to be digitally proficient. Computational thinking and learning to code are necessary 21st century skills for students. Those skills can drastically influence future labor market. Carefully planned educational approaches must be used in order to develop computational thinking skills at primary school level. We propose to use game based learning combined with flipped classroom and collaborative team work. This can utilize students' energy and enthusiasm they have when playing games, in achieving educational goals. This methodological approach is also very useful to develop different level of digital competences focusing on a technology as a tool for achieving certain goal. Scottie Go! is an interactive puzzle-based mobile game which aims to involve primary school children in coding using approach similar to popular block based coding approaches such as Scratch coding environment. The coding is very similar to making the ordinary paper puzzle, where each part of the puzzle is one coding instruction. The compiling of code is done using mobile app camera-based interface that is very popular among students. This simple and tactile approach makes easier for young learners to deal with abstract coding concepts without depending on technology at one side, and developing sophisticated digital competences (simplified augmented reality) at other side. The collaborative game approach is used in order to integrate less interested or talented students in achieving learning outcomes in a very natural way. By playing the game students have both fun and possibility to learn from the other in the flipped classroom manner. The proposed approach was used with 120 students from six different primary schools over a period of two months. The students than took part in the survey concerning their overall experience in using the game for development of computational skills. Information concerning students' interest in the game, ease of use, students' quality of experience and correspondence to educational goals were obtained using the survey. In addition, An exam has been carried out to evaluate students' learning achievements and long term knowledge. Survey results together with exams' results indicate that the proposed approach has created collaborative, stimulating and motivational learning environments which lead to successful achieving of learning outcomes. Proposed teaching methodology and results of the survey are presented in the paper.;2018
The PictureSTEM project consists of instructional units for grades K-2 that employ engineering and literacy contexts to integrate science, technology, engineering, mathematics, and computational thinking (STEM+C) content instruction in meaningful and significant ways. The PictureSTEM project utilizes picture books and an engineering design challenge to provide students with authentic, contextual activities that engage learners in specific STEM content. Four components differentiate the PictureSTEM units from what teachers are currently implementing in their classrooms: (1) engineering design as the interdisciplinary glue, (2) realistic engineering contexts to promote student engagement, (3) high-quality literature to facilitate meaningful connections, and (4) instruction of specific STEM+C content within an integrated approach. Examples from research data on the PictureSTEM unit, Designing Paper Baskets, conducted in kindergarten classrooms, will illustrate how the four foundational components of this integrated STEM curricula play an important role in designing meaningful and contextual learning for younger students.;2018
The promotion of computational thinking education has become a worldwide trend. To cultivate the computational thinking ability of children at young age, many computational thinking board games have appeared recently. This article introduces five computational thinking board games, including Robot Turtles, King of Pirates, Doggy Code, ROBOT WARS Coding Board Game, and Code master, and then to analyze its characteristics respectively. Additionally, this article also points out the current limitations and challenges of computational thinking board games. We hope more schools or operators will join the development of computational thinking education in the future.;2018
The purpose of the paper is to review concept of art in STEAM, and to discuss what and how it work in computing thinking. There are various kind of computing technologies to make shapes, pictures and signs for artistic activities, that be generated by algorithmic programme. In series of ideas are made by computing thinking, extending perceive for expression. There are three form of creation, which code as translator between perceive (see, hear .....) and performance. The paper conclude that educators could apply artistic activities through computing thinking to extend the range of materials and spirits of inquiry by applying technologies in creation.;2018
The purpose of the present study was to investigate how the inclusion of computational creativity exercises (CCEs) merging computational and creative thinking in undergraduate computer science (CS) courses affected students' course grades, learning of core CS knowledge, self-efficacy, and creative competency. CCEs were done in lower-and upper-division CS courses at a single university. Students in CCE implementation courses were compared to students in the same courses in different semesters. Propensity score matching was used to create comparable groups (control and implementation) based on students' GPA, motivation, and engagement. Results showed that implementing CCEs in undergraduate CS courses enhanced grades, learning of core CS knowledge, and self-efficacy for creatively applying CS knowledge. However, CCEs did not impact creative competency. The effect of the CCEs was consistent across upper-and lower-division courses for all outcomes. Unlike previous studies that only established the support for CCEs, such as positive dosage effects, the results of this study indicate that CCEs have a causal effect on students' achievement, learning, and self-efficacy, and this effect is independent of general academic achievement, motivation, and engagement. These findings establish the CCEs as a validated, evidence-based instructional method.;2018
The purpose of this study is the integration of computational thinking in the introductory course Introduction to Computer Science of Aristotle University of Thessaloniki. After the publication of Jeanette Wing's innovative article, computational thinking became of interest for the educational community and nowadays is considered as important as writing, reading and arithmetic. This research attempts to integrate the computational thinking skill in the introductory course of the Computer Science department. In order for this goal to be achieved and its results to be as good as possible, the related literature was looked into, for the lesson to meet, specifically the part of which is dealing with the computational thinking concepts, the formal and informal criteria that have been set. For the purposes of the research some presentations were developed based on four fundamental concepts of computational thinking, decomposition, pattern recognition, abstraction and algorithms. Also, a part of them was about Python, the programming language which was an accompanying tool of the lesson and consequently of computational thinking. Except from the presentations, two assignments were designed and developed in order to assess the progress of the skill in the participants and also a part of the final test was dedicated to that assessment, too. The results showed that there was no statistically significant difference in the performance of participants between the two tests/assignments conducted.;2018
The purpose of this study is to develop and validate the evaluation indicators of teaching. The relevance of the present study is due to the problem of improving the quality of school education in the Russian Federation by means of renewal of the content of general education, provided by the RF State program Development of Education for 2013-2020. The vectors of updating are determined by the tasks of transition to the democratic and constitutional state, the market economy, the need to overcome the dangers of the country lagging behind global trends of economic and social development and, what is the most important, by the growing influence of the human capital on the economy of the country. The aim of this study is to identify the level of readiness of teachers to implement innovative forms of educational activities into the educational process with the help of the analysis of the responses of mathematics teachers to reflexive questions. The presentation of lessons with innovative forms during the methodical workshop and the systematic analysis of the experimental data are the main technologies. As a result of the experimental study, conducted in 2015-2017 in the Kirov region with a group of 71 mathematics teachers we can present the experience of the implementation of innovative organization forms of educational process and summarize the results in the form of the subjective reflective assessment. The article justifies the high level of pedagogical readiness of mathematics teachers to introduce innovative forms of organization of educational activities such as: event-based learning, adaptive teaching, 'bring your own devices', computational thinking, and stealth assessment.;2018
The purpose of this study is to investigate the perceived cognitive load and its effects on the academic performance in Scratch-based programming. The four main concepts of programming (sequences, operators, conditions and loop) were delivered in the instructional package. Participants were 12 sixth-grade students enrolled at a public secondary school. The results from quantitative and qualitative instruments indicated that students' perceived cognitive loads were close to each other among four programming concepts. The attractive interface of Scratch was somewhat useful but some parts of the interface were problematic for achieving the programming tasks. This study concludes with suggestions for Scratch practitioners and researchers to pay attention to the sources of cognitive load effects.;2018
The purpose of this study was to design a blended learning environment, specifically a flipped classroom in order to provide capabilities for motivation to primary school students, to familiarize them with programming principles and encourage them to get involved with the STEAM (Science, Technology, Engineering, Arts, Mathematics) fields. The blended learning environment provides on-line distance learning programming activities integrated into Moodle through which asynchronous collaboration and problem solving skills are cultivated. It also provides face-to-face active learning through STEAM programming activities. The instructional design is based on the ARCS motivational model, for each of its key components (Attention - Relevance Confidence - Satisfaction) different strategies and techniques were incorporated and combined with collaborative learning techniques, using various technological means. The study investigates mainly the impact of this design on the terms of: (a) motivation, (b) collaboration and (c) computational thinking of the students. The findings tentatively indicate that the instructional design of the blended environment is capable to empower motivation and enhance students' collaborative and computational thinking skills. However, a further research is required to confirm the proposed conceptual framework.;2018
The purpose of this study was to explore the nine components of computational thinking (CT) practices and their operational definitions from the view of science education and to develop a CT practice framework that is going to be used as a planning and assessing tool for CT practice, as it is required for students to equip with in order to become creative problem solvers in 21 st century. We employed this framework into the earlier developed STEAM programs to see how it was valid and reliable. We first reviewed theoretical articles about CT from computer science and technology education field. We then proposed 9 components of CT as defined in technology education but modified operational definitions in each component from the perspective of science education. This preliminary CTPF (computational thinking practice framework) from the viewpoint of science education consisting of 9 components including data collection, data analysis, data representation, decomposing, abstraction, algorithm and procedures, automation, simulation, and parallelization. We discussed each component with operational definition to check if those components were useful in and applicable for science programs. We employed this CTPF into two different topics of STEAM programs to see if those components were observable with operational definitions. The profile of CT components within the selected STEAM programs for this study showed one sequential spectrum covering from data collection to simulation as the grade level went higher. The first three data related CT components were dominating at elementary level, all components of CT except parallelization were found at middle school level, and finally more frequencies in every component of CT except parallelization were also found at high school level than middle school level. On the basis of the result of CT usage in STEAM programs, we included 'generalization' in CTPF of science education instead of 'parallelization' which was not found. The implication about teacher education was made based on the CTPF in terms of science education.;2018
The purpose of this study was to investigate how elementary teachers with little knowledge of computer science (CS) and project-based learning (PBL) experienced integrating CS through PBL as a part of a standards-based elementary curriculum in Grades 3-5. The researchers used qualitative constant comparison methods on field notes and reflections to describe the teachers' participation in professional development to create CS-infused projects to be implemented with their students. Categories that emerged included standards integration, student autonomy, and challenges of infrastructure and time. The data are from the first 6 months of a 3-year, National Science Foundation-funded project.;2018
The recent widespread popularity of computational thinking (CT) has raised the need for a reliable method for assessing it. Recent CT tests focus on programming skills rather than the analytical ability and problem-solving processes in science, philosophy and other areas of knowledge. This poster presents the results (Test design) of an ongoing project that has developed a Psychometric Computational Thinking Test (PCTT) which has three phases: test design, test implementation and applying the test. In regards to the PCTT design, the reliability and validity of the test were based on content and construct validity which also includes its rating scales for its application. This work makes two contributions: (1) a standardized CT Test design incorporating psychometric techniques as well as computational techniques and (2) the inclusion of open-ended questions and their assessment with V of Aiken in order to validate responses.;2018
The role of computing in society is fundamental for the political, economic and cultural development of countries, especially in a globalized context. Computational thinking is an extremely important skill in the education of young students, since the ability of intuitively abstracting information and knowledge promotes an expansion of the learning dimension. This study aims to gather approaches used for teaching computational thinking exclusively to high school students, highlighting their performance and motivation resulting from the applications of such approaches. In order to answer our research question, a systematic mapping of the analysis of 15 studies was conducted. The use of computer programming proved to be the most used way to disseminate computational thinking. The students who participated in approaches regarding the insertion of computational thinking in the classroom showed positive impact on the development of classroom activities, as well as motivation to learn.;2018
The significant role of ICT in everyday life could change concepts about skills, education and learning. The digital fluency means not more to use of ICT tools (browsing, chatting, interacting etc.), but also to be able to design and create something new with the possibility of new media and to be more than an ordinary user, to be a creative creator. Create a program is one of the possibilities that supports parts of computational thinking and helps express yourself, explore the range of computers and yourself, involve external representation of problem solving processes, and to reflect on your own thinking - and even to think about thinking itself. Men majorly dominate the IT sector. On average 30% of the tech jobs around the globe are filled with women, but in Europe this number is even lower, only 7%. The reasons behind the decaying numbers root in our culture too. To meet more women on this field we have to change the mindset of the kids - attitudes of boys and girls, too. The work presented in this study focuses specifically on the improvement of developing and organizing a competition in Scratch for creative groupwork for girls, called Scratchmeccs (ScratchMatch). 2017 was the second year that we could organized this event. We used background questionnaire and would like to study the workflows in groups and what influence the successful groups.;2018
The significant role of ICT in everyday life could change concepts about skills, education, and learning. The changing of definitions about necessary ICT skills (from digital fluency to computational thinking) shows that ICT skills are more about thinking and expressing yourself, exploring the range of computers and yourself, involving external representation of problem solving processes, and reflecting on your own thinking - and even thinking about thinking itself. One possible tool to change education-paradigm, renew our thinking about ICT, about ICT education and thinking itself and to motivate kids in ICT and STEM education is the international Bebras challenge. It can be found in more than 50 countries over the world and plays a significant role in the education system of most countries. Some aims of this initiation is to move the ever-changing paradigms of education towards a more innovation-driven and sustainable development and to point out the importance of ICT education and express the necessary role of it in everyday life, as well as how specialists use ICT skills in different areas of works. This study focuses on Bebras background and the workflow, its changes in the Hungarian Bebras Challenge, the experiences and results of competitions in the last 5 years and the extension-activities.;2018
The so-called 21st century skills make the role of the teacher be notable as the protagonist of this social scenario. In the context of research regarding potentialities and limitations of ICT in education, we highlight in this bibliographic text three concepts that we believe are essential to education and which signal changes in initial teacher education in the near future. The concepts of digital literacy, hypertextuality and computational thinking permeate the discussion carried out in this text, based on theoretical compilations carried out in the last five years by the authors at CAPES journal portal and also at Mendeley article management and sharing software. The conclusions drawn from the theoretical and conceptual articulation made, which we consider still overlooked, essentially consider these concepts as the main changes in the social sphere and in education as a result of the introduction of ICT in the flow of human actions, with social and also cognitive intervention. The reason for these changes can be explained from the historical-cultural perspective of Vygotskian base, which, essentially, guides and enriches the discussion and the epistemological foundation on the role of ICT in education.;2018
The so-called STEAM programs aim to teach students to think critically and use engineering or technology in imaginative designs or creative approaches to real-world problems while building on students' mathematics and science base. STEAM stands for science, technology, engineering, and typically either art and mathematics. Rather than teach the five disciplines as separate and discrete subjects, STEAM integrates them into a cohesive learning paradigm based on real-world. What separates this approach from the traditional science and math education is the blended learning environment and showing students how the scientific method can be applied to everyday life. It teaches students computational thinking and focuses on the real world applications of problem solving. STEAM education begins while students are very young, and can be applied in different degrees of development, from elementary to high school. The University of Burgos has launched recently a STEAM initiative in terms of open activities for elementary schools students, a postgraduate course and theoretical and experimental research in the field, funded by competitive projects. This contribution shows two examples which serve as case studies of the application of the STEAM approach. Both case studies are based on the use of educational robots and its programming to develop critical thinking oriented to the design of practical solutions to solve mechanical engineering problems, such as control of vibration devices and regulation of ventilation facilities. The practical building of the examples is based on the so-called micro:bit, which refers to the BBC micro:bit device, an ARM-based embedded system designed by the BBC for use in computer education in the United Kingdom. The micro:bit project began in 2012 as part of the BBC Computer Literacy Programme. The device appears as a USB drive when connected to a computer and code can be flashed using drag and drop. The micro:bit was designed to encourage children to get actively involved in writing software for computers and building new things, rather than being consumers of media. The contribution presents the conception and development of both mechanical engineering exercises, in correspondence with the STEAM project at its initial stage. The description of the expected learning outcomes, context of the real problem, and available resources are presented, as well as final buildup. The contribution could be of help for interested readers involved in applying the STEAM approach.;2018
The software centered world following the fourth industrial revolution is rapidly approaching us. Countries around the world attach importance to software's ability as one of the key elements for training future human resources. In order to train software centered human resources, each university has designated Software Education as an essential curriculum for not only major but also non-majors. In the past Software Education was an education for a major, but recent Software Education was changed to the essential education that is necessary for all living in the software centered world. In the past the curriculum was focused on software development and implementation-oriented education, but recent curriculum emphasizes sequential arranging and thinking of problem solving. In order to reflect trends in recent Software Education in detail, we integrate Software Education with major concept of Computational Thinking. In this paper, we analyzed the effect of the main concept of Computational Thinking on Software Education for non-majored learners who received Software Education based on Computational Thinking (here refers to learners who major in humanities, social sciences and arts). In addition, research models of satisfaction, self-efficacy, and occupational change was established as the elements of Software Education, and it was found that there was a relation between Computational Thinking and Software Education.;2018
The term computational thinking does not have an unambiguous meaning, therefore we address its analysis with the aim of making its meaning clearer. In the paper, we first present several definitions extracted from a number of relevant publications. Then, the main elements included in these definitions are analyzed. The analysis shows that such definitions are ambiguous and heterogeneous. Depending on each specific definition, they refer to concepts, skills, attitudes and transversal competences. Finally, the paper includes a section where these findings are analyzed and potential risks are identified.;2018
The way in which the student processes the information, codifies it and recovers it, constitutes its learning approach. The learning process differentiates two qualitative ways of dealing with this process: the deep approach and the superficial approach. The use of each approach depends on the context. However, the adoption of a deep learning approach is positively related to the academic performance. Computational Thinking is defined as a competence of the XXI century, which allows solving problems from a computational point of view, and there is a variety of instruments that allow to measure it, and to know the state in which the evaluated student is. In this paper, we verified the existence of the positive significant relationship between the learning approach and computational thinking in students entering the career of Computer Sciences. By applying Pearson correlation test to verify the relationship between Learning Approaches and Computational Thinking, we found that both variables have homogeneous behaviors and that students show similar conditions. Men are in better conditions than women on the evaluated aspects of the Computational Thinking, Also, we found a significantly positive relationship between Computational Thinking and the Learning Approach (r = 0,882). This result shows that the learning approaches that students' practice are linked to the computational thinking they demonstrate. According to the results, the teachers of this career must develop active and deep methodological strategies due to the predisposition in these students.;2018
There is a great deal of overlap between the set of practices collected under the term computational thinking and the mathematical habits of mind that are the focus of much mathematics instruction. Despite this overlap, the links between these two desirable educational outcomes are rarely made explicit, either in classrooms or in the literature. This paper presents Lattice Land, a computational learning environment and accompanying curriculum designed to support the development of mathematical habits of mind and promote computational thinking practices in high-school mathematics classrooms. Lattice Land is a mathematical microworld where learners explore geometrical concepts by manipulating polygons drawn with discrete points on a plane. Using data from an implementation in a low-income, urban public high school, we show how the design of Lattice Land provides an opportunity for learners to use computational thinking practices and develop mathematical habits of mind, including tinkering, experimentation, pattern recognition, and formalizing hypothesis in conventional mathematical notation. We present Lattice Land as a restructuration of geometry, showing how this new and novel representational approach facilitates learners in developing computational thinking and mathematical habits of mind. The paper concludes with a discussion of the interplay between computational thinking and mathematical habits of mind, and how the thoughtful design of computational learning environments can support meaningful learning at the intersection of these disciplines.;2018
There is a growing need to present all students with an opportunity to learn computer science and computational thinking (CT) skills during their primary and secondary education. Traditionally, these opportunities are available outside of the core curriculum as stand-alone courses often taken by those with preparatory privilege. Researchers have identified the need to integrate CT into core classes to provide equitable access to these critical skills. We have worked in a research-practice partnership with two magnet middle schools focused on digital sciences to develop and implement computational thinking into life sciences classes. In this report, we present initial lessons learned while conducting our design-based implementation research on integrating computational thinking into middle school science classes. These case studies suggest that several factors including teacher engagement, teacher attitudes, student prior experience with CS/CT, and curriculum design can all impact student engagement in integrated science-CT lessons.;2018
There is growing interest in teaching children computer programming (coding) to prepare them for the demands of our increasingly digital society. However, we do not yet understand what cognitive skills children need in order to learn to code. The aim of our research program is to identify the requisite skills, with the goal of building a cognitive model of coding. The present research used a wooden robot (Cubetto, www.primotoys.com) to investigate coding ability in young children. Exp. 1 describes the development and evaluation of the assessment instrument, which was tested with 18 3-to-5-year-old children. The instrument (Coding Development (CODE) Test 3-6) was used in Exp. 2 to investigate the relationship between coding skill and cognitive compiling - the ability to formulate mental action plans in natural language. Thirty 5-to-6-year-olds participated in Exp. 2. Using Bayesian statistics, we found evidence that cognitive compiling predicts coding performance above and beyond age and nonverbal intelligence. We evaluate the outcomes and reflect on whether cognitive compiling depends solely on maturation or might be a skill that can be trained, and if so, how this could be done.;2018
There is no doubt that O2O-based teaching mode is a requirement for university's courses in the current information society. The course offering that base on O2O teaching mode needs the whole teaching team to understand and change the teaching philosophy in the first place. The construction of O2O teaching resources which is the common product of the whole teaching team requires the cooperation of the whole teaching team, and it is a continuous improvement dynamic process. In advanced language teaching process over the last two years, aiming at developing computational thinking abilities of academician, the author not only has made repeated operation and modification of the previous O2O online and offline flipped classroom teaching mode, but also summarized some more perfect experiments of flipped classroom teaching mode according to the feedback of students and teachers. In brief, it provides good experience and methods for the future individualized quality education.;2018
"This article describes a pragmatic initiative of international collaboration in the field of the formation of Computational Thinking among young students from Colombia. The project Introduction of Computational Thinking in Bogota and Colombia schools (RENATA/EHU) involves computational thinking in the school curriculum in an affordable and effective way for students, teachers and schools. The new generations of this country now have the possibility of acquiring 21st century skills as well as the new generations from other countries where computing is part of the educational curriculum from the first school years. This project is in its implementation phase in schools in different regions of Colombia; It can be an example of how to break digital and educational gaps using ICT and education as the main tools for social transformation.";2018
This article describes the implementation of various core elements of Computational Thinking (CT) in the classrooms of schools of Latin America and USA in two specific courses: PC-01 and ECE130. These courses were designed for students of primary and secondary education, as well as for students of high school as part of a dual enrollment program with a local university. Both courses introduce the core concepts and processes of CT aided by the visual programming environments Scratch and Alice. The courses are facilitated by the classroom teacher with the support of a learning platform. This platform is configured to provide innovative pedagogical strategies based on emerging educational technologies. This article describes the concepts integrated under the term CT, and discusses the benefits of learning environments used to incorporate CT in the classroom. It describes as well the syllabi and assessments of both courses, and analyzes their impact of these courses on the educational institutions, the teachers and the students. (C) 2017 Elsevier Ltd. All rights reserved.;2018
This article develops some ideas concerning the big picture of how using computers might fundamentally change learning, with an emphasis on mathematics (and, more generally, STEM education). I develop the big-picture model of computation as a new literacy in some detail and with concrete examples of sixth grade students learning the mathematics of motion. The principles that define computational literacy also serve as an analytical framework to examine competitive big pictures, and I use them to consider the plausibility, power, and limitations of other important contemporary trends in computationally centered education, notably computational thinking and coding as a social movement. While both of these trends have much to recommend them, my analysis uncovers some implausible assumptions and counterproductive elements of those trends. I close my essay with some more practical and action-oriented advice to mathematics educators on how best to orient to the long-term trajectory (big picture) of improving mathematics education with computation.;2018
This article examines teacher preparation and teacher change in engineering and computer science education. We examined culturally responsive teaching self-efficacy (CRTSE), culturally responsive teaching outcome expectancy (CRTOE) beliefs, and attitudes toward computational thinking (CT) as teachers participated in one of three treatment groups: robotics only, game design only, or blended robotics/game design. Descriptive data revealed that CRTSE gain scores were higher in the robotics only and blended contexts than in the game design only context. However, CRTOE beliefs were consistent across all treatment groups. In regard to CT attitudes, teachers' gain scores were higher in the game design only and blended contexts than in the robotics only context. In addition, there were differences by treatment group related to STEM (science, technology, engineering, and mathematics) practices, while cultural artifacts were evident in each learning environment. The results of this study reveal some variability by treatment type and inform future research on equitable practices in engineering and computer science education.;2018
This chapter provides an overview of immersive virtual environments (IVE) in education with an emphasis on immersive virtual reality (IVR). A companion chapter in this volume focuses on a second type of IVE called augmented reality (AR). First, definitions are provided, focusing on concepts such as immersion, fidelity, presence, and simulations. Second, a review of research is presented for IVR that highlights the current and potential impact in PreK-12, higher education, and professional development settings. Findings suggest the use of IVR can lead to increased engagement. However, the synthesis also points to a relative dearth of published research for PreK-12 implementation. The chapter ends with a call for future research looking at key areas like special needs, potential negative long-term effects, training for teachers and students, and exploration of key concepts like embodied cognition, computational thinking, self-tracking, spatial reasoning, and situational/individual interests within IVE.;2018
This document has the purpose to present some results obtained in the pilot experience, play and program with Bee-Bot. The activities were developed in the framework of the doctoral research project whose purpose is the design and integration of learning activities with robotics to foster programming skills and computational thinking in the classroom of early childhood. Teachers and students of the second cycle of early childhood education of a concerted school participated in the experience during 2016-2017 academic period. School is in Salamanca, Spain. The activity allowed students to solve programming challenges using the Bee-Bot floor robot. Instruments were used to collect data, such as: questionnaires, interviews, rubrics and field diary. In general terms, the results obtained were positive. The technical, pedagogical and social aspects proposed in this research have received the favorable acceptance of teachers and students. Therefore, the information generated allowed to strengthen the design, structure and evaluation of the robotics program would be used in later stages of the investigation.;2018
This Innovative Practice Category Work in Progress Paper presets an innovate professional development (PD) model for teaching robotics to educators with little to no robotics experience. Robotics education is a growing field that embodies a complete integration of science, technology, engineering, mathematics (STEM), and computer science, as well as the application of the desired STEM skills of critical thinking, problem solving, and collaboration. Despite the fast growing opportunities for K-12 students to participate in robotics challenges and competitions, very few robotics professional development opportunities exist, leaving educators unprepared to guide and coach their students. To address the need, the STEM Education Center at Worcester Polytechnic Institute (WPI) developed the Robotics for Educators program, a 5-day robotics experience for K-12 educators in formal and informal settings. In the unique format of the program, students and teachers learn together, participate in the same challenges, and assist each other in the design and programming of the robots. The educators attend additional sessions that incorporate best practices for STEM, as well as state standards. This paper describes the framework of the program, its schedule, evaluation of the 6 years of the program, and future research directions.;2018
This Innovative Practice, Work in Progress paper outlines an Instructional Framework for integrating computing into science instruction in 4th-12th grade classrooms. It presents a model lesson example and results from two years of implementing a Professional Learning (PL) program for teachers developed and offered by the STEM Education Office of the College of Science at San Jose State University and teachers from eight high need school districts. The program model focuses on increasing teachers' skills and improving practices related to Scientific Computational Modeling as the Next Generation Science Standards and Science and Engineering Practices 2 (develop and use models), 4 (analyze and interpret data), and 5 (use math and computational thinking) are implemented.;2018
This innovative practice full paper presents a set of engaging actions aimed to encourage women to pursue a Computer Science career in a city of a third world country (Manaus, Brazil). Despite worldwide efforts to promote gender equality, typically, women account for less than 30% of the workforce in technological areas. In third world countries, the situation is much more unbalanced. Poor educational and economic conditions, allied with a chauvinism culture contaminated by sexism and stereotypes, are strong forces that repel the young girls from IT areas. As a result, the percentage of women in local Computer Science majors is lower than expected. The authors detail a program to involve girls from all school levels in computer science career, which is indeed the adaptation of a national program, combined with indigenous elements. The mentioned adaptation was a key success factor to catch the attention of students and local educators. Some activities that are included in this program are lectures at scientific, technological and gender discussion events, realization of dynamics in schools for the dissemination of computational thinking in children and young students, training students to take part in programming contests and develop knowledge into real computational applications. These actions resulted in highlights achieved in programming contests and prizes obtained through application development, and have provided a more conducive academic environment to discuss issues related to the female gender in science and technology fields. Besides the fundamentals of the program, the authors present the results of the last three initiatives, which happened in conjunction with local events, and the promising opportunities perceived in Computer Science major of a local university.;2018
This is a full paper in the Innovate Practice category examining a Doctor of Professional Studies (D.P.S.) in Computing program at Pace University which is a specialized degree program designed for active Information Technology (IT) professionals with at least five years of full time experience in the computing field. The first question that guided our research is how is the Pace University D.P.S. program related to other doctoral computing programs in the United States and globally. The second question that guided our inquiry is dissertation topics pursued by graduates in dissertation research, specifically by IT professionals in the Pace University program. To answer this second question, we analyzed the first 114 dissertation abstracts that have been defended at Pace University in the Seidenberg School of Computer Science and Information Systems. We used machine learning and natural language processing to determine commonalities among research topics in order to gain an understanding of the topic categories and topic spread produced by the program.;2018
"This paper aims to review high-qualified empirical studies on teaching and learning robotics content knowledge in K-12 and explore future research perspectives of robotics education (RE) based on the reviewed papers. After a systematic search in online database via keyword search and snowballing approach, 22 SSCI journal papers are included in this review. Nine major factors are examined for each paper: sample groups, duration, robot types, robotics content knowledge, study type, intervention approaches, measurement instruments, major findings and instructional suggestions. The results indicate that: (1) most empirical studies were endured less than two months with a small sample size, the largest sample group was elementary school students, and most studies used LEGO robots; (2) more than half of the studies conducted a non-experimental research design, and observation, questionnaire, interview and evaluation of artifacts are commonly-used measurement instruments; and (3) instructional suggestions proposed in the 22 papers can be clustered into four themes: open environment, targeted design, appropriate pedagogy and timely support. Overall, the 22 papers suggest that RE shows great educational potential in K-12, however, there are indeed situations in which RE did not bring significant improvement in student learning. In view of this, we prospect the future research directions of RE and propose that more intervention studies with rigorous research design could be conducted in K-12.";2018
This paper deals with using internet educational videos as a suitable form of e-learning to support the development of computational thinking. In the context of continuous technology development, the demand for IT specialists capable of solving a variety of problems using information technology is increasing. This should make everyday life easier and shorten the time needed to solve these problems. Before someone can become an IT specialist, or at least begin to think as one, they must start building their knowledge. One of the best ways to start can be their own inner motivation or an impulse from their school environment. The goal of this paper is to select appropriate channels for sharing YouTube videos on the server and to describe how they can participate in supporting the development of computational thinking. This article introduces freely available YouTube channels that can be used as a form of e-learning as well as an inspiration for computer science.;2018
This paper describes a learning activity on computational thinking in ethics classroom with compulsory secondary school students (14-16 years old). It is based on the assumption that computational thinking (or better logical thinking) is applicable not only to science, technology, engineering, and mathematics subjects but to any other field in education, and it is particularly suited for decision making in moral dilemmas. This will be carried out through the study of so called moral machines,using a game-based learning approach on self-driving vehicles and the need to program such cars to perform certain behavior's under extreme situations. Students will be asked to logically base their reasoning on different ethical approaches and try to develop a schema of decision making that could serve to program a machine to respond to those situations. Students will also have to deal with the uncertainty of reaching solutions that will be debatable and not universally accepted as a part of the difficulty, more ethical than technical, to provide machines with the ability to take decisions where there is no such thing as a right versus wrong answer, and potentially both (or more) of the possible actions will bring unwanted consequences.;2018
This paper describes how an educational digital material supports the improvement of skills in the development of algorithms within math problems, which belong to a part of an operative computational thinking, in students of the subject logic programming. This paper reflects how students lack the fundamentals of math and the algorithmic thinking which is required to solve the problems established in the educational digital material. The results show that doing a reiterative challenge helps student not only to get the fundamentals of math, but also to solve the algorithms used in the educational digital material, learning from the mistakes made.;2018
This paper describes our experiences developing and teaching two different interventions focused on computational thinking and computer science at a yearly STEM outreach program hosted by a local school district. We describe the creation of our lesson plans, how we worked with experienced and pre-service teachers alike to deliver the lessons, and how we assessed the effectiveness of each intervention. We will discuss our successes and failures, and provide information on our future plans to incorporate more formalized education theory, pedagogy, and research methodology in future years to further this project. Based on our assessment results, we observed statistically significant gains in student self-efficacy with creating computer programs that perform a variety of operations. In addition, students reported a significantly higher understanding of how computer programming can be used in daily life. Our survey also highlighted differences in student self-efficacy between the two interventions, and we discuss possible sources for that result. We discuss observed results based on student groups with various backgrounds, previous STEM experiences, and socioeconomic status.;2018
This paper describes the CSER Digital Technologies MOOC curriculum, which aims to build confidence and awareness of fundamental computational thinking skills for teachers within the K-6 context. The CSER MOOC builds upon recent advances in the development of the Australian Curriculum Digital Technologies learning area, which explicitly addresses the development of computational thinking skills, moving ICT education away from digital literacy towards embedding the skills needed for the next generation to become creators of technology. The CSER MOOC presents a broad coverage of core computational thinking concepts, with a focus on integrating with existing learning areas and appropriate pedagogy for the K-6 context. In this paper, we discuss our course curriculum, its alignment with key concepts from the formal curriculum statements, example teacher assessments, and discuss key challenges and concerns.;2018
"This paper describes two programming environments explicitly designed for early childhood education, the screen-based ScratchJr; and the tangible robotic kit KIBO. Both of these tools were explicitly designed to support the learning of concepts and skills of computer science and engineering in a developmentally appropriate way. The design principles are based on the notion of coding as playground and coding as literacy.";2018
This paper develops a didactic proposal to introduce computer programming activities in physics problem solving. Such proposal has two objectives. The first one is to facilitate the assimilation of the physics contents through programming physics simulations. The second one is to initiate students in programming and computational thinking. In this paper our proposal is theoretically founded and the material developed for the classroom is presented. A scale intervention performed in several high schools is described and evaluated by means of two opinion questionnaires fulfilled by the enrolled students and teachers. The results obtained show a positive percepcion of the developed proposal.;2018
This paper intends to share both the experience of teachers and document the research of the design, implementation, and evaluation of a massive open online course (MOOC). The primary purpose of the MOOC was to do outreach and build community to interest teachers from any discipline in Puerto Rico to incorporate Computational Thinking (CT) into their curriculum and peak their interest in Computer Science Education (CSE). Additional objectives were to use CT as a way to build self-efficacy in high school teachers as integrators of this newly gained knowledge while investigators learned the state of CSE and technology integration in schools of Puerto Rico. The MOOC titled Integrating Computational Thinking into the Curriculum was the first free online Professional Development offered to educators in Puerto Rico and has served as the launching board for the Computer Science Teachers' Association (CSTA) in Puerto Rico. This paper will describe the course's development, content and pertinent activities as they relate to the established goals of the project. Finally, it will share some vignettes of the educators' experiences as well as the results of a survey that was administered to 164 participants of the MOOC in its second rendition and had a 32% response rate.;2018
This paper introduces a new teaching tool for K-12 schools with the aid to transfigure the way young peoples use of online data. The tool involves participators who don't have prior programming knowledge and wish to learn computational concepts as part of playing with online data. Computational thinking provides a way for solving many real-world problems that are not learned easily by using many existing tools. Map-Blocks is a software suite that combines the easy to use visual programming environment with easy to get started block shaped programming environment.;2018
"This paper introduces CT-Blocks Analyser which is used for analysing computational thinking concepts of CT-Blocks project activities. This uses the emerging techniques of educational data mining and learning analytics to automate the instructional approach for CT-Blocks projects. CT-Blocks aims to infuse computational thinking within K-12 curriculum. The big data toolkit called, CT-Blocks Analyser which is specifically developed for CT-Blocks, a visually appealing programming environment for beginners; a block based programmable platform interconnected with more features in which students enjoy the learning process and it tries to make the users master in computational thinking.";2018
"This paper introduces the MIddlesex RoboTic platfOrm (MIRTO), an open-source platform that has been used for teaching First Year Computer Science students since the academic year 2013/2014, with the aim of providing a physical manifestation of Software Engineering concepts that are often delivered using only abstract or synthetic case studies. In this paper we provide a detailed description of the platform, whose hardware specifications and software libraries are all released open source; we describe a number of teaching usages of the platform, report students' projects, and evaluate some of its aspects in terms of effectiveness, usability, and maintenance.";2018
"This paper investigates how to increase understanding of design and sustainable systems by scaffolding transfer of learning using eclectic approaches to experiment with networks of design potentials. Transfer of learning simulates multi-criteria case indexing, refined from knowledge induction derived from analyses of random but related cases based on search strategies. Randomization of the search space encourages emergence of heuristic solutions, fuzzy though informed transfers and further refinement of schema. We investigate the type of navigational structures/design resulting from creative reuse/refactoring and lean management; and whether there will be evidences of knowledge induction from randomized search scaffolded by Case-based Reasoning (CBR), which leads to heuristic transfer and learning. Examples from two courses carried out August-December 2017 within the participatory design-agile framework for engagement in Smart Cities are assessed for creative reuse regarding: a) people, process and tools; b) domain engineering; c) component mining and d) open source vs. systematic reuse. Findings confirm longitudinal insights: CBR-informed but emergent search leads to more efficient and higher quality heuristic transfer; such modelling/design/learning is scaffolded by four factors.";2018
This paper outlines some provisional steps toward a theory of culture grounded in computational thinking. I begin by describing computational thinking, drawing on Mart's hierarchy for the analysis of information processing systems. I then address the definition of culture, arguing that culture is a property of causal chains, rather than a thing-in-the-world. I briefly address contemporary debates over the nature of culture embodied versus embedded and argue for an ecological approach in which culture-in-action unfolds as embodied schemas recognize (and produce) handles in the environment. When schemas are objectively adapted to the handles, they generate action that is ecologically rational. To explain ecologically rational culture-inaction, I outline a formal approach to cultural learning based on Probably Approximately Correct (PAC)-learning theory. I illustrate my approach throughout with examples drawn from the sociology of science.;2018
This paper presents a game-based learning environment supporting the acquisition of computational thinking skills. The game environment offers two types of usage: a guided progression through levels and an open stage. Seven levels of guided learning were evaluated in a study with 40 students to measure their learning progress. We introduce five features to describe the students' learning behavior and map the performance parameters to computational thinking competences. In our analysis, we distinguish different basic actions and compare the usage and distribution of these actions over time and between groups of learners with different achievement levels. This allows for identifying specific challenges related the interactive acquisition of CT skills.;2018
This paper presents a study on computational thinking problem solving where first grade primary students engage in five groups of computational thinking tasks. The tasks are related to curriculum topics of language, science and mathematics and are implemented in form of a web application. Throughout the five tasks groups, students complete tasks covering the computation concepts of sequence, algorithms, recognition and removal of unnecessary steps, object properties and problem tasks. The focus of the data analysis presented in this paper is on identifying the computational thinking tasks across all five task groups where students were least successful and identifying patterns of task completion done by the students. For these least successful tasks, the correct and the incorrect completion patterns were examined. The results indicate that CT tool scaffolds serve as a mechanism through which students explore problems via trial and error and come to their own creative solutions through problem exploration.;2018
This paper presents a survey of computational kits that enable young children (ages 7 years old and under) to explore computing ideas and practices. We examined physical, virtual, and hybrid kits across three different perspectives: how they are designed, how they support children to explore computational concepts and practices, and how they enable children to engage in a range of projects and activities. Based on our analysis, we present design suggestions and opportunities to expand the possibilities in how children can engage in computing, what kinds of projects children can make, and what kinds of computational ideas children can explore.;2018
This paper presents an analytical case study using the Computational Making framework to critique three LEGO sets. These sets were marketed towards girls and focus on making. Our contribution is showing computational making can be used to investigate domains outside e-textiles. Further, we show these LEGO sets have the potential to teach computational making skills despite their feminine gender identity construction.;2018
This paper presents an educational experience about the feasibility of using the KIBO robot to engage the learning of programming and computational thinking with students with Down syndrome (DS). In particular, we describe a pilot study carried out with seven DS students aged between 7-19, but with a cognitive age from 3-6. The programming and computational thinking contents had been adapted to their particular needs and integrated into their current curricular activities. We studied the engaging of students using KIBO, the grade of comprehension of the sequences and programming and the emotional behavior of students with DS during the sessions. The results of this study shows that people with DS are capable to acquire satisfactorily basic programming and computational thinking skills using KIBO. Also, the motivation and the emotional state of DS students were positive promoted through the designed activities.;2018
This paper presents an overview of the Italian situation in teaching discrete mathematics in primary and middle school, taking into account the national teaching guidelines and their connection with the subject. We describe research conducted with about 150 teachers, interviewed in a preliminary questionnaire. The data collected shows, for all teaching grades, interest in having more discrete mathematics in the school curriculum even if there are some difficulties in teaching it and in inserting it in the usual mathematical activities at school, mostly related to teachers' knowledge and self-confidence about the subject. We also discuss results and future plans for a continuing research project in the field. We describe in the conclusion a design research project involving teachers in the activity-designing process, aimed at bringing new mathematical knowledge and competences to students.;2018
This paper presents preliminary findings from a project-based learning laboratory of robotics aimed at stimulating computational thinking processes in primary school students. The laboratory was carried out within the context of an ongoing project funded by the Italian Ministry of Education, University and Research. The aim of the project is to activate a national network for the enhancement of students' technological and scientific skills in school and extra-school settings. A group of 51 students, engaged in the robotics laboratory, were compared to a comparison group of 32 students in order to evaluate the impact of programming WeDo robotics artefacts on the development of computational thinking skills. Overall, the results showed that programming robotics artefacts may exert positive effects on children's acquisition of computational thinking skills.;2018
This paper presents the application of shape grammars in a real case design problem. The design problem is stated as developing computational acoustic panel solution for classroom with various acoustic problems by modifying 2D pattern, which basically utilizes shape grammars. The study demonstrates interdisciplinary environment of design education and discussions of shape grammars in acoustic panel design and making. It includes different methods to design, like intuitive tendencies, computational thinking, computational tools, and computer simulations. The rule sets of the 2D (pencil-paper-based) pattern are intuitively created by the designer with simultaneous studies of understanding shape grammars. The study consists of three stages. The first stage illustrates 2D pattern generation utilizing computational thinking via shape grammar methodology, second stage illustrates computer generation of 2D pattern with the help of computational tools, and the third stage utilization and modification of this 2D pattern into 3D acoustic panel with feedbacks of computer simulations.;2018
This paper presents the experience of a small higher education institution, in a sparsely populated area in the south of Portugal, promoting digital competences at different levels. They range from free open initiatives to young students from kindergarten to high school, to formal training at higher education bachelor and master courses, as well as teacher training and including older population in the context of a senior university programme. All the activities emphasise active learning strategies, including hands-on guided computer laboratory activities. In this line, the institution is also partner in a national programme for the promotion of digital competencies. This includes teacher training in the use of Project-Based Learning (PBL) in information and communications technology higher education degrees. The study cycle using PBL is in the area of electronics and computers and encompasses a large set of systems that are also included in the growing area of Internet of Things. As a whole, the outcome of all the initiatives has been extremely positive as attested by the high levels of participation. Besides more specific digital competencies, the several activities have allowed the promotion of group work, computational thinking, and communications skills for distinct target groups across all ages. This is especially relevant as these are important and required skills not only for the workplace, but also for daily life.;2018
This paper presents the initial results of a research that aims to evaluate the contribution of the Scratch visual programming language in the development of computational thinking in comparison to the use of pseudocode. The comparison scenario was the teaching of programming logic for higher education students of the Physics course. The research was outlined with the methodology of action research, allowing the evaluation of the use of language at the end of the approach of each content delivered during the research. The presented results refer to the approach of two contents, of the four established for the conclusion of the research. The steps of approaching each content were initiated with the application of the diagnostic evaluation, and finalized with the evaluation of performance. The results indicate a progression in knowledge about programming logic. In this way, it was possible to verify that the use of the Scratch language contributed to the learning of programming logic.;2018
This paper presents the rationale, design, development, implementation and evaluation of a case study utilizing the lab rotation model of blended learning for teaching computational thinking in Chinese higher education. The principles of computational thinking were integrated into an entry level course that is required among all college students, entitled Fundamentals of College Computing. A mixed method research approach was utilized to examine students learning outcomes and perception of the instructional process among 114 first year college students. The results showed that the teaching approach was successful at improving students' computational thinking, particularly on the method and ability dimensions. Recommendations for promoting college students' computational thinking, as well as teaching strategies for implementing this type of a unique lab rotational approach in China are discussed.;2018
"This paper presents the results of a project on Computational Thinking education for primary school pupils. During the project - called Computational Thinking for children education - 81 students from a primary school in Italy have been guided to the design and development of computer games through the Microsoft Kodu game development platform. Different activities have been proposed to the pupils with the aim of promoting Computational Thinking abilities and skills. A narrative approach has been adopted throughout the project. Preliminary results of the educational experience highlight as the adoption of narrative learning and physical reproduction of manipulative programming objects provide an affordance for the development of Computational Thinking abilities. Furthermore, constancy during the learning process affects the acquisition of game development skills; finally, the design and implementation of computer games using Kodu have had a significant positive influence on the perception of computer programming.";2018
This paper presents the results of topic modelling and analysis of topic networks using the corpus of the International Conference on Computational Science (ICCS), which contains 5982 domain-specific papers over seventeen years 2001-2017. We discuss the topical structures of ICCS, and show how these topics have evolved over time in response to the topicality of various domains, technologies and methods, and how all these topics relate to one another. This analysis illustrates the multidisciplinary research and collaborations among scientific communities, by constructing static and dynamic networks from the topic modelling results and from the authors' keywords. The results of this study provide insights regarding the past and future trends of core discussion topics in computational science and show how computational thinking has propagated across different fields of study. We used the Non-negative Matrix Factorization (NMF) topic modelling algorithm to discover topics. The resulting topics were then manually labelled and grouped hierarchically on three levels. Next, we applied trend analysis and Change Point Analysis (CPA) to study the evolution of topics over seventeen years and to identify the growing and disappearing topics. We used Gephi to examine the static networks of topics, and an R library called DyA to analyse the dynamic networks of topics. We also analysed the conference as a platform for potential collaboration development through the perspective of collaboration networks. The results show that authors of ICCS papers continue to actively collaborate after the conference - on average authors collaborate with three other ICCS authors, - which suggests that ICCS is a valuable platform for collaboration development. (C) 2018 Elsevier B.V. All rights reserved.;2018
This paper purports to share with the higher education community the global PBL active learning curriculum and the learning environment, which have been collaboratively developed with the universities in Taiwan and Kansai University (KU). The collaborated universities developed an optimal curriculum to enhance and nurture students' Future Work Skills 2020 defined by the Institute for the Future, such future human skills as Sense Making, Social Intelligence, Novel & Adaptive Thinking, Cross Cultural Competencies, Computational Thinking, New Media Literacy, Transdisciplinarity, Design Mindset, Cognitive Load Management, and Virtual Collaboration. The curriculum fully employs PBL strategies in global teams, where teams for PBL are organized with students with heterogeneous cultural backgrounds in the virtual learning environment. The basic concept of such curriculum is based on COIL (Collaborative Online International Learning), originally developed by State University of New York. COIL makes full usage of IT to generate virtual learning environment for students worldwide. In order to go beyond the COIL concept incorporating the future skills defined by IFTF, the allied universities employed PBL in global AGILE teams to deepen insights from various cultural viewpoints in terms of consensus building through team discussions. Due to the spatial and temporal differences, enrolled students conducted their team learning activities in the virtual learning environment asynchronously, making use of IT technologies and cloud services in order to be on the same page in the progress of the project throughout the course. Further, the assessment strategies to enhance students' efficacy is the key factor in the course, which is also discussed with examples. This paper reports the global PBL active learning curriculum and environment collaboratively developed with the universities in Taiwan and Kansai University.;2018
This paper reports on a systematic method used to improve an existing unit of instruction. The method is distinctive in combining steps of instructional design with knowledge components from a cognitively-based framework of learning. Instructional design is used to develop assessment instruments that incorporate information about student misconceptions. The method uses the assessment instruments to evaluate student performance and learning gains, while statistical analysis evaluates the quality of the instruments themselves using measures of difficulty and discrimination. Fine-grain insight into possible improvements is enabled by the knowledge components implicated by the assessment. The method is illustrated and evaluated by applying it to a unit of instruction on collection-based iteration in a computational thinking class. Data gathered during this evaluation highlights a number of opportunities within the unit to refine the instruction.;2018
This paper reports the results of an investigation involving almost a thousand primary school teachers in Italy, to explore their views on the terms coding and programming, and how they are related to their ideas on computational thinking. When directly asked if coding is different from writing programs, roughly 2 out of 3 teachers answered no. Among the teachers who answered yes, almost 160 tried to motivate the difference: a few of them gave admissible explanations, while the others showed various misunderstandings, which we classify and discuss. By contrast, when asked about their idea of what coding is, only 4 out of 10 of the teachers explicitly linked coding to programming, but an additional 2 out of 10 cited an information processing agent executing instructions. The remaining part of the sample did not provide explicit or implicit links between coding and programming. Our investigation shows that untrained teachers hold misconceptions regarding CS and its related terms. Given the general public and media attention on coding in schools, currently taught by existing teachers mostly not appropriately trained, professional development actions focusing on CS scientific principles and methods are therefore a top priority for the effectiveness of CS education in schools.;2018
This project proposes a recommendation model for educational content based on the context of a user, which uses a context model that incorporates the role, tasks, programming exercises and their application to the problem of recommendation. The recommendations are made on the basis of the estimate of the difference between the current level of knowledge of a user in front of the skills required in their work context. The experiments developed in the context of the student, show that, using a model of probabilistic reasoning helps to get better recommendations of educational content, according to the missing competences of a student on an issue that needs to learn, which seeks to standardization for recommendation systems.;2018
This research full paper characterizes the literature on academic initiatives to foster computational thinking and programming (CT&P) in Brazilian K-12 education. Context: Mapping and analyzing the diversity of experiences and studies that address CT&P in K-12 education can bring valuable data to researchers. This work delimits such study to the Brazilian scenario to allow a more in-depth view, given the Brazilian context. Previous surveys and systematic mapping studies present recent publications in major Brazilian computing journals and conferences. Although they offer important contributions, they do not comprehensively cover the Brazilian literature on CT&P in K-12 education, since they focus the search in the Brazilian Computer Society publications alone. Objective: This work proposes to characterize the literature on CT&P in K-12 education in Brazil. Results: through a systematic mapping study, we collected information on year, venue, type, K-12 education stage and modality, methodological contexts, and used tools and programming languages from 338 selected primary studies from 2001 until 2016. Conclusions: there is a significant increase in the number of Brazilian studies in the latest years, showing a growing interest on this research area as well as several trends and gaps to be addressed by both researchers and practitioners.;2018
This Research Full Paper presents the effects of our weeklong Professional Development class on the programming skills of nineteen high school teachers, their confidence in programming, and their confidence for teaching programming. A primary objective of the CS10K and CS For All initiatives is the education of K-12 teachers in aspects of computer science and computational thinking so they can teach CS courses in their schools. Many of these educators have degrees in disciplines other than computer science, such as math, science, and business, so preparing them to teach CS is a challenge, particularly since most K-12 teachers have limited time to devote to learning new curriculum. This study describes how we managed a short course in computational thinking and programming to a group of high school teachers. We illustrate through survey data assessment and evaluation that significant gains in skill level and self-efficacy can be realized within a short but intensive week of face-to-face training. Five months later we follow-up with the same cohort to see if earlier achievements remain evident over time. Discussion throughout the paper identifies strengths and weaknesses of the training week, which is useful to others planning to undertake similar PD offerings.;2018
This Research to Practice Full Paper presents a study proposal with the intent of knowing Scratch potential in Educational Sciences students' training. In this study, we analyse, through different phases, using Kirkpatrick Evaluation Model (KEM), the benefits of Scratch inclusion in Educational Sciences degree and in its students' future professional activities. In this work an action-investigation methodology is used. This investigation will allow to improve the education curriculum at different levels, in a technological way, with impact on the teaching and learning process, involving students and teachers of all levels. In higher education this software has been especially associated with programming and computing disciplines as a tool for motivating students or as a learning facilitator. This work presents not only an innovative approach of the Scratch utilization, the improvement of learning skills and competences of design regarding the production of educational materials, but also its use in a new area - the idea of a programmer-educator concept. This paper also presents a pre-study regarding the necessary skills to the use of Scratch and its use among first level students focusing in their satisfaction and motivation for this software use.;2018
This Research to Practice Full Paper presents our experience in teaching an introductory programming course in Python by using a visual programming development environment based on flow-charts and active learning with an interactive eBook. The field of computer science education is always being challenged with the high attrition rates despite the ever growing industry demand for computing expertise. The lower rate of student retention is often associated with considerable dropout and failure rates in introductory programming courses during the freshmen year. The main challenge is getting students to write meaningful programs in a short time by focusing more on computational thinking principles and less on language details at that point in time. Nowadays, most students prefer to be engaged and discover course content through exploration, interaction, and collaboration that is relevant, useful, and fun compared to traditional blackboard-based lecturing styles. For evaluation of learning outcomes based on the quantifiable criteria with robust statistical analysis, eleven sections of the course over three semesters were considered. The initial evaluation of summative assessment and analysis of a survey result enable us to conclude that the proposed instructional approach increases student engagement, facilitate learning and contribute to the progress of students in this course.;2018
This research to practice, work in progress paper presents the analysis strategy used to assess the learning behavior using logs on an e-learning platform. Students who can link algebraic functions to their corresponding graphs perform well in STEM courses. Early algebra curricula teaches these concepts in tandem. However, it is challenging to assess whether students are linking the concepts. Video analyses, interviews and other traditional methods that aim to quantify how students link the concepts taught in school require precious classroom and teacher time. We use web logs to infer learning. Web logs are widely available and amenable to data science. Our approach partitions the web interface into components related to data and graph concepts. We collect click and mouse movement data as users interact with these components. We used statistical and data mining techniques to model their learning behavior. We built our models to assess learning behavior for a workshop presented in Summer 2016. Students in the workshop were middle-school math teachers planning to use this curriculum in their own classrooms. We used our models to assess participation levels, a prerequisite indicator for learning. Our models aligned with ground-truth traditional methods for 17 of 18 students. The results of the models with respect to the two types of components of the web portal have been used to infer possible data or graph oriented cognitive bias.;2018
This review synthesizes literature on computing pedagogical content knowledge (PCK). Shulman introduced PCK in the 1980s to describe the amalgam of knowledge teachers draw upon in their work and use of the construct is increasing in the computing education community. From a systematic search of the literature, I identified 19 articles drawn from 9 countries for review and summarize how computing PCK is conceptualized and investigated in the data set. Five conceptualizations of computing PCK were present: (a) two models of computing PCK components, (b) one model of PCK development and (c) two models focused on the metaphoric and problem-solving nature of computing. The most common research lines addressed were the nature and development of individual PCK. Mostly qualitative methods created by authors were employed. A focus on disciplinespecific approaches for future computing PCK research is recommended.;2018
This short paper aimed to investigate how young children as little computer engineers learned in an educational robotics project. Student participants were 11 third graders at one public elementary school in Taiwan. The project in an after-school learning program lasted for five weeks. During weekly learning session, each student needed to use one visual block programming called Ozoblockly to design action patterns for their robots (Ozobot). The study adopted a case study methodology to examine the specific learning scenario. The principal researcher used a participant observation method to observe students' learning behaviors, informal after-class interviews to collect students' learning responses, and a portfolio analysis approach to examine students' programming works. The findings showed that students might obtain a basic understanding of a computer engineer after the instructional intervention. Furthermore, some specific learning patterns from young children's programming process were identified.;2018
"This study aims to explore the impact of cognitive styles and guidance strategies on the learning effectiveness and attitude of primary school students learning programming design. With six-grade students as its subjects, this study employs the quasi-experimental research method of 2 x 2 factorial designs to study 106 valid samples. The independent variables are cognitive styles (FD vs. FI) and guidance strategies (question-guidance vs. completion problem-guidance), while dependent variables are learning effectiveness and attitude. This study finds that (1) in terms of the learning effectiveness of programming design, the FI cognitive style group is more effective than the FD group in applying the program acquired during the project assignment, whereas the completion problem-guidance group scored higher than the question-guidance group; (2) in terms of program learning attitude, the completion problem-guidance group holds a more positive attitude towards the benefit of learning programming design than the question-guidance group. It is suggested that future studies target the analysis of programming design strategy and problem-solving behavior, to further explore the thinking process of learners.";2018
This study aims to explore, via quasi-experiments, the effects of online externally-facilitated regulated learning (ERL) and computational thinking (CT) on improving students' computing skills in a blended learning environment. Four classes in a one-semester course entitled Applied Information Technology: Data Processing' were the samples for this research. The first class (C1, ERL&CT group) simultaneously received the interventions regarding online ERL and CT, the second class (C2, CT group) received the intervention regarding online CT, and the third class (C3, ERL group) received the intervention regarding online CT, while the last group (C4, control group) received a traditional teaching method, although teaching was also conducted in a blended computing class. Students in ERL&CT group and CT group came from the Department of Finance, while the ERL group and control group came from the Department of Law at a comprehensive university. According to the posttest analysis, the results indicate that students who received the intervention of online ERL had statistically better development of computing skills for using Excel by semester-end than those without. In addition, this study also reveals that the application of online CT alone could be helpful in students' development of computing skills. Furthermore, the results indicate that students' computing skills could be improved under the condition of simultaneously applying ERL and CT. Based on the findings of this study, the authors present implications for online teachers and educators, particularly for those teaching computing courses.;2018
This study attempts to determine whether teachers' access to computational thinking (CT) and CT technologies varies by rurality (rural versus urban) of the school county and grade level taught (primary versus secondary). A total of 81 teachers from West Virginia, Georgia, and Oklahoma participated in this survey study. Overall, teachers found CT and CT tools useful and relevant to their teaching and had access to an essential level of technology in schools supporting computational thinking. However, teachers' CT skills and their teaching of CT were limited and varied depending on rurality and grade level. For instance, primary school teachers in rural settings reported significantly lower levels of CT skills than those in urban settings. Findings and implications are discussed.;2018
This study explored the role of visual programming activities in computational thinking. A group of 158 freshmen majoring in information science and communication in Northern Taiwan were engaged in this study. A visual programming platform, computational thinking questionnaire and a programming examination were employed to collect the log data of programming activities, self-responses to computational thinking and the score of programming examination for later analyses. The results reveal that visual programming activities would be critical to the evolution of multiple computational thinking perspectives.;2018
This study investigated patterns in the development of computational thinking practices in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Past research indicates that the personal relevance of the ECS experience influences students' expectancy-value towards computer science. Expectancy-value is a construct that is predictive of career choices. We extended our research to examine whether expectancy-value influences the development of computational thinking practices. This study took place in the context of two ECS implementation projects across two states. Twenty teachers, who implemented ECS in 2016-17, participated in the research. There were 906 students who completed beginning and end of year surveys and assessments. The surveys included demographic questions, a validated expectancy-value scale, and questions about students' course experiences. The assessments were developed and validated by SRI International as a companion to the ECS course. Overall, student performance statistically increased from pretest to posttest with effect size of 0.74. There were no statistically significant differences in performance by gender or race/ethnicity. These results are consistent with earlier findings that a personally relevant course experience positively influences students' expectancy for success. These results expanded on prior research by indicating that students' expectancy-value for computer science positively influenced student learning.;2018
This study presents the authors' recent research and application of a new visual programming language and its development environment: VIPLE (Visual IoT/Robotics Programming Language Environment) at Arizona State University (ASU). ASU VIPLE supports a variety of IoT devices and robots based on an open architecture. Based on computational thinking, VIPLE supports the integration of engineering design process, workflow, fundamental programming concepts, control flow, parallel computing, event-driven programming, and service-oriented computing seamlessly into a wide range of curricula, such as introduction to computing, introduction to engineering, service-oriented computing, and software integration. It is actively used at ASU in several sections of FSE 100: Introduction to Engineering and in CSE 446: Software Integration and Engineering, as well as in several other universities worldwide.;2018
This study reports the use of a physical robot and robot simulator in an introductory programming course in a university and measures students' programming background conceptual learning gain and learning experience. One group used physical robots in their lessons to complete programming assignments, while the other group used robot simulators. We are interested in finding out if there is any difference in the learning gain and experiences between those that use physical robots as compared to robot simulators. Our results suggest that there is no significant difference in terms of students' learning between the two approaches. However, the control group that uses the physical robot shows a more positive response in their attitudes towards computing. We discuss the implications of our findings in relation to engaging students and challenges in using physical robots from the learner perspectives and ways to alleviate this. Finally, by considering the insights from students' comments, we also suggest an alternative that may give both benefits of using both physical robots and robot simulators.;2018
This theoretical article describes a framework to conceptualize computational thinking (CT) dispositions-tolerance for ambiguity, persistence, and collaboration-and facilitate integration of CT in mathematics learning. CT offers a powerful epistemic frame that, by foregrounding core dispositions and practices useful in computer science, helps students understand mathematical concepts as outward oriented. The article conceptualizes the characteristics of CT dispositions through a review of relevant literature and examples from a study that explored secondary mathematics teachers' engagement with CT. Discussion of the CT framework highlights the complementary relationship between CT and mathematical thinking, the relevance of mathematics to 21st-century professions, and the merit of CT to support learners in experiencing these connections.;2018
This work presents an exploratory study about problem-solving elements applied by early childhood students when solving tasks with the Bee-bot robot. These problems consist of programming the instructions that make Bee-bot move from a starting point to a final point. The aim is to observe and characterize performances in three student pairs in order to determine which heuristic resources and management processes are involved during the problem-solving process. Due to the exploratory nature of this work, we have selected two pairs from Kindergarten (5-6 years) and one pair from 1st grade (6-7 years old). The purpose is to identify divergences on the use and management of mathematical problem-solving elements previously studied and characterized in mathematics education. Moreover, the teaching sequence designed aimed at introducing programming with technological environments and developing computational thinking in early childhood students, as a way to promote problem-solving skills.;2018
This work presents the design and architecture of an educational tool for learning to code. The CodeLab tool is based on skill practice and assessment and is targeted for non-STEM students to develop computational thinking. The tool is designed to provide a lab experience and environment based on exercises to practice through a conversational interface.;2018
This Work-in-Progress study focuses on computational thinking (CT) in children. Women, minorities, and persons with disabilities are currently underrepresented in STEM education and careers. However, providing appropriate early CT learning opportunities can potentially help learners develop both interest and self-efficacy in computer science and STEM fields. Our research aims to characterize computational thinking and engineering thinking for K-2 aged children. In this paper, we report on our findings of children exploring a recently installed exhibit at a local Midwestern science center. The exhibit was designed to help children learn about engineering careers and CT, and provides different learning activities to elicit CT in children from diverse learning groups. The exhibit provides information about different engineering disciplines/fields, and examples of engineers from diverse groups (i.e. it includes images of people of different races, ethnicities, gender, and ability). In this study, we audio- and video-recorded families while they explored the exhibit. They then participated in interviews and completed surveys. The video data provided evidence that children can engage in a range of CT competencies in the computer-supported coding game. Our findings can help us further consider how families can support children as they learn CT skills in out-of-school environments.;2018
To learn programming languages for the upper-grade students of the elementary school students in Taiwan will become a national policy effective since 2019. It is challenging and thus teachers or researchers are looking for strategies or tools to bridge the initiatory programming education. King of Pirates (KoP) , a board game, is thus created for this purpose. In this board game, players arrange and combine cards to simulate programming thoughts. It incorporates computational thinking in programming into the game. In this initial study, we intended to explore students' perceptions of KoP and the feasibility of incorporating KoP into learning setting before the students officially start their course of programming languages. To address the issue, we cooperated with a nearby university to hold a learning workshop for the middle-grade (nine and ten years old) students in an elementary school in northern Taiwan. Forty-three students participated in this event. After the whole 4-hour workshop, a five-point Likert scale questionnaire was administrated to all participating students. The questionnaire consists of their demographic data and nine questions including their experience, reflections, and conceptual change of computational thinking. Forty-one valid questionnaires were used for data analysis. The results show that most students perceived the KoP to be fun and engaging. They not only had a high willingness towards learning with the KoP, but also agreed it could help them develop the computational thinking in the process of gameplay. Overall, the results indicate incorporating KoP into programming instruction would be feasible. After enhancements have been made to the KoP based on the users' feedback, we will conduct the experiment to examine the effectiveness of using KoP for enhancing programming for upper-grade students in the near future.;2018
Today it is almost impossible to spend a single day without depending on an information system, a computer or any other form of computation. Though the starting barrier is low, fundamental concepts are still required in order to manage the technicalities of the engineering environment and everyday computational systems. In 1967, Logo proposed to teach abstract programming concepts by providing a set of functions that had intuitive, visible effects over a robotic Turtle. LOGO was a success, but the robots quickly migrated into computer simulations. From LOGO, many followed. Scratch and Lego Mindstorm are some of the most notorious examples. Both introduced graphical block-based programming interfaces. We propose to bring back the powerful ideas behind LOGO by updating it with state of the art technologies. Phogo combines Python, Arduino and 3D printing into a low cost robot that is easy to build and control. The robot has a pen to draw shapes and can be commanded from a computer via a wireless link that is transparent to the students. The use of a physical robot can make programming more accessible for students with disabilities. The open and maker philosophies behind Phogo makes it more interesting as students will be able to access and study the electronic components. The textual programing language can be a long life companion for the students. In this work we discuss LOGO and other projects inspired by it, and we also share the methodology and design decisions behind Phogo, the results of its application in a workshop and the improvements we are currently developing. (C) 2017 Elsevier Ltd. All rights reserved.;2018
Training computer scientists to address wicked problems means to focus respectively on the individual capability to think in a computational-oriented way (i.e., Computational Thinking), and on the social dimension of coding (i.e., Agile Values). In this study we propose the conceptual model of Cooperative Thinking, a new education construct of team-based computational problem solving. Cooperative Thinking is not only the sum of Computational Thinking and Agile Values, rather it is a new overarching competence suitable to deal with complex software engineering problems. We suggest to tackle the Cooperative Thinking construct as an education goal, to train new generations of software developers to Pareto-optimize both their individual and teaming performances.;2018
Understanding that we are experiencing a singular moment of humanity, with accelerated changes in the way of living and communicating, promoting the improvement and dissemination of Digital Information and Communication Technologies (TDICs), this article presents the main theoretical elements discussed in the event VII National Seminar of EDaPECI and I Seminar of the PNAIC, held at the Federal University of Sergipe in 2017, specifically a roundtable on Digital Literacy. The purpose of this study is to analyze the current situation of society, which experiences the digital culture, presents the need to think about digital literacy and, from the computational thinking, discuss the possibilities of using games in the educational context, promoting or not the gamer literate.;2018
Understanding the notional machine that conceptually executes a program is a crucial step towards mastery of computer programming. In order to help students build a mental model of the notional machine, visible and tangible computing agents might be of great value, as they provide the student with a conceptual model of who or what is doing the actual work. In addition to programming, the concept of a notional machine is equally important when teaching algorithmic design, complexity theory, or computational thinking. We therefore propose to use a common computing agent as notional machine to not only introduce programming, but also discuss algorithms and their complexity.;2018
Unplugged activities have been one approach to introduce computational thinking (CT) to students before any form of coding is involved. This paper reports on a study that examines the evaluation of the types of CT skills inculcated through an unplugged activity. Students in a grade 9 class were engaged in an unplugged activity on sorting before being asked to represent their understanding in the form of pseudo-English, flowchart or Python code. The assessment of CT skills comprises the aspects of decomposition, algorithmic design, generalization, abstraction and evaluation. Qualitative Comparative Analysis (QCA) was used to take a closer look at the unplugged CT activity and the subsequent artifact production. Such a QCA analysis can be used to inform a framework for designing instruction and tasks to target and teach certain types of CT knowledge in novice programmers, as well as for assessing an instruction package as to what CT knowledge is being covered.;2018
Using, processing and evaluating digitized information is relevant to every subject in primary and secondary school education. As this information is represented, modified and perceived through analog and digital media, competencies including critical reflection, knowledge, usage, and creation of information and media have been included in the German education system. Due to the highly inter- and transdisciplinary character of these skills, the development of a combined information and media literacy to teach the critical handling, reflection and design of information and (digital) media similar to a classical literacy concerning reading and writing skills. As this skill is fundamental for understanding the everyday digital environment, Computational Thinking poses a central idea of information and media literacy in order to understand how information of the real or fictional world are represented through digital media, how this digitized information is automaticly processed and displayed using media systems as well as how the resulting representations are interpreted. Information and media literacy adresses every subject and school type which is why it has to be integrated into future teacher education curricula. This paper shows the conception and implementation of an Information and Media Literacy certificate for student teachers with a focus on Computational Thinking. Based on recent studies, established curricula for Media Literacy, Computer Literacy and Digital Literacy as well as present Bavarian school curricula for Computer Science, we built the curriculum for the Computational Thinking part of the certificate upon fundamental ideas of Computer Science: Representation of Information, Software Engineering, Algorithms, Networks, Data Integrity and Data Security, Languages, and Physical Computing.;2018
"Various aspects of computational thinking (CT) could be supported by educational contexts such as simulations and video-games construction. In this field study, potential differences in student motivation and learning were empirically examined through students' code. For this purpose, we performed a teaching intervention that took place over five weeks, with two-hour sessions per week, plus two more weeks for the pretest and post-test projects. Students were taught programming concepts through a science project; one group represented the function of a basic electric circuit by creating a simulation, while the other group represented the same function by creating a video game in which a player should achieve a score in order to win. Video game construction resulted in projects with higher CT skills and more primitives, as measured through projects' code analysis. Moreover, the video-game context seems to better motivate students for future engagement with computing activities.";2018
Various studies have presented controversial results about the way that young students tried to cultivate and practice their computational thinking (CT) skills with Computer science concepts through the game making programming. However, there is still limited evidence addressing how the gameplay of a simulation game (SG) can be associated with the development of computational problem-solving practices. Therefore, the purpose of the present study is threefold: (a) to elaborate a rationale on how a 3D SG can support the development of computational problem-solving practices using OpenSimulator with Scratch4SL, (b) to analyze how the in-game elements should be mapped to assist basic CT skills cultivation and programming concepts to support students in learning how to think and practice computationally, and (c) to summarize the findings from a preliminary mixed methods study following a game playing approach in regard to the learning experience with a total of fifteen (n = 15) junior high school students. The results indicate that students had a greater range of expressing sufficiently alternative and self-explanatory solutions in blended instruction. The instructor's feedback and guidance facilitate them to rationalize decisions taken on the cognitive aspects of computational practices in coding.;2018
Visual coding frameworks and block-based languages became an essential resource for computer science education. Applied in different courses and subjects they foster computational thinking, collaboration, and knowledge-sharing. Furthermore, sharing the outcomes promote the development of an open mindset and teaches the principles of open source. In our work, we present Pocket Code, a mobile open source visual coding framework. We describe how this integrated development environment enables young users to program apps in a block-based manner directly on their mobile devices. We discuss how teenagers can share their projects via the app's sharing platform or as an Android application package file. The presented case illustrates how teenagers can collaboratively drive co-creative communities and foster open source and innovation by creating and sharing mobile apps.;2018
"we are entering a new Al era, and the development of Al technology and popularization of AI education has become the national strategy of China. The primary and secondary school students are the builder of future society, and have strong curiosity and passion to learn new things; therefore, we should make a good preparation of Al education for them and cultivate their basic AI literacy and computational thinking to adapt to the future. In this paper, from the viewpoint of thinking mode and literacy and skill training, a curriculum including basic, project, and practical types is designed. Integrating with the iSTREAM educational system proposed by Chinese Academy of Sciences, exploratory works were shown with some case studies. The applications show that AI education is helpful to enrich the study of primary and secondary school students and to prompt comprehensive quality.";2018
We describe computational treatments of archival collections through a case study involving World War II Japanese-American Incarceration Camps. We focus on automating the detection of personally identifiable information or PII. The paper also discusses the emergence of computational archival science (CAS) and the development of a computational framework for library and archival education. Computational Thinking practices are applied to Archival Science practices. These include: (1) data creation, manipulation, analysis, and visualization (2) designing and constructing computational models, and (3) computer programming, developing modular computational solutions, and troubleshooting and debugging. We conclude with PII algorithm accuracy, transparency, and performance considerations and future developments.;2018
We describe our citizen science approach and technologies designed to introduce students in upper secondary schools to computational thinking and engineering. Using an Arduino microcontroller and low-cost sensors we have developed the air:bit, a programmable sensor kit that students build and program to collect air quality data. In our course, students develop their own research questions regarding air quality before using their own air quality sensor kit to answer their respective questions. This project combines electronics and coding with natural sciences providing a truly interdisciplinary course. We have open-sourced the teaching materials including the building and coding instructions. In addition, students can contribute to our web-based platform for storing, visualizing, and exploring the collected air quality data. It also provides an open API for anyone to download air quality data collected by the students. Through the website, available at airbit.uit.no, students are motivated to contribute air quality data open to the public. We describe lessons learned from our pilot project in a Norwegian upper secondary school and how we are deploying it in 10 schools across Northern Norway. In the pilot, students successfully built and coded the air:bits, and after two months of data collection they could correctly describe local patterns in the air quality. We believe that by combining electronics and coding with the natural sciences we motivate students to engage in all scientific disciplines.;2018
We develop a simulation model for predicting the outcome of the US Presidential election based on simulating the distribution of the Electoral College. The simulation model has two parts: (a) estimating the probabilities for a given candidate to win each state and DC, based on state polls, and (b) estimating the probability that a given candidate will win at least 270 electoral votes, and thus win the White House. All simulations are coded using the high-level, open-source programming language R. One of the goals of this paper is to promote computational thinking in any STEM field by illustrating how probabilistic modeling and computer simulations can solve real-world problems for which analytical solutions may be difficult to find.;2018
We propose computational empowerment as an approach and a Participatory Design response to challenges related to digitalization of society and the emerging need for digital literacy in K12 education. Our approach extends the current focus on computational thinking to include contextual, human-centred and societal challenges and impacts involved in students' creative and critical engagement with digital technology. Our research is based on the FabLab@School project, in which a PD approach to computational empowerment provided opportunities as well as further challenges for the complex agenda of digital technology in education. We argue that PD has the potential to drive a computational empowerment agenda in education by connecting political PD with contemporary visions for addressing a future digitalized labour market and society.;2018
We report the status of the pre-experimental phase of a project called Combining Computational Thinking Didactics and Software Engineering in K-12 (COCONATS), which aims at combining computational thinking and software engineering didactics in order to facilitate the acquisition of software engineering principles in K-12, while promoting the development of life-skills.;2018
While recent work has begun to evaluate the efficacy of educational programming games, many common design decisions in these games (e.g., single player gameplay using touchpad or mouse) have not been explored for learning outcomes. For instance, alternative design approaches such as collaborative play and embodied interaction with tangibles may also provide important benefits to learners. To better understand how these design decisions impact learning and related factors, we created an educational programming game that allows for systematically varying input method and mode of play. In this paper, we describe design rationale for mouse and tangible versions of our game, and report a 2x2 factorial experiment comparing efficacy of mouse and tangible input methods with individual and collaborative modes of play. Results indicate tangibles have a greater positive impact on learning, situational interest, enjoyment, and programming self-beliefs. We also found collaborative play helps further reduce programming anxiety over individual play.;2018
With a growing call for an increased emphasis on computing in school curricula, there is a need to make computing accessible to a diversity of learners. One potential approach is to extend the use of physical toolkits, which have been found to encourage collaboration, sustained engagement and effective learning in classrooms in general. However, little is known as to whether and how these benefits can be leveraged in special needs schools, where learners have a spectrum of distinct cognitive and social needs. Here, we investigate how introducing a physical toolkit can support learning about computing concepts for special education needs (SEN) students in their classroom. By tracing how the students' interactions-both with the physical toolkit and with each other-unfolded over time, we demonstrate how the design of both the form factor and the learning tasks embedded in a physical toolkit contribute to collaboration, comprehension and engagement when learning in mixed SEN classrooms.;2018
With an increased push to integrate coding and computational literacy in K-12 learning environments, teacher educators will need to consider ways they might support preservice teachers (PSTs). This paper details a tinkering approach used to engage PSTs in thinking computationally as they worked with geometric concepts they will be expected to teach in K-5. Experiences programming in Logo to construct authentic artifacts in the form of two-dimensional geometric graphics not only supported PSTs' understanding of core geometric and spatial concepts, but also helped them to make connections between mathematics and computational literacy. Artifacts and discourse are discussed as they relate to three core considerations: engaging learners to construct authentic artifacts, supporting a communitarian ethos, and supporting various types of rapid feedback.;2018
With increased numbers of K-12 computing courses, we also see an increase in teachers new to the subject, making it difficult for them to properly assess student programming assignments. Many of these teachers require project-specific rubrics to help assess student learning. Researchers have attempted to create systematic, validated, and reliable rubrics for these courses with only minor success. In this research, we make an argument for the validity of our low-stakes computing rubrics. In doing so, we establish a validated method for creating a full-suite of project-based rubrics for K-12 computing courses, helping teachers, researchers, and practitioners make much-needed course materials. Evaluating these rubrics, we see grader consistency as well as heatmaps of where teachers are looking for computational thinking concepts in code.;2018
With the concept of Computational Thinking proposed, how to cultivate student's Computational Thinking in basic computer courses has become the focus of basic computer education reform in recent years. Computational Thinking has gradually been recognized by computer educators and has become an important goal of basic computer education. According to the author's experience, the paper analyzes the reasons why students of literal arts also need to acquire Computational Thinking after summarizing the current research status of Computational Thinking at home and abroad. Regarding the cultivation of Computational Thinking ability as a higher level than knowledge learning and skill training, the paper puts forward some improving suggestions on how to cultivate Computational Thinking among students of liberal arts.;2018
With the development of computer technology and the popularity of computer applications, computers have been used in all walks of life. In order to improve students' ability in computer applications, teachers should constantly strive to improve their teaching ideas, teaching content, and teaching methods. In the basic course teaching, the training method based on computational thinking ability is put forward, and the teaching and learning model based on computational thinking is constructed. Combined with the specific teaching curriculum, the development of computational thinking and the cultivation of computational thinking ability in education and teaching are systematically studied. Strengthen the reform of the basic work of computer culture, continue to innovate, gradually improve students' computer application ability, enhance comprehensive competitiveness, adapt to the needs of all walks of life, and deliver high-quality qualified personnel to the society.;2018
With the development of ICT and Big Data, a new education paradigm has been attracting attention by utilizing techniques to efficiently grasp large amount of articles and fairy tales and so on. For example, even in the same event and subject, new version-type articles or fairy tales are pouring out of myriad times and regions. This paper proposes machine learning based fast reading algorithm to identify elements of an important story that are handed down in spite of temporal and spatial differences using the version of 72 similar folk tales of the folk tales Red Hat which exist in Europe, Asia, Africa etc. To do this, we analyze the factors depending on the existence of various versions in a decision tree and conduct research using R language tree and caret package. Through the evaluation of the analytical model, we confirmed the existence of the unchanging core elements of traditional talks, which are handed down to the constraints of time and space, and the possibility of a model that intuitively understands them. The result of this study is expected to be used as a new educational field for ICT - based computing thinking (CT).;2018
With the introduction of computer programming in schools around the world, Scratch has risen in prominence for its thinkable, meaningful and social. Aiming to assessing the Computational Thinking skills of a Scratch program, we design and implement a new Scratch program analysis tool based on ANTLR. To solve some flaws (e.g. high failure rate and low efficiency) in Dr. Scratch which is the most relevant tool to assess Computational Thinking skills of Scratch programs, we choose the recognition tool ANTLR to design the system module and the assessing flow. And then, we customize more than 200 lexical and syntax parser rules in ANTLR. Furthermore, we expand the grading standard of assessing Computational Thinking skills in Dr. Scratch. Some fundamental concepts in Computer Science, such as stack, queue and recursion method, are involved in our grading standard. Experiment results show the performance (e.g. success rate, execution time) of SAT is superior to that of Dr. Scratch.;2018
With the introduction of fundamental concept computational thinking, Block-based programming tools are turning into more and more common in primary, middle and high school level introductory classes. Block-based programming languages support users to drag and drop different jigsaw shaped blocks and snapping together to form a program. The point of interest is on the programming logic rather than its syntax. In this paper, we present DB-Learn, a browser-based and visual programming environment. This facilitates to learn the concepts of relational algebra concepts. Relational algebra is one of the important concepts to learn and understand the operations of database management systems.;2018
With the rapid development of information and educational technology, computational thinking has become one of the basic qualities and abilities that all students should possess. Based on the data structure course, this paper adopts blended learning based on MOOC/SPOC to improve the students' ability of computational thinking, improve the level of students' programming and solve practical problems. Practice has proved that they are effective methods in the data structure teaching.;2018
With the recent paradigm shift in the teaching of computing and computational thinking skills, schools are engaging pupils as young as five in learning principles and concepts of programming. However, there are still many challenges within primary computing education, including the cost and availability of resources, and teachers' familiarity and/or confidence with these resources. In this paper, we offer an approach that develops a creative story-based pedagogy to address constraints such as these and facilitate the development of lesson plans supporting scaffolding and differentiation. Children's literature is used to introduce concepts such as pattern matching, abstraction and algorithms, along with the three main programming constructs of sequencing, repetition and selection. Through four stages of Read-Act-Model-Program (RAMP), we present a set of unplugged and Scratch-based activities and reflect on the potential impact of this educational opportunity to inspire an early interest in computing.;2018
With the various social services such as Facebook, Twitter and YouTube, many kind of bit data types are exponentially increasing. Therefore, people have difficulties to find the sub-optimal service among the overflow data in Internet. In education area, new trend with various ICT tools such as YouTube, STEAM (Science, Technology, Engineering, the Arts and Mathematics) supportive computational thinking software is famous. In this paper, we propose YouTube aware personalized recommender system for future ICT education. It is a technique to automatically rank high - visibility channels and videos in YouTube based on the personalized learning topic. To do this, we analyze the relevance of statistics such as views, likes, subscribers, and comments in YouTube, and use the R programming language with the rvest, ggplot2, stringr packages and the Chrome extension called SelectorGadget for direct data crawling. Initial experiments confirmed the possibility of the proposed technique and confirmed the possibility of extension.;2018
A Abstraction is considered an essential aspect of computational thinking. Primary schools are starting to include computational thinking into the curriculum. However, in order to guide their support, teachers need to know how to recognize abstraction. In this paper, we present how we can observe abstraction in young children tasked with solving an algorithmic assignment. In order to operationalize abstraction, we have used the layers of abstraction (LOA) model by Perrenet, Groote and Kaasenbrood. This model was originally used in the field of computer science and describes programming behavior at the level of software development, but has since been extended for use in primary education. We have operationalized this model for use with 5 to 6 year old students tasked with programming an educational robot. Their behavior has been related to each of the four layers of abstraction. Students were individually instructed with programming Cubetto, an educational robot, to reach a number of destinations, increasing in the level of algorithmic complexity. We analyzed audio and video recordings of the students interacting with Cubetto and a teacher. Verbal and nonverbal behavior were categorized by two researchers and resulted in an observation schema. We conclude that our operationalization of the LOA model is promising for characterizing young students' abstraction. Future research is needed to operationalize abstraction for older primary school students.;2019
A Bebras short task, a tasklet, is designed to provide a source for exploring a computational thinking concept: at the end of the contest it could be used as a starting point to delve deeper into a computing topic. In this paper we report an experience which aims at taking full advantage of the potential of Bebras tasklets. A math teacher asked her pupils to act as Bebras trainers for younger mates. The pupils, in pairs, were assigned to design and prepare a tangible game inspired by a Bebras tasklet, devised for the younger pupils to practice. They also had to explain the game to the younger pupils, make them play and support them in solving it. In carrying out this assignment the pupils acting as trainers had to deeply explore the Bebras tasklet and face its computational thinking challenge, and also practiced soft skills as collaborating with peers towards a common goal, adapting language and communicative style to engage with younger mates, devising and designing a tangible object, and planning its creation. The experience proved that using Bebras tasklets as the social and cultural context for situated learning of computational thinking competencies is indeed quite productive.;2019
A frequently mentioned reason for learning and integration programming in K-12 education is the development of computational thinking. However, there have been some differences in previous research concerning how computational thinking skills are developed through programming activities. An increasingly popular tool for programming in K-12 education is block programming. The aim of this study was to analyse and discuss potential opportunities and challenges in developing computational thinking skills through the use of block programming tools in K-12 education. The study has been conducted as a literature review where findings have been gathered and structured according to facets from a computational thinking framework presented by Valerie J. Shute, Chen Sun and Jodi Asbell-Clarke (2017) in 'Demystifying computational thinking. Educational Research Review, 22, 142-158'. The gathered data was further analysed through content analysis and with the use of deductive coding. In the literature search the following keywords where mainly used and combined with the Boolean operators 'or' and 'and': computational thinking, block programming, K-12, education, opportunities, challenges. The literature search where further filtered with a publication time frame between 2015 and 2019, with the exceptions of backward-searches. Findings show that there are both opportunities and challenges in using block programming tools to develop computational thinking skills. Where some are specific for the block programming approach, while other are more general. The conclusion of the study is that computational thinking skills should be targeted explicit in block programming activities for the desired development to occur. Author recommendation is that a variety of programming tools and approaches are used in computational thinking activities to encourage curiosity and progress.;2019
A growing number of countries, in Europe and beyond have established clear policies and frameworks for introducing Computational Thinking and computer programming to young children. Researchers, educators, and key stakeholders believe that these skills should be taught and used in early childhood classrooms to initiate the cognitive development of students at an earlier age. The introduction of CT in the curriculum is creating a strong demand for pre-service development, as many teachers did not learn about CT and computer programming in their initial education. In response to this identified need, new initiatives in Universities are underway seeking to bring CT and programming into pre-service teachers' education around the world. We adopted Scratch as the introductory programming language for a semester course in the department of Preschool Education in the University of Crete. The aim of using Scratch was to excite students' interest and familiarise them with the basics of programming. For 13 weeks, students were introduced to the main Scratch concepts and, afterwards, were asked to prepare their projects. For the projects, they were required to develop a game to teach certain concepts about Mathematics or Physical Science and/or present an Aesop myth to preschool age students. The results we obtained were more satisfactory than expected and, in some regards, encouraging.;2019
A learning path supporting the development of Computational Thinking skills in students of the last years of Primary School was defined and tested in a case study involving a grade 5 class and their teacher for the whole school year. The project aimed at involving all the students regardless of their personal interest, as a standard school activity. The case study proved to be successful with respect to students' interest and their ability to reach the main project's objectives. Their skills increased along the project and students demonstrated to be on the right path to develop a complete and autonomous approach to Computational Thinking. Nevertheless, a longer time span would be needed to for students to master deeply the new concepts and tools. Sometimes abstraction can be difficult and concrete activities are needed to introduce new ideas. Furthermore, students showed little autonomy and a limited use of the social aspects of the chosen programming environment. Devoting a longer time to the learning path would help fostering these skills. Finally, a close integration of the learning path with the school curriculum is envisaged.;2019
A method of teaching programming at elementary school is required. Scratch can easily practice the programming. This paper presents teaching materials by grade level using Scratch. For first graders, it is a teaching material for exercises of mouse operation. For second graders, it is a teaching material for exercises of keyboard operation. Third graders perform typing operations in Roman or English. Fourth graders create a program that tackles sequential processing. Fifth graders create a program that involves iterative processing. Sixth graders create a program that involves conditional branches and iterations. Each is combined with many subjects of art, music, national language and arithmetic. These materials were used in classroom practice with many teaching assistants. It is designed to be performed in 45 minutes. This paper also presents the results of classroom practice using these materials.;2019
A nationwide effort is underway to provide students pursuing higher education with options for satisfying general education (gen ed) math requirements. Within the context of this effort, computer science has an opportunity to introduce students to programming fundamentals and computer science principles while also satisfying gen ed math requirements. This paper is an experience report that describes initial efforts at the University of Nebraska-Omaha in piloting a course, satisfying the gen ed math requirements for non-STEM majors, whose content spans computer science, mathematics as well as the visual arts.;2019
"A number of educational jurisdictions in Canada and abroad are integrating coding and computational thinking (CT) concepts into their K-8 curriculum, however; very little investigation has been done comparing these nascent curricular reforms. This study will use qualitative content analysis to investigate the differences and similarities of K-8 coding and CT curriculum by comparing the concepts, themes, goals and objectives found in current documents. The study hopes to shed light on an important and under-addressed area of curriculum studies that will prove important as computer science education plays a bigger role in K-8 education.";2019
"According to much research, with the fourth industrial revolution the set of skills required in both old and new professions are changing. At a time when revolutionary technologies are penetrating more and more into everyday life, it is important that students, during the university courses, develop cognitive abilities (such as logical reasoning and visualization), content skills (which include ICT literacy), complex problem solving skills and technical skills (such as programming and computational thinking). One of the tools to enhance teaching and learning of STEM disciplines with technologies is an Advanced Computing Environment (ACE), a system that allows to perform numerical and symbolic computations, to make graphical representations in 2 and 3 dimensions and to create mathematical simulations through interactive components. The objective of our research is to understand if the use of an ACE in the university education of STEM disciplines allows students to develop important skills, such as problem solving, logical reasoning, mathematical reasoning, visualization, computational thinking, that will facilitate their university career and their entry into the world of work. To answer this question, we involved 48 university students in a 15-hour laboratory on the use of an ACE. The students were enrolled in degree courses in various STEM disciplines (Energy Engineering, Chemical Engineering, Physics, Mathematics Engineering, Computer Engineering, Aerospace Engineering, Biomedical Engineering, etc.) and they attended different years of bachelor's and master's degrees. During the laboratory, the students learned the functionalities of an ACE and used it for visualization and modelling, to write procedures for problem solving and for the creation of interactive materials. In the second part of the laboratory, the students worked in groups or individually on the creation of an interactive worksheet involving a STEM discipline of their interest. As a final product they could opt for the resolution of a problem with the generalization of the resolution, the study of a problem situation or of a theoretical concept, or the development of an interactive application. Their attitude toward the use of an ACE for the development of skills, previous knowledge on STEM software and their reasons for learning how to use an ACE were measured through an initial and a final questionnaire that students were asked to fill in at the beginning and at the end of the laboratory. The worksheets produced by the students were classified into three main categories (independently of the discipline of interest): problem solving, problem solving applications, applications (function studies or theoretical formulas) and interactive files (such as program or app); they were analysed and cross-checked with the answers to the questionnaires. The results obtained show that the use of an ACE in the STEM disciplines can develop, in different ways, the key skills mentioned above for the university career and for the world of work.";2019
According to the 2010 National Research Council in the United States, everyone should be taught Computational Thinking (CT) in future education systems. Originally targeting higher secondary and college students, CT has found its way into many primary and lower secondary school curricula in dozens of countries in the last years. So especially for younger students it is an advantage to combine IT with everyday life, considering not each student is familiar with the computer, depending on factors like family background or personal interests. Consequently, in addition to computer-supported lessons, alternative approaches for introducing informatics concepts are necessary. A creative approach in this direction could be to join the STEM (Science Technology Engineering Mathematics) to STEAM (extended with an A for Arts) movement. Especially with the art of magic nearly everyone comes in contact as a child. By choosing the appropriate magic tricks with explanations found in the field of informatics, intrinsic motivation of students will be high to deal with the underlying concepts. This paper presents the most important characteristics of useful magic tricks for this purpose, as well as concrete examples, linking concepts in neurodidactics plus applied CT approaches.;2019
According to the Code.org there are currently 528,174 open computing jobs in U.S. and only 49,291 computer science students graduated into the workforce, last year. In order to try to reverse this scenario, several countries are working on a way to include computer science concepts, like computational thinking, in their curriculums for K-12 education. In addition, many studies and researches are being done related to practices and tools that can be applied in order to retain students that applied for computer science courses. In order to contribute to these initiatives, this paper presents CODEX, an interactive and ludic learning object, that aims to help students that do not need to have a background in programming to learn one of the most important structure in a programming language, the loop. CODEX was designed to be used both in class and in extra-class activity.;2019
According to the current European policy strategy digital skills are relevant for the creation of an inclusive digital society which benefits from the digital single market. These policies foresee the training of European citizens' digital skills with several initiatives such as the skills agenda for Europe with the aim to help Europe's growth in an increasingly digital society. However, the disparity between male and female participation in ICT sector is getting more marked at a professional level. Therefore, one of possible solutions for overcoming this gap and to promote ICT careers is to introduce innovative methodological learning interventions which can favour, further, the development of students' problem solving and their digital potentialities. In this context, the promotion of computational thinking (CT), as a support for development of the thinking ability in young people becomes fundamental. This allows students to exploit their creativity and innovation capability through the coding activities which makes computational thinking concepts more concrete and turns them into the tool for an effective learning. The paper describes the project Coding4Girls, co-funded by European Commission under Erasmus+ Programme, aiming to create and validate a learning framework for coding skills development in primary and secondary school's 10-16 years old students through the design and development of awareness raising serious games in different countries: Slovenia, Greece, Turkey, Italy, Croatia, Bulgaria and Portugal.;2019
Acronym STEM (Science, Technology, Engineering, and Mathematics) has become very frequently word among many stakeholders in the school policy. Mathematical and computational thinking are important for STEM Education. There are common thinking skills, but computational thinking focuses more on automation. Mathematical thinking focuses more on proofing. We present n our contribution the theoretical requirements that are needed for students in mathematical and digital competences. Practical examples represent, how it is possible to develop mentioned competences in educational practice.;2019
After a lengthy debate within the scientific community about what constitutes the problem solving approach of computational thinking (CT), the focus shifted to enable the integration of CT within compulsory education. This publication strives to focus the discussion and enable future research in an educational setting with a strong focus on the Austrian circumstances and the goal to allow wide international adoption later on. Methodically, a literature review was conducted to gain knowledge about the current strands of research and a meta study to show the diversity of proposed and materialized studies. Three main questions were answered, establishing that CT as an idea is rooted in scientific literature dating back to the 1980s and grew in popularity after Wing introduced the concept to a broader audience. A number of authors contributed to the current state of the field, with the most cited review coming from Grover and Pea. The challenge to integrate CT in curricula around the world was met by many experiments and case studies but without a conclusive framework as of yet. Ultimately, this paper determines that expert integration is a blank spot in the literature and aims to create a strong, inclusive path to CT education by inviting practitioners.;2019
After the computational thinking sessions in the previous 20162018 editions of TEEM Conference, the fourth edition of this track has been organized in the current 2019 edition. Computational thinking is still a very significant topic, especially, but not only, in pre-university education. In this edition, the robotic has a special role in the track, with a strength relationship with the STEM and STEAM education of children at the pre-university levels, seeding the future of our society.;2019
Aim/Purpose This paper aims to explore whether having state Computer Science standards in place will increase young children's exposure to coding and powerful ideas from computer science in the early years. Background Computer science education in the K-2 educational segment is receiving a growing amount of attention as national and state educational frameworks are emerging. By focusing on the app ScratchJr, the most popular free introductory block-based programming language for early childhood, this paper explores if there is a relationship between the presence of state frameworks and ScratchJr's frequency of use. Methodology This paper analyzes quantitative non-identifying data from Google Analytics on users of the ScratchJr programming app. Google Analytics is a free tool that allows access to user activity as it happens in real time on the app, as well as audience demographics and behavior. An analysis of trends by state, time of year, type of in-app activities completed, and more are analyzed with a specific focus on comparing states with K-12 Computer Science in place versus those without. Contribution Results demonstrate the importance of having state standards in place to increase young children's exposure to coding and powerful ideas from computer science in the early years. Moreover, we see preliminary evidence that states with Computer Science standards in place support skills like perseverance and debugging through ScratchJr. Findings Findings show that in the case of ScratchJr, app usage decreases during the summer months and on weekends, which may indicate that coding with ScratchJr is more often happening in school than at home. Results also show that states with Computer Science standards have more ScratchJr users on average and have more total sessions with the app on average. Results also show preliminary evidence that states with Computer Science standards in place have longer average session duration as well as a higher average number of users returning to edit an existing project. Recommendations for Practitioners Successful early childhood computer science education programs must teach powerful ideas from the discipline of computer science in a developmentally appropriate way, provide means for self-expression, prompt debugging and problem solving, and offer a low-floor/high-ceiling interface for both novices and experts. Practitioners should be aware in drops in computer science learning during the summer months when school is not in session. Recommendation for Researchers Researchers should consider the impact of state and national frameworks on computer science learning and skills mastered during the early childhood years. Researchers should look for ways to continue engaging students in computer science education during times when school is not in session. Impact on Society Results demonstrate the importance of having state CS standards in place to increase young children's exposure to coding and powerful ideas from computer science in the early years. Moreover, we see preliminary evidence that states with Computer Science standards in place support skills like perseverance and debugging through ScratchJr. Future Research Future research should continue collecting Google Analytics from the ScratchJr app and track changes in usage. Future research should also collect analytics from a wide range of programming applications for young children to see if the trends identified here are consistent across different apps.;2019
Aim/Purpose This research aims to describe and demonstrate the results of an intervention through educational robotics to improve the computational thinking of student teachers. Background Educational robotics has been increasing in school classrooms for the development of computational thinking and digital competence. However, there is a lack of research on how to prepare future teachers of Kindergarten and Elementary School in the didactic use of computational thinking, as part of their necessary digital teaching competence. Methodology Following the Design-Based Research methodology, we designed an intervention with educational robots that includes unplugged, playing, making and remixing activities. Participating in this study were 114 Spanish university students of education. Contribution This research helps to improve the initial training of student teachers, especially in the field of educational robotics. Findings The student teachers consider themselves digital competent, especially in the dimensions related to social and multimedia aspects, and to a lesser extent in the technological dimension. The results obtained also confirm the effectiveness of the intervention through educational robotics in the development of computational thinking of these students, especially among male students. Recommendations for Practitioners Teacher trainers could introduce robotics following these steps: (1) initiation and unplugged activities, (2) gamified activities of initiation to the programming and test of the robots, (3) initiation activities to Scratch, and (4) design and resolution of a challenge. Recommendation for Researchers Researchers could examine how interventions with educational robots helps to improve the computational thinking of student teachers, and thoroughly analyze gender-differences. Impact on Society Computational thinking and robotics are one of the emerging educational trends. Despite the rise of this issue, there are still few investigations that systematize and collect evidence in this regard. This study allows to visualize an educational intervention that favors the development of the computational thinking of student teachers. Future Research Researchers could evaluate not only the computational thinking of student teachers, but also their didactics, their ability to teach or create didactic activities to develop computational thinking in their future students.;2019
"Algorithms are more and more pervading our everyday life: from automatic checkouts in supermarkets and e-banking to booking a flight online. Understanding an algorithmic solution to a problem is a very relevant activity to improve end-users' involvement. To this end, adopting a meta-design approach may help to support end-users to appropriate the design skills necessary for contributing to system design, in new and engaging modalities. By acquiring Computational Thinking (CT) skills (e.g., algorithmic thinking, abstraction), end-users will be able to understand and trust algorithms, while at the same time participate in the design and development of systems evolving in accordance with their needs. In this work, we focus on two different ways of improving CT skills: playfulness and collaboration. We introduce a game-based system, TAPASPlay, to foster CT skills and we report the results of an exploratory study with 18 users; our hypothesis is that learning CT through gameplay is effective and we tested it by involving participants in game sessions providing playful experience and collaborative learning.";2019
Although several investigations of spatial reasoning and mental rotation skills have been conducted in research areas linked to STEM education, to the best of our knowledge, few of these studies have examined the relationship between spatial reasoning and computational thinking. Given this gap in the literature, the present study investigates the role and action of spatial reasoning, and specifically the effects of mental rotation on computational thinking within an embodied and enacted perspective. To achieve this, we carried out a study involving 92 students in five primary-school classes (1st grade - 5th grade). The findings reveal a positive correlation between computational thinking skill and mental rotation ability.;2019
Although the concept of computational thinking has flourished, little research has explored how to integrate various elements of computational thinking into an undergraduate classroom setting. Clarifying core concepts of computational thinking and providing empirical cases that apply computational thinking practices into a real-world educational setting is crucial to the success of software engineering education. In this article, we describe the development of a curriculum for a social innovation capstone course, using core concepts and elements of computational thinking. The course was designed for undergraduate students of a liberal arts college at a university in Korea. Students were asked to define a social problem and introduced to the core concepts and processes of computational thinking aided by Arduino and Raspberry Pi programming environments. After building a business model, they implemented a working prototype for their proposed solution. We document class project outcomes and student feedback to demonstrate the effectiveness of the approach.;2019
Artificial Intelligence (AI) and Machine Learning (ML) have heavily irrupted in society, bringing new applications and possibilities while introducing some ethical problems. Governments and institutions around the world are working on the challenges posed by AI in all aspects, from economy to education. Therefore, introducing AI-related content at school and exploring how this kind of content can be taught becomes mandatory. In this paper we carry out a bibliographic revision of previous works done on ML, and then describe an educational resource developed by the institution of the first two authors (INTEF) aimed to teach ML in schools with Scratch and Machine Learning for Kids. The testimonials of three educators, who have implemented their own version of these resources, are depicted. More efforts should be made to introduce AI-related content in education.;2019
As a fundamental and introductory course in undergraduate education, Computer Basis aims to cultivate the scientific computational thinking mode and the ability of solving problem for students who are not the computer majors. In this study, a new pedagogical method named PBL-VP combining the Problem-Based Learning (PBL) and the visual programming Blockly was applied to Computer Basis. This paper described a classical example about problem solving to explain the teaching process of the PBL-VP in detail. The process of problem solving was divided into several operable steps to gradually guide students to analyze problems, provide solutions and establish scientific logic thinking. Blockly was introduced to obscure the grammar of programming language and implement the algorithm visually. Finally, we evaluated the effectiveness of the PBL-VP teaching method on student learning by a contrast test. The empirical results proved that students in the class with PBL-VP earned higher final grades and the teaching method we proposed played a positive role in computer general education.;2019
As an effort to integrate computational thinking into high school science classrooms across Michigan, we administered a year-long professional development series for physics teachers to learn how to program and utilize computer simulations as learning activities in their curricula. Near the end of their first year in the series, N=7 instructors were interviewed to explore their intended learning outcomes, design process, and implementation of computational activities. We conducted a thematic analysis on qualitative interview data to identify major themes from the teacher perspective. Herein, learning outcomes are articulated to investigate the professional development series' effectiveness at helping teachers prepare activities aligned with science standards and their specific aims. Our analysis provides insight regarding the lack of specificity in learning outcomes, the absence of assessment on computational content, and difficulty navigating the space of crosscutting concepts around computation. This research informs the augmentation of computational physics professional development workshops, communicates recommendations for practitioners, and documents teachers' intended learning outcomes when integrating computation in K-12 education spaces.;2019
As computational thinking (CT) is being embraced by educational systems worldwide, researchers and teachers have posed important questions such as what to teach and what can be learned. These questions are universally crucial to the learning of all subjects. Nevertheless, there is no up-to-date, systematic overview of CT education for K-9 students that attempt to provide answers to these crucial questions. Thus, this systematic review presents a synthesis of 55 empirical studies, providing evidence of the development of computational thinking through programming in Scratch, one of the most popular visual block programming languages in schools. The purpose of this review is to systematically examine the CT skills that can be obtained through Scratch in K-9 based on empirical evidence. This systematic review has adopted Brennan and Resnick's (2012) framework as the basis for defining and identifying the expected CT skills in K-9. The major findings entail what computational thinking skills students in K-9 can learn through Scratch in relation to the framework mentioned above, taking the progression of learning into account. Additional CT skills that are not captured by the framework were identified including input/output, reading, interpreting and communicating code, using multimodal media, predictive thinking, and human-computer interaction. These additional CT skills are not currently presented in Brennan and Resnick's (2012) framework and can be considered as possible supplements to their framework. Furthermore, the paper discusses the difficulties regarding assessment and the progression of the identified skills, as well as problems with study designs. Finally, the paper sets out suggestions for future studies based on the current research gaps.;2019
As computing has become an integral part of our world, demand for teaching computational thinking in K-12 has increased. One of its basic competences is programming, often taught by learning activities without a predefined solution using block-based visual programming languages. Automatic assessment tools can support teachers with their assessment and grading as well as guide students throughout their learning process. Although being already widely used in higher education, it remains unclear if such approaches exist for K-12 computing education. Thus, in order to obtain an overview, we performed a systematic mapping study. We identified 14 approaches, focusing on the analysis of the code created by the students inferring computational thinking competencies related to algorithms and programming. However, an evident lack of consensus on the assessment criteria and instructional feedback indicates the need for further research to support a wide application of computing education in K-12 schools.;2019
As K-12 computer science (CS) education initiatives scale throughout the U.S., researchers seek to understand the context-specific relationships between CS instruction and student learning. Evaluation of instruction requires valid measures of curriculum implementation. We have developed measures for identifying conditions for successful implementation of an introductory high school computer science curriculum along two-dimensions: teaching quality and curriculum enactment. Additionally, we have defined three types of instructional strategies for teaching quality. Quantitative and qualitative data were collected from 53 teachers through surveys and interviews. Data were aggregated and integrated to derive scaled measures for the instructional strategies and curriculum adaptation, and implementation measures were correlated with student end-of-unit assessment data. We found potential factors that can enhance or impede the successful implementation of CS curriculum materials, and we have identified several broad issues associated with scaling up CS curricular implementation.;2019
As mobile technologies become more ubiquitous, design work at the intersection of mixed reality and embodied learning is growing. While much of this work focuses on designing technologies and environments for children, we contribute a unique perspective of children as designers of these technologies. In this paper, we explore how children embody and debug computational algorithms through designing their own mixed reality games. We conducted two afterschool workshops with 19 middle school aged children (3 girls, 16 boys, ages 1013) during which participants designed mobile, location based games with mixed reality technologies about local plants and animals. Findings reveal how participants across workshops embody a key game mechanic (digitally spawning characters in the real world) by engaging in an iterative digital-to-physical-to-digital debugging process that led to their understanding of the underlying computational algorithm. We further present design considerations for authoring platforms that allow children to design with mixed reality, place-based technologies.;2019
As part of the 3D printing summer course for undergrads in our university, students were introduced to Autodesk Tinkercad as a design tool for creating and editing 3D models. After a brief period of familiarization with Tinkercad, we presented students with Codeblocks, a tool integrated with Tinkercad that enables the creation of 3D models through programming under the blocks model. To our surprise, students started creating complex and lengthy programs to produce original printable 3D objects. We decided to investigate this level of engagement using a questionnaire to collect opinions and experiences from students and a set of metrics to categorize their programming work. The results obtained are presented in this paper along with our conjectures on the causes of the enthusiasm observed with Codeblocks. Three factors seem to have been key in this case: diversity in the composition of the student group, availability of 3D printers to materialize designs, and a relaxed environment where test and failure were common and acceptable.;2019
As the demand for computing careers increases, it is important to implement strategies to broaden the participation in computer science for African Americans. Computer science courses and academic pathways are not always offered in secondary schools. Many teachers are not trained in computer science, yet are pushed to incorporate more computing, computational thinking, and computer usage. A qualitative focus group study was implemented to assess the computer science identities of African American teachers and of their respective urban secondary schools serving African American students. Three major codes were identified: district administration of computer and computing implementation, teacher attitudes towards computer science instruction, and teachers' recommendations to improve computer science and computational thinking instruction and outreach for African American secondary school students. Findings can be used to improve computer science and technology rollout programs from county and district administrations, teacher instruction with digital tools, and computer science outreach for African American secondary school students.;2019
"Assessing comprehension of computational thinking (CT) concepts (CTCs), specifically in block-based programming environments like Scratch, has been challenging, and assessment instruments developed and presented in prior studies either do not provide a complete picture about students' cognitive processes or they are not easy-to-administer, subjective, or requires lengthy analysis of qualitative data. Eye-tracking has become one of the most popular methods to study what individuals view, in what order, for how long, and how often, and it is a technology that could give us a window into students' cognitive processes and could be used as an assessment tool for comprehension of CTCs [1]. This study presents eye-tracking technology as an objective, non-intrusive, and easy-to-administer assessment instrument to measure students' comprehension of core CTCs including sequences, loops, events, parallelism, conditionals, operators, data, motion, looks, sound, pen, and sensing. It explores gradual changes in students' comprehension of CTCs as reflected on three eye-gaze data as a proxy; FD (Fixation Duration), SA (Saccade Amplitudes), and RF (Regression Frequency).";2019
Background: There have been increasing calls for integrating computational thinking and computing into school science, mathematics, and engineering classrooms. The learning goals of the curriculum in this study included learning about both computational thinking and climate science. Including computer science in science classrooms also means a shift in the focus on design and creation of artifacts and attendant practices. One such design practice, widespread in the design and arts fields, is critique. This paper explores the role of critique in two urban, heterogenous 8th grade science classrooms in which students engaged in creating computer games on the topic of climate systems and climate change. It explores and compares how practices of critique resulted from curricular decisions to (i) scaffold intentional critique sessions for student game designers and (ii) allow for spontaneous feedback as students interacted with each other and their games during the process of game creation. Results: Although we designed formal opportunities for critique, the participatory dimension of the project meant that students were free to critique each other's games at any time during the building process and did so voluntarily. Data indicate that students focused much more on the game play dimension of the design than the science, particularly in those critique sessions that were student-initiated. Despite the de-emphasis on science in spontaneous critiques, students still focused on several dimensions of computational thinking, considering user experience, troubleshooting, modeling, and elegance of solutions. Conclusions: Students making games about science topics should have opportunities for both formal and spontaneous critiques. Spontaneous critiques allow for students to be authorities of knowledge and to determine what is acceptable and what is not. However, formal, teacher-designed critiques may be necessary for students to focus on science as part of the critique. Furthermore, one of the benefits to critiquing others was that students were able to see what others had done, how they had set up their games, the content they included, and how they had programmed certain features. Lastly, critiques can help facilitate iteration as students work to improve their games.;2019
Based on research results and experience, students who finish K-12 education lack the necessary computational thinking skills that they would need to continue their studies effectively in the field of computer sciences. Our goal was to examine the currently used methods and programming languages in K-12 education and to find and present an alternative approach. Using visual programming environments in education to develop students' computational thinking and algorithmic skills is a widespread practice in K-12 education. These environments mostly provide simplified versions of real programming languages. In this paper, we present event-action-based visual programming, as an alternative to today's most frequently used methods, which do not restrict the students' development ability to simplified and basic applications while retaining the advantages of visual languages. We organized four workshops in which we presented this programming approach to four distinct groups involved in education. The participants were guided to develop a multiplatform mobile application using Construct 2 event-action-based visual programming. At the end of the sessions we collected data in the form of group interviews and questionnaires on the possibilities of including event-action based visual programming in computer science education. Based on the results, the participants found the method suitable for beginner programmers to help them lay the foundations for more complex, text-based programming languages and to develop a positive attitude towards programming.;2019
Bilingual education has described a process called translanguaging by which students use linguistic resources across and beyond multiple named languages to learn. Here, we examine how bilingual learners translanguage while learning computer science. These middle schoolers participated in a curricular intervention which infused computational thinking into their Spanish-English bilingual language arts class. Through a descriptive qualitative methodology, we document classroom moments supporting four claims: 1) students' translanguaging blurs linguistic, disciplinary, and modal boundaries, 2) computational literacies are intertwined with students' other literacies, 3) students' attitudes about language and the contexts around them play a role in their translanguaging, and 4) students translanguage to engage in specific CT practices.;2019
Block-based programming languages reduce the need to learn low-level programming syntax while enabling novice learners to focus on computational thinking skills. Game-based learning environments have been shown to create effective and engaging learning experiences for students in a broad range of educational domains. The fusion of block-based programming with game-based learning offers significant potential to motivate learners to develop computational thinking skills. A key challenge educational game developers face in creating rich, interactive learning experiences that integrate computational thinking activities is the lack of an embeddable block-based programming toolkit. Current block-based programming languages, such as Blockly and Scratch, cannot be easily embedded into industry-standard 3D game engines. This paper presents INTELLIBLOX, a Blockly-inspired toolkit for the Unity cross-platform game engine that enables learners to create block-based programs within immersive game-based learning environments. Our experience using INTELLIBLOX suggests that it is an effective toolkit for integrating block-based programming challenges into game-based learning environments.;2019
Bringing robots into classrooms presents a new set of challenges for classroom management and teacher support compared to traditional technology-enhanced learning and has been left almost unexplored by the research community. In this paper, we present the opportunities and challenges of orchestrating Educational Robotics (ER) activities in classrooms. To support our discussion, we present a case study of 25 students working in pairs using handheld robots to engage in a computational thinking activity. While performing the activity, students' behavioral information was sent from the robots to an orchestration dashboard that was used in a debriefing activity. Although this work is in its preliminary stages, it contributes to framing the challenges that need to be addressed to realistically scale-up usage of ER in classrooms.;2019
Building Computational Thinkers, a three-year research study, explored how educators and designers can most effectively support the development of computational thinking capacity, and how these learning experiences could be customized to meet the needs of different learners. This research study focused on three specific exhibit design approaches that conveyed problem decomposition content in The Science Behind Pixar (Pixar), a 13,000 square foot traveling exhibition about the computer science, mathematics, and science behind Pixar's innovative films. Phase One investigated how novice learners could be supported to interact with exhibits and understand problem solving strategies that tackle complex, creative challenges in computer programming. Phase Two investigated the affordances of these exhibits to build capacity, feelings of efficacy, and interest in problem decomposition content in middle and high school youth. The findings in this paper describe the types of scaffolds that can be used to support computational thinking in novice youth, as well as how a combination of exhibit approaches were found to increase youth perceptions, understanding, and beliefs of computer programming. It will also discuss how two exhibit approaches worked particularly well for engaging girls in problem decomposition content.;2019
Buteau, Sacristin and Muller's target article raises the pertinent issue of how to describe a sustained undergraduate course on computational thinking and programming for mathematical learning. There is so little work on this issue that it is worthwhile to reflect on this study and to raise questions regarding the options and tools available or needed to understand sustained constructionist activity. Here, I focus on questions regarding how to understand the instructor's craft knowledge in practice and what constructionist mathematical learning may look like when programming is at the service of engagement with mathematical concepts.;2019
Complex problem solving is one of the key skills for future jobs, but it has not been clearly operationalized. We hypothesized that it is a construct of inquiry, computational thinking, and mathematical problem solving. The hypothesis was empirically tested by administering tests to 261 high school students for assessing three inquiry skills, two dimensions of computational thinking and five mathematical problem solving skills. Confirmatory factor analysis showed a three factor model of inquiry skills and two factor model of computational thinking skills to have a good fit. Mathematical problem solving skills were characterized with a two factor model. These factors were combined in a higher-order factor model into one construct that could he defined as a complex problem solving skill.;2019
Computational models and simulations can be powerful tools to help learners understand a wide variety of natural phenomena. However, understanding and learning from computational models requires learners to comprehend the rules agents follow that lead to emergent outcomes. Blocks-based programming is useful in scaffolding learners in the early stage of programming tasks. We posit that students can authentically interact with agent-based modeling via a blocks-based dialect of the popular ABM language NetLogo, dubbed NetTango, across many difficulty levels. Specifically, we discuss three different activities in which we have integrated blocks-based programming into STEM classrooms that show blocks can be used for activities of increasing computational engagement and difficulty.;2019
Computational Thinking (CT) and Agile Values (AV) focus respectively on the individual capability to think algorithmically, and on the principles of collaborative software development. Although these two dimensions of software engineering education complement each other, very few studies explored their interaction. In this paper we use an exploratory Structural Equation Modeling technique to introduce and analyze Cooperative Thinking (CooT), a model of team-based computational problem solving. We ground our model on the existing literature and validate it through Partial Least Square modeling. Cooperative Thinking is new competence which aim is to support cooperative problem solving of technical contents suitable to deal with complex software engineering problems. This article suggests to tackle the CooT construct as an education goal, to train students of software development to improve both their individual and teaming performances. (C) 2019 Elsevier Inc. All rights reserved.;2019
Computational Thinking (CT) can amplify learners' skill sets so that they become excellent problem-solvers. Game-Based Learning and Collaborative Learning are two approaches that may aid in the development of CT skills. This paper describes a framework based on Game and Collaborative Learning which aims to enhance the CT teaching that improves students' social skills in a fun way. The framework stands out by including collaborative learning features defined in the main literature. Also, the strategy was developed specifically to fit the games' dynamics. The approach was evaluated via metacognitive and transactive analysis and by a survey. The results showed evidence that the method is able to stimulate interaction among students to apply problem-solving strategies.;2019
Computational Thinking (CT) has been considered as a problem solving approach that involving fundamental thinking processes which include decomposition, pattern recognition, abstraction, and algorithms. To see that CT would be of useful to solve complex problems of user interface design (UID), this study aims to see the extent the CT framework would have an effect on the achievement of designs thinking process. The study was carried out based on the evaluation of user interface design projects accomplished by undergraduate students involving 3 cohorts composed of 21 groups in total. The results indicate that disregarding CT process in design thinking leads to inefficiency interface design.;2019
"Computational Thinking (CT) has been defined as an important skill for students to have in learning, both from early childhood to college. Besides, computational thinking has a correlates with Taxonomy Bloom. Bloom's Taxonomy is the basis of learning in Indonesia, so computational thinking needs to be developed further because it is relevant to learning in Indonesia. Computational thinking skills include thinking logically, analyzing the problem-solving process, and evaluating. One tool that can facilitate CT skills is Robotics. In the industrial revolution 4.0, educational robotics became an innovation. Robotics in learning can provide many benefits and motivate students. Then, a systematic literature review is conducted which analyzes previous studies to find information about benefit using robotics based learning and at the level of students' computational thinking. In the end there are several findings, namely (1) the influence of Computational Thinking Skill in education; (2) the effectiveness of robot-based learning; (3) robotics-based learning can facilitate the development of CT skills in students; (4) robotics-based learning activity design to support computational thinking in early childhood.";2019
Computational Thinking (CT) has been referred as an important competence or skill that all 21st century citizens should develop. CT activities can promote the development of the competences related to problem solving, critical thinking, collaboration, communication and creativity. According that, computer science and, in particular, programming or coding have been integrated in the primary and secondary schools' curriculum in many countries around the world. In Portugal the recent curriculum changes have made programming and CT compulsory for pupils in primary and secondary education and suggests the use of robot as strategy to improve the development of CT skills. The national curriculum integrates a subject in the computer science area, in each grade between the 5th and 9th grades, taught by a computer science teacher. To become a computer science teacher in primary and secondary education, it is compulsory to attend a master's degree in computer science education. This paper reports a pedagogical activity developed with computer science student-teachers of a Master's degree in teaching computer science at the University of Lisbon. With this activity we aimed to develop computational thinking skills in the students-teachers through learning scenarios with robots. In this paper two learning scenarios designed by the student-teachers, using robots with different typology, was presented as well as the programs and algorithms implemented. We provide a brief analysis of the Key dimensions involved in the two learning scenarios as they were observed. The results show the affordances and possibilities of using learning scenarios with robots as structuring resources to improve the development of computational thinking skills in computer science teacher education.;2019
Computational thinking (CT) implementation in regular classroom activities is current research area in many countries. Some solutions exist, especially recently in Scandinavian countries. However, there is still the lack of support for educators in CT implementation in real classroom settings. Additionally, current generation of pupils needs to see actions right now in order to be motivated and encouraged, as traditional teaching methods are widely critiqued and there is the need of new strategies for learning motivation. To address these problems, the method for teaching material development in order to gain particular CT abilities by using hands on and prototyping with Arduino activities was proposed based on the literature review, computer science (CS) and crafts curriculum for 14-15th years old pupils. Next, the educational content was developed and clear interconnections between CT abilities and class activities were presented. The implication of this result is that it can be used for class activities planning at computer science and crafts subjects in basic school in order to develop particular CT abilities.;2019
Computational thinking (CT) is a problem-solving skill influenced by concepts fundamental to computer science [6]. CT is considered by many to be a new form of literacy to be incorporated in the K-12 curriculum. There are two important issues regarding the implementation of CT in education, namely, how should CT be applied from the pedagogical point of view, and what is the appropriate age to introduce CT into the curriculum. Umaschi-Bers [5] argues that CT should be acquired by doing i.e. coding, for the purpose of expressing oneself, as well as for understanding the basics of CT, and advocates introducing coding into kindergarten with suitable software in a playful and meaningful way (playground not playpen). However, convincing kindergarten teachers to integrate coding into their curriculum, could prove to be a challenge. This research deals with the perceptions of pre-service kindergarten teachers regarding a coding experience in a course about CT. The goal of the research was to gain an understanding of students' perceptions of the process that they experienced and the possibility of implementing coding into the curriculum of their future kindergartens as a result of this process. The premise of the instructor was that students would consider implementing coding as an activity in their future kindergarten, provided that they experienced it as part of their training in an enjoyable way. The software used for this purpose was ScratchJr. The students coded and created projects in five half-hour hands-on sessions which were followed by a written reflection submitted after each lesson. At the end of the semester, they were to submit a concluding reflection. These reflections were analyzed by combining quantitative and qualitative procedures for the purpose of performing Grounded Theory analysis [4]. The results indicate that a positive and enjoyable hands-on coding experience with software designed for small children, can improve the sense of technological efficacy of pre-service kindergarten teachers, unleash their creativity and could bring students to consider incorporating the application into their future kindergartens. However there was also a high number of students who enjoyed the learning process, but nevertheless were adamant about the inappropriateness of using the application in kindergarten for various reasons, i.e. the clash with developmental and social needs of the children, as well as time constraints of the kindergarten schedule that would limit the ability to provide the children with a meaningful learning experience.;2019
Computational thinking (CT) is a set of abilities, which has lately acquired great relevance because it brings to students the components to handle in-formation and develop analytical skills, which allows them to perform ac-cording to today's society. In this study, the authors describe the development of a formative assessment tool for Scratch programming. This web tool allows school teachers to design challenges for their students, supports the assessment of CT dimensions, gives feedback to students through the challenges' results and a gamified strategy, and keeps a track of the development of CT for each student.;2019
Computational thinking (CT) is a term widely used to describe algorithmic thinking and logic reasoning concepts and processes often related to computer programming. As such, CT as a cognitive ability builds on concepts and processes that derive from computer programming, but are applicable to wider real-life problems and STEM domains. CT has recently been argued to be a fundamental skill for 21st century education and an early academic success indicator that should be introduced and trained already in primary school education. Accordingly, we developed three life-size board games - Crabs & Turtles: A Series of Computational Adventures - that aim at providing an unplugged, gamified and low-threshold introduction to CT by presenting basic coding concepts and computational thinking processes to 8 to 9-year-old primary school children. For the design and development of these educational board games we followed a rapid prototyping approach. In the current study, we report results of an empirical evaluation of game experience of our educational board games with students of the target age group. In particular, we conducted quantitative analyses of player experience of primary school student participants. Results indicate overall positive game experience for all three board games. Future studies are planned to further evaluate learning outcomes in educational interventions with children.;2019
Computational thinking (CT) is a way of making sense of the natural world and problem solving with computer science concepts and skills. Although CT and science integrations have been called for in the literature, empirical investigations of such integrations are lacking. Prior work in natural selection education indicates students struggle to explain natural selection in different contexts and natural selection misconceptions are common. In this mixed methods study, secondary honors biology students learn natural selection through CT by engaging in the design of unplugged algorithmic explanations. Students learned CT principles and practices and applied them to learn and explain the natural selection process. Algorithmic explanations were used to scaffold transfer of natural selection knowledge across contexts through investigation of three organisms and the creation of generalized natural selection algorithms. Students' pre- and post-unit algorithmic explanations of natural selection were analyzed to answer the following research questions: (a) How do students' conceptions of natural selection change over the course of a CT focused unit? (b) What is the relationship between CT and natural selection in students' algorithmic explanations? (c) What are students' perspectives of learning natural selection with CT? Results indicate students' conceptions of natural selection increased and natural selection misconceptions decreased over the course of the unit. Within their post-unit algorithmic explanations, students used specific CT principles in conjunction with natural selection concepts to explain natural selection, which helped them to learn the details of the natural selection process and correct their natural selection misconceptions. Students indicated the use of CT in unplugged algorithmic explanations in different contexts helped them learn natural selection. This study shows unplugged CT can be used to teach students science content, and it provides an example for further CT and science integrations. Implications for the field are discussed.;2019
Computational thinking (CT) is becoming a growing field in educational research and practice. CT is not only related to coding or programming, but also a fundamental skill for everyone to solve problems effectively and efficiently with solutions that are reusable in different contexts, which helps to improve our analytical ability for different tasks. Therefore, parents are eager to enroll their children in children programming courses. This paper presents the design of a web-based game for learning computational thinking anywhere and anytime. It has a visual programming environment for programming virtual robot to complete specific tasks. Our game levels are designed to cover the following five core elements of CT: reformulation, recursion, decomposition, abstraction and systematic testing. The game also supports collaborative learning, in which some game levels involve multiple robots to be programmed by multiple players at the same time. A survey on twenty undergraduate computer science students showed that our game requires the application of the above five core elements of CT to complete, and is likely to be an attractive learning tool for learners including primary students.;2019
Computational Thinking (CT) is being infused into curricula in a variety of core K-12 STEM courses. As these topics are being introduced to students without prior programming experience and are potentially taught by instructors unfamiliar with programming and CT, appropriate lesson design might help support both students and teachers. Use-Modify-Create (UMC), a CT lesson progression, has students ease into CT topics by first Using a given artifact, Modifying an existing one, and then eventually Creating new ones. While studies have presented lessons adopting and adapting this progression and advocating for its use, few have focused on evaluating UMC's pedagogical effectiveness and claims. We present a comparison study between two CT lesson progressions for middle school science classes. Students participated in a 4-day activity focused on developing an agent-based simulation in a block-based programming environment. While some classrooms had students develop code on days 2-4, others used a scaffolded lesson plan modeled after the UMC framework. Through analyzing student's exit tickets, classroom observations, and teacher interviews, we illustrate differences in perception of assignment difficulty from both the students and teachers, as well as student perception of artifact ownership between conditions.;2019
Computational thinking (CT) is defined as the thought process of formulating problems and expressing their solutions. In recent times, children increasingly program and CT is a fundamental skill to master. Research shows children often lack such skill. In this work, we contribute an analysis of the ROOT robot system and its associated curriculum to aid in the development of CT skills in children aged 4-10 years old (in China). In particular, we measure the concepts of abstraction, analysis, generalization, algorithmic thinking, logical thinking, sequential problem solving, self-confidence, and self-checking capability throughout a 10-week course. The results show 71% students developed Excellent CT performance and 29% achieved Good performance. The key lesson is that children's CT skills develop positively when programming with the ROOT learning platform.;2019
Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to develop pedagogies for introducing students to CT. This research study examines the possible synergistic effect of implementing CT into a STEM subject, e.g. biotechnology. The study uses three interventions in which students work with predesigned computer models. Quantitative and qualitative methods are being used to gather data for analyzing students' gain in both content knowledge and CT.;2019
Computational thinking (CT) is emerging as an important theme in computer science and high school education. However, research is needed to inform high-school teachers how to foster students' development of CT in computer science and other subjects. Evidence suggests that agent-based modeling is a valuable way for students to learn CT in different subjects. This paper reports a teaching experiment where researchers, developers, and high school teachers collaborated to develop six NetLogo models. The models were used in nine Danish High Schools in the following four subjects: Biotechnology, chemistry, biology, and social science. Teachers and students had no or very limited experience with programming. Students build CT and content knowledge by using, modifying, and creating code in the models. This paper provides details for others to adopt the models and the underlying CMC framework, which integrates: Coding, Modeling, and Content. The paper evaluates the results from an open-ended questionnaire with all participating students (n=210) and semi-structured interviews with all teachers (n=15). Thematic analysis was applied to categorize the qualitative data. Results showed that students were able to use, modify, and create code in NetLogo that enabled them to develop CT and content knowledge. The CMC framework represents a fruitful way for teachers to design and teach and for students to tinker with learning CT.;2019
Computational thinking (CT) is increasingly becoming a part of the K-12 educational landscape. While high schools with computer science teachers or technology coaches on staff are well positioned to help teachers integrate computational thinking into instruction, early childhood through middle schools (grades p-8) are often less well equipped. Further, the concept of CT is often poorly defined, especially as it relates to younger learners. Despite these challenges, teachers are being asked to integrate CT into other content lessons. To understand if and how this is happening, we conducted a statewide survey of primary (early childhood through middle school) Maryland teachers. The survey asked the teachers about their conceptualization of CT, CT resources they rely on, and their comfort levels to provide effective CT instruction for their students. The results of our survey demonstrate that teachers hold diverse views of the concept of CT and use a varied set of instructional resources in their classrooms. The contribution of this work is in helping advance our understanding of the current state of CT in primary classrooms.;2019
Computational thinking (CT) is key to digital literacy and helps develop problem-solving skills, which are fundamental in modern school. As game design shows potential for teaching CT, metrics like Dr. Scratch emerge that help scholars systematically assess the CT of student-designed games, particularly with Scratch. Compared to other CT metrics, Dr. Scratch scores the CT of Scratch projects automatically and can be used to describe CT development. However, previous research using Dr. Scratch summatively assessed CT, but did not look at CT development. We use Dr. Scratch to assess the CT development of Scratch games designed by 8th-grade students in STEM curricula. We show how CT proficiency in student-designed games develops differently in each CT dimension, where parallelism, synchronization, and logic develop proficiently, while developing abstraction seems hard. We discuss insights into game-based CT development for STEM, and suggest improvements for metric-based CT assessment.;2019
Computational thinking (CT) is regarded as an essential twenty-first century competency and it is already embedded in K-12 curricula across the globe. However, research on assessing CT has lagged, with few assessments being implemented and validated. Moreover, there is a lack of systematic grouping of CT assessments. This scoping review examines 39 empirical studies published within the last five years, coded by the specific competencies outlined in existing CT frameworks, to identify and classify the key features of existing CT assessments. Results show that most studies target K-12 settings, focus on interventions that promote CT concepts and practices, adopt a quasi-experimental design, use selected-response items as the dominant testing form, and mainly assess algorithmic thinking, abstraction, problem decomposition, logical thinking, and data. Finally, few CT assessments have been validated in educational settings. Implications include identifying gaps in the CT assessment literature, deepening our understanding of the nature of CT, focusing on the validation of CT assessments, and guiding researchers and practitioners in choosing developmentally appropriate CT assessments. Cognitive and educational implications for future research inquiry include the development of new assessment tools that comprehensively assess CT and its relation to learning.;2019
Computational thinking (CT) skills are argued to be vital to preparing future generations of learners to be productive citizens in our increasingly technologically sophisticated societies. However, teacher education lags behind policy in many countries, and there is a palpable need for enhanced support for teacher education in CT. This paper addresses this gap, establishing an intellectual framework with which to explore the manner in which CT can be inculcated in compulsory school students. Drawing on a deeper awareness of the broader societal and cultural context of the activities we introduce a new approach to designing teacher education. The novelty of our approach is that training computation thinking is framed as an integrative element rather than as a separate study subject. This approach provides better articulation between Engineering and Science oriented subjects and Arts, providing supporting methods to develop the professional skills of student-teachers.;2019
Computational thinking (CT) skills are nowadays strongly advocated for educational institutions at all levels. CT refers broadly to skills of thinking about the world from a computational perspective, however, not necessarily referring to programming skills in particular. There is still a lack of consensus about what CT means, and how CT should be taught. This open peer commentary briefly discusses some ongoing trends of CT in response to the target article, which reports development, field testing and piloting of an extensive set of new learning materials for teaching CT. Recent calls for interdisciplinary technology education, creativity and open-ended problem solving in CT are highlighted.;2019
Computational thinking (CT), the ability to devise computational solutions for real-life problems, has received growing attention from both educators and researchers. To better improve university students' CT competence, collaborative programming is regarded as an effective learning approach. However, how novice programmers develop CT competence through collaborative problem solving remains unclear. This study adopted an innovative approach, quantitative ethnography, to analyze the collaborative programming activities of a high-performing and a low-performing team. Both the discourse analysis and epistemic network models revealed that across concepts, practices, and identity, the high-performing team exhibited CT that was systematic, whereas the CT of the low-performing team was characterized by tinkering or guess-and-check approaches. However, the low-performing group's CT development trajectory ultimately converged towards the high-performing group's. This study thus improves understanding of how novices learn CT, and it illustrates a useful method for modeling CT based in authentic problem-solving contexts.;2019
"Computational thinking ability is necessary for students preparing to enter the 21st century workforce (Wing, 2006). However, general public stakeholders such as parents, K-12 community members, and policy makers do not understand what computational thinking constitutes, nor what its influence is on students' career readiness, which is detrimental to establishing a general consensus on the action necessary to incorporate a K-12 computational thinking pedagogy. Thus, such key stakeholders as university faculty or researchers in STEM, who might otherwise contribute to the development of a computational thinking pedagogy, are not aware fully of how such pedagogy can be beneficial for their own work. Accordingly, this chapter addressed the question, What are the mutual benefits of establishing research partnerships among K-12 schools, universities, and communities to introduce a computational thinking pedagogy in K-12 education? This question was guided by an Interest and Action framework (Thompson, Martinez, Clinton, & Diaz, 2017), which posits that research partnerships can be developed based on each stakeholder's interest, serve as a tool to take action to apply research to practice in education, and each stakeholder's interest and action arise from the potential benefits through building partnerships. A snapshot of each stakeholder's potential benefits is: (1) K-12 schools can cultivate the technology-rich learning environment necessary for all 21st learners; (2) universities can advance knowledge through research activities and have an opportunity to recruit prospective college students, and (3) such community members as industry leaders can develop new services or products related to a technology-embedded curriculum.";2019
Computational thinking and coding are key competencies in the 21st century. People with Down syndrome need to be part of this new literacy. For this reason, in this work, we present an exploratory study carried out with students with Down syndrome with cognitive ages of 3-6 years old using a tangible robot We applied the observational method during the sessions to analyze the participants' emotional states, engagement, and comprehension of the programming sequences. Results show that people with cognitive disabilities can acquire basic programming and computational skills using tangible robots such as KIBO.;2019
Computational thinking and coding-based problem solving are increasingly seen as crucial cross-disciplinary skills and an important part of a well-rounded education. Coding games and problem solving exercises have been growing in popularity. Many large-scale initiatives have been launched in order to bring these initiatives into classrooms, from preschool to secondary education. CodyColor is a simplified coding game, which takes basic programming instructions representing movements (turn left and turn right) and represents them with color blocks. In contrast to most other coding games, color-coded programming relies on no symbolic interpretation on part of the player in order to be approachable by very young players as well. We present a massively multiplayer online version of CodyColor, discuss design and implementation specifics, and enumerate some of the possible game modes.;2019
Computational thinking and computer science are instrumental in learning how to creatively solve problems and develop thought out solutions. Over the years, workshops have been held to provide high school teachers the ability to teach high school students computer science, however not much has been done for middle school teachers. Funded by Google, the three day CS Educator Professional Development Workshop for Middle School Teachers at Kean University brought together teachers to learn about key computer science concepts and work with tools that were previously not known to them, such as Scratch, the Makey Makey tool kit, and the Cue robot. The results of this research find that middle school teachers need access to curriculum materials and digital tools in order to successfully teach computer science to their students. Furthermore, more work should be done to get middle school teachers access to materials and lesson plans aimed at teaching middle school students.;2019
Computational Thinking Bins are stand alone, individual boxes, each containing an activity for groups of students that teaches a computing concept. We have a devised a system that has allowed us to create an initial set, test the set, continually improve and add to our set. We currently use these bins in outreach events for middle and high school students. As we have shared this resource with K-12 teachers, many have expressed an interest in acquiring their own set. In this paper we will share our experience throughout the process, introduce the bins, and explain how you can create your own set.;2019
Computational thinking has become a required capability in the student learning process, and digital games as a teaching approach have presented promising educational results in the development of this competence. However, properly evaluating the effectiveness and, consequently, student progress in a course using games is still a challenge. One of the most widely implemented ways of evaluation is with an automated analysis of the code developed in the classes during the construction of digital games. Nevertheless, this topic has not yet been explored in aspects such as incremental learning, the model and teaching environment and the influences of acquiring skills and competencies of computational thinking. Motivated by this knowledge gap, this paper introduces a framework proposal to analyze the evolution of computational thinking skills in digital games classes. The framework is based on a data mining technique that aims to facilitate the discovery process of the patterns and behaviors that lead to the acquisition of computational thinking skills, by analyzing clusters with an unsupervised neural network of self-organizing maps (SOM) for this purpose. The framework is composed of a collection of processes and practices structured in data collection, data preprocessing, data analysis, and data visualization. A case study, using Scratch, was executed to validate this approach. The results point to the viability of the framework, highlighting the use of the visual exploratory data analysis, through the SOM maps, as an efficient tool to observe the acquisition of computational thinking skills by the student in an incremental course.;2019
Computational Thinking has become an important cognitive skill to develop in all areas of education. Despite its increasing popularity, the construct itself is only partially understood. There are few measures currently in place that advance our understanding of computational thinking and its sub constructs. In this article, we analyze existing measures of computational thinking (CT), looking specifically at their measures of decomposition. Decomposition is defined as the process of breaking down a problem into its sub-components. Even though most definitions of computational thinking include decomposition, few break down the decompositional process beyond a basic definition. As one of the first steps in the computational thinking process, it is important to better understand the various manners in which decomposition occurs, which methods are most effective, and under what conditions. To better understand the decompositional process, we analyze evidence of decompositional process in a variety of disciplines. We then present a framework for decomposition in computational thinking. We demonstrate how this framework may help educators to better prepare students to break down complex problems, as well as provide guidance for how decompositional ability might be measured.;2019
Computational thinking has become the calling card for reintroducing coding into schools. While much attention has focused on how students engage in designing systems, applications, and other computational artifacts as a measure of success for computational thinking, far fewer efforts have focused on what goes into remediating problems in designing systems and interactions because learners invariably make mistakes that need fixing or debugging. In this panel, we examine the often overlooked practice of debugging that presents significant learning challenges (and opportunities) to students in completing assignments and instructional challenges to teachers in helping students to succeed in their classrooms. The panel participants will review what we know and don't know about debugging, discuss ways to conceptualize and study debugging, and present instructional approaches for helping teachers and students to engage productively in debugging situations.;2019
"Computational thinking has been introduced in many countries around the world and teachers are working intensely to incorporate programming activities in the classroom. However, teachers are faced with several challenges due to the fact that there is still little research conducted focusing on programming education for younger children, that programming didactics is a rather new phenomenon for the K-9 educational system, and that K-9 teachers have little training with regards to programming. In Sweden for instance, programming has been introduced in several subjects and not as a subject in its own, which create a pressure on teachers to utilize programming as an instrument to teach and enhance learning of different subjects such as mathematics. In this paper, we report on a larger lesson study conducted in a primary school (grade 6) in Sweden with a total of 155 participating pupils. The aim of the developed lesson was to study if visual programming languages, in this case Scratch, can be used to teach computational thinking, mathematics and social science in an interdisciplinary way. Thus, the paper more specifically presents findings related to: 1) reflections of the use of lesson study methodology to develop programming education; 2) how programming can be utilized as an instrument to teach mathematics as well as social sciences in an interdisciplinary way; and 3) the didactical strategies employed by the teachers.";2019
Computational thinking is a core skill in computer science that has become a focus of instruction in primary and secondary education worldwide. Since 2010, researchers have leveraged Evidence-Centered Design (ECD) methods to develop measures of students' Computational Thinking (CT) practices. This article describes how ECD was used to develop CT assessments for primary students in Hong Kong and secondary students in the United States. We demonstrate how leveraging ECD yields a principled design for developing assessments of hard-to-assess constructs and, as part of the process, creates reusable artifacts-design patterns and task templatest-that inform the design of other, related assessments. Leveraging ECD, as described in this article, represents a principled approach to measuring students' computational thinking practices, and situates the approach in emerging computational thinking curricula and programs to emphasize the links between curricula and assessment design.;2019
Computational thinking is a fundamental skill since it helps to improve analytical ability. Computational thinking involves solving problems, designing systems, and understanding human behavior, by drawing on the fundamentals of computer science. Literature has shown different ways to bring to classroom computational thinking. Most of the experiences are related to programming classes with different kind of software according to the age. This paper present and exploratory study that describes our experience related to the first programming course at the University level for teaching computational thinking for solving problems. The use of Arduino to teach computational thinking has been incorporated into the Electronic Engineering degree at the Universidad Nacional de San Agustin de Arequipa since 2017. Students program components oriented to solve problems related to their profession. The first results have shown the effectiveness in the use of Arduino to develop computational thinking. This first experience gave us the foundation to expand our research to analyze quantitative data regarding to student outcomes about solving problems. We believe that our experience can be replicated not only in other Electronic Engineering careers, but in any engineering that have programming courses. We also believe that our experience could be replicated at a high school level.;2019
Computational thinking is a necessary skill for human life. However, promoting this competency in primary school students sometimes is hard and difficult for instructors. This article proposes a learning approach based on the use of a platform as part of a strategy of computational thinking to enhance learning of geometry. A case study was performed with primary school children from fourth grade at the Comfacor School (Monteria-Colombia). The aim of the study was to analyze the effects of the approach in the children's motivation and performance.;2019
Computational thinking is a skill that is considered essential for the future generations. Because of this it should be incorporated into the curricula as soon as possible. An interesting option to work on computational thinking with children is by means of robots. Here, we present Robotito, a robot that can be programmed by arranging its environment, intended to help the development of computational thinking in preschool children. We describe its hardware and software environment, and hierarchical state machines used to implement two modes of interaction with environment-first based on color detection and the second sensible to the surrounding objects. We also present activities that we developed to work on abstraction, generalization, decomposition, algorithmic thinking, and debugging-skills related to computational thinking.;2019
Computational thinking is a skill that is considered essential for the future generations. Because of this it should be incorporated into the curricula as soon as possible. Many robots can be programmed using graphical languages or physical blocks instead of writing code. This makes programming more accessible for the youngest programmers. Looking to extend the programming activities to preschool students, we present a novel approach that allows to program a mobile robot, Robotito, by changing its environment. We describe the architecture of Robotito, software used to program its interaction with the environment, and developed behaviours. Moreover, Robotito exports his sensors and actuators using ROS standard mechanisms and is modelled in Gazebo allowing it to be used in research and undergraduate school courses providing researchers an autonomous and safety mobile platform, which can be integrated with any system using ROS.;2019
Computational thinking is an essential skill that allows humans to solve a complex problem that later on can be understood by computers and humans. Abstraction and automation are the core of computational thinking. Therefore, CT is the key skill in Industry 4.0. However, in Malaysia's manufacturing, only 50 percent of SMEs deploy automation. Automation can make the company more efficient, more accurate and decrease human error. CT was built based on 4 basic pillars which are abstraction, decomposition, algorithm and pattern recognition. These pillars will encourage automation, efficiency, and innovation. Moreover, one of the benefits of CT for non-programmer is the formulated problem can be passed on to information-processing agents such as third-party companies or freelancers who can create the solution. In this paper, we review the benefits of computational thinking in entrepreneurship in the context of Industry 4.0.;2019
Computational thinking is considered a fundamental skill of children in the 21st century. In 2017, the new national curriculum standards of China included computational thinking as a core literacy of students. In this poster session, the authors will introduce their research on developing Chinese elementary school students' computational thinking skill. The authors have developed a new information technology course with the focus on computational thinking. The research uses the convergent cognition theory as the theoretical framework. The convergent cognition theory posits that learning computer programming affects students' mathematical thinking and vice versa. The programming environment is Scratch. A group of third grade students and a group of fourth grade students are the participants. Their computational thinking skill and math ability will be measured to see whether this course develops students' computational thinking skill and whether convergent cognition effects exist. Examples from the instructional materials will be presented as part of the poster. The authors will also report on the preliminary results of the course's effectiveness on developing students' computational thinking.;2019
Computational Thinking is introduced as a problem-solving ability that is important for future generations to master. The mastery of computational thinking skills from an early age prepares children to anticipate competition and pursue success in the future. Robotics devices are widely advocated as interactive learning media to facilitate Computational Thinking development. Educational robotics have grown from ideas that represent critical stages of Computational Thinking. The application of robotics in teaching computational thinking skills is increasingly used and is evident in the literature. The paper reviews the development of an innovative robotics device in facilitating understanding of computational thinking in young children in terms of several aspects of computational thinking indicators. A review was also conducted to see the advantages and disadvantages of commercially available robotics devices. This paper was prepared by applying critical analysis methods to the literature published from 1952 to 2017 in international journals and proceedings. As a recommendation for future research, this paper proposes for an educational robotic development that facilitates the of computational thinking skills, especially for early childhood education.;2019
Computational Thinking is one of the necessary skills for children who live in modern times. Therefore, in this research, we aim to design lesson that can cultivate Computational Thinking. In this research, design a lesson that cultivates Computational Thinking by moving a robot to the specified finger state using a finger robot. At that time the children can know that by using the notion of binary you can count many numbers by bending and extending your fingers. By using a finger robot, it is thought that children will motivate themselves to teach and to understand easily.;2019
Computational thinking is the important content and research direction of university curriculum construction and teaching reform at home and abroad. Taking the C language course for non-computer majors as an example, this paper analyzes the importance of Computational Thinking in the cultivation of innovative talents, discusses how to cultivate Computational Thinking Ability in the teaching process, and puts forward the teaching reform of C language course based on the cultivation of Computational Thinking ability.;2019
"Computational thinking, or the problem-solving process driven by Computer Science concepts, has been acclaimed as a basic skill of the 21st century. In this context, several researches have been developed to insert computational thinking in schools. The objective of this work is to investigate the use of tools to support the teaching-learning of computational thinking in the national scenario. For this, a systematic mapping of the literature was carried out, using articles published in events and periodical of national relevance. For the analysis, 21 papers published between 2014 and 2017 were selected. The results of this mapping are: (a) the identification of the tools used; (b) what resources are required for the development of such tools, and (c) what benefits students have been reported in using the tools.";2019
Computer Organization and Design (COD) is a fundamentally required early-stage undergraduate course in most computer science and engineering curricula. During the two sessions (lecture and project part) of one COD course, educational platforms play an important role in cultivating students' computational thinking, especially the ability of viewing the hardware and software in a computer system as a whole (computer system thinking ability for short in this paper). In order to improve teaching quality, in this paper, we discuss the deployment of an inexpensive in-house Field Programmable Gate Array (FPGA) cloud platform, which can provide students with hardware-software co-design methodology and practice. The platform includes 32 FPGA nodes and the scale can be dynamically changed. Each cloud node is heterogeneously composed of an ARM processor and a tightly-coupled reconfigurable fabric to provide students with hands-on hardware and software programming experiences. We illustrate our efforts to make the FPGA cloud as an easy-to-use resource pool to elastically support a class with 92 undergrads via Internet access and to monitor students' experimental behaviors. We also present key insights in our teaching activities that indicate such appliance is feasible to provide practice of both basic principles and emerging co-design techniques for students. We believe that our cost-effective FPGA cloud is of significant interests to educators looking forward to improving computer system-related courses.;2019
"Computer programming has become an increasingly cross-cutting theme and is no longer considered just a specialized subject. In some countries, the inclusion of this subject in the curricula of the basic cycles of their educational systems has been provided for, because it is recognized that programming promotes computational thinking which allows cognitive development of students. In Chile, the Universidad de La Frontera established that an initial programming course is given to all the Engineering degrees. Unfortunately, studies have shown that students are not achieving the competencies defined by the computational thinking approach. This research paper presents a flexible and systematic teaching framework for developing cognitive skills in programming courses. This framework considers the use of a systematic methodology of teaching programming, which focuses on the process of building solutions over the product; using electronic programmable devices; and sets of pre-defined exercises appropriate to various domains of the engineering area.";2019
Computer programming has been gradually emphasized in recent computer literacy education and regarded as a requirement for all middle school students in some countries. To understand young students' perceptions about their own learning in computer programming, this study aimed to develop an instrument, Computer Programming Self-Efficacy Scale (CPSES), for all students above middle school levels. Based on Berland and Lee's computational thinking framework, this study developed the CPSES items at a literacy level and finally the instrument included the five subscales: Logical Thinking, Algorithm, Debug, Control, and Cooperation. An exploratory factor analysis and reliability tests were conducted in this study. The reliability alpha was .96 for the overall scale, and ranged from .84 to .96 for the subscales. This study also confirmed the positive correlation between computer programming experience and computer programming self-efficacy. In addition, for low- and middle-experienced learners, significant gender differences were found in two subscales: Algorithm and Debug. The CPSES can be applied as an evaluation tool in computer education, robotics education, as well as integrated STEM or STEAM education in which computer programming was regarded as a part of computer literacy.;2019
Computer programming is an essential skill in the 21st century and new policies and frameworks aim at preparing students for computer science-related professions. Today, the development of new interfaces and block-programming languages facilitates the teaching of coding and computational thinking starting in kindergarten. However, as new programming languages that are developmentally appropriate emerge, there is a need to explicitly conceptualize pedagogical approaches for teaching computer science in the early years that embrace the maturational stages of children by inviting play and discovery, socialization, and creativity. Thus, it is not enough to copy models developed for older children, which mostly grew out of traditional Science, Technology, Engineering and Math (STEM) disciplines and instructional practices. This paper describes a pedagogical approach for early childhood computer science called Coding as Another Language (CAL), as well as six coding stages, or learning trajectories, that young children go through when exposed to CAL curriculum. CAL is grounded on the principle that learning to program involves learning how to use a new language (a symbolic system of representation) for communicative and expressive functions. This paper proposes that, due to the critical foundational role of language and literacy in the early years, the teaching of computer science can be augmented by models of literacy instruction. CAL supports young children in transitioning through different six coding stages. Case studies of young children using either the KIBO robot or the ScratchJr app will be used to characterize each coding stage and to illustrate the instructional practices of CAL curriculum.;2019
Computer science (CS) courses are taught with increasing emphasis on group work and with non-programming exercises facilitating peer-based learning, computational thinking, and problem solving. However, relatively little work has been done to investigate the interaction of group work and non-programming exercises because collaborative, non-programming work is usually open-ended and requires analysis of unstructured, natural language responses. In this paper, we consider collaborative, non-programming work consisting of online wiki text from 236 groups in nine different CS1 and higher-level courses at a large Midwestern university. Our investigation uses analysis tools with natural language processing (NLP) and statistical analysis components. First, NLP uses IBM Watson Personality Insights to automatically convert students' collaborative wiki text into a Big Five model. This model is useful as a quality metric on group work since Big Five factors such as Openness and Conscientiousness are strongly related to both academic performance and learning. Then, statistical analysis generates regression models on group size and each Big Five trait that make up the factors. Our results show that increasing group size has a significant impact on collaborative, non-programming work in CS1 courses, but not for such work in higher-level courses. Furthermore, increasing group size can have either a positive or negative impact on the Big Five traits. These findings imply the feasibility of using such tools to automatically assess the quality of non-programming group exercises and offer evidence for effective group sizes.;2019
Computer Science education has a long tradition at Eotvos Lorand University, Budapest. A lot of students apply for BSc studies that consists of 6 semesters, and it provides a general overview of the world of Informatics: the appropriate mathematical and theoretical background and practice in programming and software engineering. Our experiences show three basic problems of an computer science education at BSc level in English: an inadequate level of English language skills, the lack of the basics in mathematics, and inexperience in algorithmic thinking and problem solving. When applying to the university, students are tested for English language and mathematics skills, and based on the results they might be assigned to study in a preliminary year, where they have courses that improve their skills in English and mathematics. However, there was no course that aimed at improving algorithmic thinking and problem solving skills, and students' lack of these skills often resulted in problems and learning difficulties in the introductory programming course. This experience has inspired us to develop and start a new course (Introduction to Computational Thinking) that focuses on improving computational thinking skills, with emphasis on algorithmic thinking and problem solving skill development. The aim of our paper is to describe the structure of the course, to introduce what was done in the first semester, and present our first experiences with this course. We would like to follow our students as they progress to their first year in their university studies, look at their results in programming classes, and improve our course based on the results.;2019
Computer science education is widely viewed as a path to empowerment for young people, potentially leading to higher education, careers, and development of computational thinking skills. However, few resources exist for people with cognitive disabilities to learn computer science. In this paper, we document our observations of a successful program in which young adults with cognitive disabilities are trained in computing concepts. Through field observations and interviews, we identify instructional strategies used by this group, accessibility challenges encountered by this group, and how instructors and students leverage peer learning to support technical education. Our findings lead to guidelines for developing tools and curricula to support young adults with cognitive disabilities in learning computer science.;2019
"Computer science is a domain with increasingly significant impact on our everyday life, yet it has had no established position within the general education in most countries. Computational thinking (CT) is considered an increasingly important skill in many frameworks of 21st century competence created by government as well as private sector players nationally and internationally. This exploratory study sheds light on children's conceptual change in computational thinking with an intervention-based research design utilizing interview and think-aloud methodology. The results indicate a large ontological reorganization in the framework theory of different phenomena related to computer science; there seems to be a fundamental shift towards a process point of view related to the accommodation to CT.";2019
"Computer scientists have been working towards a common definition of abstraction; however, the instruction and assessment of abstraction remain categorically under-researched. Abstraction is often cited as a component of computational thinking and can be likened to a higher order thinking skill. Most K-12 educators have studied critical thinking (e.g., Bloom's taxonomy, Marzano & Kendall's new taxonomy) more than computational thinking. Overlapping characteristics of abstraction and critical thinking can provide educators with instructional guidance. The qualitative examination of how teachers determine curriculum, deliver instruction, and design assessments in K-12 computer science education contributes insights into current instructional practices and variables for future quantitative study. The instructional strategies, objectives, and assessments of 12 K-12 computer science teachers from three states in the United States were examined in this descriptive qualitative examination of instruction using thematic coding analysis. The majority of teachers interviewed had little to no professional development regarding teaching abstraction. All teachers in the study were unsure what student abstraction abilities should be according to grade level. Teachers' understanding of abstraction ranged from very little knowledge to very knowledgeable. The majority of teachers interviewed did not assess abstraction intentionally. Teachers described successfully teaching abstraction through multiple instructional practices and spiraling curriculum. This examination of abstraction in K-12 computer science education offers practical descriptive insights and illuminates additional variables for researching the instruction of abstraction qualitatively and quantitatively. Anecdotal instructional successes are included in the results.";2019
Computing education and outreach in the K-12 school sector have shown significant growth over recent decades, resulting in a large body of literature focused on the teaching and learning of computing. Despite this extensive literature, we are not aware of global overviews on teaching and learning programming as opposed to computing or computational thinking in K-12. We conducted a systematic review of the literature on introductory programming from 2003 to 2017. In this paper we review the papers that were set in the K-12 context with the aim of exploring developments that have been made in teaching introductory K-12 programming during this period. These include new programming languages, tools, teaching methods, and outreach programs. The impetus for these innovations was often a desire to provide interesting and engaging learning experiences and to ensure an appropriate level of instruction for a particular age group. Many initiatives were driven by changes to national curricula to mandate the teaching of programming. We find that there is a need for long-term studies to identify the most effective pedagogical approaches. We also identify a major need faced by many countries for training and resources to support teachers through the curriculum changes.;2019
Computing education has been expanding into K-12 schools in many countries. The new national curriculum standards in China are going to include computational thinking as a core literacy for every student and make computer programming as a required module in the information technology course. Hence, it is imperative to understand the difficulties Chinese students may face when learning to program. This study investigated Chinese middle students' difficulties in learning to program in Python using the student data in an automated assessment system. Our results showed that the students struggled with fundamental Python syntax and programming rules. We also found that Chinese students faced a special difficulty, which was using correct punctuation symbols in code. We noted that many syntax errors students made were due to the use of Chinese punctuation symbols, which look almost identical to the English equivalents but are invalid to the Python interpreter. Our results suggest that when teaching a programming course to Chinese middle school students, teachers should first help students develop certain typing skills (e.g., switching input methods, distinguishing Chinese and English punctuation symbols, etc.). Such preparation may reduce students' mistakes in code. Finally, future research directions are discussed, including examining the effects of the typing skill training, designing feedback components for the automated assessment system, and so forth.;2019
Contemporary education promotes the usage of digital games to support learning programming. Such games are not designed for entertainment, but specifically for educational purposes. Students start from a very early age to interact with computers through games and consequently, react positively on the educational digital games. When used for education, digital games have the potential to motivate students towards active participation and interaction. In addition, educational digital games make complex and abstract topics like programming more friendly. Games that support learning programming enable students to learn programming concepts using visual interfaces and interesting environments. In these games, younger students are usually expected to move the main character around the given path and perform a series of tasks (e.g. collect objects, skip the obstacles). Instead in a textual editor, students are coding through drag and drop interactions, and create programs that include basic programming concepts like sequence, variables, loops, and conditions. Furthermore, digital games are a good for visualizing the execution of algorithms that are often hard to understand. To make the game more interesting, the main character is often presented as an animated robot, animal or a cartoon character familiar to the students. The paper explores the possibilities of using existing digital games in learning basic programming skills, highlighting which programming concepts the game supports and for which it is recommended and appropriate to be used. This is the first step in the design of an educational game that is intended to develop within the Coding4Girls and Digital games projects. Future activities and plans for both projects are presented in the paper.;2019
Contemporary research has explored educational robotics, but it has not examined the development of computational thinking in the context of programming embodied interactions. Apart from the goal of the robot and how the robot will interact with its environment, another important aspect that should be taken into consideration is whether and how the user will physically interact with the robot. We recruited 36 middle school students to participate in a six-session robotics curriculum in an attempt to expand their learning in computational thinking. Participants were asked to develop interfaces for the remote control of a robot using diverse interaction styles from low-level to high-level embodiment, such as touch, speech, and hand and full-body gestures. We measured students' perception of computing, examined their computational practices, and assessed the development of their computational thinking skills by analyzing the sophistication of the projects they created during a problem-solving task. We found that students who programmed combinations of low embodiment interfaces or interfaces with no embodiment produced more sophisticated projects and adopted more sophisticated computational practices compared to those who programmed full-body interfaces. These findings suggest that there might be a tradeoff between the appeal and the cognitive benefit of rich embodied interaction with a remotely controlled robot. In further work, educational robotics research and competitions might be complemented with a hybrid approach that blends the traditional autonomous robot movement with student enactment.;2019
Context . Computational thinking denotes the thinking processes needed to solve problems in the way computer scientists would. It is seen as an ability that is important for everybody in a society that is rapidly changing due to applications of computational technologies. More and more countries are integrating computational thinking into their school curricula. Problem . There is a need for more effective learning environments and learning methods to teach computational thinking principles to children of all ages. The constructionist approach seems to be promising since it focuses on developing thinking skills. Method . We extract and discuss insights from the target articles. Results . There are several learning initiatives and curricula that successfully apply constructionist learning to acquiring computational thinking skills.;2019
Context. The increasing and evolving presence of technology in the lives of children is reflected in the recognition in many educational frameworks that students should possess and be able to demonstrate computational thinking skills as part of their problem-solving practice. Problem. We discuss the process of creating tasks for the so-called Bebras challenge, a contest on informatics (computing) and computational thinking addressing school students of all ages. These tasks have a short problem statement and should be solvable in a few minutes. The challenge explored is how to formulate and structure such tasks so that there is still enough space for creativity in the solution process and how to organize the learning settings so that constructionist learning is supported. Method. We give an experience report about the creation and use of short tasks for learning computational thinking. We argue that the constructionist perspective involving the use of the Bebras-like tasks on computational thinking offers an appropriate frame for enriching learning activities, fostering collaborative and individual creativity. A process-oriented approach was selected for the research done in a study where we observed children's activities in solving the short tasks on computational thinking. > Results . Our analysis of the creativity, as exemplified in several observations of pupils while solving shorttasks that involve computing concepts (the Bebras cards), shows that this kind of microlearning serves well to motivate pupils to be more interested in particular computing topics. The concept of the short tasks meets the usual way of teaching in primary education. Pupils and teachers develop a positive attitude to computing related topics. The analysis shows that the short tasks encourage pupils' creativity in both solving and modifying them. Constructivist content. Our more general aim is to support computing education, especially constructivist learning environments (both technology-based environments and those without technologies) in primary education.;2019
Context. The meaning and implications of computational thinking (CT) are only now starting to be clarified, and the applications of the Computer Science (CS) Unplugged approach are becoming clearer as research is appearing. Now is a good time to consider how these relate, and what the opportunities and issues are for teachers using this approach. Problem. The goal here is to connect computational thinking explicitly to the CS Unplugged pedagogical approach, and to identify the context where Unplugged can be used effectively. Method. We take a theoretical approach, selecting a representative sample of CS Unplugged activities and mappingthem to CT concepts. Results - The CS Unplugged activities map well onto commonly accepted CT concepts, although caution must be taken not to regard CS Unplugged as being a complete approach to CT education. Canstructivist content. A constructivist approach to teaching computer science concepts can be particularly valuable at present because the public (and many teachers who are likely to have to become engaged with the subject) do not see CS as something they are likely to understand. Providing a clear way for anyone to construct this knowledge for themselves gives an opportunity to empower them when it might otherwise have been regarded as a domain that is open to only a select few.;2019
Context. There seem to be relatively few sustained implementations of microworlds in mathematics instruction. Problem. We explore the roles of and demands on university instructors to create an environment that supports students' constructionist learning experiences as they design, program, and use interactive environments (i.e., microworlds) fordoing mathematics. Method. We draw on the experiences of instructors in programming-based courses implemented since 2001 at Brock University, Canada, as a case study, and use Ruthven's model on the professional adaptation of classroom practice with technology to guide our analysis of these experiences. Results . We describe how, in adapting to a design of empowering students to engage in programming for authentic mathematical explorations, instructors adopt characteristics of constructionist teaching that, nevertheless, demand expertise, a shift in traditional roles, and time from instructors. Canstructivist content. The teaching approach aligns with Papert's constructionism: a constructivist learning theory, but also a pedagogical paradigm. However, the approach presented has two salient characteristics: it is a university-level constructionist implementation, and it is a sustained long-term authentic classroom implementation. The focus is on the roles of and demands on instructors in that kind of implementation. Through the analysis using Ruthven's work, we enrich our understanding of constructionist teaching features.;2019
Contribution: This paper employs the automatic scoring of short essays as a novel way to determine pre-service teachers' knowledge of and attitudes toward computational thinking (CT) from their written reflections. Implications about designing CT courses for pre-service teachers are discussed. Background: CT is an essential 21st-century competency that supports the development of problem-solving skills. Inspired by computing science problem-solving practices, CT should transcend disciplines, but few universities or colleges include CT courses or CT content in their core courses. It is also difficult to know what pre-service teachers think about CT and their role in promoting it. Research Questions: Do pre-service teachers' coding reflections reveal any important information about their knowledge of, skills in, and attitudes toward CT? Methodology: Traditional qualitative techniques based on human raters are impractical in analyzing hundreds of essays. Topic modeling, an unsupervised machine learning modeling technique, was employed to extract topical features from participants' reflections. In one section of an undergraduate Introduction to Educational Technology course offered at a large university in Western Canada, n=139 pre-service teachers wrote a short reflection on their experience following a 20 h Accelerated Intro to Computer Science Code.org course. Topics were identified by analyzing contextual trends in participants' written reflections. Findings: Results showed that pre-service teachers' reflections included CT concepts, practices, and perspectives. Specifically, participants connected the coding activity to prior knowledge and experiences.;2019
Creating explanations is an important process for students, not only to make connections between novel information and background knowledge, but also to be able to communicate their understanding of any given topic. This article explores students' explanations in the context of computational science and engineering, an important interdisciplinary field that enables scientists and engineers to solve complex problems. Specifically, this study explores: (a) students' approaches to create written explanations of programing code and (b) the relationship between students' explanations and their ability to do computer programing. Students wrote in-code comments for 3 MATLABA (R) worked-examples, which were qualitatively analyzed using a coding scheme. Different approaches to self-explain were identified using hierarchical cluster analysis, and differences in students' ability to do computer programing were identified using analysis of variance. The resulting approaches to self-explain were: original solution, mechanistic, principle-based, limited, and goal-based. The findings suggest that experienced students wrote simple in-code comments to self-explain, but students with lower ability to do computer programing wrote more comprehensive explanations, as they may take this as a learning opportunity.;2019
Creativity, Innovation, Information search, problem-solving and data treatment are important not only in developed countries where people use many digital objects in their everyday life. Developing countries are necessary concerned by many aspects of the information society and digital era. Even if a large part of the population still does not access to the internet, because of a lack of reliable infrastructure, the information and knowledge societies are imposing their pace of innovation to the entire world. A more and more complex world is coming. Developing countries also feel the need to educate their people and give them the most of the 21st century skillset in order to face this complexity and the new challenges. For this reason, and because some of these competencies can be taught even without computers, Computational Thinking may nurture these skills even in developing countries. In this presentation, we try to show how the integration of Computational Thinking with collaborative problem-based learning can cultivate learners how to learn and work on a real (authentic) problem together by bridging computer science main concepts and these skills to some efficient collaborative learning methods. Different recent viewpoints from developing countries are presented to show how they face this challenge in their nation.;2019
Critical thinking on digital editions, and in particular scholarly editions, has been so far mainly focused on redefining the theoretical aspects developed in an analogical dimension, such as textual orientations, following a technological approach. In order to better understand the nature of digital editions it is also necessary to take into account aspects related to the theoretical dimension of computer science, since a technological approach, although initially justifiable, has several limitations due to the rapid and continuous changes in technology. For this reason, it is needful to apply other principles in the analysis and consideration of digital editions if we are to better understand their role in both Digital Humanities and in the dialogue between Humanities and the Hard Sciences, represented by the intertwining of narration and computation.;2019
Cross-curricula opportunities afforded by STEM education (Science, Technology, Engineering and Mathematics education), supports an environment where students can develop twenty-first century competencies. One approach to addressing cross-curricula opportunities in STEM education is the introduction of computer science (computer programming-coding) as a basic skill/literacy for all students. Coding (computer programming) is a language that draws on a set of syntax rules (or blocks for primary school students) that informs a computer program to execute a series of functions. While there is evidence that computational thinking (the thinking used for coding/computer programming) and conceptual development in mathematics are connected, there is limited research related to how such a confluence applies to primary school students. The aim of this article is to provide insight into how mathematical knowledge and thinking, specifically the identification of mathematical patterns and structures, can be promoted through engagement with coding activities. The data for this article is drawn from year 2 students (n=135) in two Australian primary schools. A teaching experiment approach was adopted for the study with a small intervention group (n=40) undertaking coding lessons for 6 weeks. Data collection comprised of pre-test and post-tests with a focus on patterning and coding in conjunction with video-recorded lessons. The study provides evidence that the learning that takes place through coding instruction can lead to higher levels of students' mathematical thinking in relation to identifying mathematical patterns and structures that can lead to generalisations.;2019
CS1 (computer science 1) is a course that aims to introduce college students to a first contact with the computing world, especially simple computer-coded everyday problems. The lessons focus on computational thinking and introduce the use of one (or several) programming languages for students beginning their university course. CS1 plays an important role in the academic and professional life of new computer scientists. For this reason, this course unit is very much associated with programming languages. Curricula are not much different, but programming languages have changed a lot over the years. How was this change? Are there clues to these changes? Are there logical reasons why the choice of programming language does not hold up? What programming language should the teacher choose to teach students? The discussion about the early programming language is long: there have always been various trends and their fervent supporters, as well as those who are always critical. This article makes a historical review of the programming languages used in the introduction of computing course over the last 30 years, differentiating an evolution of programming language choices in the past century and now. At the end of the article, an evolutionary trend is listed by articles published by people involved in the subject. The methodology used in this article compiles the Google Scholar articles for each of the last 30 years (1988-2018) and analyses which programming languages are used in academic studies. It is very interesting to see how the programming languages used in the introductory programming units change over the years.;2019
"Currently two approaches, personalised learning and STEM, are intensively researched worldwide; however, we still know little about how they should or could be integrated seamlessly. This paper is just about that, proposing a framework for introducing personalised learning in STEM-driven Computer Science (CS) education. We motivate the framework by presenting the methodology and theoretical background for creating personalised content. This framework outlines basic activities relevant to personalised learning in STEM and focuses on the content personalisation and learner's knowledge assessment and self-assessment. We propose a generic structure of Personalised Learning Objects (PLOs) in three categories: component-based LO, generative LO and smart LO (the latter is a combination of the first two). The generic structure integrates those entities with the assessment modules and specifies the distributed interface for connecting them with digital libraries. Firstly, we have developed the learner's assessment model that integrates attributes defined by the revised BLOOM taxonomy and computational thinking skills with the adequate tasks. Then, using this model and applying meta-programming techniques, we have implemented the assessment modules and integrated them with PLOs. We illustrate and motivate this approach by presenting two case studies taken from the real educational setting at the high school. Finally, we evaluate our approach. As STEM relates to technology and engineering disciplines and CS-based modules are within most engineering curricula, our approach contributes to engineering education too.";2019
Currently, several and quick changes are taking place in the educational world and, especially, in the labour world, mainly related to the rise of technology and its presence in any activity. On the one hand, students must face the digitalization of the different areas of knowledge, and on the other hand, teachers must be trained to guide students in their learning process. Thus, digital competence is then shown as indispensable and has entered the education system all around the world. But in recent years, another idea, computational thinking, has burst in force and is taking on the challenge of digital competence. However, today there is no single definition of this concept. Most of the time, computational thinking is combined with computer science and/or programming and robotics. Many schools of thought also extend the capabilities of computational thinking to the so-called STEM subjects. In this paper, we propose a definition of computational thinking that can be applied to any area of knowledge, from the Humanities to the Technical areas, distancing us in a certain sense from the link that some people make only with coding.;2019
Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.;2019
Dagiene et al.' s target article illustrates and discusses how solving short tasks in the style of the Bebras challenge can contribute to fostering computational thinking skills, and why such a learning process can be designed in the framework of constructionist learning. We shortly survey the contributions of the target article and propose to deepen the approach in order to fit constructionist learning in all its aspects.;2019
Despite a rapid expansion of machine learning (ML) across fields and industries, little is known about how to best prepare students for work in ML. Most ML courses today are taught at the college or professional level using a theoretical programming approach. Existing educational resources may not be sufficient or preferable for many audiences, particularly those who do not have a strong computer science background, who wish to attain basic understanding of and ability to use ML. We present learnings from a beginner level, semester-long actionable machine learning course taught at Massachusetts Institute of Technology meant to be accessible for students with minimal computer science knowledge. Based on analysis of survey responses and student projects, we find 5 core concepts (Multilayer Networks, Convolutional Neural Networks, Transfer Learning, Recurrent Neural Networks, and Embeddings & Generative Models) and 8 core skills (scoping a problem, choosing datasets, creating datasets, choosing models, modifying models, creating models, modifying learning rates, and training & testing) that helped lead to student self-efficacy as independent ML developers when mastered. We conclude by discussing implications of this research on effective course design and educational efforts for beginner level university courses in ML.;2019
Despite being part of the science and engineering practices defined by Next Generation Science Standards (NGSS) guidelines, computational thinking is rarely addressed in preservice teacher training. Motivated by this gap, we modified our teacher education program to embed computational thinking throughout the curriculum for preservice elementary and middle school teachers. We integrated computational thinking into five courses, including (1) an introductory computer science course added to the program, (2) redesigned content courses in biology, physics, and geometry with newly created computational thinking modules, and (3) a modified science teaching methods course in which preservice teachers learn to integrate computational thinking into their future classrooms. This three-tiered approach,which presents computational thinking within the context of discipline-specific content and pedagogical technique, was achieved by close collaboration among education, computer science, math, and science faculty. In pre- and post-surveys, preservice teachers reported significant gains in their perceived knowledge and ability in computational thinking. Interest and confidence in incorporating computing and computational thinking into future teaching was high at both the beginning and end of the study. These preservice teachers are now better positioned to foster computational thinking skills and practices among children in their future classrooms.;2019
Despite the growing number of digital apps designed to teach coding skills to young children, we know little about their effectiveness. To formally explore this question, we conducted a naturalistic observation of a one-week program designed to teach foundational coding skills (i.e., sequencing, conditions, loops) to young children (N = 28, M-age = 5.15 years) using two tablet applications: Daisy the Dinosaur and Kodable. Pre- and post-assessments measured familiarity with technology, appeal of coding apps, knowledge of Daisy commands, ability to play Kodable, and conceptual understanding of coding. Participants improved in their knowledge of Daisy commands (i.e., move, grow, jump) and Kodable gameplay (i.e., placing arrows in the correct sequence to move a character through a maze), but did not improve in their ability to verbally explain what coding is. Appeal of the games was significantly related to children's learning of Daisy commands, but child gender was not related to either Daisy or Kodable learning outcomes. Results suggest that young children can learn foundational coding skills via apps, especially when the apps are appealing to children.;2019
Developing problem-solving thinking became extremely important in a well-functioning school system. It must be an integral part of the educational programme as the development of competence in the training of students with the right skills is possible through the processing of a specific curriculum. The purpose of our present survey was to examine the problem-solving skills of the 1st year students of Sapientia University. In our study, we report on the achievements of humanities and science students in solving complex tasks requiring computational thinking. The result data suggest that there is a close correlation between the level of problem-solving skills and the level of reading comprehension and writing skills. For each task, the number of those who tried to solve the task was high, but much more less could reach from recognising to understand and solve the problem.;2019
Digital games are becoming more and more a part of our daily lives. After realizing this, several educators have been motivated to use games as teaching and learning tools. In this sense, it is possible to involve teachers and students in the production of their own games, thus contributing both to the development of computational thinking and to acquiring knowledge related to the different disciplines involved in this process. Despite the benefits, the production of games is a complex task that requires knowledge of a specific domain and presents a significant learning curve for students and teachers. The choice of using effective strategies such as Model-Driven Engineering (MDE) practices supported by a Controlled Natural Language (CNL) to promote the production of games in the educational context is decisive and can favor the adoption of game-based learning. This work proposes a strategy for the specification of game design for digital games by students and teachers in the classroom, that can promote the development of computational thinking, as well as reading and writing skills.;2019
Digital games are becoming more and more popular worldwide, arousing children's interest and fostering their motivation. Furthermore, tablets and smartphones are increasingly popular and widespread all around the globe, guaranteeing access to the web and to an ever-growing availability of games. This paper is based on the assumption that introducing digital game play into primary schools may support the development and consolidation of some transversal skills in a way that is perceived by students as interesting and motivating. When the games are carefully selected, the great effort spent by children in playing will provide them with the possibility to acquire and exercise, at an early age, basic skills which are important for their future. In particular, in this paper, different modalities in which digital games can be used in primary schools to foster basic transversal skills are presented. Logic and spatial reasoning skills as well as computational thinking are in particular considered. The reported experiments show that game based activities, when appropriately organized, can positively affect students' school performance as well as students' learning attitudes and behavior.;2019
Digital literacy and computer skills are considered a fundamental part of citizen education in Europe. University courses in general assume that the first year students possess adequate computational background and abilities. But unfortunately this is not always the case: freshmen experience troubles in analysing and solving problems with computation tools, in particular by means of programming activities. Therefore, it is an imperative task to find strategies that can mitigate initial difficulties and balance background deficiencies. In this work, we consider the effect of the eXtreme Apprenticeship teaching methodology and analyse the role of sex and background.;2019
Does computer programming teach students how to think? Learning to program computers has gained considerable popularity, and educational systems around the world are encouraging students in schools and even children in kindergartens to engage in programming activities. This popularity is based on the claim that learning computer programming improves cognitive skills, including creativity, reasoning. and mathematical skills. In this meta-analysis, we tested this claim performing a 3-level, random-effects meta-analysis on a sample of 105 studies and 539 effect sizes. We found evidence for a moderate, overall transfer effect (g = 0.49, 95% CI [0.37, 0.61]) and identified a strong effect for near transfer (g = 0.75, 95% CI [0.39, 1.11]) and a moderate effect for far transfer (g = 0.47, 95% CI [0.35, 0.59]). Positive transfer to situations that required creative thinking. mathematical skills, and metacognition. followed by spatial skills and reasoning existed. School achievement and literacy, however, benefited the least from learning to program. Moderator analyses revealed significantly larger transfer effects for studies with untreated control groups than those with treated (active) control groups. Moreover, published studies exhibited larger effects than gray literature. These findings shed light on the cognitive benefits associated with learning computer programming and contribute to the current debate surrounding the conceptualization of computer programming as a form of problem solving.;2019
During their education, the future industrial and interaction designers are increasingly faced with constructing fully or partially functional physical prototypes. As physical computing involves interaction with the physical world through sensors and actuators, combined with abstract data-memory, these pose additional difficulties for learning. While flowcharts have been useful for learning programming, we posit that using flowcharts alone are not expressive enough to efficiently help learn physical computing. In this paper we present Bodygramming, to help the design-students understand how a programs function, from the perspective of the program in a physical computing device. In essence, Bodygramming means acting out the behaviour of a program step-by-step, by following the instructions written on magnetic flowchart cards. The acting enables the experience of how the asynchronous activities are related to the behaviour of the code, in a relatable human pace. Bodygramming suggests an alternative way to understand basic programming concepts and abstractions.;2019
"During two generations (2016 and 2017) the computational thinking evaluation has been carried out in order to establish learning scenarios for new students, such interventions have been made in the Programming methodology course, it belonging to the career of Information Technology at the Technological University of Puebla in Mexico. The results have led a personalized education for students, recognizing previous skills as well as trying to correct those missing, so that it acquires the competences respective, credit the course and improve the retention percentage of the first quarter. In this sense, when detecting possible skill gaps, is it possible to predict what will be the impact to maintain or decrease enrollment during and the end of quarter? The present work aims to answer the question by the results interpretation obtained from the computational thinking evaluation to 242 new students, generation 2018. Initially, it was stablished which would be the student's situation during and the end of four months from September to December based on the correct assessment reagents; three categories were determined: 1. Sure desertion, 2. Safe permanence, 3. Variable permanence. Later, 50 students who enrolled the next quarter (January-April 2019) were revised if they had been predicted properly; using a survey, the familiarity of key concepts of the subject Programming methodology was obtained with the aim of determining a correspondence with the evaluation of computational thinking skills, as well as the established situation, consequently, establishing the validity of predicting the enrollment.";2019
Education is an integral part of the new technologies and that is so that an increasing number of universities worldwide are demanding electronic literacy as one of the requirements in their entrance and graduation exams, considering that it is an essential objective to prepare future professionals for the digital era in the workplace. Thus, in recent years the concept and application of computational thinking has taken great relevance, since as part of its methodology is the use of simulation software as support for learning and problem solving, such computer packages that detect, analyze, understand, correlate and experience in the world virtual solutions that may have problems to solve a real problem, as in the case of electronics in circuit design and programming, curricular contents can be complex and extensive due to the great number of developments and innovations that have emerged in recent decades.;2019
Educational Technology Leaders' support of computer science teachers in K-5 classrooms are influenced by their beliefs about school-based program implementation criteria, available district-level support, and state mandates on the integration of computer science. The researcher in this study examines the beliefs about Computer Science teacher support, and training in five different Educational Tech Leaders' districts, to determine sustainable implementation practices for K-5 schools. In order to effectively integrate computer science in K-5 instruction, administrators and program decision-makers must be aware of the beliefs Educational Technology Leaders hold related to the implementation process of programs, specifically related to the training of K-5 teachers who facilitate the computer science curricula in classrooms. Information reported in this study may inform school-level, district-level, and state-level decisions related to sustainable computer science program implementations.;2019
Employing learning processes that promote 21st Century skills is now a requirement in Finnish schools and elsewhere. Participatory design/co-design activities have shown to foster design thinking and computational thinking skills in primary school level participants, but a lightweight applicable model of such an activity is yet to be presented. We develop a lightweight hybrid co-construction method based on software development via two exploratory case studies in a Finnish primary school. For the purpose of evaluating objectively the motivating effects of our activity, we elaborate upon four concerning dimensions that arise from previous studies. In our resulting activity, an adult programmer is partnered with a group of children to, in this case, construct math games together. The children felt empowered and motivated by working with us in this way, however, further study is required on the effects this kind of an activity has in comparison to alternative teaching methods.;2019
"Especially from a legal perspective, the study analyzes the measures in the educational field adopted worldwide and in Spain due to the coronavirus; the suspension without suspension of education especially through digital teaching. However, digital education has been considered inferior, exceptional and only complementary to face-to-face teaching and a source of serious barriers and dangers for. Thus, it has been at the international level and also for the ECHR, the TC and our legislation. The special danger of inequality in digital education is also taken into account and already in the case of the pandemic, some special measures of equity and equality are described. Notwithstanding this more negative scenario, the author prefers to see the glass half full and make a virtue of need. Then, the coronavirus is seen as an opportunity to leave behind an obsolete education of the 20th century. The need for a shift towards digital skills and computational thinking is recalled. Finally, are described the contents and objectives of the right to education and especially the obligations to provide it in the face of the general challenges of digital education and the situation of the pandemic. In addition to the obligations of the State, parents' duties in education are remembered, and also in the face of digital education at home due to circumstances. It is concluded that digital education is a life buoy in the pandemic situation to ensure a minimum of the objectives that guarantee the right to education. It is concluded that the coronavirus nightmare awakens us from some lethargy in education. It forces us to assume the turn of the century and provides us with the opportunity to greatly improve education thanks to the digital transformation.";2019
FabLearn has primarily been concerned with studies of digital fabrication technologies in education, however, we witness an increased interest in integrating other related topics such as computational thinking, digital design and empowerment as an integrated whole. In this paper, we present a five years design research program for digital fabrication, computational thinking and design, to highlight why the FabLearn community should embrace this wider agenda to accomplish its ultimate goal to encourage a new generation to critically and constructively engage in the design of digital technology. The contribution of this paper is a number of open questions and considerations regarding the scope of European FabLearn research that we hope the community will consider and that might give rise to further discussions.;2019
For a long time, pedagogy has been a social practice based on direct experiences, and many traditional teaching methods have formed. These methods were not supported by a scientific theoretical system and could not meet the fast-changing social needs. Neuroeducation is an empirical science, and an interdisciplinary subject that applies the latest theoretical advances in human brain and psychology to pedagogy. This paper explores the connection between neuroeducation and the teaching practice through the study of the latest theoretical achievements in neuroscience, cognitive neurology and psychology. Guided by theory of neuroeducation, the course content, the teaching strategy and new learning methods are proposed to improve the teaching quality of computer programming courses, while improving students' computational thinking ability.;2019
For the last three years the CS for All initiative at the National Science Foundation has had a call for research-practice partnership (RPP) projects. The goal of the program is to advance both knowledge and practice in creating inclusive, responsive computer science/computational thinking programs for all K-12 youth. RPPs represent an approach to research that, by design, is both more equitable and more ethical because it leverages community stakeholder experiences and perspectives to inform research questions, methods, and meaning-making. RPPs are thus potentially powerful tools for equity-oriented initiatives such as CS for All. Beginning in December 2016, the Research + Practice Collaboratory, an NSF-funded initiative based at the University of Washington, has led ten RPP development workshops for CS for All, collectively serving over 700 members of the community. At these workshops we have collected data about how the community sees itself benefiting from the adoption of RPP approaches to the work. In this experience paper we describe what we have learned about the field's interests with respect to adopting RPP approaches to the work.;2019
For the past four years, our research group has conducted a series of NSF funded studies on Computational Thinking (CT) involving elementary school students, parents, and teachers. We developed curriculum, trained teachers, observed classrooms, created museum exhibits, followed students and families, explored theory, and utilized the diverse skills of a large multi-disciplinary research group to understand the intersection of STEM, literacy, and CT. As we close out this grant, we are looking to disseminate our findings, share lessons learned about research methods and data collection, and build collaborations for future research.;2019
Games have been designed to foster children's computational thinking (CT) skills, which is widely recognized as a key ability that should be mastered in this computing-driven era. Because learning coding skills is cognitively difficult and uninvolving for novices and it is recommended to learn CT concepts first, many educational games have been developed to teach CT in a non-coding environment. However, despite the breadth of such games and the demand for it, little is known about how to design such games or why such games are designed in a particular way. To address this gap, this paper presents a design framework that describes the building blocks for developing (non-coding) gameplay elements in games teaching CT. The framework focuses specifically on computational problem-solving because this is where games can specifically aid with. We illustrate the design framework through LittleWorld, a mobile game that teaches CT concepts through insects.;2019
"Good science teaching is one of the most valuable ways to meet the urgent need for science-educated citizens and workers. Enthusiastic, intelligent, and well-educated science teachers inspire and prepare students to investigate the great questions of science and the questions raised by the scientific discoveries which affect us and our society. Teaching science in schools is undergoing a major transformation today with the advent of technology and ever-increasing focus on providing sufficient time and opportunity for students to perform experiments and conduct activities in the classrooms in order to promote a culture of innovation and entrepreneurship. This paper focusses on three important aspects that are changing the nature of Indian Science classrooms, these are (a) Technology-Supported Classrooms (b) Mobile Learning and (c) Setting up of Tinkering Labs in schools. The effective and appropriate integration of technology in the science classroom creates a dynamic learning environment where students are active participants in the learning process and therefore, science teachers are now matching the appropriate use of technology with content to maximize the student's potential in learning. Students in schools are also being allowed to take the digital interactive science content home and are increasingly using mobile learning devices such as tablets and smartphones to learn at their own pace and time. Apart from focussing on digital-learning, schools are also setting up Tinkering Labs to foster curiosity, creativity and imagination in students; and inculcate skills such as design mindset, computational thinking, adaptive learning and physical computing, etc. These Labs provide a workspace where young students can give shape to their ideas through hands-on do-it-yourself mode; and will get a chance to work with tools and equipment to understand the concepts of STEM (Science, Technology, Engineering and Math). Tinkering Labs contain educational and learning 'do it yourself' kits and equipment on-science, electronics, robotics, open source microcontroller boards, sensors and 3D printers and computers.";2019
In a connected world, where information is the most valuable input, compulsory education in computational thinking, especially in early ages, had became an important topic for governments who aim in a economy based on technology. This brought initiatives for compulsive adoption on basic education in USA and EU, but few actions on developing countries. This article presents a systematic review of academic papers and commercial products that present the teaching of logic to young people, and that deal with the use of tangible devices, robots or specific software. From the analysis performed with the review, we define requirements for teaching. Thus, considering the factors of analysis, such as pricing and replicability, we generate a series of sub-requirements aimed at adopting a solution for public schools from developing countries. As preliminary results, an interactive robot and a set of tangible artifacts adhering to the identified requirements are presented as a proposal for the teaching of computational thinking.;2019
In an influential 2006 article, Jeannette Wing advocated for the expansion of computational thinking. As a result of this advocacy, programs to encourage computational thinking have received considerable public support, with many being adopted around the world and in a variety of educational contexts. At the same time, concern over algorithmic bias has risen to public consciousness as disturbing examples of racial, gender, and other forms of discrimination have been discovered and then discussed in the media, raising grave concerns about the fairness of algorithms used in the criminal justice system, health care, government, education, and commerce. While the cause of algorithmic bias is not always known, data sets that reflect historical biases, data points that serve as proxy for identity markers, the inappropriate use of data sets, and feedback loops often play a role. The rise of machine learning, artificial intelligence, and the internet of things is likely to expand the possibility for--as well as the impact of--algorithmic bias. Without careful safeguards, computational thinking programs can, unfortunately, become a vector for entrenching and extending algorithmic bias. A careful interrogation of the principles of computational thinking will show that computational thinking can be taught without encouraging the proliferation of algorithmic bias, and recommendations for avoiding the problem will be suggested.;2019
In computer science education at school, computational thinking has been an emerging topic over the last decade. Even though, computational thinking is interpreted and integrated in classrooms in different ways, an identification process about what computational thinking is about has been in progress among computer science school-teachers and computer science education researchers since Wing's initial paper on the characteristics of computational thinking. On the other hand, the constructionist learning theory by Papert, based on constructivism and Piaget, has a long tradition in computer science education for describing the students' learning process by hands-on activities. Our contribution, in this paper, is to present a new mapping tool which can be used to review classroom activities in terms of both computational thinking and constructionist learning. For the tool, we have reused existing definitions of computer science concepts and computational thinking concepts and combined these with our new constructionism matrix. The matrix's most notable feature is its scale of learners' autonomy. This scale represents the degree of choices learners have at each stage of development of their artefact. To develop the scale definitions, we trialed the mapping tool, coding twenty-one popular international computing activities for pupils aged 5 to 11 (K-5). From our trial, we have shown that we can use the mapping tool, with a moderate to high degree of reliability across coders, to analyse classroom activities with regard to computational thinking and constructionism, however, further validation is needed to establish its usefulness. Despite a small number of activities (n = 21) being analysed with our mapping tool, our preliminary results showed several interesting findings. Firstly, that learner autonomy was low for defining the problem and developing their own design. Secondly that the activity type (such as lesson plan rather than online activity) or artefact created (such as physical artefact rather than onscreen activity or unplugged activity), rather than the computational thinking or computer science concept being taught was related to learner autonomy. This provides some tentative evidence, which may seem obvious, that the learning context rather than the learning content is related to degree of constructionism of an activity and that computational thinking per se may not be related to constructionism. However, further work is needed on a larger number of activities to verify and validate this suggestion.;2019
"In Japan, programming education will be introduced in the Courses of Study for Elementary School from FY2020. Although various studies have been conducted on this topic, very few have examined Japanese elementary school computational thinking in terms of the developmental stages of elementary school children. Thus, we developed programming learning materials using concrete objects that can be understood by lower-elementary students. Specifically, we divided program-oriented thinking into three steps: concrete, logical, and abstract thinking; we then made the pupils carry out work in this order to encourage them to think of the sequence of actions necessary to implement the intended act, which involved the measurement and control of an illumination system. Furthermore, we discuss the validity of the proposed material based on questionnaire results of student participants and their parents of a workshop.";2019
In Latin America, computational thinking workshops are mostly developed in urban areas, charging participation fees. And although teachers are increasingly being expected to include technology in their classrooms, computational thinking and programming are not mandatory topics in teacher training programs. This hinders the development of digital skills among Latino students, and we expect that the digital gap between urban and rural populations will expand over time, especially in socio-economically vulnerable populations. Believing that teachers can be agents of change, we designed a 12 hour workshop to train the K-8 teaching staff in a rural and vulnerable school. The goal of this experience was to help these teachers develop basic computational thinking skills and devise new ways to incorporate what they learned in their classrooms. In this paper, we report our experience facilitating this workshop, and analyze the teacher perceptions before and after the intervention. Teacher attitudes changed drastically during the execution of the workshop, and they were able to come up with creative ways of incorporating computational thinking activities into their subjects. The reported experience can be used as input to develop public policies with respect to how computational thinking should be introduced in rural and vulnerable environments.;2019
In middle schools, Computer Science (CS) is usually taught as part of other disciplines. We propose a didactic module that aims at reaching the CS learning objectives and foster SE principles, while guaranteeing the achievement of the existing curricular learning objectives.;2019
"In order to solve the problems emerged in traditional C++ programming class, and to meet the different needs for computational thinking and programming skill of students of different majors, this paper proposed a new teaching method, which combines C++ programming skill with knowledge related to students' academic majors. This new teaching method delivers C++ knowledge by using study cases closely related to students' majors; at the same time, electrical circuits are adopted to demonstrate study cases to help students better understand the course contents, and get deeper comprehension of the concept of computational thinking from this introductory programming course. Through the study and practice, this new teaching method was proved to achieve better teaching outcome in cultivating students' computational thinking and innovative ability, so as to lay a solid foundation for students' follow-up study in their major fields.";2019
In order to support physics students in their future careers, there is a need to understand the relationship between undergraduate education and professional practice in physics-related fields. This study investigated high-level goal driven mathematical problem-solving activities that are found within two disciplinary cultures: physical science research labs in academia and photonics workplaces in industry. We conducted semistructured interviews with 10 Ph.D. students and 22 engineers and technicians. Math use in professional workplaces was characterized through an adaptation of epistemic games framework, which revealed six common epistemic games in these workplaces: conceptual math modeling, analytical-numerical math modeling, design-oriented math modeling, fabrication, improving processes, and making meaning out of data games. The workplace-specific epistemic games capture the goals, starting and ending conditions, constraints and contextual features, moves, tools, and representations. The games involve a broad spectrum of math that ranges from arithmetic to computational modeling. The games reveal how goals and particular contextual features impact approaches to mathematical problem solving. The findings extend prior work on mathematical problem solving in physics to a new population of professional researchers, engineers, and technicians in their workplaces. The research may guide new approaches for developing problems and explicitly teaching problem solving in diverse physics contexts, which may additionally benefit undergraduate students' preparation for their future careers.;2019
In present and future society, all individuals must be able to face the problems, risks, advantages and opportunities that will arrive with new paradigms in the labour market, social relations and technology. To reach this goal, a quality and inclusive education together with a proper and complete formation in technology (communications, robotics, programming, computational thinking (CT), etc.) must be imparted at all educational levels. Moreover, all individuals should have the same opportunities to develop their skills and knowledge, as stated in Goal 4 of the Sustainable Development Goals, Sustainable Education. Following this trend, in the present work, a practical experience about how to teach CT using robotics is developed, showing the results and evaluation of the lessons on robotics taught to students in their 4th year of compulsory secondary education, and where the students showed a high degree of apathy and demotivation. The teaching unit was based on an action research approach that includes a careful selection of pedagogical techniques and instruments to attract and keep the attention and interest of the students. In addition to the robotics lessons, a previous computational thinking training with Blockly Games was carried out, which contributed to noticeably increase the students motivation and to introduce them to the programming of robots. Moreover, gamification was used to motivate and evaluate the individual knowledge, and the students were required to present the work performed through a final project. The individual needs of the students were fulfilled with a daily monitoring. The results show that the pedagogical techniques, instruments and evaluation were adequate to increase the motivation of the students and to obtain a significant learning, showing how the teaching of CT may attract students that have lost interest and motivation, while providing them with abilities that will be essential for the learning throughout life.;2019
In recent years there is a growing interest in including programming activities in education, emphasizing the importance of children developing computer thinking since early ages. Block-based programming environments scaffold children to explore and learn programming in an easier way. In this paper we present a project supported by a theoretical framework that mobilizes constructionism, the maker movement, tinkering, and project-based learning, and a practical framework based on workshops with primary teachers. Primary school children developed computational thinking and creative computing skills, while they design and present ideas to turn their city a smart city. Results show the quality of the products developed using programming and robots and the impact that this approach can have in authentic learning.;2019
In recent years, a growing number of countries have introduced computational thinking into the curriculum of compulsory education. In this text, firstly, we briefly analyze some of the problems generated by the absence of a consensus definition of computational thinking and a conceptual framework that guides its integration in the curriculum of the various stages, the relationship with other disciplines and with the digital competence, its evaluation, teacher training, etc. Secondly, some elements of the process followed in Spain to promote its inclusion in the curriculum are described, an example of fast policy similar to that of other countries, characterized by temporary compression and the indiscernible fusion of public and private interests. Finally, it is suggested that the discourse on computational thinking in education avoids the debate about how it contributes to the ends of compulsory education and about its previous assumptions and its political and economic implications.;2019
In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These computational thinking courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course.;2019
In recent years, computational thinking has once again received attention widely. Computational thinking is generally considered to be the ability to be acquired. However, this study is to use computational thinking as part of the learning method. In order to explore the application of computational thinking in teaching, this study first collected the main review papers, as well as the literature on the assessment of computational thinking, and examined their views. Then, this study proposes a learning method that integrates computational thinking into experiential learning theory and applies it to learning artificial intelligence techniques.;2019
In recent years, game-based programming tools (GBPTs) such as Lightbot, Cargo-Bot, and Run Marco have been developed to help children worldwide better understand programming concepts through an interesting, enjoyable and visualizable programming learning experience. However, in-service teachers' perceptions regarding the use of these game-based programming tools in K-12 instruction have received little attention. To understand the perceptions of teachers, this study integrated perceived enjoyment into the Technology Acceptance Model (TAM) to explore the factors that influence the intentions of K-12 in-service teachers to use game-based programming tools in their instructional tasks. Thirty Chinese teachers in elementary and secondary schools were invited to finish at least one hour of code tutorial at the code.org site, and then undertake a paper-and-pencil questionnaire. We applied the partial least squares structural equation modeling technique to analyze the extended TAM model. Results demonstrated that teachers' behavioral intention was determined by their attitudes toward using GBPTs. Perceived usefulness and perceived ease of use had a significant and positive influence on teachers' attitudes. In addition, the results also indicated that perceived enjoyment has a significant influence on perceived usefulness and perceived ease of use, but no significant effect on the attitude of teachers regarding the use of GBPTs. Based on these findings, enjoyment can be considered as a determinant that influences teachers' perceptions toward using GBPTs in K-12 programming education. Some pedagogical and research implications are also presented.;2019
In recent years, public and private educational systems are making efforts to update their programmes as to integrate computational thinking and computer programming in K-12 grades. Despite the expertise of the academic world in teaching CS, and the vast amount of knowledge and tools available to evaluate programming skills in industry, there are no clear clues on how children do learn CS concepts, or what is the best strategy to develop coding skills in the school, and how to implement it with limited resources (hardware and trained personnel). The reason for these difficulties has to do with the variety of environments in the market, as well as the complexity to perform controlled multicenter experimentation with children that are exposed differently to computer programming (from no contact at all, to gaining skills at home, or in academies). We propose a curriculum to teach the most relevant concepts of CS, ranging from the very basic command execution, to problem-solving with Artificial Intelligence heuristics, covering the whole K-12 school grades. Instead of being based on computational thinking studies, this curriculum is the result of four years of field work, testing the ToolboX Academy programming environment on site, from a direct scrutiny of children interaction with the interface and tasks definition, to a controlled experiment where more than a thousand students became involved, from 30 different centers. The result is a detailed description of how the fundamental concepts of computer programming can be presented to primary-school students in order to reach a high level of coding proficiency, as well as acquiring the Al bases.;2019
In recent years, there has been a push to introduce coding and computational thinking in early childhood education, and robotics is an excellent tool to achieve this. However, the integration of these fundamental skills into formal and official curriculums is still a challenge and educators needs pedagogical perspectives to properly integrate robotics, coding and computational thinking concepts into their classrooms. Thus, this study evaluates a coding as a playground experience in keeping with the Positive Technological Development (PTD) framework with the KIBO robotics kit, specially designed for young children. The research was conducted with preschool children aged 3-5 years old (N = 172) from three Spanish early childhood centers with different socio-economic characteristics and teachers of 16 classes. Results confirm that it is possible to start teaching this new literacy very early (at 3 years old). Furthermore, the results show that the strategies used promoted communication, collaboration and creativity in the classroom settings. The teachers also exhibited autonomy and confidence to integrate coding and computational thinking into their formal curricular activities, connecting concepts with art, music and social studies. Through the evidence found in this study, this research contributes with examples of effective strategies to introduce robotics, coding and computational thinking into early childhood classrooms.;2019
In regular basic education environments, one of the challenges of Computer and Computing courses or similar is to motivate students, who perceive programming as a difficult task. Arduino board is recognized as a tool to improve programming skills and to facilitate teamwork. In this paper, Computational Thinking is evaluated through concepts, practices and computational perspectives of the activities carried out with the Arduino board by the 5th-grade students of secondary education of the Jose Obrero Parochial Technical Educational Institution in the district of San Mateo from the province of Huarochiri of Lima region.;2019
In response to the growing emphasis on computational thinking in recent multi-state education standards, as well as the ever-changing applicability of computation in both educational and professional realms, we are developing a survey which evaluates the attitudes of students exposed to computational learning activities in their high school physics classrooms. We administered a pilot questionnaire in classrooms with computation integrated into their physics curricula and conducted a thematic analysis on student responses. Several expected themes (identified previously from teacher interviews) and emergent themes (emerging from open-ended responses to the survey) arose in our analysis. This work focuses on three main themes: the applicability of physics ideas in coding, computational thinking practices, and the usefulness of computation. We provide an in-depth discussion of response variation and its impact on future survey development. This work lays the foundation for the development of a robust and validated survey that assesses students' opinions, expectations, and attitudes towards learning computation in their science classes.;2019
In summer 2018, we conducted two week-long professional development workshops for 116 middle and high school teachers interested in infusing computational thinking (CT) into their classrooms. Teachers learned to program in Snap!, connect CT to their disciplines, and create infused CT learning segments for their classes. This paper investigates the extent to which teachers were able to successfully infuse CT skills of pattern recognition, abstraction, decomposition, and algorithms into their learning products. In this work, we analyzed 58 teacher-designed programming products to look for common characteristics, such as project type, intended coding requirements for their students, and code features/functionality. Teacher-created products were classified into five types: animation, interactive story, quiz, intended game, and simulation/exploration tools. Coding requirements varied from using and/or explaining provided code, modifying existing code, programming with starter code, to building entire programs. Products were classified according to the extent to which they involved sprite manipulation, questions/answers, event handling, drawing, and control blocks. We found that teachers from different disciplines created products that vary in type, coding requirements, and features to suit their specific needs. Moreover, we found relationships between discipline, project type, and the required coding teachers expected students to do. Our results inform future Infusing Computing Professional Development (PD) to provide more targeted training to support different teacher needs.;2019
In the last few years, engaging students to create digital games has been a pole of attraction for many teachers and researchers, resulting in highly positive learning experiences and promoting their thinking skills, e.g., programming and computational thinking (CT) skills. Researchers have already stated about the need for further research not only around the evaluation techniques and tools of the quality of these complex educational interventions, but mainly about ways to ease the assessment of students' performance from multiple perspectives with authenticity. This paper contributes to proposing a multifaceted assessment framework of the degree of students' acquisition of multiple skills, when they get involved in digital motion-based touchless game-making course-projects with the MIT Scratch tool. The results of its implementation during a pilot study with computer science undergraduate students, which are presented, highlight the positive effects of combining and extending various assessment techniques and tools to draw holistic conclusions about students' higher skills including computational and spatial thinking skills.;2019
In the last few years, it has been pointed out that teaching programming is a strong strategy to develop pupils' competences in computational thinking (CT). In the Portuguese context, the curriculum changes in 2018 made programming and CT compulsory for every pupil in primary and secondary education. Nowadays, there is an information and communication technology (ICT) subject, taught by a computer science teacher in each school grade. In Portugal, to become a computer science teacher in primary and secondary education, it is compulsory to have a master's degree in computer science education. This article reports on a pedagogical activity developed with student-teachers of a Master in Teaching Informatics at the University of Lisbon. Within the activities of the master's program, we developed a cross-analysis of the core characteristics of 26 block-based and visual programming applications (apps) used to teach computational thinking and programming in school classes. In order to organize the analysis, a framework with several dimensions was developed and used by student-teachers to register the characteristics of each app. The product of this work is a comparative matrix mapping the core characteristics of each of the 26 apps that student-teachers used to select the most appropriate one for teaching programming and computational thinking according to each grade, age group and other characteristics.;2019
"In the last years, a growing trend in different educational contexts focused on Computational Thinking (CT) skills acquisition for both in-service teachers and students. But very low attention has been paid to pre-service teachers' education in regards to CT skills. To solve this issue, an empirical experimentation has been carried out with141 Italian pre-service teachers, that attended at a programming course, with the following aims: 1) provide them the main coding concepts by using Scratch 2.0; 2) offer practical advice on how to design educational applications (apps) to be applied into school context; 3) assess their apps by applying an already existing methodology, useful to give them feedback on their programming expertise and CT skills. Empirical findings showed that most of the participants achieved a medium-high level of CT skills, combining both design and programming skills in their school internship. Moreover, they reported a sense of greater self-esteem in teaching practice and a great emotional response from kids.";2019
In the past years, the use of educational robots has steadily increased, in particular due to the ongoing digitalization of modern societies and the new skills that professions require. It has been argued that educational robotics activities have the potential to promote the acquisition of such skills and may increase pupils' interest in STEM disciplines. Despite these results, only few studies have examined the pupils' perspective regarding the pedagogical value of educational robotics in formal education. Therefore, in this study with 91 pupils aged between 13 and 15 years, we aimed at investigating how pupils perceive educational robotics as a tool to improve their creativity, collaboration, computer science and computational thinking skills and to foster their interest in STEM disciplines. Over a period of one semester, the pupils worked with the robot Thymio II and evaluated their experience through a questionnaire. The results showed that boys and girls have different perceptions on which competences they could enhance: while boys affirmed more often than girls, that they could improve their computer science and computational thinking skills, the opposite was found for collaboration and creativity. Moreover, the results illustrated that educational robotics activities could increase the interest in coding, computer science and engineering, however, this was predominantly observed in boys.;2019
In the present study we present a mixed reality learning environment that aims to become a creative, joyful and efficient interdisciplinary canvas for learning about history and geography and for concurrently fostering computational thinking. The environment makes use of embodied affordances and educational robotics and consists of two parts: an augmented 3D-tangible model of southern Europe with finger-based interaction and a second floor-based augmented robotics track depicting European landmarks, where students are asked to perform tasks with Mindstorms EV3 robots. The game scenario describes a treasure hunt around Europe and students swap between finger-based and robotics-based interactive surfaces in two pairs. We evaluated our intervention with pre-service teachers in six groups of three or four who played with the environment for approximately 45 minutes each. Data collection was performed through pre- and post-knowledge test, attitude questionnaire and a semi-formal group interview. The answers showed that the mixed reality environment improved motivation, engagement and enhanced their orientation around Europe's geophysical features. The robotics aspect consolidated further their computational thinking skills while being highly exciting. The proposed approach was closer to the preservice teacher's expectations and interactive experiences, exploited embodied learning opportunities and gamified the learning process.;2019
In this paper the new school subject in Bulgarian primary school - Computer modelling is presented. The subject is introduced to all Bulgarian schools in 2018/2019 year as a core course in third grade (9-year-old students). The curricula for 3rd and 4th grade are outlined and some challenges and problems in implementation of the new school subject are discussed. Also several examples for solutions of main challenges are presented..;2019
In this paper we explore the use of a visual representation to support the discussion of computational thinking and programming curriculums, for implementation in open and democratic education institutions. Several countries are implementing curricular elements from computer science in K12 education. There are several obvious challenges that this change needs to address (e.g. the lack of teachers with sufficient content knowledge). But at their root is a lack of clarity about and tradition for what needs to be learned. The process of forming these curricula can be challenged by 1) a lack of participation because inputs from many different people become overwhelming, 2) a lack of transparency, with respect to the decisions (such as demarcations and trade-offs) leading to the curriculum, and finally the 3) ambiguity surrounding the names and elements of the curriculum, leaving teachers with uncertainty about what specific labels and names involve, and complicating comparisons between curricula. In this paper, we take outset in a splitting of the process of creating curricula into two parts: 1) a mapping of possible/desirable competencies to be developed in a subject and, 2) decisions about which competencies to actually include in a curriculum. We use an existing map previously developed to show central programming, to discuss progression levels. Our work with negotiating learning progression suggests that this approach supports discussion among stakeholders as well as clear declaration of knowledge respecting the many relations between knowledge elements. We use this work to discuss how our division between mapping and curriculum design relates to and addresses challenges in the more well-known division between curriculum design and teacher decision making about what to prioritise.;2019
"In this paper we present a case study of the mobile learning game sCool [1]. Based on previous work presented Steinmaurer et. al. in [2] we have expanded our study with the introduction of a second experiment and with new additional aspects. sCool is a multi-platform game that is intended to encourage and support children learning computational thinking and coding in Python. The learning content is highly adaptable; educators can thus create own courses on an individual basis for the needs of their students. These courses involve a concept- learning and a practical mode. First, the students learn a specific concept and in a second step, they have to apply it in a practical task. For this purpose, we created a course to teach some basic programming concepts. Two student groups of different school types participated in class as a formal learning activity. In this paper we present the results of the evaluation of sCool in coding classes. Therefore, we focus on the performance, game engagement, emotions and the perception of the girls. Within this study we found out, that the students are interested in learning to code but do have problems to transfer the learned content to similar fields. We also found out, that there are slightly differences in the performance of the different types of students in terms of gender and school type.";2019
In this paper we present a STEM education initiative. This initiative involves an improved learning approach by means of the implementation of collaborative learning techniques. The proposed approach promotes computational thinking skills in a group manner to improve the learning of geometry. Two case studies were performed with primary school children in the fourth grade at the Comfacor School (Monteria-Colombia). The aim of these studies was to analyse the effects of the improved approach in three aspects: the children' motivation, satisfaction and performance. The obtained results provide evidence that the learning of geometry was enhanced thanks to the proposed approach implemented based on a computational thinking strategy.;2019
In this paper we present ARCat, a tangible programming tool designed to help children learn Depth First Search (DFS) algorithm with augmented reality (AR) technology. With this tool, children could use tangible programming cards to control a search process, rather than control virtual characters directly. With the special design of card semantics and real-time feedback, the cognitive load of the learning process had been proved to be affordable to children (ages 8-9) with the result of our preliminary evaluation, which shows the possibility of basic algorithm education for young children with tangible interface.;2019
"In this paper we present the multi-year collaboration between Rupprecht-Gymnasium Munchen, a preuniversity school (K-12) in Bavaria, Germany, and MathWorks, an international scientific computing company. The school is STEM-focused and a member of the German national STEM school excellence network MINT-EC; they prepare students aged 10 to 18 for university careers. We highlight the starting motivation for the partners and describe several building blocks and initiatives including curricular and extracurricular activities for students as well as teacher training that became part of the collaboration. We also discuss future steps for the partners and how this project could be transferred to other schools.";2019
In this paper we raise the research question: What is needed in order that a new subject: Technological Literacy may be implemented in Danish primary and lower secondary school, independent of the teacher's prior technological and digital skills. We have conducted our research through both an empirical and theoretical study. Technological Literacy is being introduced across Denmark as trial subject in 46 schools for a period of 3 years. The general aim of the subject is to enhance the development of active, critical and democratic pupils who may contribute as citizens to a digitized society more specifically, the new subject comprises a total of four areas of competences: Technological Ability to Act, understood as pupils ability to master and understand different digital technologies. Digital Empowerment is the ability to understand digital artefacts through analyses and reflection. Digital Design and Design Processes focus on the ability to frame problems within complex problem spaces generate new ideas and transform them into digital prototypes. Computational Thinking is the ability to frame complex problems that they may be executed by a computer. To teach Technological Literacy is a challenge to teachers, and we investigate how the teacher's competencies may be developed within the subject by framing it within three complementary learning perspectives. The theory of 'Bildung' (formation) to understand the educational perspective on formation that exist in Danish primary and lower secondary education today, and to understanding how digital literacy challenges the educational system. The didactic perspective constitutes the basis for unfolding the pedagogical approach in Technological Literacy, and for identifying the consequences for the teacher's didactics. The third perspective is the OECD report on the 21s century skills which deals with the competencies that are required and will be required by the future society. These complementary learning perspectives frame the subject of Technological Literacy. A discourse analysis is carried out of official documents on Technological Literacy from The Danish Ministry of Education [1]. The curriculum document and the Teaching Guidelines document, which are the foundation for the subject. The analytical concepts for analyzing the documents are drawn from an explorative empirical study (workshops) with teachers. The workshops focused on participants understanding and conceptualization of Technological Literacy through focusing on their collaboration and the dialogic process of negotiation of meaning, their common prioritization of concepts and their design constructions (LEGO). At the conference we will present Technological Literacy and its confrontation with reality through the results of the empirical workshop.;2019
In this paper we report our experiences from a University outreach program with primary and secondary education teachers of various specialties. Our goal was to improve the coding abilities of teachers through Scratch activities. The participants can in turn teach their students, multiplying that way the benefitted population. To increase the participation and the completion percentage, the activities are designed as a course in Moodle realized in discrete runs with manageable groups, in a blended learning approach. The educational material was a combination of learning objects with specific objectives, video material and try-out activities. The course has been completed by 559 teachers from various Greek districts, mainly of regional areas, with a high completion rate of 65%. The participants found the experience highly satisfying, interesting and agreed that they had been supported effectively throughout the process. In the paper we describe the rational of our approach, the design and implementation phases of the project, the outcomes and the main findings of the evaluation of the user opinions.;2019
In this paper, an ultra low-cost line following robot is presented. The robot is developed through the integration of free educational software and low cost electronics and mechanical devices with the aim of been used as a teaching and learning tool to increase the students confidence/performance and interest in engineering areas. The cost for building this robot-based educational tool and its related activities is less than 25 USD. Students were encouraged for building its own unique designs using cardboard and open-source software and hardware. The activities promoted the increase in knowledge and developed student's technical skills such as the use of electronic circuits and sensors, three dimension designs, learning to programming animations and microcontrollers, building self-made structural and mechanical elements using cardboard and the use of the Bluetooth protocol to achieve the interconnection of devices through the use of an Android based Smartphone. The activities have been developed to allow students to apply and test their own ideas and concepts for solving problems through the computational thinking process and finding digital solutions through programming microcontrollers, all of them in the frame of the maker movement and the inclusion of the arts in the science, technology, engineering and mathematics (STEM) education. The results of confidence/performance and interest evaluation tests allowed to identify the main areas of gain knowledge and the increasing interest in the engineering fields presented in this work.;2019
In this paper, we make a case for computing as a mathematical disciplinary practice. We present results from interviews with research mathematicians in which they reflected on the use of computing in their professional work. We draw on their responses to present evidence that computing is an inherent part of doing mathematics and is a practice they want their students to develop. We also discuss the mathematicians' perspectives on how they learned and teach computing, and we suggest that much needs to be explored about how to teach computing effectively. Our overarching goal is to draw attention to the importance of the teaching and learning of computing, and we argue that it is an imperative topic of study in mathematics education research.;2019
In this paper, we present a complete platform for an innovative way to teach mathematics. The platform is composed of a serious game to help children to understand fractions, and a web portal that allows teachers to configure exercises involving fractions, but also to design completely new exercises using a very simple block-based programming language. In this way our tool can be used by primary school teachers as an help to teach mathematics, but also secondary or high schools teachers to teach students computational thinking and basic skills of programming languages.;2019
In this paper, we present our design of a high school summer course which uses our Visual Design Problem-based Learning Pedagogy using Virtual Environments as a strategy to teach computer science. Students solved visual design problems by creating 3D sculptures in an online virtual environment. These creations were further explored and refined in immersive display systems fostering embodied learning and remote peer presence and support. To achieve the desired design, students use programming and computing concepts, such as loops, to solve those visual design centered problems, i.e. solving for composition, positive/negative space, balance, as opposed to computational problems first, i.e. create a loop, a fractal, randomized lines, etc. We present results from a study conducted on three high school summer courses. We compared the use of our Visual Design Problem-based teaching strategy (students wrote code to solve challenges based on art and design principles) to a traditional strategy (students wrote code to demonstrate comprehension of computer science concepts). Our results showed that test scores were higher for students in our Visual Design Problem-based courses. This work may have a positive impact on computer science education by increasing engagement, knowledge acquisition, and self-directed learning.;2019
In this paper, we propose that the data generated by educational robots can be better used by applying learning analytics methods and techniques which can lead to a deeper understanding of the learners' apprehension and behavior as well as refined guidelines for roboticists and improved interventions by the teachers. As a step towards this, we put forward analyzing behavior and task performance at team and/or individual levels by coupling robot data with the data from conventional methods of assessment through quizzes. Classifying learners/teams in the behavioral feature space with respect to the task performance gives insight into the behavior patterns relevant for high performance, which could be backed by feature ranking. As a use case, we present an open-ended learning activity using tangible haptic-enabled Cellulo robots in a classroom-level setting. The pilot study, spanning over approximately an hour, is conducted with 25 children in teams of two that are aged between 11-12. A linear separation is observed between the high and low performing teams where two of the behavioral features, namely number of distinct attempts and the visits to the destination, are found to be important. Although the pilot study in its current form has limitations, e.g. its low sample size, it contributes to highlighting the potential of the use of learning analytics in educational robotics.;2019
In this response we emphasize the core elements of the MICA course, and how its focus is on providing programming experiences for doing mathematics. This implies an epistemological shift from traditional mathematics instruction at university.;2019
In this study, effectiveness of a computer science course at the secondary school level is investigated through a holistic approach addressing the dimensions of instructional content design, development, implementation and evaluation framed according to ADDIE instructional design model where evaluation part constituted the research process for the current study. The process has initiated when the computer science curriculum had major revisions in order to provide in-service teachers with necessary support and guidance. The study is carried through as a project, which lasted more than one year and both quantitative and qualitative measures were used through a sequential explanatory method approach. The intention was to investigate the whole process in detail in order to reveal the effectiveness of the process and the products. In this regard, not only teachers' perceptions but also students' developments in their perceptions of academic achievement and computational thinking, as well as correlations between the computational thinking sub-factors were investigated. The findings showed that the instructional materials and activities developed within the scope of the study, positively affected the computational thinking and academic achievement of students aged 10 and 12 years old. The teachers' weekly feedbacks regarding application structures and implementation processes were also supported the findings and revealed some more details that will be useful both for instructional designers and teachers.;2019
In this study, we build on an emerging trend in socioscientific issues (SSI) education to support action through the use of personally relevant digital tools. We investigate the design of curriculum that integrates SSIs with the design and programming of mobile apps using a design-based research methodology. Through the series of design iterations, we highlight important tradeoffs in design choices that can potentially impact the depth of students' learning of SSIs and how students take action. These considerations include the sequencing of programming versus SSI instruction, enabling or restricting student choice of SSI topics, mandating collaboration on app development, and emphases on packaged computational components versus computational concepts. We conclude with several design suggestions to maximize efforts to promote scientific action through app construction and SSI education.;2019
In this study, we describe the preliminary education program employed before the adoption of the PBL process so that learners can smoothly carry out PBL exercise through group activities. Our practical experience of education has shown that the group activity-based PBL process requires the ability to express one's own ideas to others (communication skill), the ability to abstract problems and develop one's thoughts (computational thinking skill), and the ability to move ahead with tasks in a planned manner (skill to see the big picture of matters). Therefore, we gave our attention to digital storytelling as an activity that will sharpen these three skills and that lets a student complete assignment by himself or herself. This paper reports on classroom exercise into which digital storytelling activities were incorporated. According to a questionnaire survey conducted after the class, our education program received positive feedback from about 60% of the students who took the course. Meanwhile, it has been revealed that the students evaluated their own works produced using the digital storytelling techniques more strictly than the teachers expected.;2019
In this study, we evaluated the cognitive and attitudinal influences of playing a video game, Penguin Go, designed to target the development of middle school students' computational thinking (CT) skills. In addition to the overall effectiveness of the game, we investigated the impact of a specific game feature-constraints on the number of blocks in a solution. Results showed that after playing Penguin Go for less than two hours, students' CT skills improved significantly, but the additional constraints did not generate a significant impact on learning. In addition, the game overall did not influence students' attitudes toward computer science, but the constraints condition of the game negatively influenced students' attitudes toward computer science. Implications of the findings and possible directions for future research regarding using these types of games to foster computational thinking skills are discussed.;2019
In this work, a mobile application developed on the Scratch programming language is described. Purpose of the application is to develop programming skills and computational thinking abilities of the students from secondary schools. The mobile application has been developed to solve two problems related to teaching Scratch programming language. The first problem related to educational aspects of the Scratch programming commonly used in secondary schools. The second problem is that Scratch does not have mobile applications for its learning. The most important component of the mobile application - the activities are described in detail. The activities are designed to teach the Scratch programming language on the one hand and to develop the algorithmic, computational, and logical thinking skills of the students on the other. How to improve students' computational thinking skills by using activities is explained in an example.;2019
In this work, we describe our effort to develop, pilot, and evaluate a model for infusing computational thinking into undergraduate curricula across a variety of disciplines using multiple methods that previously have been individually tried and tested, including: (1) multiple pathways of computational thinking, (2) faculty professional development, (3) undergraduate peer mentors, and (4) formative assessment. We present pilot instantiations of computational thinking integration in three different disciplines including sociology, mathematics and music. We also present our professional development approach, which is based on faculty support rather than a co-teaching model. Further, we discuss formative assessment during the pilot implementation, including data focusing on undergraduate students' understanding and dispositions towards computational thinking. Finally, we reflect on what worked, what did not work and why, and identify lessons learned. Our work is relevant to higher education institutions across the nation interested in preparing students who can utilize computational principles to address discipline-specific problems.;2019
In this work, we present a line of research focus on the didactics of teaching and learning of Computer Science for primary school. Our approach combines the training of teachers in Computational Thinking with Unplugged activities (without the use of computer) and Plugged ones, involving programming of computers and other devices. As a first instance of training, we presents the design and implementation of the Higher Level Teaching Specialization in Didactics of Computer Science, approved by the Educational Ministry of Santa Fe, Argentine. The objective of this specialization is that the primary teachers can appropriate of Computational Thinking skills and the potential of programming, to include them in their educational practices in a contextualized, interdisciplinary and inclusive way. As results, an opinion poll is presented on a first stage of this training, from which it is possible to extract positive opinions of the teachers regarding the contents and didactics of the specialization that they are carrying out.;2019
In this world of the digital era, in which we are living, one of the fundamental competences that students must acquire is the competence in Computational Thinking (CT). Although there is no general consensus on a formal definition, there is a general understanding of it as a set of skills and attitudes necessary for the resolution, with or without a computer, of problems that may arise in any area of life. Measuring and evaluating which of the CT skills students have acquired is fundamental, and for this purpose, previously validated measuring instruments must be used. In this study, a previously validated instrument is applied to know if the new students in the Engineering Degrees of the University of the Basque Country have the following skills in CT: Critical Thinking, Algorithmic Thinking, Problem Solving, Cooperativity and Creativity.;2019
Informatics and especially its nowadays leading part, computational thinking, becomes an important and universal competence within the debate on 21st century skills and addresses the concepts and learning goals of Informatics (Computing or Computer Science). There are initiatives appearing worldwide that tend to include Informatics into early education. In this paper, we analyze implementation of Informatics as well as developing computational thinking competence on a primary school level. We survey the situation on Informatics in primary education in different countries (52 countries included), discuss the structure of draft curriculum for Informatics in primary education developed in Lithuania, and study primary teachers' readiness to integrate Informatics into primary education.;2019
Integration of visual programming in early formal education has been found to promote computational thinking, which is necessary for success in the knowledge society [3],[9]. According to the constructionist learning approach [5], it is important to teach visual programming in order to promote learning and improve high-order thinking processes [3],[7]. However, teachers' intuitive perspectives about optimal learning processes - folk psychology impact their perspectives about teaching - folk pedagogy [4], and play a significant role in integrating educational technologies, such as visual programming, within the formal curriculum [2]. For instance, the instructivist perspective will result in teacher-centered pedagogy, even in technology-enhanced environments [6]. In contrast, the constructivist perspective will result in student-centered pedagogy, based on independent learner experience with teacher guidance [4]. The current study first administrated an online folk pedagogy questionnaire [1], in order to characterize pedagogical perceptions of 89 teachers, who integrate technologies in their classroom, as either instructivist or constructivist. Following that, we focused on 22 of these teachers, who teach code in a visual programming environment - Scratch [7]. Among the participants, 14 held constructivist and 10 held instructivist pedagogical perspectives. The coding of the interviews showed that the pedagogical perspectives of the teachers are reflected in their teaching and assessment strategies in the visual programming environment. The amount of constructivist teaching strategies by teachers holding constructivist pedagogical perspectives (75.9%) was significantly higher than among their instructivist colleagues (46.1%, p<.001). However, it was found that the very act of teaching in the visual programming environment encourages constructivist pedagogy even among teachers holding an instructivist perspective. We discuss the implications of the findings for educational theory and practice.;2019
Interactive practice exercises are a fundamental design element of most online courses. Their value can be quantified by the doer effect - a reliable correlation between practice and learning outcomes that is stronger than the correlation between video watching and learning outcomes. In two computational thinking and programming MOOCs, we first confirm the doer effect for all certificate earners in short and long term grade outcomes. This leads to asking: Is the doer effect similar when experienced learners are compared to novices? Is it present, regardless of the topic being taught? We find the doer effect varies in magnitude across learners of different experience level and topics, suggesting that the importance of practice depends on the topic and the learner's background. Our findings inform scalable instructional design in MOOCs by demonstrating that the doer effect, present at a high level, also exhibits fine-grained variation across student background and topics.;2019
Introducing computational modeling into STEM classrooms can provide opportunities for the simultaneous learning of computational thinking (CT) and STEM. This paper describes the C2STEM modeling environment for learning physics, and the processes students can apply to their learning and modeling tasks. We use an unsupervised learning method to characterize student learning behaviors and how these behaviors relate to learning gains in STEM and CT.;2019
InventEUrs is an Erasmus+ European project promoting access to quality and inclusive education using intercultural virtual exchanges and connected learning experiences. The main objective is to foster mutual understanding and respect among children and young people with different ethnic or religious backgrounds. We want to promote critical thinking and digital media literacy among children and teachers by using innovative methodologies (i.e. design thinking and computational thinking) and cutting edge creative learning technologies.;2019
Is computer science in primary school still a fairy tale? The buzzwords basic digital education, computational thinking and classroom 4.0 are now an indispensable part of Austrian education, at least in secondary schools. The integration of early computer science into the school curriculum has become increasingly important, especially in places and class levels where informatics is not yet available as a subject of its own. In the near future, informatics education will certainly have its entitled place in primary education. In Austria, too? Is it possible to integrate informatics education and to foster computational thinking in a child-friendly way, perhaps by combining digital media and programming courses with fairy tales? Does the topic of fairy tales fit in with contemporary teaching at all? Referring to these questions, the authors developed and initiated the project Fairy tale Computer Science. The aim of this project is to show a creative way for the introduction of digital literacy and early computer science in primary school. The contribution tries to clarify how computational thinking can be located at primary level and how it can have an effect beyond informatics. Ideas and teaching examples will be presented that show how a combination of digital media, playful coding and the topic of fairy tales can look like and how an implementation of computational thinking can already be successful in primary school.;2019
"It becomes challenging to integrate technologies into the learning processes of the students who entered the university, to favor collaboration; Connect formal, non-formal and informal spaces; the location of learning, both inside and outside the classroom; Adapt the contents, presentations and activities to the characteristics of the students and their context; among other things. Given the above, the application of the ubiquitous learning (u-learning) model emerged as a valid alternative. This model is a phenomenon of technology, a vision, a challenge, a revision, an educational environment, a new medium, a learning, a help, a great diversity of resources, a new learning system. Personalize learning and enable the realization of a set of adaptive activities according to the profile and context of learning. The National University of Santiago del Estero (UNSE) carries out the entrance course to the different careers it offers. Among the training activities in the income is the University Ambience Workshop and the disciplinary courses of each career. The objective of the workshop is to introduce the students to organizational aspects related to the peculiar dynamics of the university institution. General information of the UNSE and the faculty is addressed. The academic and administrative data of university life: Student management system, Study plans, Correlation system, Class schedules, etc. These learning instances are characterized by the large number of topics that are addressed, the large number of students, the levels of knowledge, the ability to study and the large number of sections / sectors of the university where different functions and activities are carried out. Students should know. On the other hand, those entering the computer science courses must complete an Introduction to Computing course. Conscious, that is not only about learning concepts, but it is a series of generic skills that are part of the so-called computational thinking, it is a form of this course, an introduction to this type of thinking. In this paper we present a pedagogical proposal for the university entrance course for computer science careers. The proposal is based on u-learning with Learning Objects (LO) that is offered in a personalized way to the student. To do this, a computer application that students can install on their cell phones, which offers support services for learning. Two of them oriented to the Workshop of University Ambience and the third to the disciplinary Course in Computing. The implementation and evaluation of this proposal will be specified in the 2019-2020 admission course of the University.";2019
It has been argued that computational thinking should precede computer programming in the course of a career in computing. This argument is the basis for the slogan logic first, syntax later and the development of many cryptic syntax removed programming languages such as Scratch!, Blockly and Visual Logic. The goal is to focus on the structuring of the semantic relationships among the logical building blocks to yield solutions to computational problems. In this paper, we introduce a new programming platform, called the CodeMapper, in which learners are able to build computational logic in independent modules and aggregate them to create complex modules. CodeMapper is an abstract development environment in which rapid visual prototyping of systems is possible by combining already developed independent modules in logical steps.;2019
It has been quite a long time since S. Papert introduced the idea that children should be involved in the use of computers in the learning process to support the development of computational thinking. Nowadays, educational robotics is introduced in different dimensions of education, but mostly it is used as part of a compulsory educational process in nonformal educational activities, in activities to reduce the risks of early school leaving, and in initiatives introduced by some projects where different aspects of educational robotics are tested in activities with students who have diverse special needs. But till now robotics has mostly been associated with the field of Science, Technology, Engineering, and Mathematics, and outcomes of educational robotics are measured through the prism of improved knowledge in STEM subjects. In this special issue, journal researchers provide results on ER in the context of inclusive education.;2019
It is consensual to consider teaching and learning programming difficult. A lot of work, dedication, and motivation are required for teachers and students. Since the first programming languages have emerged, the problem of teaching and learning programming is studied and investigated. The theme is very serious, not only for the important concepts underlying the course but also for the lack of motivation, failure, and abandonment that such frustration may imply in the student. Immediate response and constant monitoring of students' activities and problems are important. With this work, it is our goal to improve student achievement in courses where programming is essential. We want each student to be able to improve and deepen their programming skills, performing a set of exercises appropriate and worked for each student and situation. We intend to build a dynamic learning model of constant evaluation, build the profile of the student. The student profile will be analyzed by our predictive model, which in case of prediction of failure, the student will have more careful attention. Predict the student's failure with anticipation and act with specific activities, giving the student the possibility of training and practicing the activities with difficulties. With this model, we try to improve the skills of each student in programming.;2019
It is of relevance to research about computational thinking and its possible physiological changes in the brains of elementary school students. This paper presents a part of the data collected from a research that aims to identify areas of the brain that are activated before and after a course of learning of computational logic through an educational background tool with interactive structure, called Scratch, with target audience in primary school children. For this, the BCI (Brain Computer Interface) system is used, an interface between the brain and the computer, through which processes and mental states are mapped. In addition, the ActiCHamp tool, an active channel amplifier with auxiliary channels used for a full range of Biosynthetic sensors, will be used. OpenVibe will also be used to design, test and use BCI systems to collect pre and post learning data. The theoretical basis is based on researches of the neurosciences, education, learning and technology. The study was carried out in a group of primary school students, and it was possible to conclude that computational thinking causes physiological changes in the brains of students in the final grades of elementary school in a public school, with the purpose of improving problem solving.;2019
"It is widely believed that there are educational benefits to making computer games, but there is no systematic review of research on this topic. This article describes a meta-synthesis of research on children designing and programming computer games that investigates the extent to which there is evidence of benefits for computer science learning and motivation. Over 400 articles were identified, and 68 articles met the inclusion criteria. A systematic analysis and synthesis across studies showed some evidence that computer game design and programming can lead to changes in programming knowledge, problem solving, and computer science attitudes and confidence. However, most of the evidence described engagement in computing-related practices and did not measure learning. The findings were mostly positive, although several studies noted more negative attitudes toward programming after making games. The results were similar across different pedagogical approaches, although social interaction may provide unique opportunities for computer science learning. The synthesis resulted in a list of design elements for studying computer game design and programming activities; these can be used to increase the availability of evidence about learning. The article concludes with the identification of gaps in the research and suggestions for additional research.";2019
Kids Media Lab research project: technologies and learning of pre-school programming is part of a post-doctoral research at the University of Minho (Portugal), since September 2015. Educators and children involved in the research belong to 5 districts of Portugal (Aveiro, Braga, Coimbra, Porto and Viseu). The main objective of the research is to understand how children learn to program at pre-school age. The research followed a qualitative methodology based on case studies and the first data collection conducted during the 2016/2017 school year. The activities were carried out in 5 schools, with 114 children, of which 71 were the sample of this research. In the data collected we used Involvement Scale for Young Children, a grid validated by the Ministry of Education in Portugal. The results show a very active participation of children and educators, with great effort and learning, in several curricular areas, through computational thinking activities, programming and robotics. It is concluded that the participation of children was generally above level 4, on a scale of 1 to 5. The motivation in all the activities was always a constant and allowed learning in various curricular areas;2019
Kids Media Lab research Project: technologies and programming learning in Preschool is part of a post-doctoral research at the University of Minho (Portugal) since September 2015. The main objective of the research is to understand how children learn to programme at preschool age. For the research, we focus on concepts that we believe are fundamental: computational thinking, programming and robotics, all of these targeted to preschool age. The research followed a qualitative methodology based on case studies during the 2016/2017 school year. The collection of data and results presented in this manuscript is based on the following instruments: logbook, focus groups and observation with the Scale of Involvement, a grid validated by the Ministry of Education in Portugal for preschool. This variety of instruments allowed us to cross-reference research data. The involvement of children in various activities was analyzed to try to understand the children's learning styles. It is concluded that the children's participation had a general involvement above level 4, on a scale of 1 to 5. Motivation in all activities was always a constant and allowed learning in various curricular areas.;2019
"Knowledge in Computer Science (CS) is essential, and companies have increased their demands for CS professionals. Despite this, many jobs remain unfilled. Furthermore, employees with computational thinking (CT) skills are required, even if they are not actual technicians. Moreover, the gender disparity in technology related fields is a serious problem. Even if companies want to hire women in technology, the number of women who enter these fields is remarkably low. In high schools, most teenagers acquire only low-level skills in CS. Thus, they may never understand the fundamental concepts of CS, have unrealistic expectations or preconceptions, and are influenced by stereotype-based expectations. Consequently, many teenagers exclude computing as a career path. In this research study, we present two promising concepts to overcome these challenges. First, we consider alternative paths to enter the field of CS. In 2018, a voluntary lecture Design your own app at the University of Graz for students of all degree programs was introduced. In total, 202 students participated. We applied a Game Development-Based Learning (GDBL) approach with the visual coding tool Pocket Code, a mobile app developed at Graz University of Technology. The students were supposed to create simple games directly on smartphones. The course received positive evaluations and led to our second concept; In January 2019, we started to design a MOOC (Massive Open Online Course) with the title Get FIT in Computer Science. The MOOC will be launched in August 2019 on the platform iMooX.at and will provide a general introduction to the field of CS. For exercises and the final submission, the students need to apply game design strategies by using Pocket Code. The MOOC has several target groups. First, this course can be used to encourage young women who have little to no previous knowledge in CS. Second, it should help all teenagers to get a more realistic picture of CS to its basic concepts. Third, teachers can use the course materials to lead high school classes (Open Educational Resources). Finally, the MOOC can be accessed by everyone interested in this topic, thus students of other majors can acquire CS skills.";2019
Learning how to code by creating video games promises high motivation, engagement and fun for the students. In this study, the Unity Game Development Environment, a widely spread tool for professional game developers, was employed for teaching secondary school students to develop their own video games. The research design for the game development activities followed a Design-Based Research approach. The learning design was based on situated learning accompanied by a mix of tutorials, teacher explanations and support & collaboration amongst the students. The results of the first iteration of Design-Based Research confirmed the hypotheses that video game development was fascinating and engaging for the majority of young learners. Using a professional tool with an embedded physics engine provided additional attraction for teenagers. From the first cycle of game development we learned that dealing with the complexity of the development environment in a systematic way, time management, advanced teachers' competencies in handling the environment, and providing well balanced learning materials are crucial to successfully employ a professional tool like Unity in secondary education. Besides improved materials and a stepwise process of adding complexity e.g. by starting with developing mini-games, the most important change for the second cycle is to significantly extend the time allocated for game development. This seems justified due to the vast spectrum of skills and competences students tend to acquire when collaborating on complex and exciting issues like developing games.;2019
Learning to code is the new literacy of the 21st century. Computational thinking, closely related to programming and coding, requires thinking and solving problems with different levels of abstraction and it is independent of software or hardware devices. This work analyzes the main initiatives related to computer thinking in schools, the use of specific tools, such as robotics kits or educational programming environments, and main teaching-learning strategies used in early childhood education.;2019
Learning to program in a text-based language is known to have a steep learning curve. For several young students the first steps appear hard and exhausting, leaving students with little motivation to follow up. This is unfortunate, since in our era of digitalization, computational thinking, including coding, is a significant benefit, if not a requirement, in numerous job offerings. Hence, we were looking for new and motivating paths to promote students' computational thinking along with 21st century competences such as collaboration and problem-solving. The core idea of our approach is to motivate students to get over initial hurdles by letting them develop computer games With the open-source, educational Version of the professional game development engine Unity (TM). To also train the crucial collaborative skills and make it easier for the teacher to oversee and support a class, we chose to employ the agile technique of pair-programming. This study first describes the context, namely the Learn to proGrAME project and recalls the essence of the pair-programming technique. After describing related work we proceed with the triangulated research design consisting of three methods. The class observation is followed by a post-design questionnaire that was filled out by the students of one class at the K9 Level (about 15 year olds), and a final focus group. The results are deemed to be of interest primarily to secondary level computer science teachers and curriculum developers. They indicate that all students - with some consultation l by the teacher - finished the given task and preferred the pair-programming session to individual work. Furthermore, the authors particularly appreciated the collaborative problem solving, observed in several student pairs. All in all, with some caution due to the small sample size, we encourage teachers to engage students in pair-programming due to distinctly positive results in both cognitive and interpersonal dimensions.;2019
Machine learning is a new paradigm of problem solving. Teaching machine learning in schools and colleges to prepare the industry's needs becomes imminent, not only in computing majors, but also in all engineering disciplines. This paper develops a new, hands-on approach to teaching machine learning by training a linear classifier and applying that classifier to solve Multirotor Activity Recognition (MAR) problems in an online lab setting. MAR labs leverage cloud computing and data storage technologies to host a versatile environment capable of logging, orchestrating, and visualizing the solution for an MAR problem through a user interface. This work extends Arizona State University's Visual IoT/Robotics Programming Language Environment (VIPLE) as a control platform for multi-rotors used in data collection. VIPLE is a platform developed for teaching computational thinking, visual programming, Internet of Things (IoT) and robotics application development.;2019
Major metropolitan school districts around the United States are implementing computer science in elementary school classrooms as part of the CS for All (CS4All) initiative. Little is known, however, about the success of such a large-scale rollout, especially in terms of equity. In this study we analyze the performance of 4th grade classrooms completing three modules of an introductory computational thinking curriculum, looking at not only overall results but also the variance in performance between high-, mid-, and low-performing schools (as identified by their school report cards). We find that all classrooms are benefiting from the computational thinking (CT) curriculum, making great strides in providing equitable access to CT education. However, statistically-significant differences in performance are present, especially between the high- and low-performing schools, showing that there is still room for improvement in developing strategies and curricula for struggling learners.;2019
Many arguments are used to advocate for the introduction of Computer Science (CS) / Computational Thinking / coding in K-12 education. Growth mindset theory (GM) is also becoming very popular among educators and researchers. Some claims stating that studying CS can foster a GM have emerged. However, educational research shows that transfer of competences is hard. Very little research has been conducted on the relationship between GM and CS learning, with conflicting results. We measured some indicators (e.g., mindset, computer science mindset) at the beginning and the end of a high school year in five different classes: three CS oriented, one Chemistry oriented, and one Transportation&Logistics oriented. In one of the CS oriented classes, we did a very brief GM intervention. At the end of the school year, none of the classes showed a statistically significant change in their mindset. Interestingly, non-CS oriented classes showed a significant decrease in their computer science growth mindset. In the intervention class, students suggested, to stimulate a GM, the need for activities that are more creative, engaging, and related to the real world and their interests.;2019
Many children begin to learn to code in a self-directed context, such as by creating an animation, game or phone app. Recent research has begun to investigate and evaluate the results of this process: children's projects. However, little is known about the different trajectories novices have during the long-term process of self-directed programming learning. Our aim is to identify the existing types of trajectories and be able to determine a specific child's trajectory. If that trajectory does not lead to significant progress or continued motivation, we might be able to nudge them toward a different trajectory. We hypothesized that there may be several main types of trajectories. To explore this, we clustered children's programming progression in order to identify trends. We used a data set of Scratch programs for its large sample size and diverse population [1, 3]. We used Dr. Scratch's scoring of computational thinking skills as our initial feature set [2]. Our clustering analysis identified two main groups of users. The first group, 55.8% of users, generally progressed upward over time in their computational thinking skill score. The second group, 44.2% of users, showed little to no improvement over time. These preliminary results raise many questions about these two high-level groupings of trajectories of computational thinking skill demonstration in Scratch projects. In the future we want to further explore the trajectory clusters and what they could mean for supporting self-directed learning of programming.;2019
Many worldwide initiatives consider both creativity and computational thinking as crucial skills for future citizens, making them a priority for today's learners. We studied the associations between these two constructs among middle school students (N = 57), considering two types of creativity: a general creative thinking, and a specific computational creativity. We did so using learning analytics, specifically, by operationalizing a log-based assessment of computational creativity. We find some evidence for an association between Computational Creativity and Computational Thinking: Demonstrating originality in an early stage of the game is associated with succeeding in this stage relatively easily, however negatively associated with progressing farther in the game. We also find that Computational Creativity is better explained by a state- rather than a trait-model. No associations were found between Creative Thinking and Computational Thinking. Furthermore, we find some striking associations between the two measures of creativity.;2019
Micro:bits have educational purposes, these Single Board Computers (SBC) were based on BBC's idea and developed by their supervision. The idea behind it was to give students an insight into programming and engineering science, encouraging them to choose their field connected to the STEM areas. These microcontrollers are ideal for supporting kids in learning the foundations of programming playfully. With the extensions, students experience the basics of robotics too. The T@T Labor at Eotvos Lorand University has been working on experience-based education for decades. In the teacher training program and public education, the team is trying to use and introduce devices which can improve computational thinking skills. To achieve this, the University is coming up and organizes different projects. The Micro:bit botorkalas (Wandering micro:bits) was launched in October 2017. The aim of the program to send micro:bits as many schools as possible. Students can meet programming in a game-based way either inside the classroom or in after-school activities. Our 23 kits contain 10 micro:bits. The registered schools can use the kits free for a month, after that they must post the kit to the next. Till now (07/2019) over 15000 students in 160 schools met the kits. We prepared a research survey to assess the effectiveness and success of our initiative, and to get to know the teacher's motivation and impressions. In our article, we summarize and share our experiences on this device, based on those reports we got from the participating schools and the completed questionnaires (N = 78).;2019
National and state educational initiatives are increasingly prioritizing computer science and computational thinking as valued sets of skills and practices. However, despite ongoing efforts to broaden participation in computing, the field faces increasing underrepresentation of women and other racial and ethnic groups. In this paper, we argue that physical computing can provide rich, varied entryways into computing practices, and that kits that support social or collaborative use may be more compelling for underrepresented groups. We present the design of a scaled-up physical computing kit, called StegaCircuits, which we created to foster more social, exploratory introductions to computing. We present preliminary data collected during user tests at a Maker Faire that suggest StegaCircuits supports social introductions to physical computing through multi-user interaction. Finally, we highlight promising facets of the design that may positively impact cognitive and emotional responses to computing fields.;2019
New computer devices such as Makey Makey are proposed for children in primary education to learn computer programming. That way, students can interact with the computer with any conductive material, such as fruits or Play-Doh. The research question is whether playing with fruits as interactive devices can help primary education students learn concepts of computer programming. An experiment has been performed to answer the question with 62 primary education children. The results gathered provide significant evidence that students can learn more without using the fruits. Psychological factors may explain these results.;2019
Non-programmers, in particular, those who identify as female or gender-diverse, experience many factors that hinder their ultimate interest, participation, and success in programming. Prior work has delved into the problem of underrepresentation in STEM and specifically in Computing Education to uncover the barriers impacting these groups. Yet, attraction and retention remains a challenge. I argue that while formal learning pathways are critical to increasing participation of diverse learners, it is also integral to provide informal and non-formal learning opportunities as well. My research uses mixed-methods within a design-based research approach to offer and evaluate an active learning beginners' programming workshop called Code For Her. The workshop is designed to introduce females and gender-diverse individuals to web development. My goal is to analyze participants' experiences and progress within a trajectory framework, producing a narrative of their behaviors and attitudes over both short-term and longer-term intervals. In a pilot study of the workshop design, I observed increases in self-efficacy and positive attitudes, as well as changes in ways of thinking about computing. I note that the brief exposure of a workshop may seed understanding and skills in computation, but is not likely to convert non-programmers into programmers. Instead, I am exploring a new construct - computational grounding - that refers to participants' enhanced orientation toward computing-related behaviors. I will operationalize and study this construct using the workshop activities, thereby enhancing discussions of computational thinking.;2019
Nowadays, children and teenagers use technology products in an increasingly passive way. As simple consumers they cannot benefit from the opportunities of designing technology, which has a learning value. Educational Robotics (ER) programs are particularly effective in delivering contents of difficult disciplines: they can re-establish a balance between the learners and the technological devices, because the learners act as programmers and can develop their computational thinking. Therefore, we believe the school should upgrade its teaching methods, through the implementation of ER programs. This could be done without introducing a new subject, since technology could be considered like an interdisciplinary application module within pre-existing subjects. In this paper, we provide an overview of ER programs to share a practical guidance with those who want to plan educational workshops in their institutes. First, we analyze ER theoretical and epistemological fundamentals: ER has roots in recent and classic disciplines (psychology, cybernetics, robotics, cognitive science...), but it is also consistent with the principles of widely recognized pedagogies. Then, we describe successful Italian projects with a focus on regulations concerning ER programs. As a result of this analysis, we propose a brief guideline on the following topics: (a) needs analysis, (b) target segmentation, (c) objectives, (d) laboratory setting, (e) contents definition, (f) activities, (g) evaluation tools. Finally, we show that designing learning paths according to this method could also promote a more rigorous (and not only qualitative) evaluation, and then enhance both research and practice in this field.;2019
Nowadays, it is increasing the importance of developing skills related to the computational thinking at earlier stages of education, and the adoption of tools that implement the visual programming paradigm has been well succeeded in presenting introductory notions of programming from kindergarten to college. Such tools allows the user to program while manipulating blocks that represent programming languages instructions. iVProg is among this class of tools and was firstly implemented in Java and could be integrated to Moodie using iAssign. Due to technological evolution, iVProg also evolved to iVProg and its integration to Moodie is still possible by using the new version of iAssign that allow the integration of IITML stack packages to Moodie. In this paper we describe how this evolution takes place and presents iVProg functionalities as well as iAssign extension to include HTML stack packages into Moodie. In addition, we give some teaching support whenever integrated using iVProg with Moodie using iAssign.;2019
"Nowadays, society needs to keep up with the development of new technologies; the children of the new generation are seen as digital natives, although they are not necessarily able to use digital devices to their fullest potential. The Hahai project introduces the application of digital devices within the educational approach throughout the Hahai app. The aim of the project is to introduce digital skills and computational thinking through Digital Storytelling in primary schools; with the aim of developing problem-solving and the creative approach. Furthermore, these skills are extremely valuable in modern society and for the future. This paper explores the ideas behind the creation of the project, the development of the app, the testing in first-grade classes of primary school, the statistics obtained from the latter and the final conclusions.";2019
Nowadays, the ability to code is becoming increasingly important in industry and is often mentioned as a crucial skill for future employment. In maker culture, the ability to program along with other technical skills often exceeds this limitation and also includes fun activities through personally fabricated projects. In this paper, we examine computational design projects that are intended to be 3D printed and could potentially introduce coding learning actions. To find computationally rich designs that are appealing to learners, we conducted data analysis on an online makerspace which exploits computational design tools for personal fabrication. We found the most liked designs of the online makerspace and examined which of them included programming features (iterations, conditional statements and functions/modules) and could foster computational thinking elements such as abstract and algorithmic thinking, pattern recognition, and decomposition. The most liked category of designs was Figures (of animals and popular animation characters among other things) which surprisingly often also included programming features. We discuss the implications of our research for technologists, academics and teachers who wish to include 3D modeling and printing in coding learning activities.;2019
One of the most challenging tasks in computer science and similar courses consists of both teaching and learning computer programming. Usually this requires a great deal of work, dedication, and motivation from both teachers and students. Accordingly, ever since the first programming languages emerged, the problems inherent to programming teaching and learning have been studied and investigated. The theme is very serious, not only for the important concepts underlying computer science courses but also for reducing the lack of motivation, failure, and abandonment that result from students frustration. Therefore, early identification of potential problems and immediate response is a fundamental aspect to avoid student's failure and reduce dropout rates. In this paper, we propose a machine-learning (neural network) predictive model of student failure based on the student profile, which is built throughout programming classes by continuously monitoring and evaluating student activities. The resulting model allows teachers to early identify students that are more likely to fail, allowing them to devote more time to those students and try novel strategies to improve their programming skills.;2019
One way to increase access to education on computing is to integrate computational thinking (CT) into K12 disciplinary courses. However, this challenges teachers to both learn CT and decide how to best integrate CT into their classes. In this position paper, we present PRADA, an acronym for Pattern Recognition, Abstraction, Decomposition, and Algorithms, as a practical and understandable way of introducing the core ideas of CT to non-computing teachers. We piloted the PRADA model in two, separate, week-long professional development workshops designed for in-service middle and high school teachers and found that the PRADA model supported teachers in making connections between CT and their current course material. Initial findings, which emerged from the analysis of teacher-created learning materials, survey responses, and focus group interviews, indicate that the PRADA model supported core content teachers in successfully infusing CT into their existing curricula and increased their self-efficacy in CT integration.;2019
"Online (virtual and remote) experiments are the essential part of the contemporary science, technology, engineering and mathematics (STEM) education. Although online experiments are broadly employed in higher and secondary school class instructions, they should still be presented in a primary school to teachers, education administration, and designers such as curriculum developers and assessment creators. This paper focuses on the planning and embedding online laboratories into primary school science curriculum. The challenges of implementation of different types of laboratories in a practical context are discussed as well. The integration of the laboratories is demonstrated using the Go-Lab ecosystem. The ecosystem consists of more than 600 online laboratories, 40 inquiry applications, 940 inquiry learning spaces (ILS) that are presented with more than 30 languages (as at the time of writing this paper). Moreover, the Go-Lab platform supports teachers to realize science education by offering interactive domain-related applications that enable inclusive, active and engaged learning, providing students with tools that support these forms of learning and train 21st century skills such as digital literacy, computational thinking, research culture, and creativity. The modernization of the school education encourages teachers to start modelling such students skills from their very early age. The paper shows all phases of embedding the laboratories into the inquiry environment. It describes several demanded activities that a teacher shall perform. It includes (1) mapping the lesson; (2) defining the lesson goals where the lab will be used; (3) establishing the type of the online experiments that should be embedded; (4) defining critical points of the usage of the experiment; (5) creating usage guide in a language suitable for the student age. The authors believe that the paper will be useful for primary school teachers as well as for developers of the online laboratories for elementary school students.";2019
Online learning communities are predicated on the assumption that social interaction among participants will lead to learning. Yet, research has shown that not all interactions result in learning and that there is a need to develop a more nuanced understanding of the nature of activities in online communities and their relationship with learning. We analyzed data from the Scratch (TM) online learning community, a platform designed to teach Computational Thinking (CT) through block-based activities, using the Differentiated Overt Learning Activities (DOLA) framework to assess learning. We found that users who engaged in constructive activities demonstrated higher learning, as illustrated by the complexity of their contributions, compared to users who were merely active on the platform. We compared users across two sub-communities within Scratch and found that participation and contributions across the two domains resulted in different learning outcomes, showcasing the effect of context on learning within online communities.;2019
Openness is an aspect of short tasks that can be used as an indicator of whether creativity is a necessity for solving a task efficiently When designing a task, it is also possible to change it to be more open and thus to require more creativity but then it is likely to require different computational thinking competences.;2019
Over the last few years, the integration of coding activities for children in K-12 education has flourished. In addition, novel technological tools and programming environments have offered new opportunities and increased the need to design effective learning experiences. This paper presents a design-based research (DBR) approach conducted over two years, based on constructionism-based coding experiences for children, following the four stages of DBR. Three iterations (cycles) were designed and examined in total, with participants aged 8-17 years old, using mixed methods. Over the two years, we conducted workshops in which students used a block-based programming environment (i.e., Scratch) and collaboratively created a socially meaningful artifact (i.e., a game). The study identifies nine design principles that can help us to achieve higher engagement during the coding activity. Moreover, positive attitudes and high motivation were found to result in the better management of cognitive load. Our contribution lies in the theoretical grounding of the results in constructionism and the emerging design principles. In this way, we provide both theoretical and practical evidence of the value of constructionism-based coding activities.;2019
Over the past decade, politicians, leaders, and pundits have called for computing and computer science education opportunities to be made available earlier and earlier. Such calls have led to the creation of a wide variety of offerings for students at middle-school and even elementary levels, including summer code camps targeted at middle-school students. Such camps often emphasize fun aspects of computing, such as games and robots. In contrast, research at the collegiate level suggests that meaningful applications of computing, such as computing for social good, are more successful at building and sustaining interest, particularly among students from groups traditionally underrepresented in computing. In this project, we developed and offered a summer camp that draws upon ideas and approaches from the digital humanities (DH), which explore the use of algorithms and computation in support of broader humanistic inquiry. Because DH reveals different ways to apply algorithmic and computational thinking, DH has the potential to attract students who might not otherwise consider computing. In this paper, we introduce central issues in the digital humanities, explain the rationale for the camp design, describe the camp curriculum, and reflect on successful and less successful aspects of the camp. Among other things, we consider how to introduce digital humanities topics to students who have not yet heard the term humanities and explore the utility of such topics for this age group. We also present preliminary data on the short-term effects of the camp on students' self-efficacy and interest in computing.;2019
"Parents play an influential role in the lives of children studying in elementary school, and their attitudes toward education have a considerable influence on children's attitudes. In the context of computer programming education, parents' ignorance could affect their children's education and attitudes towards education adversely. A promising way to support parents is through informal workshops with their children, in which the former are exposed to the subjects and skills that the children will be learning. This study examined the impact of different types of workshop activities on parents' concerns regarding various aspects of their children's programming education. Three types of workshops were organized, each characterized by a particular activity; including a wooden robot with coding blocks, a robotics toy with visual programming language, and visual language. Data were collected from parents before and after their participation in these workshops. The results from the analysis of the data revealed that the impact of the three activities on the parents varied, with all three activities and workshops having a positive impact on the attitudes and confidence levels of parents in supporting their children at home with technology-related education in addition to enhancing their understanding of programming education.";2019
Patent is the most high-level document that involved technical inventive solution and legal value for intellectual property protection. Every patent documented will explained about their system in solving a specific problem. This document has critical information that can be used for various purposes such as patent innovation, technology forecasting and developing patent strategy. This paper is focusing to explore the methodology in using the innovation to enhance patent innovation and competitiveness. The proposed methodology uses computational thinking model and TRIZ methodology. It consists of innovative processes such as anatomization, schematization and tabulation of a patent. This research shows new approach to create innovation and develop analytics study of case study patent for continuous improvement and strategy development.;2019
Physical computing has gained popularity as a hands-on approach to introduce computing. Young students can create tangible computing artifacts that connect across the curriculum subjects on a wide range of kid-friendly devices. However, physical computing can place a higher demand on cognitive capacity than traditional screen-based environments since learning involves the more complex tasks of programming and constructing hardware components and circuits. In this paper, we present an instructional design approach to address the challenges of teaching physical computing for middle school students. A hands-on project is modularized into tasks that isolate the software or hardware workloads. The tasks are then optimized into a sequence to minimize context switches between programming and hardware construction. Students' individual progress over a task sequence is monitored by group and peer checkpoints. We conducted a preliminary study among three random groups of grade 5-7 students working on activities of different levels of hardware complexity. The results indicate that our modular approach help students maintain a positive attitude and persist over difficulties while learning complex physical computing tasks.;2019
Play-based learning improves the health of young children under the age of eight. It is essential for a child's physical, social, emotional well-being and cognitive development. Screen time and digital devices, on the other hand, remain a contentious issue at this critical period of rapid brain development. With this in mind, the increase of computing education curricula calls for cognitively appropriate pedagogy at this age and stage of a child's formal education. This thesis explores the early play experiences of one hundred young children participating in an introductory programming course. Survey data on participants early play experiences and socio-economic status (SES) was gathered and analysed in relation to their progress on the course. The lessons, delivered by non-specialist class teachers immerse children in the core concepts of computing science. Next children learn about the tools that apply the core concepts before creating solutions. Emerging findings show no relationship between participants SES status and progress. However, early play experiences do matter because the cognitive demands of block programming environments are similar to those developed through play for early literacy.;2019
PopBots is a hands-on toolkit and curriculum designed to help young children learn about artificial intelligence (AI) by building, programming, training, and interacting with a social robot. Today's children encounter AI in the forms of smart toys and computationally curated educational and entertainment content. However, children have not yet been empowered to understand or create with this technology. Existing computational thinking platforms have made ideas like sequencing and conditionals accessible to young learners. Going beyond this, we seek to make AI concepts accessible. We designed PopBots to address the specific learning needs of children ages four to seven by adapting constructionist ideas into an AI curriculum. This paper describes how we designed the curriculum and evaluated its effectiveness with 80 Pre-K and Kindergarten children. We found that the use of a social robot as a learning companion and programmable artifact was effective in helping young children grasp AI concepts. We also identified teaching approaches that had the greatest impact on student's learning. Based on these, we make recommendations for future modules and iterations for the PopBots platform.;2019
Programming education will be compulsory at elementary schools from fiscal 2020 in Japan. Programming education in elementary school does not learn programming language coding, but computational thinking. This paper describes a new programming education using stickers that combine the features of unplugged programming and physical programming.;2019
Programming education will be compulsory in Japanese elementary schools beginning in 2020. Elementary students will be required to acquire the ability to objectively analyze, deconstruct, and organize a task, and to reconstruct the process to solve the problem as a sequence of feasible procedures. They must also acquire the ability to grasp the current status as a starting point, set specific targets for achievement, and take the necessary steps to reach their goal. These abilities, referred to as computational thinking, are essential skills for children who will live in Society 5.0, which is the phase beyond Industry 4.0. In this paper, we outline the background and aim of compulsory programming education in Japanese elementary schools. We also explain our prototype for education material to support the teaching of computational thinking to elementary students, and we report the results and findings of an evaluation experiment conducted in one public elementary school in Japan.;2019
Programming has become a crucial skill in today's world. Technology and computers are basically part of anything now. President Obama once referred to the importance of children learning programming: I do not want our young people to just be consumers, I want them to be producers of this technology and to understand it, to feel like they are controlling it, as opposed to it controlling them. It is thus an increasing need for an individual to know how to write their own programs. With the increasing dependency on computation, one can anticipate such skills being a requirement for most jobs in the coming years. There is a lot of effort done in this area, however most of them focused on either software or hardware track. The aim of this work is to test if using a hybrid approach for teaching K-12 students programming by combining both software and hardware techniques is more effective than using a singleton approach.;2019
Programming is more a tool for pupil development than an educational goal. A description of the context of the creation of the textbook for programming could help to answer some questions leading us too far astray from the theory of concept-building programming education described in my article.;2019
Programming skills and computational thinking are fundamental concerns in professional training in Science, Technology, Engineering and Mathematics (STEM) disciplines. In spite of this, in the Chilean higher education system, as in most parts of the world, teaching programming is a challenging endeavor, partly because the majority of freshmen students in STEM undergraduate programs have not been introduced to the fundamentals of the discipline and its applications in K12 education. Therefore, students' attitudes, engagement, and autonomous learning can make a difference in how students in STEM disciplines in higher education face their first programming course. In the present study, we carried out measurement of variables associated to these constructs involving a sample of 1694 freshmen of seventeen STEM programs in a Chilean research university. Relevant differences were found among different STEM programs, and by student gender. Implications of the results obtained and future research avenues are discussed.;2019
Proponents of computing education have long stressed the value of computing for learning in other disciplines. Much of the research towards this end has focused on supporting learning in science, engineering, and mathematics (or STEM). However, a trend towards computing in non-STEM disciplines is growing, yet the research base is more limited. We add to this emerging area of research by investigating the potential for integrating computing and literacy education. This paper reports the results of a six-week intervention during an after-school program in a British primary school. We describe the development of a curriculum unit and report on the first iterative cycle in a design-based research project. Our analysis shows that integrating programming and literacy activities supported novice learners in areas of computing such as algorithm design and program execution through a combination of short problem-based tasks and longer project-based activities. Likewise, programming supported learners in creating digital stories by visualizing narrative structure though some caveats were found. We discuss the results of this study and implications for future work in this area.;2019
Publicised by Wing and later expanded on, computational thinking purports to be the foundation of thought for coming generations, an indispensable skill-set that compulsory education must provide. The target article uses small tasks to develop skills relevant to computational science and computing, and explores the student interaction with these tasks. Useful skills may be developed by these students, but the article does not explicitly connect these tasks to computational thinking skills or competencies. This causes the reader to ask the question: are they developing computational thinking, or some other set of computer-related skills? A more fundamental question, and one beyond the scope of the target article, is what are the skills that are ultimately unique for computational thinking?;2019
"Purpose - Computational thinking (CT) is widely considered to be an important component of teaching generalizable computer science skills to all students in a range of learning environments, including robotics. However, despite advances in the design of robotics curricula that can teach CT, actual enactment in classrooms may often fail to reach this target. This study aims to understand whether the various instructional goals teachers' hold when using these curricula may offer one potential explanation for disparities in outcomes. Design/methodology/approach - In this study, the authors examine results from N = 206 middle-school students' pre- and post-tests of CT, attitudinal surveys and surveys of their teacher's instructional goals to determine if student attitudes and learning gains in CT are related to the instructional goals their teachers endorsed while implementing a shared robotics programming curriculum. Findings - The findings provide evidence that despite using the same curriculum, students showed differential learning gains on the CT assessment when in classrooms with teachers who rated CT as a more important instructional goal; these effects were particularly strong for women. Students in classroom with teachers who rated CT more highly also showed greater maintenance of positive attitudes toward programming. Originality/value - While there is a growing body of literature regarding curricular interventions that provide CT learning opportunities, this study provides a critical insight into the role that teachers may play as a potential support or barrier to the success of these curricula. Implications for the design of professional development and teacher educative materials that attend to teachers' instructional goals are discussed.";2019
Purpose - Despite the popularity of the Computational Thinking (CT) paradigm and the call for broad social diffusion of CS fundamentals, the authors argue that the concept is inherently limited and limiting and does not sufficiently convey an understanding of how to enable people to create with computational technologies. The authors suggest an alternate paradigm, procedural creativity, that calls for the development of conceptual creative spaces governed by procedurally generative principles. The authors also call for game development to be the focus of procedural creativity pedagogy. Design/methodology/approach - The authors first discuss the limitations of the CT paradigm, focusing, in particular, on the issue of abstraction and representation as opposed to execution and action. The authors then define procedural creativity in more detail. Following that, they discuss the use of game development as pedagogy, with a focus on Margaret Boden's notion of conceptual creative spaces. Findings - CT is limited because it focuses overly on solutions to computational problems, because it is tied too closely with economic concerns and because it focuses on abstraction at the cost of action. Procedural creativity, on the other hand, focuses on the individual's capacity for personal expression with the computer and on the generative capacity of code in action. Game development is in ideal platform for procedural creativity because it emphasizes the development of creative domains and conceptual spaces. Originality/value - This paper offers a challenge to the CT status quo and presents a novel way forward for understanding computation as a creative practice.;2019
Purpose - Many initiatives are seeking to engage children in learning to code. However, few studies have examined how children's engagement in learning and using coding develops over time. This study aims to seek young people's perspectives on what they viewed as important in their long-term participation in a coding community. Design/methodology/approach - This study identified youth with a high level of participation and who demonstrated emergent leadership in the Scratch online community. Using methods from qualitative research on youth development, individual interviews were conducted in which these youth were asked about memorable moments in their participation and how these experiences influenced them. Findings - While each young person described a unique pathway and perspective, this study identified key experiences that motivated their participation, influenced their development and inspired their emergent leadership. These experiences included opportunities to learn through exploration, to receive feedback from peers, to engage in creative collaboration and to contribute to the community. Practical implications - This study discussed these findings in light of previous research on youth development, and it suggests that building on practices and principles from research on youth programs can help more young people become engaged in developing broader skills with coding. Originality/value - Youth highlighted experiences that enabled them to express their ideas, to build relationships, to help others and to see themselves in new ways. Their perspectives expand beyond the predominant focus of coding initiatives on computational thinking and problem-solving skills to also support social, leadership and identity development.;2019
Purpose - This paper aims to be a think piece that promotes discussion around the design of coding toys for children. In particular, the authors examine three different toys that have some sort of block-based coding interface. The authors juxtapose three different design features and the demands they place on young children learning to code. To examine the toys, the authors apply a framework developed based on Gibson's theory of affordances and Palmer's external representations. The authors look specifically at the toys: interface design, intended play scenario and representational conventions for computational ideas. Design/methodology/approach - As a research team, the authors have been playing with toys, observing their own children play with the toys and using them in kindergarten classrooms. In this paper, the authors reflect specifically on the design of the toys and the demands they place on children. Findings - The authors make no claims about whether one toy/design approach is superior to another. However, the differences that the authors articulate should serve as a provocation for researchers and designers to be mindful about what demands and expectations they place on young children as they learn to code and use code to learn in any given system. Research limitations/implications - As mentioned above, the authors want to start a discussion about design of these toys and how they shape children's experience with coding. Originality/value - There is a push to get coding and computational thinking into K-12, but there is not enough research on what this looks like in early childhood. Further, while research is starting to emerge on block-based programming vs text-based for older children and adults, little research has been done on the representational form of code for young children. The authors hope to start a discussion on design of coding toys for children.;2019
Purpose - This paper aims to investigate what factors influence women's meaningful and equitable persistence in computing and technology fields. It draws on theories of learning and equity from the learning sciences to inform the understanding of women's underrepresentation in computing as it investigates young women who showed an interest in computing in high school and followed-up with them in their college and careers. Design/methodology/approach - The mixed-methods approach compares data from quantitative surveys and qualitative focus groups and interviews. The sample comes from database of 1,500 young women who expressed interest in computing by applying for an award for high schoolers. These women were surveyed in 2013 and then again in 2016, with 511 women identifying themselves as high schoolers in 2013 and then having graduated and pursued college or careers in the second survey. The authors also conducted qualitative interviews and focus groups with 90 women from the same sample. Findings - The findings show that multiple factors influence women's persistence in computing, but the best predictor of women's persistence is access to early computing and programming opportunities. However, access and opportunities must be evaluated within broader social and contextual factors. Research limitations/implications - The main limitation is that the authors measure women's persistence in computing according to their chosen major or profession. This study does not measure the impact of computational thinking in women's everyday lives. Practical implications - Educators and policymakers should consider efforts to make Computer Science-for-All a reality. Originality/value - Few longitudinal studies of a large sample of women exist that follow women interested in computing from high school into college and careers particularly from a critical educational equity perspective.;2019
Purpose - This research aims to explore how textual literacy and computational literacy can support each other and combine to create literacies with new critical possibilities. It describes the development of a Web application for interactive storytelling and analyzes how its use in a high-school classroom supported new rhetorical techniques and critical analysis of gender and race. Design/methodology/approach - Three iterations of design-based research were used to develop a Web application for interactive storytelling, which combines writing with programming. A two-week study in a high-school sociology class was conducted to analyze how the Web application's textual and computational affordances support rhetorical strategies, which in turn support identity authorship and critical possibilities. Findings - The results include a Web application for interactive storytelling and an analytical framework for analyzing how affordances of digital media can support literacy practices with unique critical possibilities. The final study showed how interactive stories can function as critical discourse models, simulations of social realities which support analysis of phenomena such as social positioning and the use of power. Originality/value - Previous work has insufficiently spanned the fields of learning sciences and literacies, respectively emphasizing the mechanisms and the content of literacy practices. In focusing a design-based approach on critical awareness of identity, power and privilege, this research develops tools and theory for supporting critical computational literacies. This research envisions a literacy-based approach to K-12 computer science which could contribute to liberatory education.;2019
Purpose The purpose of this paper is to posit that coding should be considered as a critical part of new literacies. Teacher educators should first adopt the new literacies perspective, and then prepare pre-service teachers to teach both traditional literacy and new literacies skills, especially preparing them how to weave coding into K-5 literacy curricula to cultivate younger learners' new ways of expressions and computational thinking skills. To facilitate this educational transformation, low-cost Web 2.0 tools and apps were introduced as one practical approach, along with some literacy lesson ideas to help teacher educators and pre-service teachers begin to integrate coding into the K-5 literacy curricula. Design/methodology/approach This paper is a viewpoint paper. Findings A table of low-cost Web 2.0 tools was presented with sample lesson ideas. Originality/value More than ever, coding breaks the traditional definition of literacy as paper-based reading and writing. It empowers students to read, write and create with multimodality on multiple platforms. Weaving coding into the literacy curricula offers the window to promote both computational thinking and new literacies skills. Teacher educators, among all other stakeholders, should begin the efforts to prepare pre-service teachers to weave coding into the literacy curricula and other content areas in the teacher educations programs now.;2019
Purpose This paper aims to present a novel pedagogical model that aims at bridging creativity with computational thinking (CT) and new media literacy skills at low-technology, information-rich learning environments. As creativity, problem solving and collaboration are among the targeted skills in twenty-first century, this model promotes the acquisition of these skills towards a holistic development of students in primary and secondary school settings. In this direction, teaching students to think like a computer scientist, an economist, a physicist or an artist can be achieved through CT practices, as well as media arts practices. The interface between these practices is imagination, a fundamental concept in the model. Imaginative teaching methods, computer science unplugged approach and low-technology prototyping method are used to develop creativity, CT, collaboration and new media literacy skills in students. Furthermore, cognitive, emotional, physical and social abilities are fostered. Principles and guidelines for the implementation of the model in classrooms are provided by following the design thinking process as a methodological tool, and a real example implemented in a primary school classroom is described. The added value of this paper is that it proposes a pedagogical model that can serve as a pool of pedagogical approaches implemented in various disciplines and grades, as CT curriculum frameworks for K-6 are still in their infancy. Further research is needed to define the point at which unplugged approach should be replaced or even combined with plugged-in approach and how this proposed model can be enriched. Design/methodology/approach This paper presents a pedagogical model that aims at bridging creativity with CT, collaboration and new media literacy skills. Findings The proposed model follows a pedagogy-driven approach rather a technology-driven one as the authors suggest its implementation in low-tech, information-rich learning environments without computers. The added value of this paper is that it proposes a novel pedagogical model that can serve as a pool of pedagogical approaches and as a framework implemented in various disciplines and grades. A CT curriculum framework for K-6 is an area of research that is still in its infancy (Angeli et al., 2016), so this model is intended to provide a holistic perspective over this area by focusing how to approach the convergence among CT, collaboration and creativity skills in practice rather than what to teach. Based on literature, the authors explained how multiple moments impact on CT, creativity and collaboration development and presented the linkages among them. Successful implementation of CT requires not only computer science and mathematics but also imaginative capacities involving innovation and curiosity (The College Board, 2012). It is necessary to understand the CT implications for teaching and learning beyond the traditional applications on computer science and mathematics (Kotsopoulos et al., 2017) and start paying more attention to CT implications on social sciences and non-cognitive skills. Though the presented example (case study) seems to exploit the proposed multiple moments model at optimal level, empirical evidence is needed to show its practical applicability in a variety of contexts and not only in primary school settings. Future studies can extend, enrich or even alter some of its elements through experimental applications on how all these macro/micromoments work in practice in terms of easiness in implementation, flexibility, social orientation and skills improvement. Originality/value The added value of this paper is that it joins learning theories, pedagogical methods and necessary skills acquisition in an integrated manner by proposing a pedagogical model that can orient activities and educational scenarios by giving principles and guidelines for teaching practice.;2019
Purpose This study aims to explore the effects of an alternative learning environment, such as the video game making (VGM) within science content, on computational thinking (CT) skills development and student performance. Design/methodology/approach A didactic intervention was performed for five weeks. Two student groups were taught the same computational concepts in two ways. One group was taught by constructing a video game within science content to practice science and computing curriculum while the other group constructed appropriately designed projects to practice only the computing curriculum. Additionally, the students constructed a pretest project before the beginning of the intervention and a post-test project after its end. Results were based on quantitative and qualitative code analysis and interviews from the students. Findings VGM within science content resulted in projects with more CT skills and also supported students to effectively apply their acquired coding skills, after the end of the intervention. Originality/value Although VGM has been successfully applied to teach science content, this study explored the potential influence of this learning environment on CT skills development and coding fluency. Such interdisciplinary educational environments could be applied in the typical school settings to promote a plethora of skills and academic contents.;2019
Purpose This study aims to investigate the relationship between the personal traits and computational thinking skills of second graders within the context of robotics activities. Design/methodology/approach Through literature review, a research model and hypotheses were tested with 122 second graders after robotic activities. Findings The hypothesized model showed that learning preference, intrinsic motivation and self-efficacy were the main predictors of coding achievement and computational thinking skills, while no direct relationship was found between learning preference, intrinsic or extrinsic motivation. The final path analysis revealed that intrinsic and extrinsic motivation predict self-efficacy, self-efficacy predicts coding achievement and coding achievement predicts computational thinking skills. Another important finding was the strong impact of self-efficacy on coding achievement, as well as computational thinking skills. Results are interpreted with reference to implications for potential methods of improving computational thinking skills when using robotics in the lower grades in elementary schools. Research limitations/implications - This study not only examined these relationships but also proposed, tested and built a research model containing a wide range of personal traits based on path analysis and multiple regression analysis, which, to the best of the researchers' knowledge, has not been investigated in the current literature. Practical implications - As reflected in the final research model, self-efficacy played an important role in impacting second grader's coding achievement and computational thinking skills. Originality/value Few studies have investigated the various relationships in the context of robotics instruction in elementary schools as in this study. Given the increasing popularity of robotics education in elementary schools, the re-examination and identification of the pivotal role of self-efficacy in predicting second graders' learning of coding and computational thinking skills have important implications for the implementation of robotics education.;2019
Rapid technological advances have made computational skills more important toc fully participate in society and our global economy, and as a result, computational thinking has earned attention in K-12 education as a means to preparing the future workforce. With an already congested curriculum, one approach is to integrate computational thinking into core classes that all students already take. This chapter reports on the integration of computational thinking in middle school chemistry classes. We focus on one teacher's pedagogical strategies employed in each of the two integrated domains in this case, computational thinking and science. We describe variations in the teacher's approach across the two domains, noting that certain approaches to pedagogy and classroom discourse align with computational thinking. Such strategies were observed less frequently when the instruction focused on the less familiar domain of computational thinking. Second, it cannot be sufficiently emphasized that programming and computational thinking are entirely new fields for most teachers and teachers need considerable opportunity to learn this new domain to optimize its integration.;2019
"Recently, computational thinking has experienced a resurgence, due to the scientific and educational community has placed its focus of interest on it. However, there is a lack of consensus about what it is and how to work it. That has caused that the approach to computational thinking is addressed in different directions in educational fields. From technical approaches, the potential to be integrated in teachers' teaching strategy could be not considered; from transversal approaches, the possibilities in the field of didactics are included, but they incorporate different visions that makes it application difficult. In addition, new perspectives are incorporated, such as unplugged computational thinking. Given this panorama, it is evident the need to address from the pedagogy, and specifically from the Educational Technology field, the topic of computational thinking, starting from the possibilities it has related to digital literacy and as a means to express ideas with technology; to the possibilities to be included in educational contexts around the use of coding and robotics, highlighting that the important aspect is not how to learn robotics, but how to learn with robotics.";2019
Research has shown that educational robotics can be an effective tool to increase students' acquisition of knowledge in the subjects of science, technology, engineering, and mathematics and promote, at the same time, a progression in the development of computational thinking (CT) skills in K-12 (kindergarten to 12th grade) education. Within this research field, the present study first sought to assess the effect of a robotics laboratory on the acquisition of CT-related skills in primary school children. The study also aimed to compare the magnitude of the effect of the laboratory across third- and fourth-grade students. For the purpose of the study, a quasi-experimental post-test-only design was adopted, and a group of 51 students, from third- and fourth-grade classrooms, participating in the robotics laboratories, were compared to a control group of 32 students from classrooms of the same grades. A set of Bebras tasks was selected as an overall measure of CT skills and was administered to children in both the intervention and control groups. Overall, the results showed that programming robotics artefacts may exert a positive impact on students' learning of computational thinking skills. Moreover, the effect of the intervention was found to be greater among third-grade children.;2019
Robotics has been advocated as an emerging approach to engaging K-12 students in learning science, technology, engineering, and mathematics (STEM). This study examined the impacts of a project-based STEM integrated robotics curriculum on elementary school students' attitudes toward STEM and perceived learning in an afterschool setting. Three elementary school teachers and 18 fourth to sixth graders participated in an eight-week-long program. Quantitative and qualitative data were collected and analyzed, and showed students' attitudes toward math improved significantly at the end of the robotics curriculum. Three specific areas of perceived learning were identified, including STEM content learning and connection, engagement and perseverance, and development and challenge in teamwork. The findings also identified the opportunities and challenges in designing a STEM integrated robotics afterschool curriculum for upper elementary school students. Implications for future research studies and curriculum design are discussed.;2019
Robotics in education has special relevance in current digital society where students should know how to deal with technology. In this paper, it is presented an educational experiment in the mobile robotics domain. The referred experiment was part of a summer camp, which took place at the Polytechnic Institute of Braganca Portugal, being its technological aspects related with mobile robotics. Other than the technological aspects, the students participated in many different cultural and social activities, having the opportunity to know the city of Braganca and also to know different persons, mainly students, professors, researchers and laboratory technicians. The applied approach in the summer camp was a challenge based learning methodology, being involved in the experiment 3 professors, 4 monitors, working with a group of 16 secondary school students. The described experiment was planned as an activity of the RoboSTEAM - Integrating STEAM and Computational Thinking development by using robotics and physical devices ERASMUS+ Project.;2019
Scratch and App Inventor are two of the most widely used block-based programming languages for young students. These are educational languages which allow students to program easily by dragging and dropping their code blocks. One question that arises in relation to these educational languages is which of them would be more helpful in fostering computational thinking. It is difficult to answer this question because each language has its own advantages. In this paper, we propose a novel rubric based on Dr. Scratch for assessing both Scratch and App Inventor projects in terms of computational thinking concept learning. We crawled teachers' and students' open and popular projects and automatically calculated their effectiveness scores with regard to learning computational thinking concepts based on our rubric. The experimental results show that (1) Scratch projects scored higher on average in Parallelism, Synchronization and Flow Control, while App Inventor projects scored higher on average in User Interactivity and Data Representation. The results also show that (2) in many cases, large programs with numerous lines of code scored high in all areas of computational thinking concepts.;2019
Scratch is a visual programming language developed by MIT and designed to facilitate the teaching of programming to children. The first version appeared in 2005 and since then it has been used in different educational levels and with diverse objectives: to improve the learning of some subjects as mathematics or music, to work on computational thinking, to reduce gender differences in technical careers and to facilitate the learning of programming in post secondary education, among other uses for teaching and learning purposes. The use of Scratch has increased over the years and, accordingly, the scientific papers that present and discuss the educational experiences around it have grown too. In this article we present a scoping review that we are conducting of all the scientific literature around Scratch from the years 2005 to 2018. We explain the procedure followed to perform the search and selection of articles and the categorization of the scientific production. Some preliminary results are also presented.;2019
Scratch users often struggle to detect and correct 'code smells' (bad programming practices) such as duplicated blocks and large scripts, which can make programs difficult to understand and debug. These 'smells' can be caused by a lack of abstraction, a skill that plays a key role in computer science and computational thinking. We created Pirate Plunder, a novel educational block-based programming game, that aims to teach children to reduce smells by reusing code in Scratch. This work describes an experimental study designed to measure the efficacy of Pirate Plunder with children aged 10 and 11. The findings were that children who played the game were then able to use custom blocks (procedures) to reuse code in Scratch, compared to non-programming and programming control groups.;2019
"Several programs have been developed worldwide to improve children's executive functions (EFs). Yet, the role played in EF development by learning activities embedded in the school curriculum has received scarce attention. With two studies, we recently tested the effects of computational thinking (CT) and coding-a new element of the primary school curriculum-on the development of children's EFs. CT stimulates the ability to define a clear and orderly sequence of simple and well-specified steps to solve a complex problem. We conjecture that CT skills are associated to such EF processes as response inhibition and planning. In a first between-group cluster-randomized controlled trial, we tested the effects of 1-month coding activities on 76 first graders' planning and response inhibition against those of 1-month standard STEM activities of a control group. In a second study, we tested the effects of 1-month coding activities of 17 second graders in two ways: within group (longitudinally), against 7 months of standard activities experienced by the same children (experimental group); and between groups, in comparison to the effects of standard STEM activities in a control group of 19 second graders. The results of the two studies show significant benefits of learning to code: children exposed to coding improved significantly more in planning and inhibition tasks than control children did. The longitudinal data showed that improvements in planning and inhibition skills after 1 month of coding activities (eight lessons) were equivalent to or greater than the improvement attained after 7 months of standard activities. These findings support the hypothesis that learning CT via coding can significantly boost children's spontaneous development of EFs.";2019
Short-term outreach interventions are conducted to raise young students' awareness of the computer science (CS) field. Typically, these interventions are targeted at K-12 students, attempting to encourage them to study CS in higher education. This study is based on a series of extra-curricular outreach events that introduced students to the discipline of computing, nurturing creative computational thinking through problem solving and game programming. To assess the long-term impact of this campaign, the participants were contacted and interviewed two to five years after they had attended an outreach event. We studied how participating in the outreach program affected the students' perceptions of CS as a field and, more importantly, how it affected their educational choices. We found that the outreach program generally had a positive effect on the students' educational choices. The most prominent finding was that students who already possessed a maintained situational interest in CS found that the event strengthened their confidence in studying CS. However, many students were not affected by attending the program, but their perceptions of CS did change. Our results emphasize the need to provide continuing possibilities for interested students to experiment with computing-related activities and hence maintain their emerging individual interests.;2019
Since 2006, there has been an ever-increasing momentum in computational thinking educational policy initiatives (CTEPI) across the globe. In this paper, the representative CT educational policy initiatives viewed through the lens of international perspectives and cultural contexts were examined, compared and discussed. Reports, white papers, and policy documents were widely explored, selected through established criteria, and eventually analyzed by the research team. It was found that CTEPI has two characteristics-diverse CT terminology and diverse current status across the globe. Also, curriculum reform and enrichment programs represented two major approaches for CTEPI across the globe. Finally, four development trends emerged from an analysis of CT education policies and initiatives: collaboration and partnerships across sectors and national boundaries, rationales taking a broad perspective and referring to common themes, a redefinition of digital competence, and an emphasis on broadening access and interest.;2019
Since digital transition, the acceptance of computer tools is rather poorly perceived by architects. The question today, as Antoine Picon points out in his book  Digital Culture and Architecture, is no longer to know if digital is a good or a bad thing for design. But rather to understand where the architecture of tomorrow is heading. With these technological innovations, machine learning algorithms, AIs, the only certainty we can have, it's this change in our way of thinking will be important. In order to compare the importance and innovation of digital, these new technologies extend well beyond mere formal and structural qualities. Some conceptual experiments are developed in case studies, to confront the logical thoughts of mental thinking and the more contemporary thoughts of computational thinking. This conceptual approach will lead us to contemporary thinking. From these digital instruments, how can we design such a project today?;2019
Since we live in a digital age, many (not only educational) institutions, from kindergartens to universities, use digital technology (touch screen devices, interactive whiteboards, robotic technology), creating an opportunity to incorporate this technology into elementary and pre-school education and use it to help children develop basic digital competencies such as information and data literacy, communication and cooperation, problem-solving skills and computational and algorithmic thinking. The main curriculum documents for all educational levels (i.e. for pre-school, primary and secondary education) are constantly being updated, with the topics of digital literacy and digital competencies becoming more and more relevant. Technology makes it easier to develop these competencies through the use of didactic games and involuntary learning. Developing computational and algorithmic thinking from an early age (starting in kindergarten and continuing in elementary school) is key to being successful in the next stages of life - from further education to personal life. Problem-solving skills, logical and abstract thinking, creativity and originality are the most appreciated skills today. The paper introduces activities for various primary school subjects, which use the ever more popular robotic toy Bee-Bot to help children develop the aforementioned competencies.;2019
Skills are latent in nature, but all this time the measurement uses a ranking scale with certain criteria called ordinal data. Ordinal data is only counting, does not have a unit or distance between scores in a definite manner, and does not have zero absolute values as in the ratio data generated from physical measurements. Therefore, ordinal data is a raw score that cannot properly show one's skills. Ordinal data can be converted into ratio data using the Rasch model analysis. This study aims to analyze the difficulty of items and bias towards the assessment of students' Computational Thinking (CT) skills conducted with more than one observer on electrolyte and non electrolyte solutions. The method used was descriptive quantitative, with participants as many as 3 observers and 186 of tenth grade students in 3 high schools in Surakarta with high, medium, and low categories. The measurement uses observation assessment sheet at each meeting during the learning process which is then analyzed by the Many Facets Rasch Model (MFRM). The results obtained were that there was a bias or inconsistency of observers in assessing CT students' skills and there were differences in the number of students who could perform CT skills well based on the difficulty of items assessed by observers in the categories of high, medium and low schools. The results of this analysis can provide more accurate data on the assessment of students' CT skills.;2019
Solving economic and social problems requires the use of new technologies for big data analyses. The development of network and online commerce services, such as social research and electoral polls, requires methods and tools for working with large amounts of information. For large retail chains, fine-tuning the logistics costs and product stocks within units or tenths of a percent can provide substantial savings. The wide use of big data technology points out a question of learning methods and technologies of big data analysis. Teaching courses using mathematical modeling techniques and data analysis for students of economic specialties require the development of mathematical thinking skills. The key solution for learning students with imaginative thinking by the mathematical methods is the creation of stable links between the task and its corresponding functionality in the software. Each student has an individual set of skills and its own unique experience, which suggests the formation of new paths individualization of learning principles. Information technologies helps to overcome cognitive difficulties among students. Modern Information technologies and software were used for learning students to work with Big Data. Creative thinking students can solve the tasks in Matlab and Simulink graphical programming system from MathWorks. The article analyzes the abstract and creative thinking together with computational thinking and project learning. Creative thinking can be effectively used to educate programming skills in object-oriented programming languages such as C ++ and C #. The understanding of creative thinking for economic specialties students is possible through the study of visual algorithmic schemes. The development of computational thinking is very important for our students, especially for the negative tendency to replace examinations with computer tests. Developing sustainable skills allows students to solve practical tasks in research and industry. Introducing Matlab's MathWorks infrastructure into universities is one of the possible ways for students to develop computational thinking skills, as well as supporting project learning and CDIO initiatives (Conceive - Design - Implement - Operate). For big data analyses it is possible to use machine learning algorithms, neural networks, flexible logic and artificial intelligence. The Matlab software package for these purposes provide toolboxes: Neural Network Toolbox, Fuzzy Logic Toolbox and Statistics and Machine Learning Toolbox. The level of complexity of tasks puts high demands on the students' learning system. It is necessary for students to introduce the teaching of the basic course Matlab to develop their skills in formulating and solving mathematical problems, as well as to train their technology collaboration in the network design. In the future, when studying compulsory disciplines and special courses, each lecturer will be able to offer students examples of solutions in the Matlab environment and with its help organize extracurricular work in network projects. At the next stage, it is possible to implement an interdisciplinary project that brings together students from different faculties, both bachelors and masters.;2019
Sorting is a process we encounter very often in everyday life. Additionally it is a fundamental operation in computer science. Having been one of the first intensely studied problems in computer science, many different sorting algorithms have been developed and analyzed. Although algorithms are often taught as part of the computer science curriculum in the context of a programming language, the study of algorithms and algorithmic thinking, including the design, construction and analysis of algorithms, has pedagogical value in mathematics education. This paper will provide an introduction to computational complexity and efficiency, without the use of a programming language. It will also describe how these concepts can be incorporated into the existing high school or undergraduate mathematics curriculum through a mathematical analysis of student-generated sorting algorithms.;2019
Students in introductory programming courses struggle with how to turn a problem statement into code. We introduce a teaching technique, The Seven Steps, that provides structure and guidance on howto approach a problem. The first four steps focus on devising an algorithm in English, then the remaining steps are to translate that algorithm to code, test the algorithm, and debug failed test cases. This approach not only gives students a way to solve problems, but also ideas for what to do if they get stuck during the process. Furthermore, it provides a way for instructors to work examples in class that focus on the process of devising the code-instructors can show how to come up with the code, rather than just showing an example. We describe our experience with this technique in several introductory programming courses-both in the classroom and online.;2019
"Students in primary schools engage in designing and developing games as a way to foster Computational Thinking (CT) skills through a constructionist approach. CT includes several 21st Century Skills such as critical thinking and problem-solving skills, it has positive effects on school results and is needed for a successful integration into our digital society. Focus is usually on STEM related subjects, suggesting that CT is fundamental for success in scientific areas; nevertheless, benefits from game making go well beyond this, including a much wider set of skills and school subjects. The process of game making and playing can be seen as a communication between three different actors: the developer, who is designing the game and coding the computer behaviour; the computer that interacts with the player; the player. The present paper, starting from the analysis of games created by grade 4 and 5 classes of an Italian primary school, as well as teacher training courses on coding in class and lessons organized by coding clubs, argues that while coding certainly is central to game making, little attention is payed to the human player. When the development of a game is carried out while keeping attention on the final player, several elements have to be considered: contents organization, player instructions, aesthetics, etc. The programming language becomes a means of communication, to be practiced within a social context including other developers and players, and widening the advantages of game making in schools. Language arts, visual communication skills and creativity are thus addressed, extending the range of basic skills for a successful integration in the 21st Century society. The paper reports a specific game making experience in primary schools, based in the online Scratch programming environment, which offers a rich context where projects can be shared, commented, and remixed: a perfect setting supporting communications. A preliminary analysis of the developed games is reported and suggestions to address the communicative aspects are given.";2019
Studies with augmented reality show that while the technology helps the student learn, it may end up disturbing other points, showing that more research is needed with the use of augmented reality. Also, a topic that is growing within education is Computational Thinking, which says that the thinking like computer scientists is necessary for the 21st century and should be disseminated mainly in schools during basic education. In the face of this, this work created an augmented reality android application that tracks physical tiles and creates 3D maps for the user, also giving a character that can be programmed to walk on this created map, simulating a programming toy. Finally, tests carried out with the application have shown that augmented reality currently has performance problems when multiple targets are used, so, devices with low processing have problems at map tracking. These issues affected the tests with the children, which made it difficult for them to track the map like they wanted, but they still liked the app even after it. That shows that the acceptance of the technology by the children is good, which can help developing Computational Thinking, but the technology limitation is still a problem. These obstacles while currently hindering the use of augmented reality in education may in the future be irrelevant due to the constant advancement of technology. This paper's main contribution is showing one possibility of using AR with Computational Thinking and what needs to evolve for it to be used by the usable by the children.;2019
Teaching computational thinking in K-12 as a 21th century skill is becoming increasingly important. Computational thinking describes a specific way of reasoning building on concepts and processes derived from algorithms and programming. One way to teach these concepts is games as an effective and efficient alternative. This article presents SplashCode, a low-cost board game to reinforce basic algorithms and programming concepts. The game was developed in a systematic way following an instructional design process, and applied and evaluated in a Brazilian public school with a total of 65 students (grade 5 to 9). First results indicate that the game can have a positive impact on motivation, learning experience, and students' learning, as well as contribute positively to social interaction, relevance, and fun. Results of this study may assist in the selection of games as an instructional strategy and/or in the development of new games for teaching computational thinking.;2019
Teaching computing concepts and computational thinking via short tasks could be considered as an implementation of a minimalism movement in education. Minimalism in this context does not mean less educational or less creative. This commentary will attempt to provide additional insights of minimalism in the form of cards with short tasks, supported by personal experience at university level.;2019
Teaching in the scientific area of Digital Media has been evolving to meet the challenges facing our society, particularly to create technologies that effectively provide added value to the human being, both professionally and in the personal life. This article presents a new teaching methodology that combines creative programming and creatively learning programming, intertwining the use of digital games as the metaphor for the programming constructs, and gamification to enhance engagement and regular work. This is backed up on the knowledge that the introductory learning of programming is a process that requires the acquisition of cognitive skills, which fit into what is defined as Computational Thinking, but also that the process of learning programming has a high level of complexity. This causes specific difficulties that have been observed over several years, mainly as the practice requires specific mathematical skills, not so common in Digital Media students. The teaching methodology is based on a constructionist approach, with PBL, defining learning paths supported on digital games development. The difficulty inherent in constructing a problematic base, coherent with the learning process, led to the development of the Creative Programming Matrix, based on the triadic certification method. This matrix enables the teacher to select, organize and develop the best game examples to support the learning process. This work has been preliminarily evaluated through questionnaires to students and surveys to faculty that teaches programming courses. This method was instantiated in the restructuring of a course on a Master program in Multimedia. A set of gamified activities promoted a natural progression in the learning, essential for a first approach to the programming. From a set of clear objectives, the target behaviours and the profile of the students were defined, the cycles of involvement and the necessary tools were developed, not forgetting that learning should be fun! The results validate a higher efficacy and engagement of the students.;2019
Teaching introductory programming requires knowledge of both content and pedagogy. Pedagogy includes understanding the typical difficulties students face as they learn, as well as recognizing didactic strategies professors can use to help students to overcome these difficulties. Our research aims to improve the pedagogical knowledge instructors have to teach introductory programming courses, especially those new in this area. We conducted 16 semi-structured interviews with instructors who teach introductory programming courses and collected diaries filled by 110 students during their studies. Qualitative analysis of this data revealed a set of difficulties students faced when learning programming basics and a set of didactic strategies professors use to mitigate them. The results were reviewed by senior instructors in order to confirm them and by junior instructors to verify the importance of this material from their perspective. The main contribution of our paper is a set of difficulties faced by students learning programming, a classification of the most harmful challenges, and the didactic strategies usually used to teach and avoid them. Thus, we provide the basis for the pedagogical content necessary to junior and senior professors planning introductory programming courses.;2019
Teaching programming as a way to express ideas, communicate with others, and understand our world is one of the oldest goals for computing education. The inventor of the term computer science saw it as the third leg of STEM literacy. In this talk, I lay out the history of the idea of universal computational literacy, some of what it will take to get there, and how our field will be different when we do.;2019
Technological devices programmed through parallel computing are increasingly present in people's daily lives. They are responsible for processing images that we see on computers, televisions, cell phones and games. It is a fact that parallel processing is a reality, so computer professionals need to know the peculiarities of this form of programming. However, teaching parallel computing is not a simple task, the computational thinking parallel is quite different from that for the sequential processing. This work, then proposes a new methodology for teaching parallel computing for young beginners in programming. Our technique is based on principles of unplugged computing, like to learn doing and playing. We believe that unplugged computing can be very useful in teaching the difficult concepts of parallel computing(1).;2019
Technological innovations, such as social networking systems, games for learning, and digital fabrication, are extending learning and interaction opportunities of people in educational and professional contexts. These technological transformations have the ability to deepen, enrich, and adaptively guide learning and interaction, but they also hold potential risks for neglecting people's affective learning processes-that is, learners' emotional experiences and expressions in learning. We argue that technologies and their usage in particular should be designed with the goal of enhancing learning and interaction that acknowledges both fundamental aspects of learning: cognitive and affective. In our empirical research, we have explored the possibility of using various types of emerging digital tools as individual and group support for cognitively effortful and affectively meaningful learning. We present four case studies of experiments dealing with social networking systems, programming with computer games, and makers culture and digital fabrication as examples of digital education. All these experiments investigate novel ways of technological integration in learning by focusing on their affective potential. In the first study, a social networking system was used in a higher education context for providing a forum for online learning. The second study demonstrates a Minecraft experiment as game-based learning in primary school education. Finally, the third and the fourth case study showcases examples of maker contexts and digital fabrication in early education and in secondary school. It is concluded that digital systems and tools can provide multiple opportunities for affective learning in different contexts within different age groups. As a pedagogical implication, scaffolding in both cognitive and affective learning processes is necessary in order to make the learning experience with emerging digital tools meaningful and engaging.;2019
Technological progress is a feature of everyday life in society, and school, as an integral part of it, must follow this development with changes in educational practice. School must work towards inclusion and equity of learning for all pupils. In this context, educational technologies appear to be very relevant tools regarding their potential for improving the education of children with learning difficulties. One of these educational technologies is the Scratch platform. The main objective of this study was to understand how the use of the Scratch software can contribute to the learning of mathematical content, specifically the affine function, by two children with learning difficulties. The research consisted of the application of a pre-test, followed by a two-session intervention and concluded with the application of the post-test. The mixed methodology focused on the quantitative analysis of pre- and post-test results and on the qualitative analysis of elements of the students' records, of the elements that they produced in the computer and of the researcher's field notes. The results suggest that the intervention had a significant impact on the overall performance of the two students, although with different relevance. The results also indicate that the work developed in Scratch enabled the students to have a better understanding of concepts, rules and symbols of mathematics. Despite the obvious limitations of this study and the impossibility of generalizing results, the conclusions provide arguments in favour of confirming Scratch as a valid and capable alternative for the promotion of learning, mathematical learning and the development of children with learning difficulties.;2019
Technology contributes to the design and implementation of STEM activities in multiple ways, but the T in STEM is sometimes overlooked. This chapter outlines the importance and benefits of technology in STEM education and highlights research and teaching strategies for promoting technological literacy. The chapter presents a summary of the types of technology tools, applications, and products that are presently available for conducting STEM activities and how these technologies can support the development of various 21st century skills in students, such as critical thinking, problem-solving, and collaboration. Emerging technologies for supporting STEM, such as coding through game design and programming, mobile app development, 3D modeling and printing, and digital storytelling are discussed. Finally, how these technologies are implemented in two projects as example is described.;2019
Technology-enhanced learning environments provide ample opportunities for learners to self-regulate their learning processes and activities for achieving the intended learning outcomes in various disciplines from soft to hard sciences and from humanities to the natural and social sciences. This special issue discusses the emerging technological advancements and cutting-edge research on self-regulated learning dealing with different cognitive, motivational, emotional, and social processes of learning both at the individual and group levels. Specifically, it discusses how to optimally use advanced technologies to facilitate learners' self-regulated learning for achieving their own individual learning needs and goals. In this special issue, seven researchers/research teams from the fields of collaborative learning, computational thinking, educational psychology, and learning analytics presented contributions to self-regulated learning with the goal of stimulating cross-border discussion in the field.;2019
The addition of computing to England's National Curriculum was welcomed as a much-needed modernization of the country's digital skills curriculum, replacing a poorly regarded ICT program of study with an industry-supported scheme of computer science, robotics and computational thinking. This paper will demonstrate how teachers have acted as gatekeepers to block a curriculum that they view as narrow, difficult to teach and in conflict with their beliefs and practices as educational professionals. Extensive qualitative data were collected through classroom observations, teacher and student interviews and student artifact creation in four state-maintained primary school classrooms to explore how teachers acted agentically to minimize or altogether reject a legally mandated curriculum that clashed with their local, professional knowledge. Analysis of this data was supported by official documents and personal accounts of the creation of the computing program of study, which highlight a discourse of economic anxiety and post-imperialist nostalgia on the part of the curriculum's designers. This study will illuminate the significant influence that teachers wield as gatekeepers for subject content, with the ability to reject digital technology curricula even when it is supported by industry and mandated by law.;2019
The adoption of robotics has been becoming prominent in computational thinking literature. The modularity characteristics of lego robotics, for example, enables learners to construct their understanding of the abstraction of complex robotics parts. Educational organisations that adopt computing would be likely to introduce computational thinking as an integrated part of the regular curriculum. Organisations in the UK and the United States, for example, conceptualise the delivery of computing curricula in connection with the development of computational thinking skills that all students must learn in the 21st century. This paper is a literature review report aggregating publications from outstanding outlets. Focusing on investigating more deeply about the roles of learning computational thinking using robotics-based media, in hopes of finding new findings that can support the advance of 21st-century skills. The results show that computational thinking using robotics-based media can foster interest in the STEM field, which includes some skills like creative thinking, problem-solving, collaborative learning, algorithmic and critical thinking, abstraction, and debugging. The skills are essential for children to develop themselves in the 21st century, taking into account the learning material and the right learning approach.;2019
The aim of the present study was to investigate the properties of paper-and-pencil data collection instruments developed to measure Computational Thinking (CT) based on several variables. Thus, keywords were identified and used in searches conducted in various databases. The outcomes of the search were analyzed based on the inclusion/exclusion criteria and 64 studies that focused on CT measurement were identified. Content analysis findings were classified under several themes. Based the present study findings, it was determined that the number of tools developed to measure CT demonstrated an increasing trend over time. Furthermore, it was found that the above-mentioned studies included mainly tests. Moreover, it was observed that the processes of ensuring validity and reliability were not clearly specified for more than half of the paper-and-pencil data collection instruments designed to measure CT. Based on the findings, several recommendations were presented for future studies and implementations in the related field.;2019
"The aim of the study is to examine the Science, Technology, Engineering and Mathematics (STEM) teaching intention of science and primary school pre-service teachers in terms of Computational Thinking (CT) skill, gender, grade level, daily computer usage, internet usage, smartphone usage, and the department variables. The study employs the correlational survey model. The participants of this research are 440 pre-service teachers at Van Yuzuncu Yl University, Turkey. The STEM teaching intention scale, and the CT skill scale were used for data collection. Chi-Squared Automatic Interaction Detector (CHAID) analysis, independent samples t- test, and single factor variance analysis (ANOVA) was used for data analysis. According to the results; CT has the most significant effect in terms of STEM teaching intentions. Department is also another important variable for STEM teaching intentions. STEM teaching intention measures do not differ according to gender, grade level, daily average computer usage, internet usage and smart phone usage.";2019
The aim of this paper is to broaden our view on the relationship between Computational Thinking and the development of the abstraction skill applied to mathematics. It was aimed to reveal trends and new potential solutions to be explored in the teaching of mathematics. We carefully selected sixty-four papers related with the objective above cited. From which we inspected twenty-four discovering that abstraction is a key skill for mathematics and Computational Thinking. We also discovered that we need to define which type of abstraction are we going to work on together with choosing between the two ways of teaching CT: integrating it to the curricula or as an after-school program.;2019
The aim of this study is to develop a self-efficacy measuring tool that can predict the computational thinking skill that is seen as one of the 21st century's skills. According to literature review, an item pool was established and expert opinion was consulted for the created item pool. The study group of this study consists of 319 students educated at the level of secondary school. As a result of the exploratory factor analysis, the scale consisted of 18 items under four factors. The factors are Reasoning, Abstraction, Decomposition and Generalization. As a result of applied reliability analysis, the Cronbach Alpha reliability coefficient can be seen to be calculated as .884 for the whole self-efficacy scale consisting of 18 items. Confirmative factor analysis results and fit indexes were checked, and fit indexes of the scale were seen to have good and acceptable fits. Based on these findings, the Computational Thinking Self-efficacy Scale is a valid and reliable tool that may be used in measuring to predict Computational Thinking.;2019
"The aim of this study was to develop a scale which can be used to measure the computational thinking skills (CTS) of high school students. Validity and reliability testing of the scale was performed with the participation of 785 students. Exploratory and confirmatory factor analysis showed that the five-point Likert scale had a construct consisting of four factors Problem-solving, Cooperative Learning & Critical Thinking, Creative Thinking, and Algorithmic Thinking expressed by 42 items. The factor loadings of the scale varied from .475 to .853. The confirmatory factor analysis performed to reveal the factorial validity of the scale showed that the Chi-square value (2=2679.07; sd=815, p=0.00) was significant. The fitness index values were found to be RMSA=.0075; SRMR=.081; NNFI=.91; CFI=.92; GFI=.90; and AGFI=.88. The Cronbach's Alpha internal consistency coefficient was .969 for the overall scale. In addition, the stability of the scale was examined to obtain information about its reliability and the test-re-test method was used. It was concluded as a result of the analysis that the scale was a valid and reliable measurement tool which can be used to measure the CTS of high school students.";2019
The article examines the modern computer-based educational environment and the requirements of the possible cognitive interface that enables the learner's cognitive grounding by incorporating abductive reasoning into the educational process. Although the main emphasis is on cognitive and physiological aspects, the practical tools for enabling computational thinking in a modern constructionist educational environment are discussed. The presented analytical material and developed solutions are aimed at education with computers. However, the proposed solutions can be generalized in order to create a computer-free educational environment. The generalized paradigm here is pragmatism, considered as a philosophical assumption. By designing and creating a pragmatist educational environment, a common way of organizing computational thinking that enables constructionist educational solutions can be found.;2019
The autism spectrum disorder (ASD) is a neurodevelopment disorder that affects areas related to social skills, such as social interaction, communication, planning everyday activities, imagination, and creativity, in a permanent way and since early ages. These skills are very important for everyday routine and should be developed to improve the life quality and integrate people with such disorders in the workplace. Nowadays, there are several applications that were developed to support children with ASD. However, most of those applications were developed in other languages or are aimed at different social contexts. Some of them are simply outdated. Due to the mentioned factors, an application for mobile devices was developed, aimed at supporting professionals that intend to develop skills related to empathy based on the mind theory, in children diagnosed with ASD. In the tests with experts, it was possible to obtain an adequate application both in terms of content and usability for them, allowing the user to feel comfortable with the application and that this can be integrated into their activities without problems. Using the usability tests, the results show that both the users managed to complete the tasks with some time differences. The application was validated by performing several tests with experts and final users with promising results.;2019
The benefits of computational model building in STEM domains are well documented yet the synergistic learning processes that lead to the effective learning gains are not fully understood. In this paper, we analyze the discussions between students working collaboratively to build computational models to solve physics problems. From this collaborative discourse, we identify strategies that impact their model building and learning processes.;2019
The blended teaching mode is applied to the teaching of computer basic courses. It can innovate the traditional teaching mode, realize the dual-subject teaching, improve the comprehensive quality of teachers, implement the policy of teaching students according to their aptitude, and meet the needs of students at different levels. Based on constructivist theory, humanistic theory and teaching interaction theory, this paper aims at the problems existing in the teaching of computer basic courses, combined with the author's many years of computer basic course teaching practice, from teaching objectives, teaching content, teaching resources, teaching process, In terms of practical teaching and teaching evaluation, specific reform measures are proposed to provide guidance for the teaching reform of computer basic courses based on the blended teaching mode, improve students' computer application skills and promote the formation of computational thinking.;2019
The call for innovative talents in the information age is imminent. With the promulgation of the domestic high school information technology curriculum standards in 2017, the formulation and positioning requirements of the core literacy of the disciplines, computational thinking as one of the four core literacy, is the thinking ability that everyone should have. Many foreign educational practice studies have shown that mind mapping can effectively promote students' cognitive development and knowledge construction. However, the domestic educational application research is relatively lacking in this aspect, and there is little research on the comprehensive and in-depth combination of it and the core literacy computational thinking of the specific information technology discipline. To this end, based on the research status at home and abroad, this paper attempts to use the concept map tool to represent several important functions of computational thinking, definition of problems, abstract function, build model and Debugging and improvement. The diagram incorporates the teaching model in the computational thinking development curriculum. This study used quasi -experimental research methods to explore the effect of conceptual map tools on students' computational thinking. The research results show that this teaching method has a significant effect on the development of students' computational thinking.;2019
The commentaries provide useful questions and responses that help us understand better how unplugged activities serve as scaffolding to engage students in computer science. They help us to consider how activities relate to computational thinking, particularly by connecting the scaffolding in the activities to the limits of computation. This in turn helps us to navigate the somewhat disputed boundary between activities that clearly use computation as it occurs on physical devices, and metaphors that could potentially be misleading.;2019
The complete credit system, which is an advanced educational management institution, fully embodies the educational idea of people foremost. To spread the complete credit system would be a historical trend in the reform of higher educational management. This paper analyzed the connotation and architecture of the complete credit system, taking Kunming University as an example, studied the establishment of talent training scheme and curriculum system design under the complete credit system, and preliminarily explored the reform scheme of computer basic course which adapts to the complete credit system.;2019
The computer science community has struggled to assess student learning, especially at the early elementary level. Prior work has included one-on-one interviews, written assessments, and artifact analysis, each with their own benefits and drawbacks. Through our Personalized Assessment Worksheets for Scratch (PAWS) tool, we explore personalized assessments as an assessment technique that lies in between interviews, written assessments, and artifact analysis. PAWS creates personalized written assessments that integrates code from student Scratch projects. We hope that our PAWS tool, and more generally personalized assessments, will lead to an assessment technique that is both more accurate than written assessments and artifact analysis, and less time-consuming than interviews.;2019
"The Computer Science Teachers Association has asserted that computational thinking equips students with essential critical thinking which allows them to conceptualize, analyze, and solve more complex problems. These skills are applicable to all content area as students learn to use strategies, ideas, and technological practices more effectively as digital natives. This research examined over 200 elementary students' pre- and posttest changes in computational thinking from a 10-week coding program using adapted lessons from code.org's Blockly programming language and CSUnplugged that were delivered as part of the regular school day. Participants benefited from early access to computer science (CS) lessons with increases in computational thinking and applying coding concepts to the real world. Interviews from participants included examples of CS connections to everyday life and interdisciplinary studies at school. Thus, the study highlights the importance of leveraging CS access in diverse elementary classrooms to promote young students' computational thinking; motivation in CS topics; and the learning of essential soft-skills such as collaboration, persistence, abstraction, and creativity to succeed in today's digital world.";2019
The concept of computational thinking is timely. It is widely agreed that in order to benefit and thrive in a digital world, more than digital literacy is required. Computational thinking promises understanding of information technology and its utilization without necessarily knowing how to write code. According to many authors, skills in computational thinking include the ability to evaluate and design solutions to problems. However, the vision for computational thinking, laid out by a number of scholars, is even bigger than this. It proposes that thinking habits from computer science are beneficial for any kind of problem solving and that those thinking habits form a central part of modern sciences. It might be that components of computational thinking are indeed useful in problem solving and that they play an important part in other sciences. However, computer science combines three types of thinking traditions: theoretical (mathematical) tradition, engineering tradition and scientific tradition, and it is important to differentiate between what is an aspect in one or more of these traditions and what is unique for computer science. This clarification will support the application and teaching of computational thinking. This paper explores the uniqueness of computational thinking and its roots in theoretical, engineering and scientific traditions of computing.;2019
The concern on promoting the development of Computational Thinking (CT) in children has increased over the years. Games are recognized as a good strategy for presenting CT and for engaging children to the learning of its concepts. Hand gestures are a form of interaction widely used in video-games. However, few studies have been conducted to investigate how children feel and interact when using hand gestures in the context of learning tools. And this number decrease in studies about CT learning. In this paper, we explore the feedback of 29 children about their interaction by using hand gestures in a game to stimulate the CT which we called CT game. We also compare this type of interaction to touch. Additionally, we examine how both, hand gestures and touch, can impact on accomplishing of the goals of the game phases. Our findings revealed the children kept more engaged when using hand gestures, and consequently, this affected their concentration on the game purpose.;2019
The contiguity of physical and digital content of embodied learning has been shown to increase student's engagement in educational contexts. Applications with various kinds of physical interactions have been deployed to enhance the learning experiences in many engineering domains. However, even though computer science education (CSE) is one of zestful topics in the recent years, there are few studies focusing on the embodiment of CSE materials, by which the abstract and intangible concepts could be transformed into an intuitive affordance that utilizes sensorimotor experiences during the learning process. We propose an augmented embodiment mobile app designed for computational thinking (CT), specifically the debugging practices and abstraction concept, that makes use of gestures and augmented reality for learners to interact with the content. We examine the logic by the design framework for embodied learning and discuss potential extensions of multimodal analytics in such an application. Our preliminary user study in a middle school shows students' engagement in the application, however, it also reflected several design issues that need to be solved in the next iteration. The future plan of data analysis and experiments is also discussed.;2019
The creation of computer science tutorials is becoming critically important as hundreds of millions of students each year get their first CS experience through self-directed online activities. Creating a cliffhanger activity, with high engagement during and motivation to continue learning post activity, is a balancing act. If tutorials provide too much detailed information, users may be able to follow instructions but can feel overwhelmed or bored. On the other hand, tutorials that do not sufficiently explain crucial steps risk frustrating users who might drop out of the activity. Zones of Proximal Flow (ZPF) tutorials are simple to create and provide a navigation structure of differentiated instruction allowing users to choose appropriate detail based on their self-assessed state of flow, from bored to anxious. Using Retention of Flow analysis, two Hour of Code game design tutorials were analyzed: a sophisticated online tutorial for the creation of Frogger, and a simple ZPF tutorial for the creation of Pac-Man. One hope was that the simple ZPF Pac-Man tutorial would not do much worse than the sophisticated Frogger tutorial, but surprisingly the ZPF Pac-Man tutorial significantly outperformed the Frogger tutorial in terms of student retention. The Pac-Man tutorial also displayed a high student motivation to continue programming past the end of differentiated instruction.;2019
The development and assessment of computational thinking (CT) is garnering a lot of attention and research since the last decade. However, CT learning is perceived as a time-consuming and frustrating experience by many K-12 and university students. Hence, educators are coming up with various methodologies to make CT both accessible and engaging for learners, thus leading to a spurt in various game-based learning (GBL) approaches in this field, ranging from board games to educational robotic games. This paper strives to evaluate tabletop escape games as a potential tool to develop CT as a competency among K-12 learners and the assessment of its effectiveness in achieving the learning outcomes. To do this, the authors conducted a literature review of existing papers on tabletop games that use the theme of an escape game to develop and assess CT as a competency. Based on a systematic analysis of the existing literature, they conducted an analytical review of three papers on tabletop games in CT to identify the CT components being developed, the evaluation methods explained in them, the current limitations faced by the authors of these three papers and the possible ways to circumvent such limitations. This paper also covers the design aspects to be considered for the development of a CT-based educational escape game to support and evaluate this competency and its components.;2019
The development and integration of digital technology, in the current social context, makes it necessary to design and implement educational proposals that contribute to strengthening the teaching-learning processes through resources and didactic materials that provide dynamism, flexibility and innovation. One of the approaches that is gaining popularity in the international scenario is to approach the teaching of technology, programming and other digital skills such as computational thinking from an early age. This paper presents some of the results achieved through the development of a formative experience to foster the learning of computational thinking in early childhood education. The study corresponds to a quasi-experimental design with pretest-postest measures, without control group. The sample of participants was 44 students and 2 teachers, from a concerted school, in Salamanca, Spain, during the period 2017-2018. The activities consisted of solving problems with programming challenges using a tangible and a graphical interface. The data were collected through a rubric, questionnaires and field diary. The general results show the existence of differences between pretest and postest, which indicates that an advance was generated in reference to the learning of computational thinking through the explored characteristic. In addition, there is a positive acceptance of the activities between students and teachers. The study represents an initial assessment of the development of programming and computational thinking skills in young children using tangible and graphical learning interfaces.;2019
The development of Computational Thinking has been pointed out by experts as fundamental in the lives of human beings. This article deals with the application of a game-based didactic sequence based on the fundamentals of Computer Science in a class of primary school children, to promote engagement in the development of mathematical activities and analyze the impact of the development of logical and algorithmic reasoning in the solution of mathematical problems in the classroom. The didactic sequence considered the cognitive development of the children as well as the personal evolution during the process. Preliminary results indicate that the didactic sequence had a positive impact on student learning, showing a rate of learning evolution of 18% in the test group and 5% in the control group.;2019
The development of Computational Thinking is usually associated with solving closed coding exercises and quizzes. However, most of these approaches focus on teaching fragmented programming knowledge without enabling students to access and develop computational practices such as abstraction, pattern recognition and generalization, which are equally important for computational problem-solving. As a result, many students keep facing difficulties in describing and using these practices, even if they can successfully solve common programming tasks. This paper discusses game modification (modding) as a pedagogical approach to support students in exploring and expressing meanings about computational practices and concepts in an integrated context. In this approach, the game is seen as a complex system that incorporates powerful computational ideas and modding as a tool that makes these, otherwise complex, ideas accessible to students. The paper discusses the results of a design-based study with middle school students who played, evaluated and modified a simulation game in ChoiCo (Choices with Consequences) environment. The environment integrates three affordances for game design and modding: a) A map-based editor b) a database and c) block-based programming. The aim of the study was to investigate how construct meanings about computational thinking concepts and practices when they collaboratively modify the simulation game with the above affordances. The results indicate that game modding can provide a scaffold for students to gradually develop their understanding of computational practices and concepts. As students transformed from players to designers they discussed, changed and constructed increasingly complex modifications to the rules, the mechanics and the relations of the game system. During modding, they developed meanings about computational practices such as pattern recognition and abstraction and concepts such as conditionals and variables.;2019
The development of Computational Thinking through visual programming using resources such as Scratch has been used frequently in teaching and learning contexts due to the important contributions to these processes. In order to integrate the work of Development of Computational Thinking into the curricular pedagogical content and the protagonism of the students, this paper presents practical suggestions for using Scratch as a tool for Learning Objects production by students for students. The suggestions are the result of the experience developed in a school of the public school of Cascavel/PR whose results show that this integration promotes interest in the content and commitment of the students, making learning meaningful.;2019
The development of programming skills is currently promoting from an early school age, trying to get children to take an active and creative role in the use of technologies. The objective of this article is to verify the repercussion of educational robotics activities on kindergarten students in the acquisition of computational thinking and programming skills. The research design is quasi-experimental, with pre-test and post-test measures, using experimental and control groups. The sample consists of 131 students from the second cycle of early education (between 3 and 6 years old), all from the same Spanish school. Computational thinking is measured through three dimensions: sequences (algorithms), action-instruction correspondence and debugging. The intervention sessions, as well as the structure of the challenges that were used in the pre- and post-test evaluations, were designed based on the reference program of robotics studies called TangibleK. The intervention, carried out doing learning activities using educational robotics resources, presents positive results in relation to the computational thinking skills achieved. The differences between the pre-test and the post-test in the experimental and control groups are statistically significant, in that children engaged in robotics program achieves a greater advance in the three dimensions of computational competence through this method.;2019
The development of skills related to computer programming and robotics and the introduction of computational thinking principles in high schools are worldwide trends today. An effective way of initiating young students in this world consists in proposing them stimulating challenges. This work presents a robotic platform that has been successfully used to develop a competition (called Drone Challenge) in which students had to program the navigation system for a simulated unmanned aerial vehicle (or drone). Both the competition and the supporting platform are described in detail. In particular, the article provides a deep technical description of the main components of the platform, namely the drone simulator and the navigation development framework. The results of the survey conducted after the challenge point to the suitability of the working platform deployed.;2019
The facilitation of coding camps is complicated by the fact that these events usually attract large groups of participants, having different backgrounds, ages, needs, and cultural characteristics. Moreover, facilitators typically do not know each participant's learning style and needs. This work describes the RoboCards, a set of cards to solve an introductory robotics exercise that we have designed to support the facilitation of robotics camps for beginners (aged 6 to 12). Moreover, this work reports the first observations that we have collected while facilitating our robotics camps using this tool and sheds light on future work.;2019
"The first contact with computational thinking and programming languages of students entering higher education in computer science courses is extremely important for the professional future of these students: if successful it may indicate a promising career; otherwise it often leads to early abandonment of these students. The creation and maintenance of courses (1st cycle and 1st plus 2nd cycle integration) in information technology worries directors, coordinators and teachers of these courses. The area is in constant development and, despite the need for highly specialized technicians and almost zero unemployment, that it does not attract as much students who finish high school as it could. We found 193 courses in computer science in Portuguese higher education. Of these we have 106 1st Cycles, 15 Integrated and 1 Preparation; 66 different institutions. We study these courses: type of education (public or private), denomination of courses and types (1st cycle, integrated master's degree or preparation). 59 are public education courses: those in private education do not have much information on the internet. Of these 59 courses only 46 have information available online. This article belongs to an investigation that is done around the university courses of computer science: a picture of what exists, which are the vacancies, averages, success rates, how computer science and programming are linked in curricular terms, or in terms of curricular units and in terms of programming languages. This article focuses on the initial year and initial curricular units of programming of ten Portuguese computer courses that were considered more significant: programming languages, objectives, bibliography and type of evaluation. It is very important to study what is being done and how it is done.";2019
The fundamental rights of hospitalized minors include receiving educational and emotional attention during the illness situation. Currently the teaching of computational thinking and programming constitute a new literacy that must be carried to all classrooms, including hospital classrooms. This paper presents an exploratory case study on an educational intervention that is inclusive and adaptable to the characteristics of hospital classrooms for the teaching of computational thinking in a transversal way and programming without screens and robots, including working with emotions. In this study, 22 minors participated in five sessions developed in a hospital classroom. The results indicate that the intervention has improved the emotional state of the children, as well as their knowledge regarding computational thinking.;2019
"The goal of this study is to compare in-service and pre-service teachers' computational thinking skills and to take in-service teachers' opinions about the contribution of professional life to differentiation in this skill. The study was conducted in Turkey. The type of the study is mixed method. Quantitative data were obtained from 870 pre-service teachers enrolled to Van Yuzuncu Yil University and from 143 in-service teachers working in Van province. Qualitative data were obtained from 10 in-service teachers. Quantitative data were collected with Computational Thinking Scales (CTS). Qualitative data were obtained through conducting focus group interview. Results revealed that in-service teachers significantly differentiate from pre-service teachers according to the common effect of the sub dimensions of CTS. On the other hand, according to the results of the comparison conducted based on the main effect of the total score and sub dimensions of the scale; there is no difference according to the sub dimension of problem solving. There is a differentiation on behalf of in-service teachers according to all measurements outside of that. Qualitative data also support these results. In addition, qualitative data present details concerning the reasons of the change in CT within the context of professional life.";2019
The graphics calculator (GC) is a hand-held technology. With it, students visualize and understand concepts in mathematics and science better. It also allows them to make real-world connections, binding together advanced graphing functionality and conceptual science, technology, engineering, arts and mathematics (STEAM). As they gain a deeper understanding of abstract concepts, they acquire creative and critical thinking and problem solving skills they need to reach greater academic successes. In learning, GC plays several roles in increasing students' computational thinking and procedural skills. Despite being a learning tool that satisfies science and mathematics curriculum needs, the calculator often has been used as an add-on to traditional teaching methodology rather than central and in more integrated ways. This study looks into the potential of developing computational thinking skills using GC technology. The data of the study was obtained from secondary sources through a systematic review method. The study showed that GC seems to be effective tools to practice STEAM education as well as to develop students' computational thinking through analysing and decompose real problem as well as engaging in the abstraction process and developing an algorithm using coding. The findings provides justifications on the impact of GC in developing computational thinking skills thereby maximizing the pedagogical benefits to students.;2019
The growth of the geospatial services industry is increasing the demand for graduates with training in both geography and computational thinking (geocomputational thinking). The limited availability of learning pathways towards geocomputationally intensive jobs requires employers across the public and private sectors to choose between hiring a geographer or a computer science graduate. This collaboration of authors will initiate the formation of a researcher-practitioner partnership (RPP) in Southern California, as a new strategy to addresses the lack of geocomputational learning pathways.;2019
"The Italian Ministry of Education is promoting the introduction of coding and computational thinking in compulsory school. While it is still unclear how the Ministry will reform the current curriculum guidelines to introduce computing, Italian schools have anyway reached a record level of participation in events like the EU Code Week and the Hour of Code. Programming to Learn in Primary School is a project we are conducting following Papert's claim that children can learn to program and that learning to program can affect the way they learn everything else. The project is in its second year and involves all primary school grades, from 1 to 5. The children in grade 1 and 2 work with programmable play kits with tangible interfaces. From grades 3 to 5 the online Scratch programming environment is used. To become proficient in a new language (the programming language here), children need time to learn how to use it expressively and become part of a social context where the language is practised. So the Scratch online community is a perfect match. Children love sharing their work and remixing, as well as the social features of Scratch for adding likes and commenting on each other's projects. All the grade 3 to 5 children in the project attend a weekly computer lab class, playing with Scratch. In grades 4 and 5, they work on individual projects during the first half of the school year; in the second half, they work in small groups on a common theme that the teacher selects from those studied in class (the European Parliament, hydro-geological risk, etc.). The project aim is to develop and validate a vertical curriculum for the introduction of programming in primary schools as an expressive new language. In the lower grades the focus is on becoming fluent with the programming language, while integration with curricular disciplines is sought in the last two years.";2019
The idea of computational thinking unplugged refers to a set of activities that are developed to encourage children skills that can be recalled later, to promote computational thinking. These activities are designed to be included in the early stages of cognitive development (early childhood education, the first stage of primary education, games at home with parents and friends, etc.). The skills are designed so that they can be evoked in other stages. In secondary education, in technical training, in professional or even higher education. The activities are usually done without computers and mobile screens, with cards, cards, classroom games or playground games, mechanical toys, etc. In this paper, it is highlighted that there is a series of data, ideas and circumstances that make it possible now, and not before, that unplugged computational thinking is implemented. Finally, we describe activities, initiatives and experiences that are already being developed, and we make proposals for activities and their guides for preschool teachers and caregivers.;2019
The importance of educating the next generations in the understanding of the fundamentals of the upcoming scientific and technological innovations that will force a broad social and economical paradigm change can not be overstressed. One such breakthrough technologies is Artificial Intelligence (AI), specifically machine learning algorithms. Nowadays, the public has little understanding of the workings and implications of AI techniques that are already entering their lives in many ways. We aim to achieve widespread public understanding of these issues in an experiential learning framework. Following a design based research approach, we propose to implement program coding scaffoldings to teach and experiment some basic mechanisms of AI systems. Such experiments would be shedding new light into AI potentials and limitations. In this paper we focus on innovative ways to introduce high school students to the fundamentals and operation of two of the most popular AI algorithms. We describe the elements of a workshop where we provide an academic use-create-modify scaffolding where students work on the Scratch partial coding of the algorithms so they can explore the behavior of the algorithm, gaining understanding of the underlying computational thinking of AI processes. The extent of the impact on the students of this experience is measured through questionnaires filled before and after participation in the workshop. Preliminary experiments offer encouraging results, showing that the workshop has differential impact on the way students understand AI.;2019
The inclusion of computational thinking in third-level professional training is an alternative that revolutionize traditional teaching through new paradigms, ICT tools and new platforms such as the one proposed in this paper that describes the development and implementation of a prototype that allows incorporating computational thinking into educational constructivist models, exploiting the capacities and abilities of a global and interconnected society. The prototype was submitted to an evaluation by 120 students of Information Technology (IT) faculty of the Armed Forces University ESPE located in Sangolqui, Ecuador, in the fields: performance and acceptance of the user, obtaining acceptable results about its applicability, usability and adaptation to the training model by competencies of the institution. The research methodology Desing Science Research (DSR), SCRUM as a design methodology and AppGini as a development tool were applied.;2019
The increased interest in promoting CS education for all has been coalescing around the idea of computational thinking. Several framings for promoting computational thinking in K-12 education have been proposed by practitioners and researchers that each place different emphases on either (1) skill and competence building, (2) creative expression and participation, or (3) social justice and ethics. We review each framing and how the framings structure the theory space of computational thinking. We then discuss how CS education can leverage the explanatory potential that each framing offers to the implementation and evaluation of learning, teaching, and tools in computing education. Our goal is to help CS education researchers, teachers, and designers unpack and leverage the complexities of this theory space (rather than ignoring it) while also addressing broader educational concerns regarding diversity, providing new directions for how students and teachers can actively participate in designing their digital futures, and directing current computing education efforts towards a more humanistic orientation.;2019
The integration of computational thinking with music and visual art aligns with the broader movement to add arts to upgrade the original STEM (science, technology, engineering, and math) educational focus to STEAM. We open this chapter with an acknowledgment of the sometimes fraught contexts in which curriculum is implemented. We then set forth the theoretical underpinning of the successful grant submission that funds this initiative (research-practitioner partnership and a selective overview of the concept of computational thinking leading to the adoption of an age-appropriate understanding of the concept). Other theoretical threads discussed include the model of learning that we believe is a good fit with this initiative and the implementation of a conjecture map approach to developing our curricular activity system to support the integrative computational thinking learning elements. Holding professional development meetings in each of the participating districts, and valuing direct contact between us (the university faculty) and the parents of the middle school students to the extent that this is feasible constitute two key features of this initiative.;2019
The integration of programming in K-12 setting is a global phenomenon with different implementations in different countries. In Sweden this is a rapid process where programming should be a part of K-12 mathematic and technology with an implementation during 2018 and 2019. The time frame has been narrowly defined, but there are few directives considering which types of programming that should be used. Three main programming types are textual programming, block programming and unplugged programming, this study has a focus on unplugged programming. The research question to answer was: Which are K-12 teachers attitudes on the role of unplugged programming in education? The research study has been a qualitative cross-sectional study with the aim to collect teachers' attitudes towards unplugged programming halfway through their introductory programming course. Cross-sectional study is an approach to capture snapshots of an ongoing process at a given point in time. Data were collected from discussions and online postings during a workshop in the above-mentioned programming course. Participants postings have been grouped into categories in a content analysis based on the frequency of occurrence and relevance for answering the research question. Findings show that most teachers see a benefit of unplugged programming as a means to learn the fundamental programming concepts in their teaching and learning activities. However, there are different opinions on when this unplugged introduction should occur. Some teachers also pointed out that unplugged programming could be used as an alternative to block programming and textual programming when the digital environment lacks or fails. Conclusions are that unplugged activities are a valuable complement to block programming and textual programming, but teachers have different opinions on the optimum age group for unplugged programming activities. The recommendations for K-12 teachers is to seriously consider the unplugged complement, both for pedagogical reasons and as a never-failing analogue backup.;2019
The introduction of Computational Thinking (CT) in Italian compulsory schools is on the way, and there is a general need for new methodologies to support teachers' work. A one-year long learning path supporting the development of CT skills in primary school students through game making activities was defined and tested in a case study with one grade 5 class. All students in the class were actively involved regardless of their personal interest, their participation was generally high, their skills increased along the project, and the main objectives were reached. Nevertheless, results suggest that a longer time span is needed for students to master deeply the new concepts and tools. Class organization proved to be crucial and this confirms the need for an adequate teachers' training before introducing CT in classroom activities. Students demonstrated to be on the right path to approach CT through game making, but they still need to be guided in taking the player's perspective and making their games easy to be understood and played. At the end of the case study, the learning path was revised and is now in use in a three-year long project in a primary school.;2019
The invention of the computer has led to the establishment of a new research paradigm, computation, which has recently become more and more popular in scientific exploration. However, computation is not well represented in high school and university curricula in science and engineering, although it applies to a wide range of disciplines beyond computer science and software engineering. In light of the increasing need to provide students with computational education, this paper presents a novel way to develop computational thinking among students. The proposed approach is based on the implementation of Papert's theory of constructionism in electronic spreadsheets. In this approach, students build their knowledge while constructing the difference equation that describes a physical (or engineering) phenomenon, based on specific cases investigated in the spreadsheet. The method does not require the students to write code or perform complex calculations in the spreadsheet and makes it possible to teach advanced subjects at a relatively early stage. The method is demonstrated through contents taken from the secondary and tertiary curricula in mechanics and electromagnetism.;2019
The items used for learning evaluation in online learning arc not only scores, but also students' learning behavior, including engagement in learning contents, activities in online forum. This paper proposes a multivariate learning evaluation model to assess students learning in online learning environment for programming course. The learning behavior is accessed by data flow. The data flow is divided into four categories, which includes learning guidance, understanding innovation, interactive sharing and learning support. The correlation analysis of various structures and unstructured data flow generated in learning activities will be embodied in the multiple learning evaluation model as parameters. And the results are visualized to learners. The findings show that multivariate learning evaluation is helpful to improve students' achievement and reflection towards their learning.;2019
The Ministry of Education in Saudi Arabia implemented a new computer science curriculum in 2008. There was speculation that many computer science teachers did not possess sufficient knowledge of computational thinking needed to teach this subject. To investigate this topic, a quantitative research study was conducted with 55 male computer science teachers in Riyadh, Saudi Arabia. Results of the study revealed that most of the computer science teachers had a low conceptual level of computational thinking, and some of the teachers had misconceptions about the exact nature of computational thinking. Findings indicated that computer science teachers did indeed need more training in what computational thinking means and how to teach this subject.;2019
The paper deals with the motivation of Internet educational videos in computer science. Due to the increasing popularity of Internet videos and the increasing number of users of various social networks, Internet videos seem to be an appropriate element to be included in education in terms of approaching youth of the 21st century. The majority of the videos fulfill only fun features and serve more to fill students' leisure time. However, we can find also ones that can be considered as educational and at the same time we can use them as motivation in education. In connection with the upcoming changes in the curriculum in the Czech Republic, where the emphasis will be put on student creativity and especially on the development of critical and computational thinking, programming and algorithm teaching is a suitable tool to support these goals. The aim of the paper was to analyze the content of video file sharing sites such as YouTube or SchoolTube, select suitable educational videos focused on programming and algorithmization, evaluate them in terms of strength of motivation and include them in the suitable phase of the learning process. The paper introduces freely available internet educational videos, which could be used in computer science teaching, especially in programming/coding lessons. The integration of the Internet educational videos mentioned in our article can contribute to the improvement of the quality of computer science education, not only in the form of motivation but also as a component supporting the understanding of the subject matter itself. (C) 2019 Published by Future Academy www.FutureAcademy.org.UK;2019
The paper describes how students develop computational thinking through projects in educational programming environment - Scratch. Computational thinking is the ability to break down a big problem into smaller sub-problems and to arrange them in an appropriate sequence.;2019
The paper describes some selected approaches related to the support of teacher's work, which focuses on the development of computational thinking and the use of modern e-learning on-line resources. The article also deals with the design related to the research, which will be implemented in connection with these activities and will thus commit to the current professional discussion on the possibilities of development of computational thinking in connection with the Digital Education Strategy until 2020 and the upcoming reform of ICT curriculum in the Czech Republic. Web and mobile applications appear to be suitable e-learning resources for algorithm and programming studies that can contribute positively to the development of computational thinking So far, however, no relevant research has described whether teachers or future teachers are familiar with these resources, whether they can use them, and whether they also meet their needs. We want to respond to all these facts in our research.;2019
The paper is aimed at using modern technology, specifically the programmable toy Bee-Bot, to teach preschool children, helping them develop their computational thinking as well as logic and abstract thinking and pre-mathematical concepts. Moreover, it also introduces an activity which uses the aforementioned programmable toy to help children develop not only their computational thinking, but also their problem-analysis and problem-solving skills.;2019
The paper presents an educational case study - investigation of motivation towards learning computing and computational thinking in tertiary education. In the first part of the paper background of the study is presented - why it was necessary to try to measure motivation. The second part describes the three motivation surveys known in the literature - Motivated Strategies for Learning Questionnaire (MSLQ), Academic Motivation Scale (AMS) and Model of Academic Motivation Inventory MUSIC. The next part describes a survey in which the Model of Academic Motivation Inventory was used. Statistical results of MUSIC Inventory are presented and answers to one of the five open-ended questions are discussed. Preliminary cluster analysis is performed which is the part of ongoing research. Final remarks include an open question - is it possible to increase students' motivation and, if it is, how to do this?;2019
The paper presents effects of out-of-school teaching of computer science in a visual creative programming course (Scratch) for children aged 9-14, held at the Lodz University of Technology. The research was carrying out during 2016-2018 school years. The study sample consists of 265 primary and secondary students from Lodz Voivodeship (province) in central Poland. The results were obtained from anonymous questionnaires completed by 221 course participants and their parents. The answers confirm that this type of course becomes a new fascinating manner of spending spare time by children. Moreover, quantitative analysis of student's finals projects also has been performed. In the process of creative programming in the game-based environment, children develop the computational thinking skills, problem-solving strategies, and abstract thinking. Moreover, children are supported by their parents, who notice how important these competences are and how great opportunities they will present for children in future. Authors continue to grow Scratch programming course to democratize access to new technologies and education, preparing future generation for a world in which computational and algorithmic thinking is a central part of problem-solving. Perhaps some of the course participants will continue their study of programming and make it a career for their life.;2019
The paper presents results of a study conducted within the Erasmus+project GLAT which promotes the integration of activities for developing computational thinking and programming skills into daily teaching in primary school. The aim of the study is to identify to what extent are primary school junior grade teachers from Croatia prepared for developing these skills among their classroom students. The results show that there is a need for teacher training programmes on applying methods, activities and ICT tools for developing computational thinking in everyday teaching practice.;2019
The paper's objective is present the design and the planning of initial learning scenarios for the course Programming Fundamentals, from the evaluation of computational thinking to new students of the careers Computer engineering and Programmer analyst of the Technological University of Chile and Training Center Technical respectively at INACAP, to favor the motivation and autonomy of study through the recognition of skills and the use of the instructional design of the face-to-face course. The proposal is based on correspondence with three of five change trends that integrated the educational model. Regarding the Knowledge society, promote recognition of the individuality of the student as a person who will do university studies, that is, the scenarios respond to the fact that each person learns differently. In the Training of competences, contribute with preventive actions that the teacher communicates when there is a lack of specific skills. Finally, in the Flexibility and articulation, provide a diagnostic tool that favors the recognition of previous competences to have an articulated beginning of studies based on the needs of the student. Consequently, contribute to the INACAP's educational model.;2019
The participation of girls and women is fundamental in solving problems that the society demands. Currently, the figures indicate a deficit of female presence in the STEM context, which implies the loss of the talent of the female collective. The school, as the transforming axis of society, must generate actions that motivate, involve and generate commitment in girls and women, enhancing their engagement in the STEM context. This paper shows two unplugged activities taken from a serial of activities implemented with elementary students and families in a digital cultural center in Madrid-Spain. The implementation is based on general objectives such as 1. To introduce and motivate interest since an early age in computer programming, 2. To develop gender dynamics that educate on gender equity to strengthen female empowerment in the STEM area. Performing the example in the roles of female gender in science, as well as transforming stereotypes with the purpose of motivate girls and adult women, without excluding the male group. The activities also seek to train Computational Thinking skills, to introduce basic computer programming concepts as well as showing that unplugged activities are important in teaching computer programming, and integrate women into the STEM area, as an important tool to reduce gender gaps. Based on our informal observations, some results were: involvement of the female collective in the construction of codes, improvement in the dynamics of gender equity in each activity and that the girls created more complex codes than males.;2019
The planning and scheduling of container terminal logistics systems (CTLS) are the multiobjective and multiple strong constraints combinatorial optimization challenges under the uncertain environments, and those are provided with high goal orientation, dynamics, context-sensitivity, coupling, timeliness, and complexity. The increasingly sophisticated decision-making for CTLS is one of the most pressing problems for the programming and optimization method available. This paper discusses CTLS in terms of logistics generalized computation complexity based on computational thinking, great principles of computing, and computational lens, which three are abbreviated with 3CTGPL, and makes a definition of container terminal oriented logistics generalized computational complexity (CTO-LGCC) and container terminal logistics generalized computation comprehensive performance perspective (CTL-GCCPP) from the dimensions of time, space, communication, processor, and memory access. Both can analyze, generalize, migrate, translate, localize, modificate, and evaluate the above-complicated problems and lay solid foundations and establish a feedback improvement framework for the computational model and scheduling algorithms of the CTLS, which is an essential complement to the modeling and optimization methodology and solutions to CTLS with computational logistics. Finally, aimed at the logistics service cases for a large-scale container terminal, the simulation is designed and implemented for different scheduling algorithms, and the qualitative and quantitative comprehensive analysis is executed for the concomitant CTO-LGCC that demonstrates and verifies the feasibility and credibility of the CTO-LGCC and CTL-GCCPP from the viewpoint of the practice of container terminal decision-making support on the tactical level.;2019
The presence of digital in our lives and in the world of education is transforming the processes of knowledge acquisition and conceptualisation, and influencing the teaching practices as well as the use and the role of technologies as an educational mediator. These transformations require to the research constant attention and reinterpretation of the paradigms to take into account the evolution of the technologies and the different awareness of all the actors. Therefore, research in education must necessarily complement the analysis of the existing situations with new models and strategies of inclusive didactics supported by digital mediation, by activating collaborative research programs with schools. In this paper we outline a new multidisciplinary research project on the impact of digital mediation on education and learning in primary school students, with specific reference to the strengthening of foundational skills such as calculation, problem solving and computational thinking.;2019
The present study aimed to investigate primary school students' achievement in programming concepts after 6-month learning of Scratch programming and 6-month learning of App Inventor programming. A test of programming concepts was developed based on the evidence-centered approach to assess students' progression. Online tests were administered to 1678 grade-5 students in class with the help of teachers. Students were given 30 minutes for each test before and after the programming course. Based on partial matrix sampling method, three test forms were created with 5 common anchoring items to reduce students' burden of completing the full test form developed for this study. The unidimensional dichotomous Rasch model was therefore employed for calculating students' ability scores. Results suggested that the test is valid for measuring programming concepts according to the mean-square fit statistics and other fit indices. Paired sample t-test was conducted to evaluate students' progression based on the ability scores. Results of the study showed that the programming course is effective as students made significant improvement upon course completion. In addition, group differences in gender and perceived competence (low vs medium vs high) were further explored with independent sample t-test. Results showed no significant gender differences regarding students' progression. In other words, boys and girls had similar initial levels of programming ability scores and rates of improvement regarding programming concepts. Results further revealed some interesting group patterns that boys with medium levels of perceived competence and girls with low levels of perceived competence show the most rapid improvement, indicating the course influenced different groups of students to different extents. Findings of this study shed light on the importance of visual block-based programming as a means for fostering programming concepts among primary school students. Educational policymakers should refer to the findings and propose policies to support programming education so that students can establish a solid foundation of programming concepts for the development of computational thinking.;2019
The present work deals with the problematic of the supposed non relation between scientific contents and student's daily life themes. On the one hand, there is a great lack of professionals in the technological area, and if it is true that there is no relationship between scientific content and the daily life of students, it would seem easy to meet this demand by adjusting such scientific content to the needs of the labor market. It would suffice to know exactly what those needs are. For this reason, it is prudent to be concerned about how teachers will understand the links between the scientific knowledge addressed by themselves and the use of technologies. Would teachers agree to this? If they are in charge of bringing the technologies of students' daily together to the scientific content, teachers will take what as epistemological basis? There wouldn't be a risk that, in attempting to establish such relationships, the students construct pragmatists understandings, since, for example, creations of electronic prototypes, artificial intelligence, nanobiotics, biotechnology, etc., could be understood by them as practical examples of the reasons of the scientific knowledge? We present in the present work investigations and understandings about how science operates in an epistemological sense, in an attempt to elucidate and propose pedagogical approaches in technological education aimed at the construction of instruments for learning. In this work, we discuss the need to improve in school curricula, subjects such as abstract knowledge, mathematization, instrumentalization of processes and rationalization of scientific phenomena, aiming at preparing students so that they can assume positions of protagonism towards a technologic future eminently mathematical and hybrid, supported in the collaborative work between humans and machines and computational thinking.;2019
"The present work proposes the creation of a Virtual Reality tool that allows students to learn basic concepts of programming and computational thinking with the purpose that they enjoy the technology and feel motivated to learn more. The tool is a Visual Programming Language; the algorithms are formed by block-assembly, thereby solving one of the students' main problems, which are syntax errors. In addition, the tool brings with it a set of level-ordered challenges aimed at teaching students basic principles of programming and logic (sequential programming, repetitive and conditional control structure), where at each level the student will learn the different concepts and behaviors of computational thinking. For the evaluations with the users we counted on the participation of 18 students between 12 and 15 years old coining from two public institutions of Rio de Janeiro. In these evaluations it was also considered to measure the sensation of immersion through Telepresence, Social Presence and Usability.";2019
"The process of implementing coding at schools attended by pupils from six to fourteen years of age is a current trend in developed countries. In some cases, simple activities involving coding might be even included at kindergartens attended by children from three years of age. The crucial aim is to develop the so-called computational thinking which is going to be more and more essential for a successful personal and professional development of every individual. There is a broad range of factors influencing the success of the change in the curriculum, which is, inter alia, supposed to include coding. In addition to the necessary teaching aids and know-how, teachers also need to have positive attitudes towards its implementation. The main objective of our research is to identify teachers' attitudes towards introducing coding to their classes. We discovered that not all teachers of computing agree with including algorithmization and coding in their teaching. Approximately one half of the questioned educators hold a negative attitude towards the curricular change; they would rather continue teaching computer user skills and basic programs. Their attitude proves to be an impediment to a successful curricular change as teachers should fully grasp the teaching content and communicate it with enthusiasm to their pupils. Insufficient knowledge is the key factor influencing teachers' negative attitudes towards the introduction of coding to schools.";2019
The program Introduction to programming in the first cycle of basic education initiated in 2015 has provided the opportunity to develop computational thinking and digital literacy among students. The existing literature suggests that Scratch programming language may have a strong influence on the skills acquired by students in classroom. In this context, it is intended to build an intervention with objectives that fit into the Student Profile leaving compulsory education and developed within the scope of curricular flexibility, recommended for the 1st year of basic education. The applied methodology aims to evaluate the impact on students' knowledge (mathematics and mother tongue), attitudes (in relation to knowledge and citizenship) and on the capacities (cognitive, emotional and practical) as well as in the school community (students, teachers and families).;2019
The promotion of Computational Thinking principles at different levels of education enables the development of practical competencies for software development. Several off-the-shelf technologies exist to promote computational abilities with the support of block-based programming and working hardware. However, in some contexts, a significant limitation is the complexity and costs that carry the acquisition and implementation of working hardware such as Educational Robots. In this paper, we discuss a strategy to reinforce the learning of Computational Thinking (CT) skills by providing an analogous method to Educational Robots. We offer an affordable solution to assist high school students to build a CT-based software/hardware integrated solution. We executed this strategy in a coding bootcamp where students were required to design and implement an algorithm, and illustrate its execution in software and hardware. The proposed exercise delivered the expected results engaging students to ideate the solution of a problem, implement an algorithm, and create a physical demonstration of it.;2019
"The purpose of science education is scientific literacy, which is extended in its meaning in the 21st century. Students must be equipped with the skills necessary to solve problems from the community beyond obtaining the knowledge from curiosity, which is called 'computational thinking'. In this paper, the authors tried to define computational thinking in science education from the view of scientific literacy in the 21st century; (1) computational thinking is an explicit skill shown in the two steps of abstracting the problems and automating solutions, (2) computational thinking consists of concrete components and practices which are observable and measurable, (3) computational thinking is a catalyst for STEAM (Science, Technology, Engineering, Arts, and Mathematics) education, and (4) computational thinking is a cognitive process to be learned. More implication about the necessity of including computational thinking and its emphasis in implementing in science teaching and learning for the envisioned scientific literacy is added.";2019
The purpose of the present review was to identify culturally responsive education (CRE) tools and strategies within K-12 computing education. A systematic literature review of studies on CRE across 20 years was conducted. A narrative synthesis was applied to code the final studies into six themes: sociopolitical consciousness raising, heritage culture through artifacts, vernacular culture, lived experiences, community connections, and personalization. These common themes in CRE can help empower and attend to the needs of marginalized students in technology education. Furthermore, the review serves as an important overview for researchers and educators attempting to achieve equity in computing education.;2019
"The purpose of the study is to examine the effect of unplugged coding activities carried out with middle school students on their computational thinking skills. This study employed nested-mixed design, which is a mixed research method; the data were supported by including the qualitative phase into an experimental study. In this frame, a group of 114 middle school students consisting of 5th graders were given coding training titled Kesfet Project - I Discover Coding by using unplugged coding content. The Computational Thinking Scale was applied to the students at the beginning and end of the training; the results obtained from the scale were analyzed by means of a paired t test. Finally, it was found out that unplugged coding activities had a positive effect on the improvement of computational thinking skills of the students. An examination of the subfactors revealed that there is statistically no significant change in the problem solving skill despite the positive impact observed on creativity, algorithmic thinking, collaboration and critical thinking skills. Following the analysis of observation and daily data, the findings obtained revealed that the students usually displayed high levels of motivation and class participation in unplugged coding activities, they had difficulty in concretizing certain concepts as well as subjects requiring mathematical knowledge; various teaching methods and techniques were used in classes; the students liked the activities especially due to their appealing nature and their relation to daily life; however, there were occasional problems with scheduling of activities and teamwork due to overcrowded class size; the students experienced problems in achieving outcomes such as perceiving the relationship between computer science and mathematics and analyzing the given problem, and could have difficulty in associating between computer science and mathematics or between the subjects learned and the computer lesson, and in analyzing a given problem.";2019
The purpose of this paper is to show the effect of learning analytics system based teaching that instructor depends on a system which monitors learner's programming activities and grasps his/her achievement level in real-time under block-based programming environment. Based on the analyzed information, teachers might provide timely help and lead students to engage in coding education. Also, we found that there exits statistically significant difference in decomposition, abstraction, and algorithm components among several components of Computational thinking skills.;2019
The purpose of this research is to study the relevance of key concepts and step-by-step problem-solving process of computational thinking. After the computing thinking developed-based SW for non-major subjects for the study was carried out 16 weeks based on computational thinking SW-based education. Based on the survey, since the problem-solving process was examined whether the need for computational thinking concept. Results, analysis data to understand the problem, the choice of algorithms and procedures, and best practice in the design of automated solutions to problems that have showed the highest influence. I hope the study enabled on the application of computational thinking of the nine core elements in order to improve the problem solving skills of learners based on the findings of the study.;2019
The purposes of our study were to develop and validate a test for measuring Korean elementary and middle school students' information and communications technology (ICT) literacy and to make suggestions for improving ICT literacy across Republic of Korea. To those ends, we conducted a literature review, consulted expert opinions, administered a pilot test to 1086 students, and ultimately developed and validated an ICT literacy test by measuring and analyzing the ICT literacy of approximately 15,000 students in Korea. Results indicated that the ICT literacy of elementary school students was low (i.e., an average of 19 out of 35 possible points) and that students in lower grades had lower average scores. Regarding abilities within ICT literacy, problem-solving and information analysis and evaluation were relatively high among elementary school students, whereas information organization and creation, computational thinking, information searches, and information communication were relatively low. Among middle school students, ICT literacy was also low (i.e., an average of 18 out of 35 possible points), and eighth-grade students demonstrated lower literacy than seventh- and ninth-grade students. Although the difference among those grades was minor, the gap in ICT literacy did become greater as students get older. Regarding abilities within ICT literacy, information utilization and management was high among middle school students, whereas all others were low, particularly computational thinking. Drawing from those findings, we recommend a few methods of improving the ICT literacy of elementary and middle school students in Korea.;2019
"The recognition of middle grades as a critical juncture in CS education has led to the widespread development of CS curricula and integration efforts. The goal of many of these interventions is to develop a set of underlying abilities that has been termed computational thinking (CT). This goal presents a key challenge for assessing student learning: we must identify assessment items associated with an emergent understanding of key cognitive abilities underlying CT that avoid specialized knowledge of specific programming languages. In this work we explore the psychometric properties of assessment items appropriate for use with middle grades (US grades 6-8; ages 11-13) students. We also investigate whether these items measure a single ability dimension. Finally, we strive to recommend a lean set of items that can be completed in a single 50-minute class period and have high face validity. The paper makes the following contributions: 1) adds to the literature related to the emerging construct of CT, and its relationship to the existing CTt and Bebras instruments, and 2) offers a research-based CT assessment instrument for use by both researchers and educators in the field.";2019
The research project aims to identify the cognitive processes underlying the Computational Thinking (CT) skills of primary school pupils. Moreover, it investigates which didactical strategies are most effective for implementing CT in the curriculum. A mixed methods research was designed: qualitative data gathered from interviews and observations are combined with quantitative data collected through pre- and post-test measures with respect to the intervention.;2019
The resurgence of computer programming in the school curriculum brings a promise of preparing students for the future that goes beyond just learning how to code. This study reviewed research to analyse educational outcomes for children learning to code at school. A systematic review was applied to identify relevant articles and a thematic analysis to synthesise the findings. Ten articles were included in the synthesis and an overarching model was developed which depicts the themes. The results demonstrate that although students are learning to code, a range of other educational outcomes can be learnt or practiced through the teaching of coding. These included mathematical problem-solving, critical thinking, social skills, self-management and academic skills. The review also identified the importance of instructional design for developing these educational outcomes through coding.;2019
The role of teachers is very important for the educational utilization of Computational Thinking (CT) and its integration in education. As with any innovation, CTs' successful integration considerably depends on the perceptions, beliefs and attitudes of the teachers who will be asked to implement it. The study of these characteristics, concerning Computer Science (CS) teachers in Greece, was the objective of a survey research, theoretically supported by the Theory of Reasoned Action (TRA) and the Technology Acceptance Model (TAM). Findings reveal intense interest of participants on CT and their willingness to participate in professional development programs. Participants also reveal misconceptions of CT and negative attitudes toward its integration in education, that require further study and discussion. The researchers propose directions for the design and implementation of appropriate teachers training programs, while the findings can be exploited to support any effort of integrating CT in education.;2019
The teaching of computing is becoming an essential addition to twenty-first-century learning. An important part of this new addition is the teaching of computing in earlier grades, starting as early as kindergarten in some countries. Yet, there is little research that reports on computing practices in earlier grades. The purpose of this study was to paint a broad picture of the teaching of computing in primary education from teachers' perspectives through a 20-min snowball survey sent out to elementary computing groups. This study reports on the teaching of over 300 teachers who are responsible for teaching computing to nearly 60,000 primary-aged students. The results principally represented teachers in the US and the UK, though smaller samples of teachers from 23 total countries are included. We report on teachers' responses by analyzing quantitative data and open-ended responses to questions about their experiences in teaching computing to children. Results highlight teachers' level of preparation to teach computing, the most commonly taught programming languages, teacher successes and challenges, and observations on how learning to program has affected students.;2019
The technological advance that is currently evident in the different social contexts is contributing to consolidate educational processes that allow the strengthening of technological and social skills in students. This paper presents some results obtained in the development of a learning experience in computational thinking and social interaction skills, using problem solving activities and educational robotics in a playful way. The experience involved 46 students and 2 teachers of the first level of primary education of a concerted school in Salamanca, Spain, during the period 2017-2018. A rubric and checklists were used as data collection instruments. The results show a significant advance in the computational thinking and social development skills explored.;2019
The unprecedented availability of geospatial data and technologies is driving innovation and discovery but not without the risk of losing focus on the geographic foundations of space and place in this vast cyber sea of data and technology. There is a pressing need to educate a new generation of scientists and citizens who understand how space and place matter in the real world and who understand and can keep pace with technological advancements in the computational world. We define cyberliteracy for GIScience (cyberGIScience literacy) and outline eight core areas that serve as a framework for establishing the essential abilities and foundational knowledge necessary to navigate and thrive in this new technologically rich world. The core areas are arranged to provide multiple dimensions of learning ranging from a technological focus to a problem solving focus or a focus on GIScience or computational science. We establish a competency matrix as a means of assessing and evaluating levels of cyberGIScience literacy across the eight core areas. We outline plans to catalyze the collaborative development and sharing of instructional materials to embed cyberGIScience literacy in the classroom and begin to realize a cyberliterate citizenry and academe. Key Words: big data, computational thinking, geographic education, GIS, spatial thinking.;2019
There are a number of studies in the literature revealing that programming instruction has positive effects on development of different cognitive skills. However, there are scarcely any studies suggesting pedagogical approaches to how programming should be done. Therefore, this study focused on how to do programming instruction that target developing students' cognitive skills. In this study, it was aimed to suggest a model for teaching in order to develop various cognitive skills of students. Within the scope of the study, a programming instruction model was created, and it was called Programming in Seven Steps (PSS) model. As research design, special case study was used from qualitative research methods. The research team consisted of two groups: design team (1 faculty member from the department of Computer Education and Intructional Technologies (CEIT), 2 master's degree students, and 2 PhD students) and a Design Evaluation Team (DET) (10 IT and Software teachers who work in secondary schools affiliated to the Ministry of National Education) in the process of constructing the PSS model. During the research, the documents and interviews with the design evaluation team were analyzed with the purpose of determining the steps of the PSS model. The study elaborates the process followed to create the model, the features of the proposed model, and interviews with the design evaluation team. This article details the overall path to designing of the model, the features of the model, and DET interviews. It is aimed that the model introduced in this study will become a guide for educators who want to teach programming at secondary school level.;2019
There has recently been a renewed interest in integrating programming into the curriculum of primary education, partly due to the availability of the visual programming environment (VPE) designed for educational purposes. While substantial progress on exploring the potential benefits of VPE has been achieved, much remains to be done to understand students' acceptance of VPE and whether gender difference plays a role in their acceptance. This study was thus designed to extend the technology acceptance model to identify determinants influencing boys' and girls' behavioural intention to use VPE in the primary school context. It used a mixed method approach to evaluate the proposed model using questionnaire and interview data collected from 431 students (296 boys and 135 girls) in 38 primary schools. Among boys and girls, computer self-efficacy is shown to be the external factor significantly influencing both perceived usefulness and perceived ease of use of VPE, while attitude towards VPE is found to have a significant effect on behavioural intention to use VPE. In addition, gender differences are found in the impact of social influence and external encouragement on students' perceptions towards VPE, and also in the impact of students' perceptions towards VPE on their behavioural intention to use it. Based on the findings, several recommendations are made to encourage primary students to use VPE for programming.;2019
There is a clear call for pre-collegiate students in the United States to become literate in computer science (CS) concepts and practices through integrated, authentic experiences and instruction. Yet, a majority of in-service and pre-service pre-collegiate teachers (instructing children aged five to 18) lack the fundamental skills and self-efficacy to adequately and effectively integrate CS into existing curricula. In this study, 30 pre-collegiate teachers who represent a wide band of experience, grade-levels, and prior CS familiarity participated in a 16-day professional development (PD) course to enhance their content knowledge and self-efficacy in integrating CS into existing lessons and curricula. Using both qualitative and quantitative methodology, a social constructivist approach guided the researchers in the development of the PD, as well as the data collection and analysis on teacher content knowledge and perceptions through a mixed-methods study. Ultimately, participants were introduced to CS concepts and practices through NetLogo, which is a popular multi-agent simulator. The results show that although the pre-collegiate teachers adopted CS instruction, the CS implementation within their curricula was limited to the activities and scope of the PD with few adaptations and minimal systemic change in implementation behaviors.;2019
There is a consensus on integrating computing with STEM teaching in K-12. However, very little is known about the integration. In this paper, we propose a novel framework for integrating science and computational thinking teaching using Logic Programming. We then develop and implement two 8-session integration modules on chemistry and physics for 6th and 7th graders. Pre-and post-tests, class observations and interviews show the feasibility of the framework in terms of 1) development and implementation of the modules, and 2) the students' learning outcomes on science content and Computational Thinking, and their acceptance of the integration.;2019
There is a growing debate about the need to develop innovative teaching and learning approaches in order to address the needs for qualification and requalification of professionals, and meet the challenges of the future of work. Learning in the increasingly digitalized economies is a lifelong activity, spanning the spheres personal life and work. The development of competences to face digital contexts is on the top priorities of debates and policy agendas, and is acknowledged as critical for personal development, active citizenship, employment and inclusion. In this paper we build on the current debates about the future of work and competences, and we offer a review of the discussions concerning the growing demands for the development of capabilities related with computational thinking, highlighting arguments about its applications and it overall relevance for employment across different industries and professions. Building on the acknowledgement of the urging needs for the qualification and reskilling of individuals, notably in what concerns logic and computational thinking, the paper presents an interactive tool that has been developed by the research team for enabling the learning experiences for acquiring competences on coding in an engaged, flexible and creative manner - piBook. piBook is an authoring application to produce programmable interactive books piBooks - that allows users to produce content on topics of their own choice, while facilitating the acquaintance of learners with tools that involve advanced ICT skills such as computer programming tools. A core innovativeness of the tool is related with its potential to reach audiences that are not the typical ICT profiles. Using story telling has the potential of engaging people from diverse areas of knowledge such as humanities, social sciences, engineering, etc. piBook tool offers a timely contribute for introducing key and advanced ICT concepts, and logical reasoning, to vaster audiences supporting the qualification for the digital era.;2019
There is a growing societal recognition of the need for transdisciplinary scholarly collaboration which can enhance undergraduate physics, science, and engineering education. A regional conference/network with 100 university education researchers in physics and other STEM fields was formed to address three themes (problemsolving, computational thinking, and equity) with multiple goals including to strive for transdisciplinary publications. As part of an ongoing participant observation study, phone interviews were conducted 3-4 months later. One year later, publications that were completed as a result of the conference were analyzed for their disciplinary integration. The papers showed evidence of interdispliciplanry collaboration but transdiciplinary collaboration proved too difficult to achieve. Multiple factors such as certain facilitating conditions (including lack of prior shared working history, intrapersonal and interpersonal expectations, and sufficient time) may explain why transdisciplinary publications were not developed.;2019
There is an immense interest in teaching computer science concepts - and programming specifically - to everyone. The United States Military Academy at West Point has required every student, regardless of major, to pass a computer science zero (CS0) course for the last 50 years: From punch cards to Python. We present a history of our CS0 course and the lessons learned from the most recent redesign of the course. We review the last decade of student assessments and how they influenced the latest iteration. We contrast the expectations of students in a CS0 course with those in a CS1 course. We discuss the national efforts to make CS accessible to all and explore the challenges unique to a CS0 course. We demonstrate similarities between our course and the Advance Placement CS Principles and show where differences are justified. We review the relevant pedagogical research for CS0 and present lessons learned over multiple iterations of the course. Based on our current course review and implementation, we believe that Computer Science for everyone is attainable and relevant to the needs of every student.;2019
"There is an international, 360 degrees effort to sustain and support education involving citizens of every age, all educational systems (formal, not formal, and informal), all levels of education (from primary schools to higher education), all disciplines (from Math to Latin), and all stakeholders (from educational institutions to industries and businesses). In the paper, after reviewing the state of the art in Computing (C), Computational Thinking (CT), Computer Science (CS) and Digital Literacy (DL), a curriculum suited for a first course in computing, rooted in international frameworks and curricula, will be discussed. The work will present a detailed discussion of the content of a computing curriculum, suited for education across Europe, and its interdisciplinary applications. The curriculum can be useful for pre-service teachers' preparation, teachers' Professional Development (PD) and high school students. It develops along three strands: C, CT, and CS; DL used as a tool to document and present the artifacts produced in the C, CT, and CS projects, and soft skills introduced by contributions from leading researchers and educators around the world. The assessment practices, learning path, pedagogical approaches, and technologies, will be presented in order to aid teachers in their pre-service studies, PD, and daily teaching practice.";2019
There is scientific knowledge about how to teach software programming, and the necessity to foster young learners' interest in computer science is broadly addressed. However, there is a lack of research on how to teach programming skills in a way that increases the learners' interest in the topic. We present a training session for young students, in order to support the acquisition of programming skills and, at the same time, a positive view towards computer science. The programming environment is based on a visual block-based application within a living lab. Thus, the abstract concept of software programming is presented within a real context and tightly connected to real experiences. In this training, the learners were introduced to a living lab and to programming concepts in order to acquire basics of programming. Two user studies with 44 7th and 8th grade students were conducted, specifically, the students' interest in computer science and their acquisition of programming skills were assessed. Two instructional interventions to support knowledge acquisition, namely worked examples and instructional procedures, were compared. The results did not strongly support one of these instructional interventions, thus, both seem to be appropriate in order to help learners to acquire basic programming skills. In sum, the results show that the tight connection of the training session to a real-world scenario can foster programming skills. This paper contributes by showing the potential of using visual block-based programming in the context of living labs in order to enable students to begin with programming activities.;2019
This article aims to explore the elements which compose the Computational Thinking skills: algorithmic thinking, abstraction and decomposition, and their correlation with primary school learners and with the adopted tools. In order to answer the research questions, a literature review was pursued. Forty-eight contributions were selected, analysed and thematised. Findings show that many valid tools exist and could be used to observe and improve pupils' abilities in this field and that pupils can use abstract and algorithmic thinking to solve problems. Practical guidelines are needed for implementing this 21st-century skill with a cross-curricular approach, which could include all subjects and all children.;2019
This article explores children's development of problem-solving practices through multimodal engagements in digital activities. The study is based on analyses of a video recorded peer group activity in which two children, within the context of a project on computational thinking using the software Scratch, collaboratively work to solve a coding problem. Drawing on work on epistemics-in-interaction and the cooperative and transformative organization of human action and knowledge, the analyses focus on the interactional strategies that the children use to establish, sustain, and develop knowledge within the peer group and the role of affect in the unfolding organization of actions. By analyzing the multimodal cultural production in children's interaction with digital technologies, it is shown how children learn creative and artful skills, thus positioning them as consumers as well as producers of media.;2019
This article presents a continuous assessment methodology for a computer programming course supported by an automatic assessment tool, applied to the practical programming exercises performed by the students. The interaction between the students and the assessment tool was studied through quantitative analyses. In particular, the solutions proposed by the students (computer programs) were analyzed using the verdicts given by the automatic assessment tool: correct solutions or incorrect solutions. In the case of incorrect solutions, the types of programming errors were studied. Additionally, interaction was also studied by analyzing the students' success rate. This rate is the percentage of correct solutions among the total number of attempts (correct and incorrect). Moreover, the relationship between success rate and academic performance was analyzed. Furthermore, this research examines the students' perceptions toward the assessment tool through interviews. The results of this study help understanding the benefits and perceptions of the students with respect to the use of an automatic assessment tool in a computer programming course.;2019
This article presents a large scale quasi-experiment to introduce primary school pupils to Computational Thinking. The aim is to enhance their capability to spot repetitive patterns and to express them as loops. Unplugged and plugged-in activities are used to train the pupils. Trace analysis and pre and post questionnaires were used to measure the impact of the intervention. This article deals with the 2018 session involving 20 classes. The results show a positive impact of the activities and give information about the skills acquired.;2019
This article proposes and explores the kinds of computational thinking, creative practices, design activities, and inclusive learning opportunities provided to diverse high school youth when designing integrated systems through simultaneously physically and digitally responsive wearable games and systems. Previous work in this area, conducted by Richard, coined the term bidirectionally responsive design (BRD) to describe the design of dual-feedback systems using multiple digital and physical interfaces. BRD also emphasizes using simplified fabrication tools, media and coding platforms, and microcontrollers common in youth content creation communities and makerspaces. This study provides a framework to analyze computational concepts, practices, and perspectives that leverage an integrated systems and multimodal learning approach, such as BRD, adding to, building on, and integrating previous analytic approaches to looking at Scratch coding, media design, physical computing and e-textiles. Using a detailed case study of one team during one of the early workshop iterations, we conduct a multimodal analysis of bidirectionally responsive making activities and discuss the ways that they present novel understanding of integrating diverse interests and encouraging collaborative and distributed computational thinking. We further examine how BRD operationalizes and extends multimodal learning theory by adding tangible and integrative dimensions as additional modalities learners can leverage to facilitate meaning making, metacognition, and agency. We also discuss how designing integrated systems, as facilitated through BRD, provides an opportunity to engage in authentic practices around the design of complex systems.;2019
This article represents the European policies for digitization of society and the changes in the Bulgarian educational system, which support the development of digital competences of Bulgarian students, and in particular the introduction of the subject Computer modeling. The results of a study/research on the topic conducted among teachers in all grades of the Bulgarian educational system, with different pedagogical experience are represented. The survey aims to establish the attitude of Bulgarian teachers to the need to introduce a computer modeling course;2019
This chapter describes Technology Beyond Borders, a service-learning course offered by the Department of Computing. The course, which is open to all students, focuses on using programming skills to meet social needs. In 2016 and 2017, the project centered on the development of computer-aided edutainment products for special education needs children. The projects and the collaborating partners were carefully chosen so as to achieve maximal learning impact for our students while at the same time fulfilling a needed service that is not currently met by the commercial sector. Analyses of our students' products show that even though all of these are undergraduate students and many of them are not from computer science or engineering, they are able to develop a product that works well and can be deployed in situ for real use and that the design of the course and project helped to address many of the issues with motivation and engagement that were witnessed in previous similar courses.;2019
This chapter reports on a short experiment conducted in Canada to explore the potential, and feasibility, of introducing complex dynamical systems into mathematics curricula, both in schools and in university undergraduate programs. In particular it aimed to identify those mathematical habits of mind that are (or could be) developed in schools, universities and outside these traditional learning environments through exploring complex systems when approaching real life situations. The use of game design to engage members of the Canadian mathematics education community in the modelling of a real-life ecosystem brought to light different mathematical habits of mind and provided a snapshot of where we are with respect to modelling in mathematics education. Put in perspective with current lines of inquiry in the modelling of complex dynamical systems, in integrating modelling in mathematics education, and in developing computational thinking, the experiment opened a reflection on the possibilities and feasibility of helping tackle the complexity of our world's most pressing challenges through mathematics education.;2019
This course introduces computational methods in human-computer interaction. Computational interaction methods use computational thinking-abstraction, automation, and analysis-to explain and enhance interaction. This course introduces the theory of practice of computational interaction by teaching Bayesian methods for interaction across four wide areas of interest when designing computationally-driven user interfaces: decoding, adaptation, learning and optimization. The lectures center on hands-on Python programming interleaved with theory and practical examples grounded in problems of wide interest in human-computer interaction.;2019
This experience report describes two iterations of a curriculum development process in which middle school teachers worked with our research team to collaboratively design and enact instructional units where students used sensors to investigate scientific phenomena. In this report, we examine the affordances of using a sensor platform to support the integration of disciplinary learning and computational thinking (CT) aligned with Next Generation Science Standards [13] and the CT in STEM Taxonomy developed by Weintrop and colleagues [31]. In the first unit, students investigated the conditions for mold growth within their school using a custom sensor system. After analyzing implementation experiences and student interest data, our team engaged in another round of co-design to develop a second instructional unit. This unit uses a different sensor system (the micro:bit) which supports additional CT in STEM practices due to its block-based programming interface and its real time data display. For the second unit we selected a different phenomenon: understanding and designing maglev trains.;2019
This Full Paper in the Research to Practice category reports on an empirical empirical study in which novel educational tools and techniques were employed to teach fundamentals of problem decomposition a cognitive task transcending disciplines. Within the discipline of computer science, problem decomposition is recognized as a foundational activity of software development. Factors that contribute to the complexity of this activity include: (1) recognizing patterns within an algorithm, (2) mapping the understanding of an algorithm to the syntax of a given programming language, and (3) complexity intrinsic to the problem domain itself. Cognitive load theory states that learning outcomes can he positively affected by reducing the extraneous cognitive load associated with learning objectives as well as by changing the nature of what is learned. In the study reported upon here, a novel instructional method was developed to decrease students' cognitive load. Novel instructional content supported by a custom visualization tool was used in a classroom setting in order to help novice programmers develop an understanding of function-based problem decomposition within the context of a visual domain. Performance on outcome measures (a quiz and assignment) were compared between the new method and the traditional teaching method demonstrated that students were significantly more successful at demonstrating mastery when using the new instructional method.;2019
"This Full Paper of Innovative Practice research shows results that could help to avoid some challenges faced by those who seek to learn how to program. To help improve learning, educators need a deep understanding of the obstacles students must overcome; otherwise, teaching strategies will be uncertain. Moreover, a shallow understanding of topics learned in introductory programming courses can negatively influence the learning of future topics. With the above motivation, we conducted 16 semi-structured interviews with instructors who teach introductory programming courses and we also collected diaries kept by 110 students during their studies. The qualitative analysis of these data revealed connections between the studied contents such as dependencies. Our analysis shows that many difficulties arise front the incorrect application of the knowledge necessary in learning new content, usually because the student has not learned earlier topics or learned them superficially. The main contribution of this paper is a theory that describes the connections among topics of learning how to program, showing the influence that knowledge about one can have on others.";2019
This Innovative Practice Full Paper details a design-based research approach for implementing computational learning activities in a first-year engineering physics course. This study contributes to the growing body of research on computation in engineering education by introducing computational concepts and activities during a physics laboratory class. Drawing from Experiential Learning Theory and using an adapted version of the Use-Modify-Create framework for teaching computational thinking, a series of lab activities was designed that combined physical lab experiments with computational modeling using custom-built VPython simulations. Data was collected from the labs in the form of (1) responses to lab activity worksheets, (2) code modified and/or generated by the students during lab activities, (3) in-code comments provided by the students during the activities. A qualitative thematic analysis was used to analyze students' learning benefits and any challenges faced during the activities. While results show a number of learning benefits, an observed homogeneity of student responses to the questions on the lab handouts point to a set of potential limitations within the activities themselves that warranted further examination. Insight gained from this analysis process is presented as a set of four design principles that will inform future implementations of the hybrid course design.;2019
This Innovative Practice Work-In-Progress paper elucidates the approach of the NSF-funded CAHSI INCLUDES Alliance for creating change in students' competencies by an effort across eight institutions to support the delivery of one- and two-credit hour courses for three levels of problem solving in Computer Science: general problem solving, computational thinking in problem solving, and algorithmic thinking in problem solving. The courses were developed to address industry's need for improved problem-solving skills, incorporating consistent, deep collaboration with Google technical staff. The first of its kind for CAHSI, the problem-solving courses are fewer credit hours than typical courses in order to fit within a traditional curriculum. The intent is to instill complementary problem-solving, computational thinking skills, and logical reasoning needed to succeed in computer science, and make this content available across different student populations at various stages in their academic pathways. Advanced problem solving prepares students for competitive interviews. The courses create opportunities to learn across academic levels, and create new student communities, mentorship opportunities, and social connections to support retention. The paper reports on the course design, student reflection, assessment and evaluation, and an ethnographic study of the courses.;2019
"This paper aims to study the potential of T{h}inker, a custom designed physical computing toolkit, to engage and enable students from diverse background to focus on the design, problem solving and programming aspects in a fun and creative way. 877 first year undergraduate students from 7 engineering disciplines took a 2 hour laboratory session with T{h} inker and at the end participated in a 5-point Likert scale surrey. The survey results showed that T{h}inker provides an engaging way to learn computational thinking and programming; has the potential to offer a variety of project opportunities; is easier to tinker with and (upon little practice) can provide appropriate difficulty level for entry-level undergraduate students while implementing the project ideas. This engaging potential of T{h}inker can be attributed primarily to the exploratory design and problem solving style it promoted in the laboratory against few predefined ways of problem solving expected in typical programming laboratory sessions.";2019
This paper deals with a progress report on the execution of the sense making in the curriculum development for global AGILE Problem-Based Learning incorporating computational thinking enhanced with ICT, which has been based on the collaborative endeavors between School of Business Management at Nanyang Polytechnic University in Singapore (NPU) and Center for Teaching and Learning at Kansai University (KU), intending to foster the Vision 2020 skills as well as the future work skills defined by Institute of the Future. Although Problem-Based Learning has been ubiquitous in the realm of the face-to-face onsite learning environment, the project is based on PBL in which project team members with common interests in entrepreneurship from both universities organize several teams to aim for startup business plans with simulation in the virtual learning environment. The paper will walk readers through the rationale behind such curriculum as well as the entire process of the curriculum development from the initial preparation to the final product including the assessment. The key factors of such curriculum development are elaborated in the conclusion.;2019
This paper deals with debriefing for game-based learning. Using a design-based research methodology, our goal consists of modeling debriefing and helping teachers to implement debriefing into their teaching practices. This model has been tested during experimentations carried out in upper secondary classes (15-17 years old) in Switzerland. Four game-based courses using the game Programming Game have been analyzed. In this paper we focus on the debriefing phase. In order to identify how knowledge is processed during the debriefing, we used an annotation software for categorizing interactions between the teacher and the students. Results show that practices differ among teachers regarding debriefing and that the processing of knowledge (named institutionalization) is not fully performed.;2019
This paper describes a model for teacher professional development as co-design for curriculum planning in which facilitators with design and pedagogical expertise iteratively work with groups of secondary school teachers, one school at a time, to plan whole terms of work, as a form of teacher professional development. It contains preliminary results from a design-based research study involving co-design with digital technologies teachers in two Australian secondary schools. It describes two phases of design involving workshops, strategies and instruments that work to facilitate effective co-design with teachers. Results from this pilot study suggest that the co-design for curriculum planning model leads to high quality teacher professional development for 21st century learning.;2019
This paper describes a small case study on using Minecraft during a course at Pacinotti-Archimede High School. This case study was based on the observation of a game design course, an interview with Minecraft Global Mentor Marco Vigelini, and a long-term written communication with him. During the lesson we visited, the students created their own 3D games in Minecraft. It was not just about using a modern tool, but we could also see several principles of modern education. We discuss these in our study. The course merged two major topics of contemporary education - computational thinking and learning about sustainable development. Pupils in the course were enabled to unleash their creative potential as they become creators of a meaningful game and designers of a better world. Learning was based on collaboration. We could also observe an uncommon approach to teaching and feedback based evaluation. The case study presented may be an inspiration for similar use of Minecraft in formal or non-formal education.;2019
This paper examines conceptual models and their application to computational thinking. Computational thinking is a fundamental skill for everybody, not just for computer scientists. It has been promoted as skills that are as fundamental for all as numeracy and literacy. According to authorities in the field, the best way to characterize computational thinking is the way in which computer scientists think and the manner in which they reason how computer scientists think for the rest of us. Core concepts in computational thinking include such notions as algorithmic thinking, abstraction, decomposition, and generalization. This raises several issues and challenges that still need to be addressed, including the fundamental characteristics of computational thinking and its relationship with modeling patterns (e.g., object-oriented) that lead to programming/coding. Thinking pattern refers to recurring templates used by designers in thinking. In this paper, we propose a representation of thinking activity by adopting a thinking pattern called thinging that utilizes a diagrammatic technique called thinging machine (TM). We claim that thinging is a valuable process as a fundamental skill for everybody in computational thinking. The viability of such a proclamation is illustrated through examples and a case study.;2019
This paper explores and analyses the potential of Problem Based Learning (PBL) as a pedagogical framework for Computational Thinking (CT) in educations. CT skills are increasingly recognized as a necessity to all lines of study, as they not only facilitate digital proficiency, but potentially also a sense of computational empowerment and an ability to take a critical and constructive approach to applying computers when solving complex problems. The distinct focus on higher education is routed in theoretical as well as empirically based challenges, as this particular group of learners for the vast majority have started their education in a mainly analogue learning setting, yet now face employments with a much stronger demand for digital competences. With this paper, we aim to highlight the immediate benefits of PBL as a means to develop CT-skills as part of a higher education.;2019
"This paper explores the fields of interest of the computer science education (CSE) community during the 12 years between 2006-2018 as reflected in the professional content of SIGCSE conferences. For this purpose, we investigated four SIGCSE conferences-2006, 2010, 2014, and 2018-and identified main topics and themes addressed in the following three presentation formats: papers, panels, and special sessions. We defined five content categories derived from the different presentation content: teaching methods, curricula, CSE research, recruitment and retention, and educators. The paper compares the four conferences according to two main classifications (1) content categorization, according to the above content categories we defined; and (2) the most frequent keywords used by the authors to describe their work. These keywords were divided into three themes: CS curricula, CS topics, and pedagogy. Our analysis reveals that: (1) according to the content categorization, teaching methods received the most attention from the SIGCSE community, with curricula coming in second, at a substantial distance; (2) according to keywords categorization: (a) the most frequently used CS curricula keywords relate to CS1, followed by, at a significant gap, CS0 and K-12, following by computational thinking and interdisciplinary studies; (b) it is difficult to identify the most frequently used CS topics keywords (c) in relation to the pedagogy characteristic, the most frequently used keywords are: assessment, active learning, and team collaboration. In future work, we intend to check the consistency of the current findings with other journals and conferences in which the CSE community publishes its work.";2019
This paper explores whether the computational thinking practices of mathematicians and scientists in the physical and biological sciences are also the practices of archival scientists. It is argued that these practices are essential elements of an archival science education in preparing students for a professional archival career.;2019
This paper investigates how high school students in an introductory computer science (CS) course approach computing in the logic programming (LP) paradigm. This qualitative study shows how novice students operate within the LP paradigm while engaging in foundational computing concepts and skills: students are engaged in a cyclical process of abstraction, reasoning, and creating representations of their ideas in code while also being informed by the (procedural) requirements and the revision/debugging process. As these computing concepts and skills are also expected in traditional approaches to introductory K-12 CS courses, this paper asserts that LP is a viable paradigm choice for high school novices.;2019
"This paper is a theoretical discussion about the extent to which school subjects can contribute to teaching students computational thinking. Or is it the other way around and, perhaps surprisingly, how computational thinking might transform existing school subjects? The discussion takes as its point of departure the national experimental project Technology Understanding, which is the Danish response to a worldwide interest in bringing digitalization to students in primary and secondary schools and the Danish governmental initiative regarding implementation of digital literacy as a new school subject and as an integrated part of existing school subjects in primary school (Ministry of Education 2018). Visual arts education is one of the subjects chosen for the integration of technology, and this paper follows up on the ministry's intention by considering visual arts as the starting point for computational thinking. At issue is how visual art may be informed by computational thinking and how computational thinking may be informed by visual art. I argue that teaching students to understand algorithms and data processes can be inspired by practices from contemporary art and the ideas of new materialism (Barad 2008). Contemporary art may be characterized as conceptual, distributive, and interventional in life practices, and programming principles may illuminate how human activities and algorithms intertwine. I also argue that the teaching of contemporary art can be inspired by principles from programming and algorithms. These practices can illuminate how artistic concepts may be planned and designed for human interaction. However, programming for contemporary art requires openness regarding use, while programming for data processes requires the opposite. Thus, the integration of computational thinking into visual arts education is more than a means for understanding programming and algorithms; the dynamic also works in reverse. This paper will bring a wider societal perspective to bear on teaching computational thinking by bringing school subjects into the center of discussions and drawing on current discussions of STEAM education and contemporary art.";2019
"This paper is focused on the teaching/learning process of Computational Thinking at primary and secondary schools. It is generally accepted that Programming is a complex task that requires a long learning process. Theoretical knowledge about fundamentals on algorithms and data structures, as well as, on programming languages are required but are not enough; practicing a lot is also necessary. However, teaching Computer Programming is a hard job, most of the times unsuccessful. To overcome all the difficulties, felt by teachers and students, an increasingly bigger community of researchers in Computer Science is defending the importance of teaching Computational Thinking to young students to train them, since very earlier, in logic and abstract reasoning for problem solving. Our starting point to approach this topic relies on the use of an Ontology (OntoCnE) that describes in detail the concepts Computational Thinking and Programming, and maps those concepts to different education levels, starting with the first year. We believe that a person just acquires a new way of thinking, or a new way of behaving, if he is trained with the appropriate learning resources. So a main investment to educate people in Computational Thinking is on the choice/creation of those convenient resources. In particular we intended to investigate the impact of Augmented Reality in the usefulness of the referred resources. In that direction we will also discuss the development of a Web Platform to help on collecting and classifying (according to the referred ontology) learning resources to be used by teachers in computing classes. On the other hand, the platform will help on the retrieval, from that repository, of the most adequate resources to teach a specific subject to a specific level.";2019
This paper outlines computational thinking, language independent methodology for identifying and analyzing the contexts, targets and contents of online hate speech manifested in Facebook comments on popular Fan Pages or open groups. The three-step process involves data collection via API tools, a preliminary co-occurrence analysis of user-defined semantic field codes and clustering and visual analysis using triadic formal concept analysis navigation tools.;2019
This paper presented ARCode, the system that employed augmented reality (AR) to motivate and help learners with programming Since programming is an abstract task, many need help with programming, both technically and emotionally. ARCode is the game-based learning system that shows how each command works by using AR animations, and focuses on the logical order of commands. Learners can collaborate in the real world while practicing individually in the application. In our experiment, we found that the treatment group had significantly improved on their scores for all topics except for Selection, while the control group did not. The user satisfaction survey suggested that more than 80% of users accepted our system as a useful, enjoyable, and collaborative learning system. The primary results showed the system's potential to help learners better learn programming with high motivation.;2019
"This paper presents a course planning model for lower and upper secondary schools in the fields of digital literacy and computational thinking. The examples in the paper are based on a Danish regional project entitled crossinglT, in which about 35 unique courses were developed and conducted by local educators. Duration of the courses ranged from approximately two hours to four a week for fifteen weeks. The model highlights four perspectives in course planning: (1) a traditional planning perspective, with a focus on learning objectives, learning activities, practical organisation, evaluations, etc; (2) methods for teaching digital production such as iterative design cycles, pair programming pedagogy and video tutorials as well as textbooks; (3) the field of digital literacy including, for example, computational thinking skills, ethics, critical thinking and societal perspectives; and (4) Environment, including local company participation, career learning and cross-school teaching. The model can be used for both planning and analysing courses in the fields of digital literacy and computational thinking. The article offers specific examples of teaching methods and specific cases from practice. Teaching in this field does not have a long tradition in Denmark. The model provides specific advice for well-rounded didactic planning in the fields of computational thinking and digital literacy.";2019
This paper presents a method of evaluating activities that arc proposed for the development of Computational Thinking skills. An evaluation rubric is proposed to identify the level of development of the concepts of abstraction, generalization, decomposition and algorithmic thinking. The rubric was applied by Computer Science teachers in the evaluation of activities of the CS Unplugged project. It was possible to observe that all concepts of the CT were present in the Unplugged activities, but without reaching the maximum score of the rubric.;2019
This paper presents a proposal and an experience report of an educational robotics course integrated to the process of resocialization of youngsters and teenagers in socio-educational measures. This proposal adopts a teaching approach oriented to the development of comprehension, analysis, logical reasoning, creativity and collaboration skills in order to develop in these young people real world problem-solving skills. The main challenge of this proposal is to favor the assimilation of the contents and the development of robotics practice outside the classroom, since, in accommodation, no course material is accessible from paper and pencil to robotics practice instruments. Thus, the main differential of this work is literally working the computational thinking in spaces of deprivation of liberty in order to develop ideas for problem solving tasks. The results of this developed experience point to excellent opportunities for resocialization and professional orientation of young people in socio-educational measures through the teaching of robotics.;2019
This paper presents a training program for teachers and the procedures for its evaluation in the domain of computational thinking, programming and robotics in basic education. This training was conducted within the scope of Project KML II - Laboratory of programming and robotics technologies and learning for preschool and primary school (1st CEB) and is expected to contribute for two of the project's main outcomes: conceive a training plan to include in the higher education of educators and teachers of the 1st ECB and the creation of a MOOC for initial and continuous training of these professionals. The training, with 50 hours of total workload, was developed in a blended learning format, including face-to-face and online sessions (25 hours each). The online sessions were organized into synchronous and asynchronous activities, including autonomous working moments, to perform individual activities. The theoretical references that support this work have their origins in the studies on distance education (EaD), namely in the developments provided by the designated 3rd generation of EaD in which computer-mediated communication has allowed the emergence of new pedagogical scenarios giving rise to new training modalities either fully online or in blended learning format. The training evaluation questionnaire aims to explore the key points that determined the organization of the course and aims to evaluate the level of satisfaction and the opinion of the trainees about the different components of the training, as well as gather information that may contribute to the design of new course in a MOOC format. The questionnaire was designed considering the following dimensions: characterization of respondents and previous experience, satisfaction with training, perception of the learning and involvement in training, perception of the practical application of training, criticism and suggestions for improvement. The questionnaire, in the context of this research, will be an essential source of information for the team's decision-making on the appropriate format for the MOOC to be developed in the future and which constitutes one of the project's final objectives with a view to broadening the access of teachers in Portugal to knowledge on the subject under study.;2019
This paper presents an analysis of programming skills of first semester undergraduate computer science & engineering students using Rainfall programming problem. 345 students, in a 2 hour laboratory session, solved the Rainfall programming problem using either (block-based) Scratch or (flowchart-based) Flowgorithm tool. The success rate, in terms of the number of correctly implemented sub-goals, of the students has been analyzed. The possible influence of factors such as the non-texual modality tool, gender difference, school board from which students had their higher secondary education and prior computing experience in their higher secondary stage has been presented. The possible factors for difficulty towards conceiving and implementing the sub-goals has been indicated based on the observations while evaluating the student programs.;2019
This paper presents the curricular proposal for the Teaching Specialization in Computer Science Didactics of the province of Buenos Aires, Argentina. The focus of this proposal is the training of high school teachers in the field of Computer Science, since there is a deficit in the training in this topic in compulsory school. The project arises in the framework of a call for national universities with Computer Science courses, launched by Fundacion Sadosky of the Ministry of Science, Technology and Innovation. One of the main features is the acknowledgement of Higher Institutes for Teacher Training as referents of excellence in ongoing teacher training. The result is the consensual design and implementation, between these Institutes and the universities, of a curricular program of Computer Science.;2019
This paper presents the development of an educational platform with serious gameplay to support introductory programming learning. On one hand, it presents the technical aspects of the environment and, on the other hand, based on an experimental study done, it identifies students' behavior and attitudes when playing on their own initiative. We want to verify the relations between students' performance and their engagement, satisfaction, and problem-solving strategies. The understanding of these relations may help to identify students' characteristics that may point out to the teacher the need for individualized support.;2019
This paper presents the initial insights from a study in which we explored the relation between computational thinking (CT) and problem-based learning in higher education. CT skills are increasingly recognized as a necessity to all lines of study, as they not only facilitate digital proficiency, but potentially also a sense of computational empowerment and an ability to take a critical and constructive approach to applying computers when solving complex problems. The distinct focus on higher education is routed in theoretical as well as empirically based challenges, as this particular group of learners for the vast majority have started their education in a mainly analogue learning setting, yet now face employments with a much stronger demand for digital competences. The discussions presented in this paper takes its point of departure in the Aalborg PBL-model.;2019
"This paper presents the objectives, design principles and structure of a project for the integration of STEAM in the classroom. It reviews the fundamental causes that have limited until now this integration in pioneer countries such as the United States or the United Kingdom. This project describes three proposals: 1) a fundamental modernization of STEAM, from traditional algebra-based model to a computational-based model; 2) a learning methodology based on the cognitive scope of the human mind, that we labeled Inertial Learning; and 3) a methodology, based on computational environments, called computational ecosystems, to address the three limitations of algebraic-STEAM: school curriculum; human cognition; and computation in complex systems. Finally, it details some implementation aspects of the project, including an academic social network.";2019
This paper proposes a set of activities for students of first years of Chilean Primary Education in the area of mathematics, concentrated in geometry, and numbers and operations, through the incorporation of applied robotics in the classroom. The proposal of activities is bases on the manipulation of a robot called Bee-bot. This study is framed under STEM education, considered as a support tool in the teaching and learning process, guaranteeing a transversal work of skills and knowledge. In addition, it allows studying the concepts of educational robotics as a tool the enhance the skills and technical skills in the process of instruction in mathematics, encouraging the use of programming in technological environments and the development of computational thinking in students, as a way to develop the competence in problem solving.;2019
This paper proposes to combine knowledge acquisition and thinking training in database course teaching, and designs a database-teaching model based on computational thinking training. This model takes computational thinking as the core, and through the close combination of multiple levels of thinking ability and database teaching content, it promotes the improvement of students' thinking ability, trains students to feel and experience the role of thinking in the process of knowledge learning, and guides students to exercise and train their thinking ability independently, spontaneously and consciously in learning. A method of pre-processing before training model implementation is designed, and similar items are merged to design a processing scheme.;2019
This paper reports on the development process of a 3D strategy game and decision making, for mobile platforms, entitled Looking for Pets, whose objective is to promote the development of logical reasoning, as well as to exercise the abilities of Computational Thinking through a playful process for building algorithms. The elements and mechanics of the game are based on the Cognitive, Load Theory, Multimedia Learning Theory and Constructivism. Preliminary tests indicate that it can act in the pedagogical field generating positive impacts of substantial form for learning.;2019
This paper reports the milestones a task proposal takes from its initial conception until its use in the Bebras International Challenge of Informatics and Computational Thinking and the experiences that Switzerland has with the procedures with the intent to share best-practices. This includes the Swiss Bebras Task Workshop, the International Bebras Task Workshop, the generation of the Swiss Task Set, the adaptation of a task proposal for the Swiss Bebras Challenge, the Contest System and the Brochure. Although the process is described from the point of view of the Swiss Bebras Challenge, the processes in some other participating countries are similar. The description of the process is accompanied by a task proposal of which the changes over time are documented. The basic findings are that during the year-long process a task proposal experiences several (re-)considerations, several stages of reworking and adaptation but that these reiterations serve towards quality improvement and ensure that each task proposal is up to standard to be offered to the more than 21, 000 participants in Switzerland annually or even (up to and including the International Bebras Task Workshop 2019) 2.78 million students world-wide annually. This paper is targeted at the general audience interested in the process of developing high quality tasks, be it for contests or for general use. It may also be of interest to people working within the Bebras community to compare the Swiss process to their processes of preparing tasks.;2019
This paper, in the domain of digital media, introduces the theoretical basis of possibilistic art. It models the bases of visual art in the atmosphere of possibilistic thought and the fuzzy geometry by introducing meaningful forms and introduces a way for recording and displaying emotional- behavioral responses of artist in the visual computational space. Finally, as a function of presented concepts, the paper introduces a semi-algorithm for meaningful deformation. This article, by representation of a method based on the eastern thinking and a computational thinking of the west, make a step in the way of eliminating the theoretic and instrumental shortages of visual arts of Iran in the grounds of computational arts.;2019
This poster describes the overarching goals of a newly awarded NSF-funded grant (DRL-1837439) designed to address the provision of equitable access to underrepresented students (e.g., females, African-Americans, Hispanic/Latinx) in computing. Collaborative Research: Broadening Participation with the STEM Ecosystem: Developing a Scalable Model using an RPP Approach evolved out of the research team's past experiences with developing strategic partnerships with school administrators and classroom teachers to bring computationally-rich activities to students throughout the school day, but especially in core math and science courses.;2019
This presentation discusses the issues of sustainability of technology education and draws from the experiences of a practical example. Kids4Wearables was a two-year transdisciplinary project (2017-2019) with the aim of bringing together schools, research and industry on the topic of wearable technologies. Simultaneously, the participating university installed COOL Lab, an innovative teaching-learning lab for digital education & computational thinking. In our contribution, we will describe how we make use of this coincidence to transfer the project idea and the gained knowledge in a newly established and highly relevant institution for digital education. The idea for Kids4Wearables is based on the vehicle theory according to which a topic of interest of young people is used as a vehicle to STEM education. This vehicle-topic should be of interest to a specific group, regardless their gender, age, social and cultural background, and at first sight it should be rather unrelated to STEM. For instance, creative topics such as music, TV-series or fashion allow low- threshold STEM education in schools, as they tie in with everyday life experience of pupils and work motivating when used to access more complex issues of science and technology. In Kids4Wearables fashion was used as a vehicle to access the innovative field of wearable technologies. Funded by the Austrian Research Promotion Agency (FFG), 129 pupils from five primary and secondary schools of a rural region in Upper Austria were able to learn about and invent their own wearables with the support of two university institutes, an artist, and a local company producing cellulose fibres. An external research institute has continuously evaluated the project with both a process and impact evaluation approach, with emphasis on the potential transfer of gained knowledge throughout and after the project. During the two years of collaboration, digital education including computational thinking became obligatory in the syllabus of Austrian compulsory schooling. Schools should either provide digital education as a new subject or integrate it into existing subjects. However, teachers have been hardly prepared to implement digital education in their teaching. Consequently, the newly installed COOL Lab at Johannes Kepler University Linz was flooded with requests for workshops for pupils. Kids4Wearables proved to offer a valuable approach of how to implement digital education in existing subjects such as textile arts and technical handicraft. However, teachers recommended in interviews after the project that this implementation of digital education into existing school classes needs more than further education for teachers. It needs a support structure which offers knowledge, skills, access to the latest technology, but moreover additional coaches and trainers, where teachers can turn to with questions and who can be invited to accompany digital education activities in schools. This is what the COOL Lab can offer. Thus, experiences and findings from Kids4Wearables are now successfully used to transfer the approach into a long-term programme - not only for pupils but also for teacher education and in-service training.;2019
This research full paper presents the design of an automatic classifier for Computational Thinking skills in math questions, based on Machine Learning and Natural Language Processing techniques. We trained and evaluated our model using a dataset of real-world math questions. We obtained encouraging results that indicate the proposed approach may ease the process of assessing the level of alignment between matt questions and Computational Thinking skills, which may help improve the problem-solving ability in students of elementary school. These results stimulate the use of automated environments for the elaboration, classification, and resolution of math questions in conformity with Computational Thinking skills.;2019
This research is part of a larger three-year study investigating the impact of humanoid robots on students' learning and engagement. In this case study, Aboriginal and non-Aboriginal students worked with a humanoid robot to develop, in parallel, both their programming skills and their understanding of the traditional Narungga language and culture. For six months a school engaged students in learning two languages: the coding language required to program the robot and the Narungga language. Qualitative data were collected and triangulated to determine how the humanoid robot was utilised in the classroom and re-occurring themes were identified through the case study. This research drew on questionnaires, interviews and journals from teachers to understand the impact of humanoid robots on student learning. The case study demonstrated how using humanoid robots enhanced pride and interest in Aboriginal language and culture.;2019
This research study presents our work focused on studying the development of introductory computational thinking in undergraduate biomedical engineering students. In response to the growing computational intensity of the healthcare industry, biomedical engineering (BME) undergraduate education is starting to emphasize computation and computational thinking. Computational thinking is a way of thinking that uses concepts and methodologies of computing to solve problems in interdisciplinary and multidisciplinary subjects. In broader terms, computational thinking is not only associated with using computational tools but also with the thought process of solving a problem by data representation, problem decomposition, and algorithm design. Despite being so important, there is little research work or information available on the development of computational thinking in BME undergraduate students. Our research focuses on how BME undergraduate students develop computational thinking skills while performing group activities related to problem-solving. In order to conduct this study, we incorporate a teaching methodology that prompts computational thinking in a thermodynamics course being taught at a public mid-western university to approximately 120 sophomore students. We observe classroom activities involving analytical problem solving followed by pseudo code generation for computational coding. In order to investigate computational thinking, we collect classroom observations of small groups of students as they come up with a solution to an analytical problem with each other. We complement the observation notes of the classroom activities with follow up semi structured interviews with individual students from five groups. Thematic analysis of the student interviews is used in order to analyze student responses towards the incorporation of computation intensive teaching methodology. This Work in Progress helps us expand our understanding of computational thinking development and the challenges involved in performing computational thinking activity in BME undergraduate students.;2019
This Research to Practice Full Paper investigates the effect of Computational Thinking (CT) and robotics on learning mathematics. CT involves problem-solving skills based on Computer Science concepts. However, there is no CT formal definition as well as information on how to integrate it with other high school subjects. Studies are still searching for methods, tools, and instruments to evaluate CT skills to allow effective adoption. Problem-solving is critical to mathematics, and introducing robotics in this context can favor the learning process. The goal of this study is to apply educational robotics in a Brazilian public high school and evaluate the impact on the development of CT skills and mathematical performance. Two research questions guide the study: (RQ1) Can the use of robotics favor the development of CT skills? (RQ2) Can the use of robotics favor math learning? The development of CT skills was evaluated through the Bebras Challenge, and the annual performance obtained by the students in mathematics was considered to evaluate the impact on mathematics. The overall results pointed out that the use of robotics can favor the learning of mathematics and they bring some indications that the use of robot kits can stimulate the development of CT skills, but still more research is needed.;2019
This Research to Practice Full Paper presents the development of the algorithmic expressions for the assessment tools for assessing algorithmic thinking ability of elementary school children. In Japan, elementary school children will be required to learn computer programming as an interdisciplinary element appearing throughout the curriculum in 2020. The purpose of this programming education is to nurture Computational Thinking (CT) for elementary school children in Japan. However, almost no discussion has been conducted in Japan on how to measure the level of CT an elementary school child has acquired. Since the definition of CT is not very firm, it is not easy to measure the levels of CT. Therefore, several organizations have issued operational definitions of CT. Among the concepts of CT in those operational definitions, Algorithmic Thinking was chosen as a representative of CT, and the assessment tools for evaluating Algorithmic Thinking ability have been developed in this research. The assessment tool was conducted in the experimental Computer Science Unplugged classes and in the control classes in two elementary schools in Japan. There were in total 152 children in the classes, and all of them were 5th grade children. By answering the questions in the assessment tool, each child got a score between 0 and 15. The scores were statistically analyzed.;2019
This research to practice full paper reports the authors' experience in teaching live computer science courses that were developed specifically 14 non-CS major students. These courses were taught in a span of four years in a public research institution in the South-eastern region of the United States. The investigators collected data from both the students and the instructors in the hope to seek empirical answers to the question of what non-CS major students are looking 14 in computer science classes. The answers to this question help shed the light on what educators should provide to the students in these courses. Based on the analysis of the data gathered, the investigators proposed a list of recommendations to help guide fellow educators in the development of non-CS major computer science courses.;2019
"This research to practice work in progress has two main objectives: i) the improvement of interdisciplinary teaching and learning processes in an integrated course of informatics in high school course and; ii) turning students into learners by the designing and development of innovative features for m-learning applications. Such objectives are integrated each other, since the improvement in the teaching and learning processes will not be restricted in the proposal and use of a practical framework for the improvement of students' skills in the computational thinking, but also in the use of the m-learning features and applications to improve educational issues faced by both students and teachers. In this perspective, active-learning and problem-based learning theories were considered to support the proposal of a series of activities composing a framework to be adopted to achieve the target objectives. The interdisciplinary teaching and learning processes improvement has its roots at the proposal of solutions for problems into disciplines of high school curricula through the innovative m-learning features to be designed and developed by the students. In this paper it is discussed the motivations about the proposal of this project, the teaching and learning implications in the context of a integrated course of informatics in high school course, its planning and a pilot conduction of mainly initial activities with the volunteers students. Such activities include: (a) the identification of problems and the planning of solutions based on m-learning features; (b) the design and development phases of an initial set features; and (c) a preliminary evaluation of usability of some mockups of m-learning application. At the end, the identified evidence are discussed, mainly those related with the implications for the interdisciplinary scenario for the teaching and learning processes, the initial identification of benefits in the perspective of the participation of students as learners and the future work, as well.";2019
This Research-to-Practice Full Paper evaluates an online programming course for K-12 educators that aimed to teach Computational Thinking (CT). CT is widely defined as a set of skills, such as problem solving and systems design, that rely on Computer Science principles. As these skills are increasingly demanded in modern society, it is critical to include CT in K12 education to boost not only computing courses, but various other disciplines. However, most educators do not yet know the basics of CT and Computer Science fundamentals, particularly in Brazil. In this context, we designed and implemented an online programming course for K-12 educators to provide qualification in CT and Programming basics, as well as to assess learners' attitudes towards Computing, how their motivation are expressed during the course, and the correlation between motivation and attitudes. The results indicate that participants' attitudes towards Computing has become more positive after the course, primarily their comprehension of CT and confidence to learn Computer Science. The outcomes also suggest a high level of learners' motivation over the course, and reveal a high correlation between the relevance expressed in the course with their interest and confidence towards Computing.;2019
This study considers whether the Swift language can be used as a first language for teaching introductory programming. Our department targets the creation of digital contents and media studies. Students are concerned with both digital media contents and computer technology. Learning programming is important for our students to foster computational thinking and utilize programming for their study and creation. We conducted two courses to teach programming to beginners using Java and Swing. The poster presents the contents of both courses, results of examinations, and consideration of the results.;2019
This study discusses a NSF-funded Research Practice Partnership (RPP) to develop and pilot instructional materials for teaching computational thinking to Grades 3-5 students, with a focus on language learners. The study takes place in a U.S. school district whose percentages of Latino/a students, language learners, and low-income students are among the highest in the nation. The project is among the first to examine the linguistic and sociocultural factors that facilitate the success of multilingual students in mastering computational thinking. Utilizing principles of Design-Based Implementation Research in alignment with the RPP approach, researchers worked collaboratively with teachers and administrators to identify problems of practice in computer science education specific to the district. A broad survey of national and regional computer science initiatives was conducted to identify effective approaches for teaching computational thinking to diverse learners. As a result of this survey, the RPP identified a pathbreaking curriculum that aligns with the Computer Science Teachers Association K-12 standards to pilot in five classrooms in the first year of the RPP. The curriculum was further revised to align with the Common Core State Standards for English Language Arts and the California English Language Development standards during a week-long summer institute. This paper describes these experiences, highlighting the integration of computational thinking into an English Language Arts curriculum as well as the linguistic scaffolding strategies utilized to better meet the needs of multilingual students. This experience report uncovers pedagogical practices of computational thinking for diverse students and identifies areas for future work.;2019
"This study examined how computational thinking (CT) has been used to teach problem-solving skills and programming education in the recent past. This study specifically (i) identified articles that discussed CT approach for programming education at higher education institutions (HEIs), (ii) classified the different CT approaches and tools employed for programming education at HEIs, (iii) synthesised and discussed results that are reported by relevant studies that utilized CT for teaching programming at HEIs. A systematic literature review methodology was adopted in this study. Out of 161 articles retrieved, 33 of them that met the inclusion criteria were reviewed. Our study revealed that the use of CT at HEIs for programming education began in 2010; many studies did not specify the context of use, but the use of CT is found to be gaining grounds in many contexts, especially the developed countries; course design approach was mostly employed by educators to introduce CT at HEIs for programming education. Furthermore, this study pointed out how CT approach can be explored for designing a smart learning environment to support students in learning computer programming.";2019
This study examined the effects of a card-coded robotics curriculum and associated activities on kindergarteners' sequencing and problem-solving skills, which are forms of computational thinking. Kindergarteners participated in card-coded programming using a robot called TurtleBot. A card-coded robot curricular intervention was also designed to enhance their planning behaviors using complementary tools. This study examined an 8-week robotic curricular intervention through assessment of 53 participants ranging in age from 5 to 6, while also evaluating sequencing and mathematical problem-solving in both the treatment and comparison groups. It was found that children in the treatment group who engaged in the card-coded robotic curricular intervention performed better on sequencing and problem-solving tests. This finding indicates that an enhanced planning experience using card-coded robots was beneficial for improving young children's thinking skills. The implications for designing appropriate curricula using robots for kindergarteners are addressed.;2019
This study examines the impact of grouping by gender and group roles on robotics performance, computational thinking skills, and learning motivation towards computer programming. One hundred ninety-one students in fourth and fifth grade completed the project. LEGO Mindstorms EV3 robotics were used to compose and program music in groups of three to four students. The robotics project was completed over the course of fourteen weeks for 1 h each week. Gender-structured groups of all female, all male and mixed female and male were randomly assigned in each class. All groups in participating six classrooms were assigned one of three group roles implementation, which were fixed, rotating and no role. This study is significant towards identifying group scaffolds and supports that can produce benefits for all students in robotic activities. Results indicated that group roles matter when students are working on collaborative robotics projects. Three different implementations of group roles in robotics activities demonstrated an impact on robotics performance scores. Gender composition of the group did not impact groups' robotics performance. Group roles also impacted student computational thinking skills, while gender composition of the group still demonstrated no significant difference. Finally, while group roles demonstrated a difference in learning motivation towards computer programming, gender composition demonstrated no difference in learning motivation towards computer programming.;2019
This study explored how Australian music technology courses teach employability skills. A curriculum mapping of 63 undergraduate courses was conducted with course learning outcomes aligned against two benchmarks. The first benchmark was the Ten Skills for the Future Workforce which identifies key employability skills graduates will require in the coming decade. The second benchmark was the Australian Qualifications Framework Specification for the Bachelor Degree which defines the generic skills graduates must obtain through Australian Bachelor Degrees. This curriculum mapping reveals that Australian music technology courses teach Novel and Adaptive Thinking, Computational Thinking, New Media Literacy, and Design Mindsets universally. However, this curriculum mapping also reveals a deficit in employability skills related to Cross-Cultural Competency, Transdisciplinarity, Virtual Collaboration, and Collaboration more generally. The implications of this mapping is that Australian music technology educators seem to be prioritizing specific technical and creative skills over higher-order applications of skills and knowledge which are contextualized in their broader social and cultural contexts. Finally, this article shows how curriculum mapping can be implemented to embed employability skills progressively across a program sequence using a case study from the School of Music, University of Queensland.;2019
This study explores interactions between computational thinking, gender and engineering identity among biomedical engineering undergraduate students. Biomedical engineering enjoys higher rates of women's enrollment than other engineering disciplines, but nevertheless has gender disparities in persistence within the field. Additionally, trends towards greater incorporation of computation into biomedical engineering have the potential to recreate the gender inequities seen in more computationally intensive engineering disciplines. Recently, 'engineering identity' has emerged as a powerful analytic lens to understand persistence in engineering, particularly for underrepresented groups such as women. However, there is limited work examining how experiences using computational methods influences engineering identity formation in undergraduate biomedical engineers. Further, it remains unclear to what extent gender differentially mediates the effects of computational practice on engineering identity formation. In order to explore the intersection of these issues, we study a thermodynamics course in the biomedical engineering department of a large Midwestern public research institution in the United States. The thermodynamics course includes in-class computational modeling group activities and has an enrollment of more than 120, primarily sophomore year, undergraduate students. We use a qualitative study approach that includes gathering data through classroom observation and detailed semi-structured interviews. We analyze classroom observation data to try to understand student experiences of learning and participation during in-class computational modeling exercises. Specifically, we look for evidence of gendered differences in task sorting and engagement with the exercise. Classroom data is complemented by semi-structured interviews. Thematic analysis of semi-structured interviews gains student's perspectives on how gender has influenced their learning experience and their identity as engineers.;2019
"This study highlights the importance of an educational design that includes robotics and programming through a visual programming language as a means to enable students to improve substantially their understanding of the elements of logic and mathematics. Gaining an understanding of computational concepts as well as a high degree of student participation and commitment emphasize the effectiveness of introducing robotics and visual programming based on active methodologies in primary education. Implementation of this design provides sixth-grade elementary education students with activities that integrate programming and robotics in sciences and mathematics; these practices allow students to understand coding, motion, engines, sequences and conditionals. A quasi-experimental design, descriptive analysis and participant observation were applied across various dimensions to 93 sixth-grade students in four primary education schools. Programming and robotics were integrated in one didactic unit of mathematics and another in sciences. Statistically significant improvements were achieved in the understanding of mathematical concepts and in the acquisition of computational concepts, based on an active pedagogical practice that instills motivation, enthusiasm, commitment, fun and interest in the content studied.";2019
This study implemented an intervention using a visual programming language (VPL) to improve students' understanding of basic programming concepts. The VPL learning environment may reduce the difficulties in programming language learning and is suitable for teaching students who are not computer science majors. Meanwhile, the difference in learning performance of students with different levels of self-efficacy was explored. The basic programming concepts included sequence, condition, and loop. A quasi-experimental design was employed in this study. The participants consisted of 180 students taking general courses at a university in southern Taiwan. Instruments included the Test of Basic Programming Concept and a self-efficacy questionnaire. The results indicated that the VPL teaching improved learners' understanding of basic programming concepts in the experimental group. The effect on basic programming concepts was especially large in students with moderate and low self-efficacy. The implication is that the VPL has extensive potential for programming courses in the general education of universities.;2019
This study investigated patterns in the development of computational thinking and programming expertise in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Prior research on programming expertise has identified three general areas of development program comprehension, program planning, and program generation. The pedagogical practices in ECS are consistent with problem solving approaches that support the development of programming expertise. The study took place in a large urban district during the 2016-17 school year with 28 ECS teachers and 1,931 students. A validated external assessment was used to measure the development of programming expertise. The results indicate that there were medium-sized, statistically significant increases from pretest to posttest, and there were no statistically significant differences by gender or race/ethnicity. After controlling for prior academic achievement, performance in the ECS course correlated with performance on the posttest. With respect to specific programming concepts, the results also provide evidence on the progression of the development of programming expertise. Students seem to develop comprehension and planning expertise prior to expertise in program generation. In addition, students seem to develop expertise with concrete tasks prior to abstract tasks.;2019
This study, first of all, aimed to develop a new survey to assess Taiwanese teachers' perceived self-efficacy in STEM knowledge. Second, it aimed to probe any differences in teachers' perceived self-efficacy in STEM knowledge regarding their gender and teaching subjects. Last, we examined the structural relations among teachers' perceived self-efficacy in STEM knowledge and their attitudes toward STEM education. The participants were 220 high school teachers in Taiwan. The 30-item instrument consisted of six factors: scientific inquiry, technology use, engineering design, mathematical thinking, and synthesized knowledge of STEM, as well as attitudes toward STEM education. The results showed that the proposed instrument was valid and reliable. In addition, male teachers outperformed female teachers in each dimension of the survey. Last, teachers' self-efficacy in synthesized knowledge of STEM had two mediating effects. One was in the relationship between self-efficacy in engineering design and attitudes toward STEM education. The other was in the relationship between self-efficacy in Mathematical Thinking and Attitudes toward STEM education.;2019
This study, which took place during a 7-week middle school computing course, used structural equation modeling to examine the overall cumulative relationship between self-efficacy, interest, and prior computing experience and students' computer science learning outcomes. The findings indicated that 52% of the variance of student success, measured by a computational thinking quiz and rubric-based evaluations of participants' computing artifacts, was related to the aforementioned learner characteristics. These findings have implications for theory and practice and suggest that future research and instructional design practice in K-12 computing education should take these learner characteristics into account.;2019
"This work presents the results of a research that aimed to evaluate the use of the Scratch visual programming language in the development of computational thinking, in comparison with the use of pseudocode, during the teaching of logic and programming algorithms. The research was delineated with a methodology of action research, which made possible the evaluation of the Scratch language and the pseudocode at the end of the approach of each content. The steps of approaching each content were initiated with the application of the diagnostic evaluation, and finalized with the evaluation of performance. The results indicate that the use of the Scratch language presented better results during the initial stages; as the complexity of the content increased, the use of the pseudocode produced better results. Nevertheless, it is worth noting the good acceptance of the Scratch language for the teaching-learning process of the contents, as well as the contribution that it has had to the learning of logic and programming algorithms.";2019
This work presents the results of some summer stages for high school students, for the first introduction to computational thinking and programming. Differently from other approaches, our experiences are characterized by: (i) a full week of lessons and exercises, for gradually developing a small but complete and original project, (ii) an objects-early methodology, (iii) the choice of a dynamic videogame as the main programming project, and (iv) the availability of few small and focused examples, as source files, for students to start building their own application. At the end, the students' anonymous opinions about the stage, and their own projects, were collected and analyzed, for improving future similar activities.;2019
Thousands of videos are posted online every day. The affordability of video editing tools and social networks has facilitated the creation and spread of videos carrying disinformation, i.e. fake videos. Previous attempts to categorize disinformation have focused on content analysis and ascertaining the intention of creators. To extend these approaches, it is beneficial to incorporate the perspective of other fields that study the trustworthiness of records, such as archival science, to help detect and categorize fake videos. This paper proposes to leverage archival science in combination with computer engineering to devise a new framework for detecting and categorizing fake videos. In doing so, the paper offers a rime study of the way in which Computational Archival Science, which blends archival and computational thinking, can be used to contribute to a novel approach towards solving the problem of fake videos.;2019
To maintain competitiveness as a nation, the United States must broaden participation in computing education and career pathways. Integrating computational thinking and computer science in K-12 classrooms is becoming increasingly essential to the development of a responsible and innovative workforce. Further, with increased recognition of the need for computing competency, workforce development programs that target the emerging workforce that may not be on a college pathway and those citizens who want to retool for the digital economy are also essential. This study examines work by researchers and practitioners in Mississippi to engage all public school students and the workforce with computational thinking, computer science concepts, and cybersecurity, providing pathways for learning that make computing education accessible for all citizens. The state of Mississippi has the lowest median wage in the nation, and one of the lowest rates of STEM employment. With half of the public school children identified as African American, and half of them female, there is much opportunity for broadening participation in computing. Assessments from a K-12 teacher professional development programs will be discussed, in addition to outcomes from one year of a workforce development program.;2019
To promote computational thinking (CT) education in primary schools, in-service teachers need to attend CT teacher development programmes. One of the intended learning outcomes of the programme is to improve CT practices of teachers, which is one of the three key elements in the CT framework proposed by Brennan and Resnick. Assessing one's CT practices is challenging because there is no universally agreed-upon assessment method on CT practices in the existing literature. This study adopted the Evidence-centered Assessment Design (ECD) method to design test questions to evaluate teachers' development of CT practices. This study provided two Teacher Development Courses (TDCs) to enable teachers to teach CT through programming. TDC 1 focused on developing CT concepts, practices and perspectives of teachers, while TDC 2 put emphasis on pedagogies of teaching CT. 80 teachers participated in the two courses. The CT practices tests were administered before the courses, between the two courses and after the courses respectively. Results indicated that CT practices were improved progressively when the in-service teachers attended the two courses. It indicated that it is useful for teachers to experience programming practices in their initial learning as well as during their pedagogical development.;2019
"Today, Computational Thinking is seen as an important competency and the fourth skill that every child should process. Several significant attempts have been made to increase a student's exposure to Computational Thinking at the K-12 level, however the process is complex and requires systematic planning and comprehensive curriculum. In this paper, we describe the STEPP-UP program that aims to introduce middle schoolers to Computational Thinking via Scratch and Java coding sessions. A comprehensive curriculum and hands-on activities are applied to introduce Computational Thinking fir a total of 41 students fir a period of five semesters from Fall 2017 until Fall 2019. To assess the learning objectives, we used three methods of evaluation; design-scenarios, paper-assessments, and learner-documentation. Findings indicate that the students have increased know ledge of Computational Thinking and its applications for problem solving.";2019
"Today, teaching computer programing (coding) at the K-12 level is one of the priority areas of many countries. On the other hand, teachers with different levels of knowledge about computer programming face with questions related to what to teach and how to teach in a wide range of settings. Considering that the educational programs related to computer programming skills for K-12 students may be increased in the future, during the pre-service training of teachers, development of their professional skills to teach computer programming skills should be supported. In this research, the design of an elective course organized to teach computer programming skills to the pre-service teachers (PSTs) in a degree program that trains computer teachers for K-12 classes in Turkey was presented. In addition, the factors affecting the PSTs' perceptions and their success in that course were investigated. Additionally, PSTs' opinions about the course and the teaching of coding in K-12 classes were examined. According to the findings of the research, it was determined that the PSTs' perceptions related to the course differed according to their general self-efficacy, whereas they did not show difference according to their gender, level of knowledge about computer programming, and their self-efficacy related to coding. It was also found that their success in this course did not differ according to their gender, their achievements in previous computer programming courses and their general academic achievement. Besides, the opinions of the PSTs related to the teaching of coding in K-12 classes and about the elective course were positive; however, their opinions about the computer programming environments differed according to the programming environments they experienced. In this article, based on the findings of the research, discussions, and suggestions for future studies regarding the teaching of computer programming at the K-12 level are presented.";2019
"Today's children are growing up in a complex technological reality, which, in turn, is pushing for the integration of digital technologies in educational contexts. Hence, it becomes necessary to explore how more recent educational approaches to technology can be inclusively integrated into education. Among these innovative approaches are the integration of computational thinking, programming and robotics both in preschool and basic education. Considering the referential of key competences for the current 21th century [1], early training in these areas will contribute to the development of transversal competences [2]. Thus, it is crucial to provide education professionals with the skills and resources for an adequate development of programming and robotics activities in educational contexts. In this paper we present a training action developed within the scope of the project KML II - Laboratory of technologies and learning of programming and robotics for preschool and primary school. This training action aims to work with early education professionals towards the development of activities with children, using the tools foreseen in this research project. From the work done during the course, trainees should develop an activity plan using programming and robotics technologies, to be implemented in their respective educational contexts. Within this action, trainees are expected to: reflect on the concept of computational thinking and its development in preschool and basic education [3], [4]; collaboratively develop competencies associated with digital literacy and the use of robots and programming languages developed for children [5]; know programming and robotics resources that can be used in preschool and basic education; learn programming basics through applications such as ScratchJr, or others that can support learning development; plan activities according to the curricular contents of the respective level of education, using programming and robotics. Implemented through b-learning, this initiative will also enable educators and teachers to explore and develop distance learning and collaboration skills as well as the use of various support tools and work time management in synchronous and asynchronous sessions. This training is one of the first actions through which KML II project plans to study how to integrate programming and robotics in preschool and basic education, transversally to all areas of knowledge. Within this project, case studies will be carried out at a Portuguese national wide level. This work has two main objectives: a) to propose a training framework for curricular units of technology, in the courses for teacher training in higher education and for in-service training; b) to design a profile of childhood educator and primary school teacher as mediator in the integration of programming and robotics learning in their educational contexts.";2019
Torino is a tangible programming environment designed for teaching the computational thinking curriculum in the UK to children who are blind or low vision (henceforth, just children) in an inclusive setting. In this paper we describe the experience of children in Bangalore, India, when Torino was introduced to them as a toy for creating and sharing stories, songs and music. We conducted 12 play sessions with 12 children (4 girls and 8 boys) with diverse backgrounds belonging to three different schools for the blind. We briefy present the reasons for play being central to our effort of bringing computational thinking to children who are blind and low vision in India, and share some experiences of the children and some insights that we have gathered so far: Children not only enjoyed every session, they rapidly moved from playing with pre-created examples, to making changes, to demanding that their favorite stories be told. In observing such play, we could infer that they have grasped the basic concepts of computational thinking-fow of control, variables, loops-though not articulated in that vocabulary.;2019
Transforming an idea of an interaction to a functional programmed device requires defining the characteristics of the interaction, a task that typically falls between the designer and the engineer. The user and the computer that are interacting through an interface are typically represented and defined by using vastly different abstractions. The user might be moving a lever or pressing a button, while the computer uses numerical values without specific knowledge of the context. In this paper, we present The Blind Processor, a method for analysing interactions towards story-board development and interaction design. Focusing on looking at an interaction, and separating the perspectives to that of The User, The Machine, and The Observer. By analysing these roles separately, we aim to find common ground about the essence of an interaction, feeding to interaction design. Theoretically, we aim to support the analysis of interaction complexity and technological mediation.;2019
"Transforming the learning process through strategies and tools dedicated to reinforcing experiences, producing commitment, unifying tasks and being fun and persuasive will generate changes in the particular needs of the educational context. In fact, gamification is presented as one of the catalysts of educational potential based on the application of play elements affecting motivation and knowledge apprehension. This research aims to deepen in the suitability of incorporating gamification on the learning process for que acquisition of digital skills. Thus, in this research is examined the disposition of gamification within the global framework of references to digital skills [1] organized into 7 areas and subdivided into 26 competencies: browsing, searching and filtering data, information and digital content; evaluating data, information and digital content; managing data, information and digital content; Interacting through digital technologies; sharing through digital technologies; engaging in citizenship through digital technologies; collaborating through digital technologies; netiquette; managing digital identity; developing digital content; integrating and re-elaborating digital content; copyright and licenses; programming; protecting devices, protecting personal data and privacy; protecting health and well-being; protecting the environment; solving technical problems; identifying needs and technological responses; creatively using digital technologies and identifying digital competence gaps; computational thinking; Operating specialized digital technologies for a particular field; Interpreting and manipulating data, information and digital content for a particular field. The methodology used is based on the application of a questionnaire to 50 experts in educational technologies from Europe and Latin America, obtaining as a result that there is greater convenience in the implementation of gamification for the development of the following digital competencies: collaborating through digital technologies, managing digital identity, programming, engaging in citizenship through digital technologies, sharing through digital technologies and protecting health and well-being. In conclusion, it is evident that the use of gamification for the development of digital competencies is mainly focused on the areas of safety, communication and collaboration. It is therefore recommended to formalize designs of gamification interfaces that address these issues.";2019
Unmanned aerial systems (UAS) can explore common, vast and unsafe places at low cost. They could transform multiple sectors from photography to farming to city planning. However, the software underlying UAS is complex and requires multiple distinct programming skills, e.g., AI, machine learning and flight control. Few programmers encompass these skills, hampering software development and dampening the impact of UAS. We contend that early exposure to UAS software could help align workforce skills. However, early exposure requires curriculum that (1) captures the breadth of UAS software, (2) supports multiple levels of depth for diverse programming backgrounds and (3) fits within resource and institutional challenges. We propose a computational thinking framework. In our approach, lessons fit within 20-30 minute instructional blocks, making them usable in short workshop and extended classroom settings. UAV topics and computational thinking depth link lessons. Teachers can trade breadth for in-depth coding and vice versa. In early work, we presented an autonomous UAS to middle school students. Our 1 hour workshop focused on breadth and was received well.;2019
Unplugged activities on computer science - possibly performed in the fresh air together with classmates - are fun for many children and foster computational thinking. The primary goal is to become aware of CS concepts without programming. Nevertheless, unplugged experience might also be useful for software development in the classroom.;2019
Until relatively recently, technology has been used as a passive tool that makes the learner a user of various applications. However, this has been changing thanks to the widespread idea that all children should have the opportunity to learn a little computer skills from an early age, since they will live in a world where computing is everywhere. Aware that the teaching of programming is not the future but the present, countries such as the United States, Singapore, Estonia and even Spain, face this strategic challenge, which not only prepares students for an increasingly technological labour market, it encourages the development of useful skills for any student regardless of their future professional activity. With this idea in mind, this article describes the case study carried out in a classroom of Early Childhood Education, with students of 5 years of age, with which basic programming concepts have been worked out. The results obtained indicate that they have been able to master the new vocabulary, assimilate the concepts and work for themselves with the chosen tool to carry out the intervention.;2019
Virtual reality (VR) offers an immersive environment where students can experience new locations, landmarks, and settings as if they were physically present. The TalkTech Project pairs students at universities in the United States and Romania, who work as members of global teams, to create and share original, similar VR scenes with their partners. Each team determines how to communicate using web-based collaboration and communication tools, as they create VR experiences for their partners that present locations of cultural interest in their home cities. Students use web-based communication and collaboration tools to discuss cultural similarities and differences experienced as a result of comparing the virtual scenes provided by and interacting with their international partners. The study examines how collaboratively creating and sharing VR scenarios enables students to better appreciate the possibilities for VR in many settings and encourages the development of new digital and computational thinking skills. Research questions for this study are as follows: Can students create immersive VR scene with basic technology skills? How can creating and consuming VR content provide a learning scenario in which students can develop their own digital skills? Will students appreciate cultural similarities and differences after sharing VR experiences with international partners? Will students recognize the potential of digital reality technologies for future personal educational and/or business applications? Preliminary results show that by creating and consuming VR content, students develop an affinity for the potential of digital reality technologies as they virtually explore locations of significance in each other's countries. Participating in this project allows students to demonstrate their technology proficiency and creativity as they apply their digital skills. They must learn to communicate and collaborate across continents, as they creatively solve problems and develop new ideas. The project places students as innovators and content creators, working across boundaries and cultures to ask questions, try different approaches, and figure out a variety of problems, from animating avatars to communicating effectively online. They must adapt to new situations as they arise, learn to find solutions and compromise. Even though students were challenged by using new apps and tools and did not always have the technology skills needed to apply them, all students completed the project successfully. By creating their own VR content, collaborating with international partners, and managing a complex team project, students participating in the TalkTech project develop their own digital skills, and foster their curiosity about the potential of VR applications. Developing digital literacy skills will continue to be important in the digital economy, and students who demonstrate these skills through creative and complex problem solving, collaboration, and communication will be prepared to succeed and innovate in their future careers.;2019
"Water chemistry is proposed as an example where incorporating systems thinking approach can improve mathematical reasoning for students in general chemistry. These advantages are gained with relatively modest mathematical manipulations, such as how does one compute the volume of a pollutant entering an ocean/gulf from a river. Students are accustomed to calculating volume using the familiar lenght x width x height formula; changing the demands on this idea, even modestly to account for river flow rates rather than a length, provides important opportunities for enhancing computational thinking.";2019
We are a year into the development of a software tool for modeling and simulation (M&S) of 1D and 2D kinematics consistent with Newton's laws of motion. Our goal has been to introduce modeling and computational thinking into learning high-school physics. There are two main contributions from an M&S perspective: (1) the use of conceptual modeling, and (2) the application of Finite State Machines (FSMs) to model physical behavior. Both of these techniques have been used by the M&S community to model high-level soft systems and discrete events. However, they have not been used to teach physics and represent ways in which M&S can improve physics education. We introduce the NSF-sponsored STEPP project along with its hypothesis and goals. We also describe the development of the three STEPP modules, the server architecture, the assessment plan, and the expected outcomes.;2019
We categorize MOOC resources with a learning design lens in order to investigate the relation between learning design and learner behavior in a computational thinking MOOC, MITx6.00.1x Introduction to Computer Science and Programming Using Python. Videos are categorized by knowledge type (procedural, conceptual and factual), practice exercises are categorized by teaching intent, and problem sets and practice exercises are scored by difficulty. We consider video viewing and complete watching behavior, recap and review behavioral trajectories, and problem attempts. The analysis is cross-sectioned by learner prior level of experience. Our fine grained analyses, showing variation in learner behavior at a detailed level, provide instructors with a clearer picture of how specific learners interact with particular learning resources and achieve learning outcomes.;2019
We describe the development of a computer vision-based workflow for normalizing images of the legacy punchcard data format (IBM 029 - 80 column punchcard standard) and then reading the encoded data. We show the role of a newly developed Punchcard Extractor Tool within the Brown Dog service API. We also point to our showcase of these same computer vision techniques in a Jupyter notebook system.;2019
We describe the value of reframing digital curation practices through a computational thinking (CT) framework. Using a case study that demonstrates computational treatments of World War II Japanese-American Incarceration Camp Records, we demonstrate the applicability of CT with respect to: (1) Detecting personally identifiable information, (2) Developing name registries, (3) Integrating vital records, (4) Designing controlled vocabularies, (5) Mapping events and people, and (6) Connecting events and people through networks. The work was carried out by 5 teams of students in an 8-week digital curation exploration and development sprint.;2019
We explored the potential of a robotics application in education as a measurement tool of child executive functioning skills. Sixty-five kindergarteners received assignments to go through a maze with a programmable robot, the Bee-Bot. Via observation we quantified how they solved these tasks. Their performance was successfully aggregated into a latent variable, which was used to predict the outcomes on standardized tasks that measure executive functioning. The latent variable significantly predicted performance on several tasks that measure problem-solving abilities, memory, visuospatial abilities and attention. It did not significantly predict pencil-and-paper tasks that measured visuospatial ability and nonverbal or design fluency. This study showed that it is possible to use a playful robotics task to obtain information on children's ability. We recommend more research on using diverse robots in larger samples with different age groups to further explore the possibilities of robots as a test instrument.;2019
We live in a digital society that needs new better prepared professionals for the new challenges and opportunities provided by the ICT. Students must learn how to deal with all the issues that emerge in this new context. They should acquire computational thinking skills by integrating STEAM, however this needs for changes in current learning curricula and also new learning approaches. RoboSTEAM project deals with this issue by the application of a Challenge Based Learning approach that uses Robotics and Physical Devices. One of the problems found during the project is the complexity of the application of a Challenge Based Learning approach due to the special needs of each educational institution. Given this situation the present work presents provides a flexible definition of challenge and describes also samples regarding how to use them.;2019
We present an online assessment system for tracing code snippets. It is particularly suited for K12 settings and features a grid-world and a figure that moves in the world. Learners are asked to move the figure manually in accordance with what a given block of code would do. The system allows inspection of cognitive processes and misconceptions in more detail than typical pen&paper assessments can provide. The paper presents the system and a preliminary empirical investigation together with future work that we are planning for the tool.;2019
We present HyperCubes, an Augmented Reality (AR) platform to foster computational literacy. Using paper cubes as AR markers and spatial tracking, the user becomes familiar with sequences of instructions as coding blocks. We leverage spatial cognition as a means to improve understanding of procedural and sequential models. We have performed two pilot studies for an iterative and user centered design of the platform. With a final qualitative user study we address engagement levels and the educational potential of the platform. We argue that by using spatial cognition and the flexibility of the AR medium, a playful introduction to basic computational thinking concepts can be presented in late elementary school and middle school children.;2019
"We report the experience of adopting an innovative technique for in-class instruction. The technique relies on: 1) replacing the blackboard/whiteboard by a portable drawing tablet; 2) preparing starter pages consisting of code fragments or writings/figures on the drawing tablet for in-class illustrations on complex ideas; 3) recording the in-class illustrations on the drawing tablet for students to review the thinking process after class. This technique has been adopted in three Computer Science and Software Engineering courses, ranging from freshman to junior years, and the student evaluation results indicate that this technique is effective and helps students achieve the course learning outcomes. Comparison of student performance on complex ideas also indicates a positive impact of our approach.";2019
We witness an age where technology has turned into an imperative when times come to rethink education. We hear every day talking about devices like Ovas, Avas, Mooc, Elearning, Mlearning, among other forms of naming the teaching and learning strategies whose logic show us the central role of the technological device in the new conceptions of education. The presence of these devices, both in basic and higher education, does not respond, in any way, to a fashion. They truly account for a redefinition of the pedagogical, where there is a compromise of the Being and the raison d'etre of contemporaneous formation. We will deal with these considerations in this text, which comes from the research project Computational Thinking and Educational Practices. A pedagogical experience with the implementation of the Scratch Programming Language.;2019
Web development is a learning context with the potential to support rich computational thinking. Large-scale analysis of compilation and runtime errors have been used in introductory programming courses and similar approaches can be used to understand learning in web development environments. We investigated activity logs of a novel web coding game to uncover learning trajectories and what people struggle with when learning flexible box (flexbox), a collection of new CSS layout features. We designed a game called Flexbox Froggy, in which learners solve challenges by writing a few lines of CSS code, moving from simple levels that require knowledge of one flexbox property, to complex levels combining multiple properties. We investigate learning curves based on the changes in syntactic and semantic errors learners make as they complete the game. Our findings show that people performed better encountering a single new property than combined with properties they had already practiced. Clusters of learners at different levels did not demonstrate expected error rates based on learning curve theory. Also unexpectedly, advanced groups that mastered syntax had higher semantic error rates than the beginner group, especially when attempting new properties or complex use cases. We conclude with implications for designing and developing introductory web programming games and other instructional materials.;2019
While several approaches have been proposed to assess computational thinking (CT) abilities, it is still unclear how many and which these abilities are. Despite the undisputed importance of assessment, the fact is that there is not enough evidence on which abilities are merely theoretical and which can be empirically observed in the context of CT. This paper is part of a larger investigation in which we try to answer a simple question: can CT abilities be quantitatively defined and measured? In this particular study, we try to answer a simple question: How many CT abilities can be empirically observed using factor analysis? We approach this question, using a dataset containing answers of 1564 students from Lithuania in the Bebras Challenge from 2015. Firstly, we used confirmatory factor analysis to verify a theory that claims that five CT abilities are assessed by the contest. Our analysis shows the theory is not statistically supported. Secondly, we used principal component analysis as an exploratory analysis to try to derive an appropriate number of factors from the data. Surprisingly, the analysis suggests there are only two main recognizable factors. Finally, we briefly discuss these factors and hypothesize that the first is called evaluation ability, which would include abstraction, generalization, and decomposition, while factor 2 is algorithmic thinking and logical reasoning.;2019
While the importance of teaching computational thinking has received national attention over the last decade, many educators continue to lack the understanding and awareness to implement computational thinking as a problem-solving framework in their daily instruction. In this mixed methods study, preservice teachers participated in Pop-Up Makerspace activities designed to introduce and explore computational thinking as a framework for problem solving. After determining the participants' level of confidence teaching STEM-related content was lowest in problem-solving and engineering, the study examined how affective factors such as disposition and attitude were evident during the Pop-Up learning experiences. In this study, educators demonstrated the affective traits of resilience, failure, persistence, and frustration. Each factor of computational thinking was observed during the design and making experience. The effects of participation in a Pop-Up Makerspace motivated the preservice teachers to incorporate these experiential learning experiences into their own teaching practices.;2019
Whilst Science, Technology, Engineering and Mathematics (STEM) interdisciplinary teaching and learning in the USA K-12 education still needs greater promotion, middle school students demonstrated that they can, using low-cost, single board computers that promote the teaching of computer science (in this case Raspberry Pis), successfully engage with computer programming of digital images and videos. The context for these students' engagement was the Advancing Out-of-School Learning in Mathematics and Engineering (AOLME) Project. This chapter describes how the processes of design, model, and implement, supported 40 Latinx middle school students' development of computational thinking in an out-of-school setting, and how these processes promoted the genuine integrated practice and learning of technology, engineering, and mathematical concepts.;2019
With CS Unplugged activities, children all across the world can learn fundamental CS concepts without the requirement of learning how to program first. In the target article, the authors show the connection between CS Unplugged, on the one hand, and constructionism and computational thinking, on the other hand. They do so by providing a mapping between three CS Unplugged activities, Papert's constructionism, and six elements characterizing computational thinking. Here we reflect on what computational thinking is, how it is related to CS Unplugged, and how the CS Unplugged approach can be deepened in order to explore the full potential of constructionism.;2019
With the increased demand for introducing computational thinking (CT) in K-12 classrooms, educational researchers are developing integrated lesson plans that can teach CT fundamentals in noncomputing specific classrooms. Although these lessons reach more students through the core curriculum, proper evaluation methods are needed to ensure the quality of the design and integration. As part of a research practice partnership, we work to infuse research-backed curricula into science courses. We find a three-pronged approach of evaluation can help us make better decisions on how to improve experimental curricula for active classrooms. This CEO model uses three data sources (student code traces, exit ticket responses, and field observations) as a triangulated approach that can be used to identify programming behavior among novice developers, preferred task ordering for the assignment, and scaffolding recommendations to teachers. This approach allows us to evaluate the practical implementations of our initiative and create a focused approach for designing more effective lessons.;2019
With the move towards digital interventions for educational purposes, there has been a loss of tangible and material interfaces, the consequences of which are still being understood. Meanwhile, there is an ongoing lack of gender diversity within STEM-facing majors and careers. In response to this, we have created a physical prototype of BeadED Adventures, a system that uses a physical controller made up of jars of colorful beads to control modified Twine games that follows constructivist philosophies of learning and emphasizes player autonomy. By controlling the experience, the player creates a beaded bracelet that is personalized based on their choices within the game. In addition to the controller, we are creating an educational Twine game in which the player explores an abandoned castle, solving computational thinking puzzles to escape.;2019
With the rapid development of information technology, it is extremely urgent to cultivate compound talents with innovative thinking and innovative ability from the perspective of talent cultivation. This paper mainly starts from the reform of the general computer education course, puts forward the general computer education innovation scheme for interdisciplinary talent cultivation. Stressing on training model of interdisciplinary talents, the reform plan is elaborated from education model, curriculum system, teaching content and practice base construction, etc., and then concrete implementation methods are given from these four aspects accordingly.;2019
Y To investigate the effects that experience in computer programming has on parents' impressions of computer programming, a survey was carried out before and after parent-children workshops. Respondents in this study appeared to be relatively familiar with computers but were not very skilled. The results of the survey showed that respondents' impressions of computer programming after the workshops were more positive than they were before the workshops. Given that the number of participants in this study was limited, it is necessary to carry out the survey with more participants and perform detailed analysis, in the future.;2019
Young people's relationship to the digital economy is a key site of popular and policy attention within the context of shifts in labour market conditions globally. The massification of digital media and rapid growth of digital markets globally have brought significant challenges for policy makers in what counts as work and how best to prepare young people to engage with it. This has manifest in a proliferation of initiatives and policy orientations across much of the global North which have tended to focus on the importance of science, technology, engineering, and mathematics occupations, and, in particular, computing aimed at preparing young people for jobs of the future. The formalization of learn to code programs in school curriculum has been one such initiative. Despite the proliferation of coding and computational thinking curriculum across many countries, there remains a relative paucity of scholarship examining their embedding in educational policy debates. This article follows the announcement of the 'coding in schools' policy in Australia since its formal announcement by Opposition Leader Bill Shorten in his Budget Reply speech in May 2015. The announcement followed similar moves in other countries and has cemented 'coding in schools' as a literacy of 'the future' in the Australian political landscape. This article suggests that, while a policy focus on technical and instrumental skills such as computer coding may help young people to interact with dominant technologies of the present, they also risk weakening a more substantive conversation around educational participation and purpose in the present, and for the future.;2019
Background: It is becoming more common to incorporate education in programming into educational environments. (2) Methods: In order to show the benefits of including teaching programming, we present an investigation carried out with a group of Spanish schoolchildren in the fifth year of primary education (ages 10-11). We demonstrate an integrated experience in the ordinary curriculum connecting technology to mathematics education. We created a work project for students to use Scratch and to assess its benefits, created two groups of students, an experimental and a control group, with a sample of 3795 individuals. They were administered the online version of the Battery of Mathematical Competence Evaluation (BECOMA On) at two timepoints, the pretest (the beginning of the project) and the post-test (the final stage). (3) Results: The results showed statistically significant differences between groups and timepoints, with the experimental group scoring higher, demonstrating the effectiveness of the education in programming program for mathematics. (4) Conclusions: Education systems face a challenge in the sphere of the consolidation of technologies in education with the consequent need to change didactic designs to enhance quality, equitable, sustainable education processes.;2020
A distinctive feature of game-based learning environments is their capacity for enabling stealth assessment. Stealth assessment analyzes a stream of fine-grained student interaction data from a game-based learning environment to dynamically draw inferences about students' competencies through evidence-centered design. In evidence-centered design, evidence models have been traditionally designed using statistical rules authored by domain experts that are encoded using Bayesian networks. This article presents DeepStealth, a deep learning-based stealth assessment framework, that yields significant reductions in the feature engineering labor that has previously been required to create stealth assessments. DeepStealth utilizes end-to-end trainable deep neural network-based evidence models. Using this framework, evidence models are devised using a set of predictive features captured from raw, low-level interaction data to infer evidence for competencies. We investigate two deep learning-based evidence models, long short-term memory networks (LSTMs) and n-gram encoded feedforward neural networks (FFNNs). We compare these models' predictive performance for inferring students' knowledge to linear-chain conditional random fields (CRFs) and naive Bayes models. We perform feature set-level analyses of game trace logs and external pre-learning measures, and we examine the models' early prediction capacity. The framework is evaluated using data collected from 182 middle school students interacting with a game-based learning environment for middle grade computational thinking. Results indicate that LSTM-based stealth assessors outperform competitive baseline approaches with respect to predictive accuracy and early prediction capacity. We find that LSTMs, FFNNs, and CRFs all benefit from combined feature sets derived from both game trace logs and external pre-learning measures.;2020
A key debate in computer science education is whether and how computational thinking (CT) is used within disciplines other than computer science. Broad definitions provide many avenues for developing integrated instruction, as practices within existing activities can simply be reframed in terms of CT. But such general use of the term CT may confuse its meaning and dilute its power as a tool for bringing CS to all. In this paper, we take the viewpoint that mathematical thinking and computational thinking share common practices, such as using repetition to accomplish tasks, but these shared ideas may develop differently in mathematics and computer science. We use document analysis to analyze the K-5 Common Core State Standards for Mathematics for the presence of these common practices and describe the specific ways they develop in mathematics. We compare these elements of mathematical thinking to related elements of CT to identify synergies and differences between CT and mathematical thinking. We argue that these synergies and differences have implications for the development of integrated instruction designed to bring CS to all.;2020
A small group of interested upper secondary education students participated in a workshop where they created a particle-based physics engine and used the engine to implement a hanging cloth simulation and a two-dimensional heat diffusion model of their own creation. During the implementation of their models, learning opportunities present themselves in the form of opening up and exploring different dimensions of variation for the students. By varying aspects and discerning how these changes affect the program, students can construct meaning about the system. The students were video and audio recorded during the workshop and interviewed afterwards. Based on the transcripts, students use of programming was analyzed using social semiotics and variation theory of learning with a focus on the three aspects: coding, visualization, and interaction. The analysis identifies usages of programming such as a transductive link between semiotic systems, the ease of varying and iterating aspects, and the ability to enter into a loop of discovery and understanding.;2020
Acknowledgements was not included in the original article and is now provided to this article.;2020
"Across the world, policy initiatives are being developed to engage children with computer programming and computational thinking. Diversity and inclusion has been a strong force in this agenda, but children with disabilities have largely been omitted from the conversation. Currently, there are no age appropriate tools for teaching programming concepts and computational thinking to primary school children with visual disabilities. We address this gap through presenting the design and implementation of Torino, a tangible programming language for teaching programming concepts to children age 7-11 regardless of level of vision. In this paper, we: (1) describe the design process done in conjunction with children with visual disabilities; (2) articulate the design decisions made; and (3) report insights generated from an evaluation with 10 children with mixed visual abilities that considers how children are able to trace (read) and create (write) programs with Torino. We discuss key design trade-offs: (1) readability versus extensibility; and (2) size versus liveness. We conclude by reflecting upon how an inclusive design approach shaped the final result.";2020
Adaptive online learning can facilitate students' support by responding immediately to the user's interactions. Good feedback to students helps closing the gap between actual and desired performance. In this paper we analyze how to introduce online adaptive formative learning in Computer Science, a discipline with well documented challenges that are hard to tackle with traditional classroom methods. Specifically, we developed illustrative learning items teaching Model-Driven Design and implemented them in an online system that implements a model for automatic formative assessment developed by University of Torino. The model takes advantage of an automatic assessment system initially designed for STEM disciplines, then adopted for teaching languages and other disciplines too. The key features of the adaptive model supported by the online system are algorithmic questions, availability, contextualization, immediate feedback, interactive feedback, and open answers. These features are portable across subject domains, so the system can be adapted to include new subjects. We chose MDD because it is a topic of Computer Science education connected with Computational Thinking, software design, and formal methods, which are three of the core areas in need of enhanced support.;2020
Aim/Purpose This paper presents findings on a curricular intervention aimed at integrating computer programming with reading and writing in early elementary school. The purpose of this research was to explore the relation between students' varying literacy levels and their level of success in mastering an introductory programming language. Methodology This curricular intervention study was implemented in a single school district in southeastern Virginia. Of the district's 33 elementary schools, eight schools received an external grant from the U.S. Department of Defense to introduce computer science in early elementary education. Standardized literacy test scores were correlated with internally developed, and age appropriate programming assessment scores from N = 132 second grade students. Contribution This study is the first of its kind to look at how students at varying literacy levels succeed in mastering an introductory programming language when introduced through a literacy lens. Findings The findings indicated that there was strong evidence for a weak, positive correlation between students' literacy levels, as determined by the PALS assessment, and their programming mastery, as determined by the curricular programming assessments. The positive correlation suggests that there may indeed be underlying constructs that overlap between literacy and programming. Recommendations for Practitioners Consider integrating computer programming as a foundational component of the literacy curriculum, especially in the early grades, where the two skill sets can mutually support one another. Recommendations for Researchers Additional research is necessary, using a variety of literacy and programming measures, to continue to understand the relationship between emerging literacy and emerging computer programming skills. Impact on Society Reimagining computer programming as a language has significant implications for how we teach programming in schools and how students then use programming out in the workforce. Future Research Future work will repeat this curricular intervention with younger students: the district's first grade and kindergarten classrooms. Introducing programming through the Coding as Literacy (CAL) approach even earlier in students' literacy trajectories, we believe, will allow the positive impact of programming knowledge to influence students' literacy development. In this next phase of our research agenda, we will collect pre and post literacy scores, both standardized and internally developed, to see the myriad ways that programming knowledge impacts literacy.;2020
Although Machine Learning (ML) is integrated today into various aspects of our lives, few understand the technology behind it. This presents new challenges to extend computing education early to ML concepts helping students to understand its potential and limits. Thus, in order to obtain an overview of the state of the art on teaching Machine Learning concepts in elementary to high school, we carried out a systematic mapping study. We identified 30 instructional units mostly focusing on ML basics and neural networks. Considering the complexity of ML concepts, several instructional units cover only the most accessible processes, such as data management or present model learning and testing on an abstract level black-boxing some of the underlying ML processes. Results demonstrate that teaching ML in school can increase understanding and interest in this knowledge area as well as contextualize ML concepts through their societal impact.;2020
Although there is wide rhetoric that programming should be learnt by all as an element of computational thinking (CT), in practice, it is mostly implemented narrowly as an end in itself consisting of routine practice and traditional testing of the ability to code. This paper discusses a way in which programming could be seen through a wider integrated pedagogical approach as jointly cultivating meaning making of computational concepts in conjunction with the adoption of practices and strategies in a relevant meaningful context for learners. We elaborate on a case of learning to code through digital game modding where programming and other computational concepts coexist. Our design frame includes the principles of black and white box designs, of students as de-buggers of engineered half-baked games and of games embedding both concepts and values in simulations involving wider contested complex issues. We use our analysis of the meaning making of students as they debug a choice-driven simulation game specially designed to bring this integrated kind of learning to the fore. We show elements of context-aware integrated CT connecting otherwise fragmented areas such as databases, block-based programming, Geographical Information Systems design.;2020
"An initiative recently established at our institution is creating new opportunities for students to deepen their understanding of code and computational thinking, and to embrace questions of access, equity and social justice. In this short paper we report on two contextualized computing courses in this initiative that introduce coding and computational thinking through contextualizing two subfields of AI: Natural Language Processing and Machine Learning. The goal was two-fold: to help students gain foundational computational skills to further their own creative and critical practices; and more broadly, to help them develop better-informed critiques of the use of algorithmic systems, especially AI technology.";2020
An ongoing problem for teacher education institutions is bridging the gap between theory and practice and offering authentic experiences to challenge preservice teachers' pedagogical decision-making. Preservice practicums simulate teaching and can, at best, offer controlled experiences in familiar settings. This restricts the opportunities for preservice teachers to develop confidence in their own pedagogical decision-making and to adapt curriculum to meet unknown or unforeseen conditions. This paper describes, through a small-scale qualitative case study, a teaching experience in an unfamiliar setting, the persistent actions taken to respond to a specific context and the impact this had on preservice teacher knowledge and self-efficacy. The study found that preservice teacher self-efficacy can be scaffolded in real-world contexts provided sufficient planning, peer support and mentoring is available.;2020
Approaches to STEM epistemology are related to the so-called Integrated STEM Education. Curriculum integration of STEM contents based in constructivism theories of learning as a context to implement the STEM epistemology. There are two approaches for STEM education integration: the content integration and the context integration. Computational Pedagogy is a didactic model that applies the Computational Science experiment in order to collect and analyze real- time data in alignment with the practices of Computational Thinking. In this work, the inquiry based teaching and learning strategy is implemented in order to measure the Hubble Universe expansion constant in agreement with the standard Scientific and Engineering practices as a computational experiment.;2020
Around the world, programming education is actively promoted by such factors as economic and technical requirements. The use of a robot in programming education could help students understand computer-science concepts more easily. In this study we designed a course in programming a robot for elementary school students and investigated its effectiveness by implementing it in actual classes. We further examined the effects of students' prior skills and of gender on the outcomes. In addition, we reviewed the applicable teaching and learning strategies in the field of robotics programming. Our course in programming a robot was implemented for 155 Korean elementary school students in the fifth and sixth grades. The course was conducted for 11 weeks. Our results show that teaching programming by using a robot significantly improved computational thinking and creativity. Computational thinking, however, was not significantly improved in the group that initially showed high scores. Further, creativity was improved more in girls than in boys, and the mean difference was statistically significant, but the difference in computational thinking was not. The implication of this study is that the best approach is to design a course in programming a robot and apply it in actual classrooms in order to discuss teaching and learning strategies according to students' prior skills and their gender.;2020
Artificial intelligence and machine learning are making their ways rapidly to K-12 education. Google Teachable Machine, powered by convolutional neural networks, provides an easy-to-use yet powerful tool for classification tasks. We conducted a series of co-design workshops with primary school children, where they explored and designed their own machine learning powered applications with Google Teachable Machine. Our results show that Google Teachable Machine is a feasible tool for K-12 education. The trained machine learning models are lightweight and computationally efficient, and the applications are usable even with low-end mobile devices. The students and teachers appreciated the multidisciplinary and inclusive workshop, which supports development of transversal competencies in accordance to the national primary school curriculum.;2020
As artificial intelligence (AI) continues to have a fundamental impact in our world and lives, a crucial need arises for integrating ethical and constructivist principles in the design of AI systems, and related computational thinking. We discuss aspects and examples of ethical and constructivist design of AI in the context of the target article, and especially in the domains of future-oriented ethical design and computing education.;2020
As the definition of computational thinking (CT) in education continues to evolve, researchers have investigated the integration of CT in K-12 learning contexts and students' perceptions and development of CT in these integrated learning experiences. Drawing on prior work, this study explored the evolution of two elementary school girls' conceptions and practices of CT in science as they participated in a four-week CT-integrated science unit at a summer camp using the Dash robot and the Blockly app. Three CT concepts: loops, sequences, and conditionals, were integrated into a unit on the reproduction cycle of flowerless plants. Observations, participant drawings, and analysis of Blockly code revealed that the children improved in their CT practices. In addition, the CT-integrated science unit developed for this study successfully engaged both participants, even when one expressed a low interest in science. The study suggested that defining computing vocabulary, using checkpoint activities with immediate and corrective feedback, and scaffolding of coding concepts with unplugged activities were particularly necessary in promoting CT and the integration of CT and science education in an elementary-level informal learning context.;2020
At 21st century Computational Thinking (CT) is considered a fundamental skill that anyone should possess and develop from a young age. Serious games and more specifically educational games (EGs) are a promising means of introducing algorithmic thinking and programming concepts and engaging students through the process of learning. In this article, a new EG called Blockly Script is presented. BlocklyScript aims to help students develop their CT by learning basic programming concepts, designing algorithms and correcting mistakes. During the designing phase different EGs were taken under consideration and an EG design framework was followed in order to provide a better user experience. The game was evaluated by 10 experienced computer science educators of primary and secondary schools. The positive results of this pilot evaluation show that BlocklyScript is expected to help students understand the basic concepts of CT. However, the game should be evaluated by more teachers and students in order to provide future researchers with safe results.;2020
At present, the problem of predictors of successful learning of programming and mastery of computer thinking is becoming especially urgent. The authors proposed to analyze the structure of the intellectual abilities of students of different education profiles to identify the intelligence features of future information technology specialists. The study involved 319 first-year students of the Ural State Pedagogical University of Yekaterinburg. To study the characteristics of computer intelligence indicators, a universal intellectual test was used. The following factors were identified in the structure of the intelligence of computer scientists: 1) probabilistic-mathematical, 2) verbal-informational, 3) visual-spatial. The mathematical intelligence of computer scientists is not associated with verbal-logical thinking because the leading factors are the ability to consistently work out the hypotheses put forward on the basis of an intuitively distinguished general property of a cognizable phenomenon. The authors also found that digital technologists quickly switch to various mental actions, relying on various forms of spatial manipulations with a cognizable object.;2020
Background and Context: There are studies which indicate that computer programming supports high-level abilities for everyone such as creative thinking, questioning, problem solving and critical thinking which are considered within the scope of 21st-century abilities. Objective: The current experimental study was carried out to put forth the impact on the problem solving and cognitive abilities of computer programming course applied on 4-5-year-old preschool children. Method: The study was arranged according to a pretest-posttest control group experiment model. Findings: According to the results, there is an increase in the non-verbal cognitive abilities of children in the experiment group with no statistically significant difference in their problem-solving skills. Implications: Our findings give an evidence about the effects of a coding course on preschool children through the use of two validated tests for problem-solving skills and cognitive skills.;2020
"Background Educational robotics (ER) is increasingly used in classrooms to implement activities aimed at fostering the development of students' computational thinking (CT) skills. Though previous works have proposed different models and frameworks to describe the underlying concepts of CT, very few have discussed how ER activities should be implemented in classrooms to effectively foster CT skill development. Particularly, there is a lack of operational frameworks, supporting teachers in the design, implementation, and assessment of ER activities aimed at CT skill development. The current study therefore presents a model that allows teachers to identify relevant CT concepts for different phases of ER activities and aims at helping them to appropriately plan instructional interventions. As an experimental validation, the proposed model was used to design and analyze an ER activity aimed at overcoming a problem that is often observed in classrooms: the trial-and-error loop, i.e., an over-investment in programming with respect to other tasks related to problem-solving. Results Two groups of primary school students participated in an ER activity using the educational robot Thymio. While one group completed the task without any imposed constraints, the other was subjected to an instructional intervention developed based on the proposed model. The results suggest that (i) a non-instructional approach for educational robotics activities (i.e., unlimited access to the programming interface) promotes a trial-and-error behavior; (ii) a scheduled blocking of the programming interface fosters cognitive processes related to problem understanding, idea generation, and solution formulation; (iii) progressively adjusting the blocking of the programming interface can help students in building a well-settled strategy to approach educational robotics problems and may represent an effective way to provide scaffolding. Conclusions The findings of this study provide initial evidence on the need for specific instructional interventions on ER activities, illustrating how teachers could use the proposed model to design ER activities aimed at CT skill development. However, future work should investigate whether teachers can effectively take advantage of the model for their teaching activities. Moreover, other intervention hypotheses have to be explored and tested in order to demonstrate a broader validity of the model.";2020
Background. Recent years have seen the resurgence of board games designed for entertainment, and to teach or explicate real life problems. The revival of board gameplay has been discussed in mainstream media, and has drawn the attention of researchers. Yet, in the field of games studies, the conception of games as learning spaces is mostly emphasized through digital/video games. Aim. This literature review reveals the current knowledge regarding the learning potential of board games in various settings, subjects, and diverse learners. Results. Board games are spaces for mathematical learning and learning spaces that can enable the learning of various contents. Board games allow for various interactions that result in players engaging in computational thinking, teamwork, and creativity. Conclusion. The relationship between board gameplay and learning is evidenced across disciplines and countries. Board games simplify complex issues and systems, which make them appropriate to further explore learning and concepts such as motivation and computational thinking in formal and informal settings. Furthermore, there is need to expand research on learning in commercial board games.;2020
Background/Context: Computer science has been making its way into K-12 education for some time now. As computer science education has moved into learning spaces, research has focused on teaching computer science skills and principles but has not sufficiently explored the emotional aspects of students' experiences. This topic warrants further study because learning to code is a complex emotional experience marked by intense periods of success and failure. Purpose/Objective/Research Question/Focus of Study: The purpose of our study is to understand how reflecting on and making art might support students' emotional experience of learning to code. We focus our efforts on students' experiences with debugging, the process of figuring out how to fix broken code. Our research questions are: How did students reflect on their experiences and emotions in the context of art making about debugging? How did students describe the potential for making art to shape their coding practice? Setting: The setting is a two-week computer programming workshop at a non-profit organization focused on computer science education. Population/Participants/Subjects: Participants are 5th through 10th grade students attending Title I schools or with demonstrated financial need. Intervention/Program/Practice: Students participated in a visual arts class for an hour each day of the two-week workshop, in addition to three coding classes. Research Design: Design-based research anchored our study. Data sources included students' written artist statements, artifact-based interviews about artwork, and in-process conversations with the researcher-teacher leading the art class. We used a storytelling framework to make sense of how elements of our curriculum and instructional design supported student reflections on obstacles in coding, how they talked about debugging events over time, and the range of emotions they expressed feeling. Findings/Results: Findings suggest that making and reflecting on art can support students in offering descriptive accounts of learning to code and debug. Students' stories highlighted the range of ways they experienced failure in coding, the causes of those moments of failure, the flow of events through failure (what was disrupted, how the experience changed over time, and whether it was resolved), and the emotions (about emotions) that framed failure. Moreover, students described the ways that art making shaped their coding practice, including transforming how they understood themselves, set goals, relaxed after a stressful coding class, approached problem solving, and set expectations. Conclusions/Recommendations: Our results have implications for the redesign of our intervention and more broadly for the design of learning environments and computer science pedagogy.;2020
Background: Empirical research into the efficacy of Arduino- and Scratch-based interventions in science, technology, engineering, and mathematics (STEM) has greatly increased in the recent years. The purpose of this meta-analysis is to compute the overall effect of these interventions. Setting: The settings for the interventions being meta-analyzed are K-12 and post-secondary classrooms. Research design: This study uses a meta-analytic methodology to aggregate the effects of 11 quantitative studies with 29 unique effect sizes to produce a cumulative effect size along with relevant visual presentations of the effectiveness of the interventions. Data collection and analysis: Data for this study were collected through a detailed literature search using the PRISMA guidelines and all analyses were conducted using STATA 16 statistical software. Results: The results indicate that Arduino- and Scratch-enabled interventions had an overall positive effect (d = 0.67 (CI: 0.40, 0.95) on students' STEM academic achievement and their perceptions towards STEM. Conclusion: Hands-on engineering activities that encourage computational thinking and employ a combination of Arduino and Scratch can have profound impacts on students' problem-solving skills, understanding of computation, and interest towards engineering professions. Implication: This research informs STEM instructional leaders and policy makers about the positive effects and future promise of open source Arduino hardware and freely available Scratch software in STEM education.;2020
Based on the analysis of sonic famous instructional cases in programming education and in-depth interviews with primary school teachers who are engaged in programming education, this paper focuses on the instructional procedure and strategies of primary school programming education for cultivating students' computational thinking. This examination reveals the current situation and possible problems in the practice of cultivating computational thinking and provide some useful references. Continuous comparison are used to code and analyze the interview data. The article founds that the instructional procedure of cultivating computational thinking in prograimning education generally involves five major stages: knowledge review, new knowledge exploration, problem analysis, programming on computer, and the stage of reflection. Instructional strategies accordingly include: mind map-supported, unplugged programming, flow chart use, pair programming, log reflection, and more. Finally, the paper concludes with the problems that appeared in teaching, especially in the stage of new knowledge exploration, unplugged programming and pair-programming.;2020
Based on the features of Python and the situation of case-based teaching, this paper develops and implements a complete online Python teaching case library. The teaching contents of a Python programming were divided into ten parts: basic knowledge, three basic structures, functions and modules, object-oriented thinking, file and database programming, network and multithreading programming, image programming, web crawling, as well as data analysis and visualization. Each part was provided with several basic teaching cases. Following the idea of software engineering, our case library was designed based on ChaoXing, a famous online learning platform in China. The designed case library offers a clear path from data acquisition, data storage, data processing, to data visualization. It also provides a wealth of up-to-date and extensible contents, enabling learners to apply the knowledge to practice. Through application of the proposed case library, the students all achieved excellent performance, published innovative academic papers, and selected suitable topics for graduation thesis. The library also greatly promotes the abilities of students in computational thinking, programming level, and solving complex engineering problems.;2020
Basic digital education is becoming an important topic, also at primary level. Computational thinking is seen as one of the basic conditions for fostering students' problem-solving thinking skills in primary school. In the field of early computing education, however, there are no empirically founded competence models available yet. Nevertheless, experts agree that playful methods of programming, e.g. with robots, can foster computational thinking and creativity. Enhancing creativity is an important task in primary education and it is also one of the key skills required for 21st century learning. First programming with Ozobots, which are small robots that can be programmed with color codes, is part of a research project of the University College for Teacher Education in Lower Austria. By using the method of lesson study, it will be investigated if aspects of creativity in programming Ozobots can be identified or differences between girls and boys can be determined. The purpose of this paper is to show how an introduction to programming with Ozobots in a child friendly way can be successful at primary level. It will also be shown how computing education can be integrated in primary school. In addition, the results of the lesson study research will be presented.;2020
"By providing students with a highly interactive and hands-on learning experience, robotics promises to inspire a new generation of mathematical learning. This paper aims to review the empirical evidence on the application of robotics in mathematics education and to define future research perspectives of robot-assisted mathematics education. After a systematic search in online database via keyword search and snowballing approach, we analyzed 20 empirical studies on how to teach and learn mathematical knowledge through robotics. The results indicate that (1) most studies were conducted with a small sample size, the largest research groups were elementary school students and secondary school students, most studies used LEGO robots, robots were primarily applied to teach and/or learn graphics, geometry, and algebra, and almost half of the studies taught mathematics by engaging students in game-like interactions with robots; (2) half of the studies adopted a non-experimental research design, and most studies evaluated student performance through observation, test/examination, questionnaires, or verbal interviews; and (3) instructional implications proposed in the 20 papers can be clustered into four themes: human-robot interaction, connections between mathematics and real life, pedagogical suggestions, and facility conditions. The 20 papers suggest that robotics generally plays an active role in mathematics education; however, there are indeed situations in which no significant improvement was found in students' mathematical learning. In view of this, we prospect the future research perspectives of robot-assisted mathematics education and propose that more rigorous intervention studies could be conducted to further explore the integration of robotics and mathematics education.";2020
Code literacy is posited as the foundational literacy involved in computer programming [1]. While educational interest in this field has centered on the promotion of STEM learning and computational thinking, understanding how learners acquire code literacy required for computer programming is the focus of this theoretical paper. In understanding the concepts involved in this literacy, linguistic theory provides the foundations in revealing fundamental understanding on the process of code programming as a system for writing and communicating information[1]-[3]. Conceptual understanding of this literacy process is connected to symbols, syntax, semantics and pragmatics of general linguistic theory from the perspective of the code program learner as language learner. The code programming is examined as a form of authoring process through the use of linguistics rules and conventions. The analysis provides for fundamental conceptualization of educational implications for teaching and learning computer language programs. Code literacy is identified as different from traditional language linguistics along the pragmatics dimension of linguistics theory. Educational implications for code literacy development are subsequently addressed.;2020
Coding skills are becoming more and more important in today's world, especially within the context of the fourth industrial revolution. They also help practice other 21 century skills such as computational thinking, problem solving and teamwork. Unfortunately, learning how to program is tough and can be also frustrating for beginner students. In this work we introduce RoboTIC, a serious game based on gamification and Augmented Reality that facilitates the learning of programming to students in lower levels of the education system by using a novel set of visual metaphors derived from a notation of roads and traffic signs. The architecture that supports RoboTIC has been designed to allow the integration of multimedia components when new programming concepts and techniques must be addressed and to add game levels that enable students to learn incrementally. Experiments have been conducted in a youth center with children who do not have coding skills at all to demonstrate the feasibility of the proposal. The results show promising conclusions in terms of children's motivation and interest in programming.;2020
Computational thinking (CT) and modeling are authentic practices that scientists and engineers use frequently in their daily work. Advances in computing technologies have further emphasized the centrality of modeling in science by making computationally enabled model use and construction more accessible to scientists. As such, it is important for all students to get exposed to these practices in K-12 science classrooms. This study investigated how a week-long intervention in a regular middle school science classroom that introduced CT and simulation-based model building through block-based programming influenced students' learning of CT and force and motion concepts. Eighty-two seventh-grade students from a public middle school participated in the study. Quantitative data sources included pre- and post-assessments of students' understanding of force and motion concepts and CT abilities. Qualitative data sources included classroom observation notes, student interviews, and students' reflection statements. During the intervention, students were introduced to CT using block-based programming and engaged in constructing simulation-based computational models of physical phenomena. The findings of the study indicated that engaging in building computational models resulted in significant conceptual learning gains for the sample of this study. The affordances of the dynamic nature of computational models let students both observe and interact with the target phenomenon in real time while the generative dimension of model construction promoted a rich classroom discourse facilitating conceptual learning. This study contributes to the nascent literature on integrating CT into K-12 science curricula by emphasizing the affordances and generative dimension of model construction through block-based programming.;2020
Computational thinking (CT) and the coding element of it are progressively entering in the primary school curriculum worldwide. Yet, little is known about the effects of these skills on children's cognitive development. In a cluster-randomized controlled trial, we examined how 1st-grade children's gains in coding skills that follow instructional intervention transfer to two important executive functions (EFs): planning and response inhibition. One-hundred seventy-nine (179) first graders from 5 schools and 10 class groups, with no prior experience of coding, were randomly assigned to an experimental (coding, 5 classes) or control (standard STEM, 5 classes) instructional condition. The experimental intervention involved 8 h of coding activities (two weekly lessons for 4 weeks), through the Code.org platform. Children in the control group were exposed to standard STEM instruction. Four coding tasks drawn from Code.org , two standardized planning tasks (Elithorn maze test and Tower of London, ToL, test) and two standardized response inhibition tasks (NEPSY-II inhibition subtest and numerical Stroop), were used to assess children's skills at the pretest and posttest (after the instructional intervention). To measure retention, the same skills were also assessed for 44 children from the experimental group 5 weeks from the posttest (follow up). The results show that practice with coding through Code.org not only improved measurably children's ability to solve coding problems, but also their EFs, increasing the time children spent planning, their ability to solve standardized planning tasks, and to inhibit prepotent responses. Such findings add to the still limited literature on the cognitive effects of coding, deepening our understanding of the positive implications of introducing Computational Thinking early in the school curriculum.;2020
Computational Thinking (CT) concepts and practices involve higher-order cognitive skills. Higher-order cognitive skills can be assessed using a performance-based assessment of programming processes. This study presents EasyCode, a performance-based assessment platform for developing CT in students. Distinct from existing methods that rely on the static code analysis of students' artifacts, EasyCode conducts a dynamic code analysis, enabling the assessment of CT practices throughout the programming process. EasyCode aids student learning by setting performance tasks and providing an online judgment service, which tests the functionality of students' submitted code and provides immediate feedback. For students with needs, EasyCode provides a support mode with tailor-made toolboxes and decomposed subtasks to help them develop CT concepts and practices. The performance tasks on EasyCode are categorized into three difficulty levels to provide a progressing ladder for students. A sample CT performance task is provided to illustrate how EasyCode facilitates students' learning of CT concepts and practices.;2020
Computational thinking (CT) has become a necessary skill of students in the 21st century. Various learning approaches have been developed to foster CT among school students. However, these approaches predominantly rely on computer devices and internet connection and fail to promote advanced computer concepts necessary for programming Therefore, this study developed an unplugged coding activity using flowblocks, the term is coined to represent modified Blockly based on flowcharts with user-friendly syntaxes, as a visual and programming tool, delivered in the form of game -based learning. The activity included a series of game missions to develop five programming concepts. The unplugged coding activity was implemented based on a pre and post intervention design with 160 secondary students who had no prior experience about programming Statistical analyses showed that students' conceptual understanding of coding and CT increased significantly after participation. In addition, the perceptions of their ability to learn programming, namely self-efficacy, statistically grew in the posttest. It is therefore recommended for school teachers teaching basic programming and CT to consider using this offline, engaging and cost-effective approach as an alternative to computer-based methods of programming;2020
Computational thinking (CT) has been introduced in primary schools worldwide. However, rich classroom-based evidence and research on how to assess and support students' CT through programming are particularly scarce. This empirical study investigates LIth grade students' (N = 57) CT in a comparatively comprehensive and fine-grained manner by assessing their Scratch projects (N = 325) with a framework that was revised from previous studies to aim towards enhancing CT. The results demonstrate in detail the various coding patterns and code constructs the students programmed in assorted projects throughout a programming course and the extent to which they had conceptual encounters with CT. Notably, the projects indicated CT diversely, and the students altogether encountered dissimilar areas in CT. To target the acquisition of CT broadly, manifold programming activities are necessary to introduce in the classroom. Furthermore, we discuss the possibilities of applying the assessment framework employed herein to support CT education through Scratch in classrooms.;2020
"Computational Thinking (CT) is a fundamental skill that is not only confined to computer scientists' activities but can be widely applied in daily life and is required in order to adapt to the future and, therefore, should be taught at early ages. Within this framework, assessing CT is an indispensable part to consider in order to introduce CT in the school curricula. Nevertheless, efforts involving the formal assessment of computational thinking has primarily focused on middle school grades and above; and are mostly based on the analysis of projects in specific programming environments. A Beginners Computational Thinking Test (BCTt), aimed at early ages, and based on the Computational Thinking Test [1], has been designed including several improvements; submitted to a content validation process through expert ' s judgement procedure; and administered to Primary School students. The BCTt design is considered adequate by experts and results show a high reliability for the assessment of CT in Primary School, particularly in first educational stages.";2020
Computational thinking (CT) is a key skill in the 21st century. However, it is not clear which is the most effective way to acquire and improve CT. Big research efforts are made to determine which pedagogical means should be used. One research trend is based on the idea that teaching programming since Primary Education suffices to improve CT. In our previous work, we proposed and validated a methodology based on metaphors and used of Scratch (MECOPROG) to teach basic programming concepts to children. It is our hypothesis H that by applying MECOPROG, students will develop their CT. To check H, we carried out an experiment with 132 Primary Education Students (9-12 years in age). At the beginning of the experiment, all students were asked to fill in a programming concepts test and two tests to measure their CT. During the sessions, all students were taught according to MECOPROG. Finally, they took the three tests again. A significant increase in the results on all the tests has been measured, supporting the use of metaphors and Scratch to teach computer programming concepts to Primary Education students to develop their CT.;2020
Computational thinking (CT) is believed to be a critical factor to facilitate STEM learning, and a vital learning objective itself. Therefore, researchers are continuing to explore effective ways to improve and assess it. Makerspaces feature various hands-on activities, which can attract students with diverse interests from different backgrounds. If well designed, scaffolded maker activities have the potential to improve students' CT skills and STEM learning. In this study, we explore ways to improve and assess physics and engineering integrated CT skills through developing maker activities and assessments, which are applicable in both informal and formal educational settings. Our paper presents our work on improving and assessing CT in maker activities with two primary goals. First, it introduces the maker activities and instruments we developed to improve and assess CT that are integrated in physics and engineering learning. Second, it presents the students' CT skill and disposition change from pretest to posttest in two summer academies with CT enhanced maker activities, which was respectively led by after school educators and formal educators in a public library.;2020
Computational thinking (CT) is still a relatively new term in the lexicon of learning objectives and science standards. The term was popularized in an essay by Wing, who said, To reading, writing and arithmetic, we should add computational thinking to every child's analytical ability. Agreeing with this premise, in 2013 the authors of the Next Generation Science Standards (NGSS) included mathematical and computational thinking as one of eight essential science and engineering practices that K-12 teachers should strive to develop in their students. There is not yet widespread agreement on the precise definition or implementation of CT, and efforts to assess CT are still maturing, even as more states adopt K-12 computer science standards. In this article we will try to summarize what CT means for a typical introductory (i.e., high school or early college) physics class. This will include a discussion of the ways that instructors may already be incorporating elements of CT in their classes without knowing it.;2020
"Computational thinking (CT) skills are necessary for solving the real-world problems of today and are therefore being incorporated into K-12 curricula. Cybersecurity is of similar importance; however, it can be difficult for young learners to grasp the required concepts and use them to construct meaningful algorithms. We discuss our approach that combines a hands-on robotics platform with a block-based programming environment to facilitate the learning and application of cybersecurity and CT concepts. Throughout a week-long intervention, high school students were introduced to cybersecurity and CT and Oven the opportunity to apply this knowledge in a collaborative setting to solve security problems on the robotics platform with instructor and peer support. A series of competitions between groups of students further motivated students to translate their learned concepts to practice, often leading to breakthroughs as students incorporated new algorithms into their existing projects to counteract previous security flaws. We present evidence of the learning behaviors of several such groups through mixed-method case studies integrating data collected from learning performance, collaborative discourse, and analysis of program development. We discuss the impact of this approach on cybersecurity and CT learning and then present future directions for this work.";2020
Computational Thinking (CT), one of the necessary and fundamental skills for students in the 21st century, is gaining more attention in K-12. The premise of integrating CT with other subjects is to promote school teachers with high self-efficacy in CT. Towards this, we developed a three-week Scratch online professional development(PD) course based on MIT CT framework, then implemented an online training among 84 primary and secondary school teachers from different subjects including Chinese, Mathematics, English, and Computer Science. To examine the effect of its impact on teachers' self-efficacy in CT, a quasi-experiment method of a single group pretest-posttest was conducted, and quantitative and qualitative data were collected from scales, artifacts, and interviews. The results revealed that the online PD course significantly improved teaching self-efficacy in CT of these teachers. The findings indicated that online PD integrated with MIT CT framework through block-based programming was a potential approach to effectively promote teaching self-efficacy in CT for primary and secondary school teachers.;2020
Computational thinking abilities development is a recent popular research topic. Teachers need support and examples of suiTable STEAM activities that focuses on CT implementation. For this purpose, possible class activities were presented for CT abilities development purpose. Teachers from different disciplines identified possible interconnections between presented activities and CT abilities. The case study results showed that primary assumptions were quite different from teachers believes as assumptions weakly correlate with five teachers opinions. The implication of these results is that it provides a better understanding of CT integration in education and is particularly useful for researchers interested in CT and its applications in different subjects.;2020
"Computational thinking and coding are becoming an integral part of K-12 education, with female students being underrepresented in such subjects. The proliferation of technological tools and programming environments offers the opportunity for creative coding activities for children and increases the need for appropriate instructional practices. In this study, we design and evaluate a coding workshop for children. Our goal is to examine differences between boys and girls using eye-tracking as an objective measure and triangulating the findings with qualitative data coming from children's interviews. The results show no statistically significant difference between female and male gaze and learning gain during the coding activity; interestingly, the qualitative data show differences in the strategies and implemented practices during coding, and in perceptions about those coding activities. Our results highlight that further studies need to utilize objective measures and unveil necessary differences in the design and implementation of coding activities. Furthermore, our results provide objective evidence that female students do not lack in competences compared to boys, but simply that they have a different approach during coding activities and different perspectives about coding, an approach that needs to be cultivated and nurtured.";2020
Computational thinking has become an important issue in the field of education. Because preschool and kindergarten learners are capable of exercising their cognitive abilities to resolve basic computational logic, this demographic has raised significant interest in studying their learning intentions and behaviors. However, prior research fails to examine the effects of teaching computational logic to kindergarten children. Therefore, this study aims to investigate the influences of teaching approaches in guiding preschool children to learn computational logic and programming concepts to enhance their problem-solving skills as well as computational thinking abilities. A novel teaching framework is designed to develop the learner's cognitive abilities, which adopts the smart toy game-based learning approach along with a tangible user interface (TUI) to enhance children's learning performance and interests. The proposed teaching approach integrates the game-based learning concepts into the TUI system, where the learning processes allow the learners to effectively practice the conceptual knowledge and efficiently advance their problem-solving skills. The results suggest using the developed game-based TUI system can increase preschool children's learning behaviors as well as enhance their learning interests and computational thinking abilities.;2020
"Computational thinking has been introduced in schools to provide skills to survive in the digital world, but without proper attention to the fact that digital media are not just means of economic development, but a new way of thinking that modifies culture, communication and social relationships. We will try to demonstrate, with the help of literature, software development and the results of experimental workshops, first, that computational thinking must include humanities and, secondly, analogic skills and cultural traditions. Thus, this article's goal is to rethink the computational thinking framework and overcome its limitations considering the cultural context and especially the rescue of cultural identity. To do this we will follow three main lines of thought: a) the discussion of the limits of technocentrism; b) a proper analysis of the characteristics of software; c) the analysis of alternative educational solutions like Turing machines and shape grammars. In the conclusions we will show that laptops, tablets and smartphones are not indispensable and can even jeopardize learning and creativity.";2020
Computational thinking in recent years has been universally defined as the new English, or basic knowledge necessary for everyone. As English, is important to include it as early as possible in teaching programs, right from preschool. This need is so felt as to make it, for example, compulsory in kindergarten in Italy since 2022. Obviously, this implies the use of simple tools that do not provide reading and writing skills. This work proposes a learning program which could be carried out precisely during the three years of kindergarten, from 3 to 6 years of age, and prepares children for coding, a teaching subject that has already been proposed in Italy for primary school since a few years.;2020
Computational thinking is a contemporary science and engineering practice that has been introduced to the US science classrooms due to its emphasis in theNext Generation Science Standards(NGSS). However, including computational thinking into science instruction may be challenging. Therefore, for biological evolution (an essential theory within biology that spans across temporal and organizational scales), we recommend integrating computational thinking into evolution teaching to overcome misconceptions, reinforce the nature of science (NOS), and allow student embodiment (as students become emerged in their models, i.e., personification). We present a learning progression, which outlines biological evolution learning coupled with computational thinking. The defined components of computational thinking (input, integration, output, and feedback) are integrated with biology student roles. The complex nature of both teaching computational thinking and biological evolution lends toward a learning progression that identifies instructional context, computational product, and computational process and spans from simple to complex. Two major themes of biological evolution, unity and diversity have each been paired with both computational thinking and specific corresponding NGSS standards at levels of increasing complexity. There are virtually no previous studies which relate computation and evolution across scales, which paves the way for questions of importance, support, benefits, and overall student achievement in relation to the advancement of science in education.;2020
Computational thinking is a highly appreciated skill by mathematicians. It was forecasted that, in the next few years, half of the jobs in science, mathematics, technology and engineering (abbreviated as STEM, including arts as STEAM) will use some kind of computation. It is therefore necessary to enhance the learning of mathematics by collaborative problem-solving activities focused on both learning mathematics and developing computational thinking. The problems in science offer a reasonable context in which to investigate the common overarching concepts (e.g., measuring the length). An interdisciplinary STEAM collaborative problem-solving activity was designed and piloted with 27 lower secondary students aged 13.07 +/- 1.21 years. Different levels of willingness to use the technology were observed and the factors influencing it were identified. We found that strong background knowledge implies high demands when controlling the used device. On the other hand, when a nice and user-friendly application was used, students did not need to perceive any control over it. After the intervention, the students' views on the tablet changed and they reported more STEAM-related functions of the device.;2020
Computational thinking is a new concept which has been adquiring relevance in the last few years. There are some evidences of trainings based on this new concept improving different cognitive abilities. In this paper, it has been used a training based on computational thinking, designed by aula cultural de pensamiento computacional and the general foundation of the University of La Laguna. This training was applied to 49 students of secondary obligatory education who had been divided into two groups: one group received the training with a methodology based in guide learning and the other group received the training based on self-learning methodology. The main objective of this paper is to prove that training can improve the measures of working memory and check if the participants who have a high level of working memory take more benefits of the training. The results show that the training based on non-specific methodology in computational thinking improved the measures of working memory. In addition, there was no evidence of a higher level of benefit of the training in most of the tasks in the participants who have a high working memory level.;2020
Computational thinking is a relatively new concept that has attracted research interest during the last decade and has gained popularity in the field of applied education as well. This paper attempts to shed light upon the development of computational thinking in early childhood through an applied, experimental approach aiming to clarify the connection between computational thinking and programming with emphasis on visual and tangible programming of educational robots. The research is based on a case study that investigates the impact of robotics on the cultivation of computational thinking skills in early childhood through an educational intervention implemented in a typical public kindergarten in Athens, Greece. The intervention focuses on the development of particular aspects of computational thinking with the use of a programmable floor robot. The implementation follows a detailed lesson plan that encompasses all the robotic activities involved. Pupils' activities, behavior and exchange are monitored for evaluation purposes. Data collected during the intervention are analyzed in an attempt to answer research questions related to the potential of robotics in the development of computational thinking in early childhood. Results indicate that the use of a robot in a playful way, suitable for the stage of development of kindergarten pupils, leads to notable enhancement of the kindergartners' computational skills - a finding that is consistent to those of existing research studies on similar questions. Given the limited scale of this study, the positive results obtained may serve as a basis for the design of further, more extensive research on this issue.;2020
Computational Thinking is a term applied to describe the increasing attention on students' knowledge development about designing computational solutions to problems, algorithmic thinking, and coding. It focuses on skills children develop from practicing programming and algorithms, and enables the development of qualities such as abstract thinking, problem solving, pattern recognition, and logical reasoning. Contemporary educational and infrastructural developments, like CS for All (https://www.csforall.org/), ISTE's Standards for Students in Computational Thinking (https://www.iste.org/explore/Solutions/Computational-thinking-for-all?article id=152), Computer Science Teachers Association's Concepts of Computational Thinking (http://advocate.csteachers.org/2014/09/15/computational-thinking-and-beyond/), and the appearance of tools such as robotics, 3D printing, microprocessors, and intuitive programming languages posit Computational Thinking as a very promising area to support these learning competences. In this special issue of Computers in Human Behavior, the Editors report four studies conducted by interdisciplinary teams. The introduction to the special issue also draws attention to the great potential and need for further research in the area of Computational Thinking Education to engage students in meaningful learning so as to develop useful thinking skills and digital competences. Finally, the Editorspropose directions for future research and practice in Computational Thinking Education.;2020
"Computational thinking is identified as one of the essential skills for 21st-Century students. [1] Studies of CT in school programs are being funded by many organizations, including the United States National Science Foundation. In this paper, we describe lessons learned over the first two years of a research program (PREDICTS: Principles and Resources for Educators to Infuse Computational Thinking in the Sciences) with the goal of developing knowledge of how to integrate CT into introductory high school biology and chemistry classes for all students. Using curricular modules developed by program staff, two in biology and two in chemistry, teachers piloting the program engaged students in CT with computational evidence from authentic tools in order to develop understanding of science concepts. Each module, representing about a week of instruction, addresses science ideas in the prescribed course of study for high school programs. Project researchers have collected survey data on teachers': (1) beliefs about effective science teaching; (2) beliefs about their effectiveness as a science teacher and their students' ability to learn science, and; (3) content preparedness. In addition, we observed module implementation, collected and analyzed student artifacts, and interviewed teachers at the conclusion of module implementation. Preliminary results indicated some challenges (access to technology, varying levels of experience among students) and cause for optimism (student and teacher engagement in CT and the computational tools used in the modules). Continuing research efforts are described in this paper, along with descriptions of the curricular modules and the use of observations and CT check-ins to assess student engagement in, application of, and learning of CT.";2020
Computational thinking is of growing interest to the science, technology, engineering, and mathematics (STEM) education research community. Calls from national agencies look to increase computation in STEM education. This review identifies key areas for future study by reviewing recent empirical studies that investigate computational thinking in teaching and learning contexts within higher education. Using a systematic process, this review identified four different databases for peer-reviewed research articles using keywords. Results were evaluated against inclusion and exclusion criteria. Studies were analyzed for types of methods, target population, the role of computational thinking, pedagogical designs used, and significant findings of the study. This process resulted in a final set of 13 studies. The results indicate that computational thinking research in higher education is growing, yet there are opportunities for more research. The findings of this study highlight the need for more concrete definitions and implementations of computational thinking within higher education spaces.;2020
Computational thinking requires high cognitive load as students work to manage multiple tasks in their problem-solving environment. Through research in K-2 classrooms on computational thinking, we noticed that students lack the representational fluency needed to move from one form to another-such as moving from physical to more abstract representations. Therefore, the following research question was studied: How do second-grade students use and translate among representations to solve computational thinking tasks using the robot mouse game? To address this, we employed a task-based interview approach with three second-grade students who were engaged in four computational thinking tasks using the Code and Go Robot Mouse Coding Activity Set developed by Learning Resources. Through four clinical tasks involving the robot mouse, students solved puzzles set up to force them to make particular representational translations. Each translation involved a level of cognitive complexity the students needed to manage to successfully complete the task. We found that students translated between many different representations using concrete representations to ease translations, language as a scaffold between translations, and embodied movements as representations or to assist with translation. Furthermore, the levels of representational maturity showed by the students varied with the difficulty of the task, and the spatial orientation was particularly difficult for them. These results provide important insights into how learners may develop their ability to engage with abstract representations that will be part of future practices associated with activities in science, mathematics, engineering, and computational thinking.;2020
"Computer Science (CS) is a profession that positively impacts every single area of society without which today's world would come to a complete halt. Yet, there is a consensus that CS has serious conundrums particularly in attracting students, low motivation for learning computer programming and developing computational thinking (CT) skills. New motivational methods are needed to take the attention of students and adapt to their learning patterns as how people learn have changed drastically over the last two decades. To address these issues, video games and video game-based tools are proposed as a primary approach for motivating and supporting students in developing their skills in CT and support their learning of introductory programming. This research is concerned with the capture of statistical evidence on the educational effectiveness of playing a serious game specifically designed to enhance the development of CT skills to facilitate learning introductory computer programming. A total of 190 students were invited to participate in a quasi-experimental pre-post study for the purpose of analyzing the impact of an adhoc game on students' confidence in learning programming constructs and using their skills in CT. All students were studying a CS degree at the time and they were all registered to a first-year computer programming course. 151 out of 190 students successfully completed the study and the findings suggest that a) the intrinsic motivation to learn programming; b) students' perception of their knowledge and their tangible knowledge in key programming constructs (i.e. programming sequence, methods, decision making and loops); and c) students' confidence in using their CT skills were all statistically and significantly improved after playing the game. Additionally, students perceived computer programming significantly less difficult in their post study responses when compared to their pre study responses.";2020
Computer science and computer science education are marked by gender and racial disparities. To increase the number and diversity of students engaging in computer science, young children need opportunities to develop interest and foundational understandings, including computational thinking (CT). Accordingly, elementary teachers need to understand CT, and how to integrate it into their practice. We investigate how to best support elementary teachers in learning to integrate CT into their science teaching through a CT professional development experience for elementary teachers. The professional development consisted of two parts: a professional development workshop and a science teacher inquiry group. In this study, we sought to understand if and how teachers' views on integrating CT into their teaching practice changed following their participation in a yearlong professional development experience on CT. Based on our analysis, we offer suggestions for future research and implications for the design of professional development for integrating CT into science education.;2020
Computer science concepts have an important part in other subjects and thinking computationally is being recognized as an important skill for everyone, which leads to the increasing interest in developing computational thinking (CT) as early as at the comprehensive school level. Therefore, research is needed to have a common understanding of CT skills and develop a model to describe the dimensions of CT. Through a systematic literature review, using the EBSCO Discovery Service and the ACM Digital Library search, this paper presents an overview of the dimensions of CT defined in scientific papers. A model for developing CT skills in three stages is proposed: i) defining the problem, ii) solving the problem, and iii) analyzing the solution. Those three stages consist of ten CT skills: problem formulation, abstraction, problem reformulation, decomposition, data collection and analysis, algorithmic design, parallelization and iteration, automation, generalization, and evaluation.;2020
Computing education is increasing in global importance, with calls for greater understanding of conceptual development that can inform pedagogy. Here, we report a study investigating elementary computing concepts through the lens of Embodied Cognition. Sixteen students (9 female) studying university-level computing were asked to explain their understanding of computing concepts (without materials) in individually video-recorded sessions. We analysed the gestures generated for three elementary concepts: algorithms, loops, and conditional statements. In total, 368 representational gestures were identified across 48 (16 x 3) explanations, thereby providing evidence that offline thinking in this domain is embodied. Our analysis of representational gestures showed that participants drew upon two overarching embodied metaphors in their explanations: 1) Computing Constructs as Physical Objects, in which participants simulated manipulating physical objects (e.g., pinching) when referring to range of computing constructs, and 2) Computing Processes as Motion along a Path, whereby participants moved their hands along one of three body-based axes when referring to temporal sequences. We contrast our findings to similar research in mathematics and discuss implications for computing pedagogy namely the role of gesture in the classroom and technologies that can exploit embodied metaphors.;2020
Concerning the underrepresentation of female students in computer science (CS) classes at the K-12 level and math-intensive STEM fields, this study investigated the relationship between female students earning less credits in CS courses during high school and their STEM major choices. Data were drawn from a nationally representative sample of U.S. high school graduates from the restricted data of the Educational Longitudinal Study of 2002 which were collected by the National Center for Educational Statistics. The multilevel structural equation modeling revealed that (a) female students' lower frequency of taking CS courses was associated significantly with their underrepresentation in STEM fields, (b) earning less credits in CS courses was a stronger factor for female students' underrepresentation in STEM fields compared to the well-documented predictors for STEM major choice-math self-efficacy and math scores on the ACT, and (c) no significant difference in ACT math scores emerged between male and female students, which challenges the dominant view that male students' greater math aptitude causes the persistent gender gap that leads to women's underrepresentation in STEM fields. The study suggests that integrating CS in traditional classrooms as well as promoting a rigorous CS curriculum at the secondary level would be an effective strategy to increase female participation in math-intensive STEM fields.;2020
Countries in the world have included in their educational agendas the incorporation of Computational Thinking (CT) in Compulsory Education. Despite the efforts of the school authorities, the school systems have difficulties in developing this proposal in the traditional classrooms. In this article we present two experiences based on the use of educational technologies and methodologies that have helped overcome these difficulties by bringing the PC to the Classroom effectively for students, teachers and schools. Experiences have been developed in collaboration with educational institutions and ministries of education in two Latin American countries. The educational technologies used are virtual learning environments (VLE), synchronous collaboration systems, and Scratch / Snap online programming environments. The educational methodologies developed are based on collaborative work teachers-tutors, teachers-students, and students-students. Both educational technologies and methodologies have been used together to develop, through the PC, the ability of our students to solve problems related to daily life and the working world.;2020
Current technological progress is helping to promote pedagogical initiatives to transform teaching-learning processes through educational proposals and models that allow the development of significant learning, digital competence and social skills necessary to successfully face the challenges of the twenty-first century. This article presents some of the results generated by the realization of a learning experience on digital skills, associated with computational thinking, using programming challenges and the educational robotics kit Bee-bot (R). For the study, a quasi-experimental design was used, with Pretest/Postest measurements and control group. A total of 40 students and 2 teachers from a concerted school in Salamanca, Spain, participated in the activities during the third quarter of the 2017-2018 academic year. A rubric, a checklist and interviews were used as data collection instruments. The results show the existence of significant differences in favor of the experimental group, in reference to the mastery and learning of computational thinking, through the construction of sequences. In addition, positive social behaviors were observed among students exposed to learning activities and a favorable attitude towards the resource of educational robotics.;2020
Decisions about participation in computer science and engineering opportunities are often made prior to high school, and these decisions are frequently mediated by prior experience, interest, and sense of fit with community. In this article, we investigate how the Digital Youth Divas, an out-of-school program for middle school girls from non-dominant communities, engaged participants in computational thinking linked to their broader interests, home networks, and continuing opportunities. Results indicate increases in knowledge measures for girls with and without prior learning experiences and provide evidence that through project work and a strong focus on building community, girls engaged in computational practices in ways that shifted or provided new computational perceptions about themselves and the domain. This exploratory study of the Digital Youth Divas program emphasizes the importance of understanding and supporting computational perceptions alongside deepening knowledge and experience.;2020
Despite STEM education communities recognizing the importance of integrating computational thinking (CT) into high school curricula, computation still remains a separate area of study in K-12 contexts. In addition, much of the research on CT has focused on creating generally agreed-upon definitions and curricula, but few studies have empirically tested assessments or used contemporary learning sciences methods to do so. In this paper, we outline the implementation of an assessment approach for a 10-day high school biology unit with computational thinking activities that examines student pre-post responses as well as responses to embedded assessments throughout the unit. Using pre-post scores, we identified students with both positive and negative gains and examined how each group's CT practices developed as they engaged with the curricular unit. Our results show that (1) students exhibited science and computational learning gains after engaging with a science unit with computational models and (2) that the use of embedded assessments and discourse analytics tools reveals how students think differently with computational tools throughout the unit.;2020
Digital competence is one of the most demanded skills, and includes, among other aspects, the use of technological, informational, multimedia or communication skills and knowledge. In recent years, different institutions have included computational thinking among the different areas that make up this digital competence. However, there are few publications that deepen the relationship between computational thinking and digital competence. The present study analyzes the level of digital competence and computational thinking of 248 Spanish university students, exploring the relationships between both abilities and the existing differences. According to the results, the majority of the students perceive themselves with a medium to a high level of digital competence, highlighting the multimedia and communicative dimensions, as opposed to the more technological aspects. On the other hand, there is a correlation between computational thinking and digital competence, especially with the communicative and technological areas. Likewise, the results indicate that women obtain lower results in their computational thinking and are perceived to be digitally less competent than men, especially in regard to the technological dimension. These results provide relevant information in terms of research and open the door to the development of training actions in student teachers to overcome the still-existing gender gaps.;2020
Digital literacy is a need for our current society. In Mexico, digital incursion programs are barely implemented, which represents an educational delay compared to other countries that have faced the need to integrate the teaching of digital skills, in a wide range of educational levels. This paper presents a learning environment of Computational Thinking called EasyLogic3D, which proposes a novel integration of emotional recognition, gamification, and a 3D environment. Experiments with 102 children from an Elementary School in Mexico were carried out, where cognitive and technological acceptance tests were performed. Analyzing the Cronbach's alpha score, we found that students accepted the technology (learning environment). Also, the results showed that the perceived enjoyment when using the learning environment was positive. On the other hand, results show that the learning gained through using the learning environment was comparable to a class session in which the same topics and exercises were presented.;2020
Digital tools have become more essential in education and business areas these days and it is important to start in the early stages of education, e.g. already in the preschool stage. This paper describes the development and pilot testing of an Android based serious gaming App for mobile devices called Pic2Program. The App aims to teach children the basics of Computational Thinking (CT) in a playful way. The gameplay expects the young children to steer successfully their in-game character with the help of an intuitive symbol language through a set of increasingly complex mazes. The children may even draw sets of symbols by hand thus develop a basic program. Pic2Programs image recognition module will then process these symbols by first photographing them with an Android device and then using a neural network to map the photos to program instructions. The effectivity of Pic2Program on learning CT has been evaluated by a designed course for 9th graders. The results show that students find the App well-structured and help them to understand the basics of programming.;2020
Driven by our technologically advanced workplaces and the surge in demand for proficiency in the computing disciplines, it is becoming imperative to provide computational thinking (CT) opportunities to all students. One approach for making computing accessible and relevant to learning and problem-solving in K-12 environments is to integrate it with existing Science, Technology, Engineering, and Math (STEM) curricula. However, novice student learners may face several difficulties in trying to learn STEM and computing concepts simultaneously. To address some of these difficulties, we present a systematic approach to learning STEM and CT by designing and developingdomain-specific modeling languages(DSMLs) to aid students in their model building and problem-solving processes. The paper discusses a theoretical framework and the design principles for developing DSMLs, which is implemented as a four-step process. We apply the four-step process in three domains: Physics, Marine Biology, and Earth Science to demonstrate its generality, and then perform case studies to show how the DSMLs impact student learning and model building. We conclude with a discussion of our findings and then present directions for future work.;2020
Due to its links to computer science (CS), teaching computational thinking (CT) often involves the handling of algorithms in activities, such as their implementation or analysis. Although there already exists a wide variety of different tasks for various learning environments in the area of computer science, there is less material available for CT. In this article, we propose so-called Generic Tasks for algorithms inspired by common programming tasks from CS education. Generic Tasks can be seen as a family of tasks with a common underlying structure, format, and aim, and can serve as best-practice examples. They thus bring many advantages, such as facilitating the process of creating new content and supporting asynchronous teaching formats. The Generic Tasks that we propose were evaluated by 14 experts in the field of Science, Technology, Engineering, and Mathematics (STEM) education. Apart from a general estimation in regard to the meaningfulness of the proposed tasks, the experts also rated which and how strongly six core CT skills are addressed by the tasks. We conclude that, even though the experts consider the tasks to be meaningful, not all CT-related skills can be specifically addressed. It is thus important to define additional tasks for CT that are detached from algorithms and programming.;2020
Due to the COVID-19 pandemic, university professors are challenged to re-envision mathematics learning environments for virtual delivery. Those of us teaching in elementary teacher preparation programs are exploring different learning environments that not only promote meaningful learning but also foster positive attitudes about mathematics teaching. One learning environment that has been shown to be effective for introducing preservice teachers to the creative side of mathematics-the mathematics makerspace-promotes computational thinking and pedagogical understandings about teaching mathematics, but the collaborative, hands-on nature of such a learning environment is difficult to simulate in virtual delivery. This article describes the research-based design decisions for the re-envisioned virtual mathematics makerspace.;2020
Educational institutions planning to invest in Educational Robotics are faced with a wide selection of products. Yet, we have not been able to find any review studies on the effect of these products, to guide the institutions to get the most out of their investments. For this review, 29 Educational Robotics products were therefore selected, and eight major databases were searched for effect studies involving these. The search yielded 301 results, of which 17 were selected for synthesizing. The studies and their respective findings are discussed in the review. Unfortunately, there were not enough studies to compare the effect of the products and more research is therefore needed. In addition, the studies methodologies and design have been analyzed, and a series of recommendations for how future experimental/quasi-experimental studies within the field can be design and conducted, have been established.;2020
Educational robotics are commonly present in kindergarten and primary school classrooms, particularly Bee-bot. Its ease of use allows the introduction of computer programming to young children in educational contexts from a science, technology, engineering, arts, and mathematics (STEAM) perspective. Despite this rise, there are still few investigations that collect evidence on the effectiveness of robotic interventions. Although mentoring experiences with robotics had been carried out in educational contexts, this work explores their effect on the acquisition of computational thinking skills through mentoring. Participants from the second grade, aged seven through eight years, were exposed to two sessions of robotics with Bee-bot in order to promote hands-on experimentation. The sessions were conducted by nine students of the fourth grade (the mentors), aged 10 to 11 years. A descriptive case-study methodology was employed for the analysis of the mentoring intervention. The effect of the mentoring experience was assessed in terms of motivation and computational thinking skills. Mixed quantitative and qualitative results show two important findings: (i) Mentoring is a powerful tool to be considered for improvement of the motivation and cooperation of students in their teaching-learning process, and (ii) computational thinking skills can be acquired by second-grade students through a mentoring process.;2020
Educational robotics, programming and computational thinking are being incorporated in the classrooms of many educational centres and at any age. In many cases, this incorporation in the curricula is well-argued and documented, but in other cases, it is done in a rash manner and without prior reflection. In Early Childhood Education, the development of computational thinking seems to have found in floor robots a tool that allows its improvement and progress. To verify if this is so, 50 experts (active teachers, trainers of future teachers and commercial technicians of educational robotics) from all over Spain were tested. The results show that although there is a high percentage of considering floor robots as an excellent tool for the development of computational thinking in Early Childhood Education, there is no consensus when using other types of practices that go beyond and also benefit this learning process. Therefore, we consider it necessary to establish a common framework and guidelines that allow the correct implementation of robotics, programming and computational thinking in Early Childhood Education. Furthermore, this is based on offering quality training to develop these concepts.;2020
Educational Robots (ER) and Artificial Intelligence (AI) are rapidly evolving to meet the challenges that characterize school environments. The direction in which these emerging technologies will develop, and the effect they finally have on schools, will partially be shaped by how scholars and practitioners imagine future education. A recent study about the views of teachers and educational researchers regarding the use of ER and AI for learning purposes highlighted this issue [1]. This study revealed that, beside an urgent need for teacher professional development, the participants were concerned about human interrelations, individualization, educational management and ethics. However, both groups showed a rudimentary understanding of the differences between these two technologies. More importantly, there seemed to be a gap in the way teachers and researchers in that study approached new technologies in education. Whereas for teachers the purpose of technology was to enhance current teaching processes, for researchers, technology had a deeper transformational potential. Since then, a large national program aiming at increasing schoolteachers' computational thinking and coding skills has been put into practice at several Swedish universities to support the introduction of computer programming in the K-12 curriculum. To account for these new developments, we wanted to investigate how these teacher professional development programs could reflect on upcoming school technologies. University teachers in charge of the programming courses could provide insightful information about how ER and AI can mold future school practices since they represent an entrance point for teachers into these technologies. Delegates from several universities involved in the development of programming courses for K-12 teachers were therefore invited to give their vision of a future classroom. In order to compare with the previous study, seventeen university teachers were also asked to imagine a teaching situation in a school in which a) social robots and b) robots with artificial intelligence, were a reality. They were further requested to reflect upon which challenges and possibilities could emerge when using ER and AI in post-digital K-12 education. Which differences appear relevant compared to the participants in the previous study? The analysis showed that the university teachers participating in our study coincide in pointing out potential gains in individualizing teaching and relieving teachers from routine tasks. Our informants adhered to the position of schoolteachers and did not predict any fundamental transformations in the current teaching practices. Unique for our participants was their ability to discern between ER and AI and that, while they were largely sceptic toward the cognitive benefits of a physical robot, they trusted the software to achieve similar results in a traditional computer. Given the premises in this investigation future teachers that already knew how to program, the participants in our study did not suggest further need for professional development, which contrasts with the prevalent opinion in the previous study. If university teachers believe that programming knowledge is enough to bridge the competence gap, and they do not expect any radical transformation in education, maybe ER and AI could be fully integrated in the teaching practice more easily than it was predicted earlier;2020
"Educational robots are increasingly being used in schools as learning tools to support the development of skills such as computational thinking because of the growing number of technology-related jobs. Using robots as a tool inside the classroom has been proved to increase motivation, participation and inclination towards STEM subjects at both primary and secondary levels; however, language has usually not been considered as a mitigating factor. This paper reports our experience delivering nine workshops in English, using Thymio robots, to over two hundred students aged 9-12 across a week in the French cities of Nancy and Metz. Our goal was to test whether students would still have fun, learn something new and gain an interest in STEM even when the workshop was conducted in a foreign language. Our results indicate that using language that is easy to understand, although foreign, has a strong direct correlation (p similar to 10(-3)) with having fun and that the latter positively affects learning and increased interest in STEM.";2020
Educational tools and apps designed to teach coding and computational thinking to children have risen in popularity in the last several years. However, there is little research that explores how families with young children code together in informal environments. This study explored how children ages 5-7 and their parents jointly program with the ScratchJr app. N=58 families attended ScratchJr Family Days, single-day events for families to engage in an interactive ScratchJr session. Three additional parent-child dyads participated in a follow-up observational study, in which they were videotaped while working on an open-ended ScratchJr activity. Findings indicated that parents reported engaging as observers and coaches, whereas children engaged as planners. There were moderate, positive associations between children's prior coding interest and their engagement in debugging, as well as between children's role as playmates and their engagement in the design process. Implications and opportunities for future research are discussed.;2020
Educators and policy makers have increasingly recognized the importance of computational thinking (CT). Despite the growing body of CT literature, how to cultivate CT is still underexplored and undertheorized in early childhood education. Informed by Piaget's Theory of Cognitive Development, this exploratory study was conducted with a focus on three CT skills: pattern recognition, sequencing, and algorithm design. The framework for the study was developed in two stages. First, we designed two sets of unplugged activities (relying on tangible materials), aiming to (1) provide students with more concrete experiences of CT and (2) equip them with the necessary vocabularies/instructions for the subsequent plugged activity (with a digital device). The theoretical foundation for such an unplugged and plugged design comprised Piaget's Theory of Cognitive Development and Asher's Total Physical Response. In the second stage, we offered our CT course in a kindergarten in Hong Kong, involving six teacher participants and a total of 11 students from K1 to K3 (aged 3 to 6). After 10 h of CT training, almost all students demonstrated their mastery of pattern recognition and sequencing. However, the K1 students could only partially complete the tasks of algorithm design while the others generally reached the target level of achievement. Strengthening preschoolers' training on CT language and differentiated instruction are some possible strategies to improve the CT instructions.;2020
Effective learning is always an active process where students should create and construct their knowledge themselves. To support this independent work, creative strategies for elaborating, structuring, visualizing and memorizing learning contents are welcome in every domain. They are especially useful in subjects considered as difficult or for students with learning difficulties. Mind maps, concept maps and advanced organizers are familiar tools for visualization. Modeling is one of these creative learning strategies, with the benefit, that it is additionally fostering computational thinking and digital literacy. In this paper, we focus on modeling with diagrams used as learning strategy. These diagrams originally come from the field of computer science, where modeling is a crucial concept and visualizing technique. We mainly use diagrams of the Unified Modeling Language (UML), a graphic modeling language used in software engineering. With UML diagrams it is possible to cover respectively visualize a broad range of situations and learning purposes across all subjects from primary up to secondary education. Our research focuses on detecting those diagrams that are most useful and practicable for teachers and learners without computer science background. The paper introduces the use of modeling as brain-based learning strategy and describes which models and diagrams can be used for which purpose and in which context in order to support and enrich learning and teaching in different subjects. Besides giving some creative ideas and best practice examples for primary and lower secondary education, the paper summarizes qualitative results gained up to now, which build the basis for our new international project Modeling at School. Finally, we give an outlook on this project, its research focus and some preliminary results.;2020
For architects and other artists, shape grammars, that are part of the computational thinking concept, have been an effective initial tool of transition between the realm of design and the classic computer. The dissemination of computer science and its mindset is only possible when it is supported by adequate pedagogical processes. The presented paper demonstrates an adequate transposition of art solutions (part of tile panels by Athos Bulcao and Maria Keil) into a computational structure where innovative notations are defined in some aspects. To that end, it allows their implementation in the computer through a suitable programming language and uses those same notations to generate other solutions within the same universe of interest and research. Furthermore, an intellectual process is exposed allowing to structure the information, particularly regarding to form, to different frameworks, placing itself as an opportune methodological structure that can guide other similar experiences.;2020
For students majored in computer science, the ability to have computational thinking is an essential skill. Facilitating computational thinking cannot only help students understand the professional knowledge and principles of computer, but also bring new ideas to addressing complex problems, therefore, many colleges and universities have carried out computer professional curriculum reform based on computational thinking. Due to the high degree of abstraction of computational thinking, traditional teaching methods will cause students to understand computational thinking only at the conceptual level, and cannot realize the flexible use of computational thinking concepts. This study takes the software engineering course as an example to explain how to integrate the concepts of computational thinking into the original courses. The goal is to enable students to understand software engineering contents problems from the perspective of problem-solving.;2020
"From a learning ecology perspective, this paper aims to better understand how girls become gifted in CT competencies and how CT competencies were manifested through the co-influence of multiple factors in the developmental trajectory. A life-narrative approach using interviews was taken to unpack the significant factors that facilitate or limit the development of CT competencies. Three portraits of Korean gifted girls in information science are presented to illustrate how they developed interest and fluency in CT. Data were analyzed by a framework of Gagne's DMGT (Differentiating Model of Giftedness and Talent) 2.0. Major themes identified across the case portraits are (a) the linkage between mathematical, science, and computational thinking; (b) parents and teachers as the main catalysts; (c) self-directedness; (d) limited learning resources and knowledge-building strategies; (e) formal gifted education program as a turning point; and (f) the weak linkage between CT competencies and the future self. Implications on the pedagogical approaches concerning the gender equity issue in CT are also discussed.";2020
Full paper. One of the biggest challenges in education is the transfer of innovations and new didactic approaches into the school system. To ensure a high standard of teaching, it is essential that the teachers' expertise, pedagogical content knowledge as well as digital competences are continuously improved by further training. In-service training for teachers is offered in different settings (short-, middle- and long term), with advantages and disadvantages. Two aspects that correlate positively are the costs and the sustainable outcome of these trainings. With these aspects in mind the Educational Pyramid Scheme (EPS) is currently being developed and implemented as part of an Erasmus Plus project. It is an innovative concept that aims at spreading new learning contents and methods in a relatively short time within the school system, with low costs and high effect. It is inspired by the economical pyramid scheme, which is designed to create value through the exploitation of business opportunities. The transaction content of the Educational Pyramid Scheme refers to methods or strategies that are being exchanged, and to the resources and capabilities that are required to enable the exchange. According to a train-the-trainer principle, teachers and pupils will be qualified to be trainers, who then spread their knowledge and skills to people in their school and beyond. The EPS contains three different functions or roles: multipliers (teachers and scientists), mentors (teachers) and tutors (pupils). The motivation to participate is maintained with a benefit system adapted for each target group. The training of target groups follows high qualitative standards and therefore presents different phases: input, practical phase and reflection. This paper describes the development of the EPS and its first implementation in the framework of the Austrian mandatory curriculum Basic Digital Education including computational thinking and programming. It presents some qualitative results gained so far from interviews and observation, which are satisfactory and deliver good arguments for the further implementation of the EPS.;2020
Geometry and mathematics have always been disciplines related with architecture. As the geometry gets more complex, dealing with it becomes more intuitive. This study focuses on an exercise process, carried out with the third term undergraduate students, that searches complex geometries. The aim of this study is to make the students think over mathematical expressions as a design form and to improve their computational thinking abilities. This study takes the use of mathematics and geometry one step further in the architectural education process, and discusses that forms are not just visual values, and that their mathematical values can be used as parameters in the design process. In this context, complex three-dimensional objects that are difficult to model in three dimensions can be modelled and developed with parameters.;2020
Graduate students at the University of Maryland's College of Information Studies (UMD iSchool) collaborated in interdisciplinary teams on a case study to explore application of computational methodologies to datafied collections related to slavery in the Maryland State Archives (MSA). Two research questions were examined: (1) What are the opportunities and limitations for using computational methods and open source tools to characterize data encoded within records of enslavement and to discover new patterns and relationships in that data? (2) How does knowledge of social and cultural systems impact those opportunities and limitations? Computational methods and tools were most effectively used when socio-cultural contextualization and technology's role as a mediator of representation were taken into account. Three additional technical research areas are identified to enhance recovery of heritage hidden in records of enslavement: visualization, graph databases, and ontologies and metadata.;2020
How to meet the age of intelligence and train the innovative talents needed by the age of intelligence has become a research topic of the education circle. The characteristics of space fusion, man-machine fusion, knowledge explosion and focusing human nature in the age of intelligence put forward new requirements for innovative talents. Creative personality, critical thinking ability, digital learning ability, computational thinking, design thinking, and man-machine collaboration are essential components of creativity in the age of intelligence.;2020
"Humanoid robots, with a focus on personalised social behaviours, are increasingly being deployed in educational settings to support learning. However, crafting pedagogical HRI designs and robot interventions that have a real, positive impact on participants' learning, as well as effectively measuring such impact, is still an open challenge. As a first effort in tackling the issue, in this paper we propose a novel robot mediated, collaborative problem solving activity for schoolchildren, called JUSThink, aiming at improving their computational thinking skills. JUSThink will serve as a baseline and reference for investigating how the robot's behaviour can influence the engagement of the children with the activity, as well as their collaboration and mutual understanding while working on it. To this end, this first iteration aims at investigating (i) participants' engagement with the activity (Intrinsic Motivation Inventory IMI), their mutual understanding (IMI-like) and perception of the robot (Godspeed Questionnaire); (ii) participants' performance during the activity, using several performance and learning metrics. We carried out an extensive user-study in two international schools in Switzerland, in which around 100 children participated in pairs in one-hour long interactions with the activity. Surprisingly, we observe that while a teams' performance significantly affects how team members evaluate their competence, mutual understanding and task engagement, it does not affect their perception of the robot and its helpfulness, a fact which highlights the need for baseline studies and multi-dimensional evaluation metrics when assessing the impact of robots in educational activities.";2020
"In many discussions of the ways in which abstraction is applied in computer science (CS), researchers and advocates of CS education argue that CS students should be taught to consciously and explicitly move among levels of abstraction (Armoni Journal of Computers in Mathematics and Science Teaching, 32(3), 265-284, 2013; Kramer Communications of the ACM, 50(4), 37-42, 2007; Wing Communications of the ACM, 49(3), 33-35, 2006). In this paper, we describe one way that attention to levels of abstraction could also support learning in mathematics. Specifically, we propose a framework for using abstraction in elementary mathematics based on Armoni's (2013) framework for teaching computational abstraction. We propose that such a framework could address an enduring challenge in mathematics for helping elementary students solve word problems with attention to context. In a discussion of implications, we propose that future research using the framework for instruction and teacher education could also explore ways that attention to levels of abstraction in elementary school mathematics may support later learning of mathematics and computer science.";2020
In order to engage the player, video games are often based on challenges that must be overcome. What are colloquially known as programming games present these challenges as puzzles where computational thinking and coding skills have a fundamental role in successfully overcoming them, even though they are not serious games and have been designed purely as entertainment products. Indeed, algorithm design and coding is the fun part. This paper presents a survey of all such games up to February 2020 published in the Steam digital distribution platform, categorizing them by content covered according to a basic programming curriculum. This study provides some insights on the nature of this kind of games and allows assessing their adequacy as educational tools, broadening the body of knowledge on available games for teaching computational thinking and coding, beyond serious games.;2020
In order to strengthen the interest of students in the field of programming, robots are increasingly being used in courses of study with information technology content. This article describes the use of the robot Vector, manufactured by Anki, in a controlled laboratory experiment with undergraduate students. The aim of the research was to investigate the influence of robots on the motivation of programming beginners from the perspective of the students. The data of the study was collected using the Intrinsic Motivation Inventory. The subsequent analysis was performed using descriptive statistics and Chi(2)-tests. In addition, a computer-aided content analysis as well as a factor analysis was used as a second evaluation method. The research results showed a consistently positive influence of the Vector robot on the motivational behavior of the students. In particular, significant dependencies between the female gender and individual subcategories of the Intrinsic Motivation Inventory could be demonstrated. The generalization of the research results is limited due to the small sample size and the exclusive participation of programming beginners.;2020
In recent decades, computational thinking had a basic role in education and in the regulatory chain of many countries, also receiving great attention from various international organizations that have expressly requested its promotion starting from school education. The present study analyzes scientific productivity on SCOPUS about computational thinking and its diffusion in schools, with specific reference to the K-12 context. The study has been extended to 2006, when Jeannette Wing published the primary article on computational thinking, starting a body of research and projects on the subject, so that to date, in February 2020, there are 1850 citations of its publication on SCOPUS. The data support a global picture on the evolution of the phenomenon, showing an increase of interest, the main promoting countries, the sources, the authors and the most cited works, allowing a good reference for the scientific research sector on the computational thinking phenomenon in education, a theme that is more relevant and significant today than ever before. The present study also represents a tool for reflection on the need to educate the young people of the twenty-first century to computational thinking with the aim of making them achieve the specific skills that today's work market requires.;2020
"In recent years, Computational Thinking (CT) has been claimed to be a powerful way for competencies and skill development for students at any stage. Programming has been the main tool for CT development; nevertheless, several issues associated with learning and teaching programming exist and have been widely described. In this study, we designed and tested in a qualitative way a set of active pedagogical strategies to implement an alternative way to immerse university students in the learning process of CT development. Such strategies were designed and analyzed under the socio-cultural vision of learning, in which individuals interact in communities to build significant knowledge. Results showed that our curriculum design engaged students in the active use of five key skills related to CT, which could be used as the base ground for further programming learning and high-level CT skills development. Additionally, data indicates that students were involved in reflective processes of learning, as well as in the development of key competencies such as teamwork, communication skills and creativity. Theoretical characteristics of the socio-cultural vision of education are subsequentially used to explain and discussed the scope and limitations of the implementation described herein.";2020
In recent years, interest in Computational Thinking (CT), which is seen as a transversal competence that is necessary in the Knowledge Society, has spread to educational systems around the world. In this context, it has become necessary for training programmes for pre-service teachers to address this topic. In this article, we explore the knowledge, attitudes and expectations regarding CT held by pre-service teachers, prior to receiving training on this field. We use a descriptive analysis of both qualitative and quantitative data obtained via an ad hoc questionnaire, whereby 193 pre-service teachers at the University of Girona were asked about different aspects related to CT. The study shows that the majority of pre-service teachers cannot correctly identify most indicators associated to CT, and that most of them are unaware of the implications of the promotion of CT in terms of developed skills or areas of application. However, their expectations regarding their learning process with regard to this topic are positive. Therefore, it is necessary to more thoroughly define theoretical foundations of the concept in order to take steps to effectively include it in teacher training programmes.;2020
In recent years, many initiatives have aimed to develop basic computational thinking skills. Despite the popularity of online platforms for early programmers, we still lack detailed information to analyze how these skills are acquired. In the present study we analyzed clickstream data from 3,355 participants enrolled in several Computational Thinking workshops using Kodetu, an online platform with fine grained logging features. Participants used Kodetu's coding blocks to solve challenges of increasing difficulty while we gathered their clickstream in the platform. Here, we present our findings after evaluating these data in regards of participants' characteristics (age, sex, previous knowledge), similarity with previously submitted solutions, and degree of discrepancy from the optimal solution. To facilitate collaboration with other researchers in this area, we released our dataset under an open license. To the best of our knowledge, this is the largest Computational Thinking-related datasets publicly available.;2020
In recent years, the field of education has challenged researchers and practitioners to incorporate computing as an essential focus of K-12 STEM education. Integrating computing within K-12 STEM supports learners of all ages in codeveloping and using computational thinking in existing curricular contexts alongside practices essential for developing mathematical and scientific expertise. In this paper, we present findings from a design-based, microgenetic study in which an agent-based programming and computational modeling platform-ViMAP-was integrated with existing elementary science and math curricula through lessons co-designed and taught by the classroom teacher across a period of seven months. We present a dialogical re-positioning of coding, where disciplinarily grounded meanings of code emerge through the construction of computational utterances--i.e., computer models as well as complementary conversations and physical models that serve as mathematical and scientific explanations--through the use of socio-mathematical norms.;2020
In recent years, there has been a renewed interest in the introduction of programming in teacher education and professional development, highlighting its importance for the development of so-called computational thinking. This study explored primary education teachers' participation in programming practices. By focusing on their views of creating a computational artefact with Scratch, the difficulties encountered, and resources to overcome them in the context of a professional development effort in computer science at the primary education level, was analysed. Employing Thematic Analysis, 17 group documentations (drafts, Scratch projects and final reports) were examined. Findings revealed that projects that had educational content involved more elaborate descriptions, while recreational projects presented a shorter and less elaborate account of the programming process. In terms of difficulties, teachers described initial concerns regarding how to achieve what they had planned, imagined or expected, and they expressed difficulties related to the edition of imported images for objects and scenarios and related to the block-based programming practices. Participants resorted to a great variety of resources to overcome them, which highlights the importance of making testing and debugging practices more explicit. These findings could be relevant for the design of future learning scenarios, highlighting the importance of providing opportunities to develop a critical approach towards expressed commercial promises as well as opportunities to challenge the rhetoric of computational thinking.;2020
In recent years, various actions have been developed in Uruguay to expand Computational Thinking in primary and secondary education. This movement is not new, and is based on the work that Seymour Papert carried out for decades, strongly supported by the Logo language in its different versions. This article makes a tour of the most significant actions developed in the country from 1980 to the present, delving into those that are currently carried out in order to promote the development of Computational Thinking. In particular, preliminary data from a survey of teachers and institutions to find out the activities carried out in our country is presented. In summary, it's based on the Paper's conceptualization (1980) and the difficulties presented for computational development at that time, the evolution of Computational Thinking and the most relevant actions carried out in Uruguay to date are described, trying to show that in this country the projections that Paper originally presented are being achieved.;2020
In response to a need to equip youth to become successful contributors to our growing digital economy, educators and researchers are exploring ways to incorporate computational thinking (CT) for all across curricular domains. In this paper, we take a place-based approach to examine how and what CT practices youth learn through designing mobile games in and for their own communities. We conducted three after school workshops with 29 participants (13 female, 16 male, ages 10-16) in a rural city in the Western United States. Youth designed place-based, mobile games to share stories and experiences about local environmental or civic issues using the Augmented Reality and Interactive Storytelling (ARIS) programming platform. We collected and analyzed a range of data including field notes, design artifacts, screencasts, and final reflective interviews. Using Brennan and Resnick (2012) framework for studying and assessing the development of CT, we illustrate how youth engaged with CT practices and how their local topics facilitated their engagement with civic issues beyond the screen. Findings demonstrate how youth can engage with CT practices and their local communities through designing computational artifacts. We discuss implications for how leveraging place-based computational tools afford equitable and accessible CT integration in interdisciplinary contexts.;2020
In response to the growing call to bring the powerful ideas of computer science to all learners, education decision makers, including teachers and administrators, are tasked with making consequential decisions on what curricula to use. Often, these decision makers have not been trained in computer science and are unfamiliar with the concepts taught and tools used. This is especially true in K-12 contexts where computer science expertise is less prevalent. To aid in the decision-making process around computing curricula, this article introduces the TEC Rubric. The TEC Rubric is composed of three main categories: Teacher Accessibility, Equity, and Content designed to support educational decision makers and designers when it comes to computing instruction. Along with presenting the full rubric and the process used in its creation, this article describes two examples of the rubric in action. First, the TEC Rubric is used to evaluate two widespread computer science curricula to demonstrate its evaluative capacity highlighting differences between the two curricula. Second, we show how the TEC Rubric can be used to help inform the design of new K-12 computing curricula. Overall, the TEC Rubric is designed to serve as a useful resource in the ongoing quest to bring effective, equitable, and engaging computing instruction into schools around the world.;2020
In Robotics Education (RE), the hands-on experience with troubleshooting problems is seen as a good catalyst to enhance the participants' problem-solving skills. Based on the pedagogical technique of collaborative learning and pair programming, pair learning is an emerging and potential method in RE, which means that students collaborate in pairs to construct, build, and program a robot under scripted but switchable roles. As a special collaborative learning, can pair learning also improve students' troubleshooting performance in RE? Therefore, we conducted a comparison experiment (pair learning versus individual learning) in two classes at a Robot Summer Camp for high school students. The results indicated that (a) in the process of learning making robot artifacts, students in pair learning group (PLG) had a higher success rate in troubleshooting than that of individual learning group (ILG), but failed in other indicators and (b) in the summative test, the troubleshooting performance of students in PLG was similar with that of ILG. The findings showed that, in terms of troubleshooting, collaborative (pair) learning does not always has the superiority over individual learning in RE, which implicates other factors to be explored in future research. Implications for teaching are also discussed in this exploratory study.;2020
In the current implementation of K-12 education, computational thinking is considered an important part of developing students' key abilities. Many studies have shown that computational thinking can be improved by programming, for example, using Scratch, App Inventor, and Python. However, different programming tools have different forms of programming that affect the development of learners' computational thinking. This study aimed to test the effects of different programming tools with the same teaching content on learners' computational thinking and computer learning attitude in real classroom teaching. Ninety-nine participants took part in an eight-week teaching intervention in the Visual Basic (text-based) and Pencil Code (block-based) programming environments. T tests showed that students learning in a mixed text-based and block-based Pencil Code programming environment not only had significantly improved computational thinking but also became more self-confident and enjoyed learning programming. Furthermore, our interviews after the eight-week teaching intervention found that students showed more communication and interaction behaviors learning with Pencil Code.;2020
In the last ten years, the topic of Computational Thinking (CT) has been gaining increasing attention from researchers in the education field. Starting from kindergarten, increasingly programming activities such as coding and educational robotics are proposed to enhance CT and some cognitive skills, such as problemsolving, spatial and reasoning skills. The most commonly used tools are the socalled tangible interfaces, such as floor-robots (e.g. Cubetto, Bee and Blue-Bot and others), through which children can interact with the object and learn playfully. Investigating the effects of CT activities on children's cognitive abilities is important to understand the impact in kindergarten and to comprehend in which developmental periods these activities might be most successful. The aim of the present study is that of evaluating the effect of a coding intervention, based on CT, through the use of the Cubetto robot, on the cognitive skills of 4-years-old children. The coding intervention included three sessions and required the manipulation of physical objects to plan and conduct a Cubetto journey. Results showed that children of the experimental group performed better than those of the control group in programming the Cubetto path after the intervention.;2020
In the modern, information driven society managing and handling data is unavoidable. The most common form of data handling is to organize data into tables and complete operations on them in spreadsheets. Sprego (Spreadsheet Lego) is a programming-oriented methodology focusing on schemata construction and authentic problem-solving working with only a limited number of general-purpose functions. In our current study the goal is to present Sprego as an alternative method for spreadsheeting, and to measure its effectiveness in education compared to the traditional surface approach methods. We also aim to highlight the advantages of teaching datamanagement, spreadsheeting, and introduction to programming by applying an algorithmic and schemata centric method in a user-friendly interface. The teaching and testing were carried out in three classes of a local middle and high school with two experimental and one control groups. Based on our results, it is found that the Sprego methodology is significantly more effective than the traditional surface approach methods. Furthermore, it is also proved, in accordance with similar studies in sciences, that students, who had studied traditional spreadsheet management in advance to this experience, have difficulties switching to Sprego. Although these students alternate between the two approaches, our measurements clearly prove that the traditional approach is pushed into the background, as students prefer to solve problems using Sprego. Our findings also imply that traditional methods do not develop long-lasting knowledge which students could rely on, and have a negative effect on their development, while Sprego seems much more reliable.;2020
In the past decades, libraries have developed into sophisticated information centres. This evolution requires a new set of computational expertises and competencies but also a change in the general attitude toward continuous learning. Library Carpentry, as a lesson programme of the The Carpentries community offers an elaborate and evidence-based collection of approaches for efficient teaching of the required computational skills and concepts. This article introduces Library Carpentry and presents how it is applied at ZB MED-Information Centre for Life Sciences as a foundation for teaching digital literacy.;2020
In the present study, we investigated neural processes underlying programming experience. Individuals with high programming experience might develop a form of computational thinking, which they can apply on complex problem-solving tasks such as reasoning tests. Therefore, N=20 healthy young participants with previous programming experience and N=21 participants without any programming experience performed three reasoning tests: Figural Inductive Reasoning (FIR), Numerical Inductive Reasoning (NIR), Verbal Deductive Reasoning (VDR). Using multi-channel EEG measurements, task-related changes in alpha and theta power as well as brain connectivity were investigated. Group differences were only observed in the FIR task. Programmers showed an improved performance in the FIR task as compared to non-programmers. Additionally, programmers exhibited a more efficient neural processing when solving FIR tasks, as indicated by lower brain activation and brain connectivity especially in easy tasks. Hence, behavioral and neural measures differed between groups only in tasks that are similar to mental processes required during programming, such as pattern recognition and algorithmic thinking by applying complex rules (FIR), rather than in tasks that require more the application of mathematical operations (NIR) or verbal tasks (VDR). Our results provide new evidence for neural efficiency in individuals with higher programming experience in problem-solving tasks.;2020
In the recent years, there has been a push to engage primary and secondary students in computer science to prepare them to live and work in a world influenced by computation. One of the efforts involves getting primary and secondary students to think computationally by introducing computational ideas such as, algorithms and abstraction. Majority of this work around computational thinking has focused on the use of digital technologies, in particular programming environments (Yadav, Stephenson, and Hong 2017). In today's highly digitalized world, we often associate computational problem-solving processes with the use of computers. Yet, solving problems computationally by designing solutions and processing data is not a digital skill, rather a mental skill. Humans have solved problems for eons and before anyone even thought about the types of digital technologies and devices we know today. The purpose of this article is to examine the historical route of computational thinking and how history can inspire and inform initiatives today. We introduce how computational thinking skills are rooted in non-digital (unplugged) human approaches to problem solving, and discuss how mainstream focus changed to digital (plugged) computer approaches, particularly on programming. In addition, we connect past research with current work in computer science education to argue that computational thinking skills and computing principles need to be taught in both unplugged and plugged ways for learners to develop deeper understanding of computational thinking ideas and their relevance in today's society.;2020
In this article we address some frequently asked questions related to Computational Thinking and Computer Science in schools from a perspective that seeks to investigate behind the fashions that prevail regarding the uses of technology in the school environment. In this sense, it becomes necessary to get involved in other related matters, such as school robotics or transversal teaching of the Computer discipline. The word urgent in the title accounts for the need of some epistemological clarity necessary to accompany the processes of inclusion of these concepts in argentine schools.;2020
In this commentary, we make a case for the explicit inclusion of combinatorial topics in mathematics curricula, where it is currently essentially absent. We suggest ways in which re-searchers might inform the field's understanding of combinatorics and its potential role in cur-ricula. We reflect on five decades of research that has been conducted since a call by Kapur (1970) for a greater focus on combinatorics in mathematics education. Specifically, we discuss the following five assertions: 1) Combinatorics is accessible, 2) Combinatorics problems provide opportunities for rich mathematical thinking, 3) Combinatorics fosters desirable mathematical practices, 4) Combinatorics can contribute positively to issues of equity in mathematics educa-tion, and 5) Combinatorics is a natural domain in which to examine and develop computational thinking and activity. Ultimately, we make a case for the valuable and unique ways in which combinatorics might effectively be leveraged within K-16 curricula.;2020
In this paper it is described a Pilot that took place at Emidio Garcia School from Braganca, Portugal. The presented Pilot is based on a Challenge based Learning Approach, being an activity of the RoboSTEAM - Integrating STEAM and Computational Thinking development by using robotics and physical devices - ERASMUS+ Project. In the presented educational experiment it were used physical devices, being chosen the mBot robot, programmed using Scratch. The presented challenges had as research question a global problem that was Wildfires. Student had to propose and to develop solutions based on the use of robots to prevent and fight wildfires. The students that participated in the experiment were secondary school students, from Spain and Portugal, with their background in technology and arts respectively. Previously to the experiment the involved students filled a STEM semantic Survey and during the experiments their performance was evaluated.;2020
"In this paper we present an interactive learning environment (ILE) called CREA y JUEGA, focused on the development of computational thinking skills using block-based visual language programing with a 3D physics simulation system. It includes a programmable interaction system based on hand movement and gesture recognition, that allows to easily create and use customized hand gestures for interaction with 3D objects in a virtual environment. By applying the TAM model to discover the motivation, enjoyment and behavioral intention to use, the results show that: (1) using NUI technologies in interactive learning environments improve the enjoyment and the perceived ease of use; (2) perceived enjoyment was a significant issue in the intention to use; (3) NUIs interfaces during exercises could provide motivation to learn for middle school students.";2020
In this paper, the purpose is to discuss results of a continuing education action with teachers, linked to the university extension project Computational Thinking and Interdisciplinarity in the classroom, developed within the Postgraduate Program in Mathematics Education at Sao Paulo State University (UNESP), Rio Claro (Sao Paulo), Brazil. The development of interdisciplinary activities by teachers using Scratch software is highlighted, pointing out how this is reflected in the classroom, from the development of an interdisciplinary activity in two classes taught by the teacher of Geography, a participant of this formative action. The qualitative approach was adopted, and the methodological procedures used were video recording of the meetings, writing of field diaries, prepared by all the involved proposers, and recording of all the developed activities. Data analysis highlights how important this partnership between university and school was because it contributed to transform the knowledge of teachers, researchers, and students through the development of Computational Thinking.;2020
In this study, the head-mounted virtual reality (VR) technology is adpoted for computational thinking teaching in the AIoT Maker course teaching. The earthquake relief situation is designed in the VR in the course scenario, because in the context of situational thinking, pre-emptive training in the face of emergency disasters has been conducted through observation meetings or training courses. Through listening to lecturers or experienced personnel to share experiences, students often have a harder time thinking about real scenes and it is harder to think creatively how to design with the emergency disaster response. In view of this, this research will combine the development and evaluation of earthquake relief training courses for head-mounted VR and computational thinking experiments to explore the use of VR and computational thinking experiments to drive students to create ideas for real disaster relief scenarios. Through computational thinking, students think about different script situations and discuss in each scene to find a suitable maker design of the AIoT project. Finally, this study combined with its modular space program training to develop students' programming skills. According to the experiment, this study is able to strength students' practical learning motivation, and follow-up employ ability training for course learning.;2020
In this theory paper, we explore the concept of translanguaging from bilingual education, and its implications for teaching and learning programming and computational thinking in especially computer science (CS) for all initiatives. We review theory from applied linguistics, literacy, and computational literacy, using translanguaging to examine how programming is and isn't like using human languages, ultimately framing CS as computational literacies. We describe a pedagogical approach to teaching computational literacies, providing a design narrative that describes activities from bilingual middle school classrooms integrating Scratch into academic subjects. We find that translanguaging pedagogy can leverage learners' (bilingual and otherwise) full linguistic repertoires as they engage with computational literacies. Our data helps demonstrate how translanguaging can be mobilized to do CS, which has implications for increasing equitable participation in computer science.;2020
In this work in progress paper we present an example of innovative practice in organizing informal STEM education workshops with young children. The workshops were divided into two learning scenarios, unplugged programming and hands-on robot play. Unplugged programming encourages understanding of the core concepts of programming such as algorithms and computational thinking rather than focusing on the programming language. In the second learning scenario, pupils were introduced to two educational robots used as a learning tool - Thymio and Codey Rocky. The aim of the second activity was linking the programming concept to a real-world scenario. Qualitative and quantitative data were collected using pre- and post- questionnaires. The pre-questionnaires contained questions about the pupils' background knowledge, i.e. basic concepts of programming and robotics. The post-questionnaires were designed to evaluate the workshops impact on the pupils' perception of these observed concepts and their overall satisfaction with the workshops. Combining unplugged activities with robots helps bridging the gap between imagination and reality, therefore improving learning.;2020
In this work, we examine whether repeated participation in an after-school computing program influenced student learning of computational thinking concepts, practices, and perspectives. We also examine gender differences in learning outcomes. The program was developed through a school-university partnership. Data were collected from 138 students over a 2.5-year period. Data sources included pre-post content assessments of computational concepts related to programming in addition to computational artifacts and interviews with a purposeful sample of 12 participants. Quantitative data were analyzed using statistical methods to identify gains in pre- and post-learning of computational thinking concepts and examine potential gender differences. Interview data were analyzed qualitatively. Results indicated that students made significant gains in their learning of computational thinking concepts and that gains persisted over time. Results also revealed differences in learning of computational thinking concepts among boys and girls both at the beginning and end of the program. Finally, results from student interviews provided insights into the development of computational thinking practices and perspectives over time. Results have implications for the design of after-school computing programs that help broaden participation in computing.;2020
In this work, we present a novel intelligent environment for learning the core concepts of Computational Thinking. This learning environment can recognize learning-centered emotions presented by the students, performing different interventions automatically, depending on the students' affective states. Tests were conducted to compare learning gain, and additionally, an acceptance technology model was applied to validate the students' acceptance of this learning tool. During the cognitive evaluation, a control group had an average increase in score of MD = .636 while an experimental group reported an increase of MD = .772, which indicate a greater gain in knowledge for the experimental group. During the experiment, the system inferred a total of 2,139 emotions from the students. 56.66% of these emotions were in the categories of committed and interested, 42.22% belonged to excited and concentrated, and only 1.22% of the values were in the category of bored.;2020
In this work-in-progress research we exploited and investigated a virtual reality (VR) based, flexibility learning environment (FLE) in which adolescents with autism use, customize, and design an assortment of simulation games that represent and exemplify the application of forces and Newton's laws of motion. The simulation/game modeling and making tasks acted as the primers of practicing and assessing representational flexibility in solving the engineering design problems with computational thinking. The participants' participation behaviors and verbal utterances during the intervention sessions have been archived via screen and webcam recordings. The current study findings indicated that two approaches of speech or text data mining, multi-label classification and similarity index, can act as the in-situ performance assessment methods to evaluate the representational flexibility development for engineering design and computational thinking of a heterogeneous learner group.;2020
Incorporating computational thinking (CT) ideas into core subjects, such as mathematics and science, is one way of bringing early computer science (CS) education into elementary school. Minimal research has explored how teachers can translate their knowledge of CT into practice to create opportunities for their students to engage in CT during their math and science lessons. Such information can support the creation of quality professional development experiences for teachers. We analyzed how eight elementary teachers created opportunities for their students to engage in four CT practices (abstraction, decomposition, debugging, and patterns) during unplugged mathematics and science activities. We identified three strategies used by these teachers to create CT opportunities for their students: framing, prompting, and inviting reflection. Further, we grouped teachers into four profiles of implementation according to how they used these three strategies. We call the four profiles (1) presenting CT as general problem-solving strategies, (2) using CT to structure lessons, (3) highlighting CT through prompting, and (4) using CT to guide teacher planning. We discuss the implications of these results for professional development and student experiences.;2020
Innovative Practice Work in Progress Paper. Grammar is often taught explicitly in the course of foreign language instruction despite potential misgivings about the details of effectiveness. Different approaches rest on different conceptual and pedagogical rationales, which in turn rely on different forms of conceptual and empirical research. We seek to extend a COOL Informatics approach to grammar instruction in foreign language teaching. COOL Informatics is the acronym for Cooperative and Computer Science supported Open Learning and adopts a neurodidactic approach to teaching in general, in which processes of deduction and generalisation are supported by computational methods of storing, representing and explaining points of language usage. In addition, this represents an opportunity for crosscurricular cooperation between teaching in computer science and language. From neurodidactics we know that the learning and memorizing process in the brain can be supported by using advance organizers such as concept maps for visualizing and structuring the learning contents. With the visual language UML, the Unified Modeling Language, and other diagram types, the field of computer science offers a wide range of such advance organizers. They can be applied for quite a lot of purposes or learning and teaching situations. In this paper we focus on the benefits of computer science models for grammar instruction in foreign language classes aiming at making grammar visible, comprehensible and memorable. We present several ideas for the use of UML diagrams for describing, explaining and learning grammar rules and structures in lucid diagrams. Especially activity and class diagrams or entity-relationship diagrams seem to be very helpful as our experiences gained so far suggest. The paper describes the COOL Informatics teaching approach and it draws a connection between computer science and foreign languages. Furthermore, it shows how to use different types of UML diagrams for visualizing different aspects of grammar teaching and learning. We summarize the most important experiences and results from our last projects related to modeling and present the newest study on UML for grammar learning with some preliminary results.;2020
"Integrating computational thinking (CT) and science education is complex, and assessing the resulting learning gains even more so. Arguments that assessment should match the learning (Biggs, Assessment & Evaluation in Higher Education, 21(1), 5-16. 1996; Airasian and Miranda, Theory into Practice, 41(4), 249-254. 2002; Hickey and Zuiker, Journal of the Learning Sciences, 21(4), 522-582. 2012; Pellegrino, Journal of Research in Science Teaching, 49(6), 831-841. 2012; Wiggins, Practical Assessment, Research and Evaluation, 2(2). 1990) lead to a performance-oriented approach to assessment, using tasks that mirror the integrated instruction. This approach reaps benefits but also poses challenges. Integrated CT is a new approach to learning. Movement is being made toward understanding what it means to operate successfully in this context, but consensus is neither general nor time tested (Kaput and Schorr, Research on technology and the teaching and learning of mathematics: Case and perspectives (Vol. 2, pp. 211-253) 2008). Movement is also being made toward developing methods for assessing CT. Despite the benefits of matching assessment with pedagogy, there may be intrinsic losses. One problem is that interactions between the two domains may invalidate the results, either because the gains in one may be easier to measure at certain times than the gains in the other, or because interactions between the two domains may cause measurement interference. Our examination draws upon both theoretical basis and also existing practices, particularly from our own work integrating CT and secondary science. We present a mixed-methods analysis of student assessment results and consider potential issues with moving too quickly toward relying on a rubric-based approach to evaluating this student learning. Centrally, we emphasize the importance of assessment approaches that reflect one of the most important affordances of computational environments, that is, the expression of multiple ways of knowing and doing (Turkle and Papert, Journal of Mathematical Behavior, 11(1), 3-33. 1992).";2020
Interests in Maker Education have been increasing among K-12 educators. In this study, we focused on one of the contexts of Maker Education, digital fabrication activities, at a makerspace in Finland. We aimed to explore: (1) the potentials and the factors to develop twenty-first century skills and computational thinking practices through digital fabrication activities, and (2) challenges of utilizing digital fabrication in K-12 Maker Education. We examined perspectives of teachers and facilitators who have roles to support pupils in Maker Education. We presented three cases of school visits (3-5 days), where the pupils (7-9th grades) created tangible artifacts with digital fabrication facilities at the makerspace. We collected data through participants' observation, informal interviews and focus group interviews with teachers and facilitators. For data analysis, we employed theory-driven and data-driven approaches. The results showed that digital fabrication activities can provide learning opportunities for twenty-first century skills and computational thinking practices. The teachers and the facilitators discussed the six factors of digital fabrication activities which influenced pupils' learning. However, the result also indicated the possibility that the teachers and the facilitators might not be familiar with the concepts of computational thinking. Also, different perspectives between the teachers and the facilitators toward the structure of the current activities surfaced. By identifying potentials and challenges of the current practices, the study has implications to advance Maker Education to be better integrated into K-12 school contexts.;2020
Introducing coding in early education improves the logical and computational thinking in kids. However, cognitive skills are not sufficient for a successful life. Understanding and managing the emotions of oneself is another crucial factor in success. The current state of the art teaching methods educates the kids about programming and emotional intelligence independently. In our opinion, it is advantageous to teach kids emotional intelligence, along with the programming concepts. However, the literature lacks the studies that make students emotionally aware while teaching them programming. This research aims to prepare students to be cognitively healthy as well as emotionally intelligent with the hypothesis that a kid's emotional intelligence can be enhanced while teaching them cognitive skills. We proposed a computational model that teaches programming and emotional intelligence side by side to students. The model provides a curriculum and related tools. For evaluations, five hundred students of a public school were involved in different activities to find the effectiveness of the proposed model. These students were divided into five groups (A, B, C, D, and E), each having a mean age of 4, 5, 6, 7, and 8 years, respectively. Students performed multiple adaptive scenarios of path-finding that were based on self-awareness, social-awareness, sharing, and empathy emotions. Students provide the programming instructions such as sequencing, conditional statements, and looping to a robot. The children have successfully improved in both fundamental programming constructs and emotional intelligence skills. The research also successfully reduced screen time problem by providing a screen-free student interface.;2020
Knowledge in Computer Science (CS) is essential, and companies have increased their demands for CS professionals. Despite this, many jobs remain vacant. Furthermore, computational thinking (CT) skills are required in all contexts of problem solving. A further serious problem arises from the gender disparity in technology related fields. Even if tech companies want to hire women in technology, the number of women who enter these fields is remarkably low. In high schools with no technical focus, most teenagers acquire only low-level skills in CS. The consequences are misleading preconceptions about the fundamental ideas of CS and stereotype-based expectations. Consequently, many teenagers exclude computing from their career path. In this paper, two promising concepts to overcome these challenges are presented. In 2018, a voluntary gamified lecture Design your own app, held at the University of Graz for students of all degree programs, was introduced. The course attracted over 200 students and received positive evaluations. This led to the second concept. In January 2019, a MOOC (Massive Open Online Course) with the title Get FIT in Computer Science was designed and launched in August 2019 on the platform iMooX.at with the goal to provide a basic introduction to different concepts of CS, including programming and the application of game design strategies. The MOOC was accompanied by an offline lecture, following the principles of flipped classroom and inverse blended learning. For evaluation purposes, we collected data at three stages: 1) during the MOOC, 2) during the offline lecture, and 3) two months after the lecture. The results showed that the MOOC framework was a promising approach to support and motivate at least a certain group of first-semester students, especially those who had no prior knowledge in CS.;2020
Learning computer programming is a permanent challenge for teacher engineers to find mechanisms, theories, and models that facilitate it and simplify the resolution of problems from the use of computational thinking. The concept of a function and the divide and conquer strategy facilitates the assimilation and application of programming within the functional paradigm and, at the same time, simplifies the learning of other programming paradigms. This article is based on an investigation made in parallel with groups of Programming Functional Paradigm throughout the last 6 semesters in the Systems and Computing Engineering program. The results are significantly different when comparing the groups in which the divide and conquer strategy was adopted with the results of those with a single function was worked that included the entire logical process of solving a problem. It is concluded that it is much more convenient to atomize a computational algorithmic solution into independent functions than think that solution in a single logical body independent of the programming paradigm.;2020
Learning programming and robotics offers the opportunity to practice problem-solving, creativity, and team-work and it provides important competencies to train for the 21st century. However, programming can be challenging, and children may encounter difficulties in learning the syntax or using the coding environment. To address this issue, we have developed a methodology for teaching programming, design and robotics based on inquiry-based learning and hands-on oriented activities together with visual programming. We have applied and evaluated this new methodology within the extracurricular activity of an international elementary school in Barcelona. Our findings showed acquisition and learning of technical language, understanding of electronics devices, understanding the mapping of coding into action via the robot's behavior. This suggests that our approach is a valid and effective teaching methodology for the instructional design of robotics and programming.;2020
Learning programming using text-based languages is difficult for most novice programmers, regardless of their age. That perception has a negative effect on motivation, and unfortunately, their first experience with programming often confirms it. Novice programmers have to develop sophisticated skills like problem-solving and abstract thinking, learn and understand programming concepts together with artificial language syntax while trying to grasp an overwhelming developing environment. Using simpler programming languages and environments is the attempt to make programming more approachable for novices. Block-based programming languages play an essential role in lowering the barrier towards programming by taking a step further and removing syntax issues. However, using block-based languages is not a magic solution that might solve everything. It is imperative to choose the age-appropriate first programming language and development environment, and also to connect learning experience with the real-life context. Using block-based programming too early or too late may both fail. Some authors suggest replacing visual blocks with physical objects, so children may start studying programming earlier than expected by their age or computer skills. Such languages are named tangible programming languages. The key is to connect physical or tangible objects with programming concepts. There are some suggestions that, for some students, the top level of programming expertise will be the use of block-based languages. Still, others with the potential of moving further often have the problem of transferring knowledge and skills learned from blocks to the text-based programming language. It seems that with each new language teachers start everything from the beginning. In this paper, we provide a short overview of age-appropriate languages and didactic tools for teaching programming, which we developed and used in practice. One of the tools presented here is a tangible programming language designed for teaching programming and computational thinking to young novice programmers. The other programming language which we have developed is a block-based language that enables mediated transfer to different text-based programming languages. The block-based programming community and the number of projects available online are rapidly growing. Teachers who use block-based programming languages in their classes may encounter evaluation issues. Some authors suggest automatic graders for block-based languages with a similar approach used in text-based languages, so we have made an analysis and comparison of automated and real teacher project evaluation.;2020
Learning standards for K-12 science education emphasize the importance of engaging students in practices that scientists perform in their profession. K-12 teachers are expected to engage students in scientific modeling, which entails constructing, testing, evaluating, and revising their own models of science phenomena while pursuing an epistemic goal. However, conceptualizing models of unobservable science phenomena without support is daunting for students. We propose that creating science simulations with block-based coding in Scratch is a promising approach to support student's scientific modeling and learning to code. However, research indicates that preservice and in-service science teachers often hold a deficient understanding of scientific modeling instruction, and lack experience teaching with coding. Professional learning on use of block-based coding in scientific modeling instruction is needed though such interdisciplinary research is scarce. In this paper, we review pertinent literature and propose five guidelines for teacher educators striving to offer such professional learning. The guidelines informed the design and development of coding in scientific modeling lessons (CS-ModeL), which is a module and an online tool for scaffolding teachers' learning to code science simulations, and to integrate simulation coding activities into scientific modeling lessons, respectively. We discuss how guidelines informed the design and development of CS-ModeL, as well as plans for future research.;2020
Learning trajectories are paths that students may follow in order to achieve their learning goals. Although the literature has addressed the subject, little has been done in the way of exploring how to visualize learning trajectories. In this paper, we present three forms of interactive learning trajectories visualizations linked to the context of computational thinking. As the interactions on visualizations involved different aspects, our proposal comprises three layers: the data representation, the reactions to the navigation and data exploration where more details of the data can be seen. Due to visualizations being tightly related to the context from which the data comes, we analyzed the data types available in Code.org, a well-known platform commonly used to teach computational thinking. To assess the three visualizations, we carried out usability and user experience evaluation with 23 Brazilian elementary schools teachers. The results revealed that the three visualizations achieved an average of 72% of overall understanding by the audience. Besides, our findings showed the visualizations were well accepted among the participants. We also found out that the user experience reported by the participants is in some way associated with the level of understanding of the visualizations.;2020
Making activities and environments have been shown to foster the development of computational thinking (CT) skills for students in science, technology, engineering, and math (STEM) subject areas. To properly cultivate CT skills and the related dispositions, educators must understand students' needs and build awareness of how CT informs a deeper understanding of the academic content area. Assessing Computational Thinking in Maker Activities (ACTMA) is a design-based research study that developed a curricular unit around physics, making, and CT. The project in this paper studied how instructors could use formative assessment to uncover students' prior knowledge and improve their use of CT. This study aims to provide a qualitative analysis of one lesson in the unit implementation of an informal makerspace environment that strived to be culturally responsive. The study examined moments of notice, or instances where formative assessment could guide students' understanding of CT. We found elements in the establishment of a classroom culture that can generate a continual use of informal formative assessment between instructors and students. This culture includes using materials in conjunction with the promotion of CT concepts and dispositions, focusing on drawing for understanding, the practice of debugging, and fluidity of roles in the learning space.;2020
Many education systems have recognized the importance of computational thinking and coding skills and are implementing curricular changes to introduce coding into formal school education. A necessary and critical success factor involves the preparation of and support for teachers to teach coding. Thus, understanding the perceptions of teachers towards coding is most important, together with knowing the kinds of support they received, and their readiness and challenges to teach. The purpose of the current study is to compare teachers' attitudes towards the importance of information and communications technologies (ICT) skills and coding skills in Finland, Mainland China, Singapore, Taiwan, and South Korea. The findings indicate that teachers in Finland, Singapore, Taiwan, and South Korea believe that coding is useful even if students will not work in ICT jobs while Mainland Chinese teachers are undecided. Mainland China, Singapore, Taiwan, and South Korea have more positive views towards how to prepare for future-ready learners.;2020
Many educational departments are losing the battle against inefficient mathematics education. The Annual National Assessments (ANA) and World Economic Forum reports tell a story that performance is declining annually among learners in South Africa. The study was conducted among Grade 9 learners at a private high school in the Western Cape to establish a framework for computational thinking. The problem statement reads that it is not clear how high school learners' computational thinking (CT) may be enhanced or improved at a cognitive level of formal operations. The research question posed is, 'How can CT be enhanced, among high school learners, using a PL aligned to Action-Process-Object-Schema (APOS) theory?' The research methodology was based on an interpretivist philosophy. The ontological underpinning of the study is subjective and the epistemological stance accepts opinions of learners through written, spoken and visual attributed meanings. The axiology of the researcher is that of a practising educator in programming, a teaching and learning expert and a certified Java-Alice-Greenfoot instructor through Oracle. The research strategy was based on educational design research as a validation study through interventions. Findings show that CT at a cognitive level of formal operations can be enhanced among learners through Greenfoot PL with APOS theory as lens. The support and recognition of the headmaster or line manager towards those involved in programming language (PL) and learning management system (LMS) education, determine the success of the roll-out.;2020
Many educational institutions have modified their curricula to include computational thinking and coding courses for all students. However, it is not always easy to engage non-CS students in coding. Hackathons are often suggested as tools for exposing people to fun real challenges, promoting alternative ways of learning and increasing their interest in coding, and CS in general. Thus we ask, could a hackathon be used specifically within a CS1 class to motivate students and boost their performance (measured in grades)? In this article, we analyze data from 1253 students before and after an educational hackathon, observing changes in motivation towards the class and ultimately the students' grades. We discovered that although there are variations in motivation and performance on those attending the Pyweekend, either as participants or attendants (general public), it is difficult to conclude that those variations are solely caused by the hackathon. We also include suggestions as how to extend this study to further understand the effects of hackathons on the motivation and grades of CS1 students.;2020
Many toys and kits have been developed to help cultivate computational thinking in young children in the past decade. However, a majority of these kits ask children to move a robot/character around a limited space, constraining what could otherwise be generative and creative learning experiences into pre-defined activities and challenges with uniform outcomes. How can we expand what children can program and how they can create code? In this work, we present CodeAttach, a learning kit designed to engage young children in computational thinking through physical play activities. CodeAttach consists of three parts: (1) an interactive hardware device, (2) a mobile application to program the device, and (3) supporting materials for different play activities. With CodeAttach, children can attach the device to the supporting materials or other everyday objects to create their own props for physical play. The device offers different inputs and outputs and supports children to change the rules of existing physical activities or create new activities by programming this device. We outline the principles guiding the design of CodeAttach, its initial development process, and insights from early playtest with young kids and expert researchers.;2020
Massive open online course (MOOC) studies have shown that precourse skills (such as precomputational thinking) and course engagement measures (such as making multiple submission attempts with assignments when the initial submission is incorrect) predict students' grade performance, yet little is known about whether these factors predict students' course retention. In applying survival analysis to a sample of more than 20,000 participants from one popular computer science MOOC, we found that students' precomputational thinking skills and their perseverance in assignment submission strongly predict their persistence in the MOOC. Moreover, we discovered that precomputational thinking skills, programming experience, and gender, which were previously considered to be constant predictors of students' retention, have effects that attenuate over the course milestones. This finding suggests that MOOC educators should take a growth perspective towards students' persistence: As students overcome the initial hurdles, their resilience grows stronger.;2020
Modern preschool education is seen as an essential foundation for nurturing children's digital literacy. Early childhood education environments have witnessed increased emphasis on integrating programming activities in combination with digital tablets. However, little is known about how preschool teachers implement programming as part of pedagogical strategies during practice. In Sweden, although there is a mandate to develop children's understanding of the digital world, programming is not formally mentioned in the revised preschool curriculum. This study systematically investigates how Swedish preschool teachers implement programming activities in their teaching practice. Data was collected through a national online survey (n = 199). Findings revealed a range of apps and resources used in combination with tablets, where activity integration takes place as unplugged programming, digital programming, or as a combination of the former. Teachers markedly attributed intended learning goals around programming to tenets of computational thinking and twenty-first century skills. Moreover, programming was often actively linked to learning in other domains such as science, technology, mathematics, and language, approaches that show traditional Swedish preschool teaching practices being recontextualized in terms of programming. Based on the reported findings that provide insight into the implementation of programming in preschools, a logical future research avenue lies in exploring the documented programming activities from the perspective of the children.;2020
"Modern society needs to think of new approaches for solving problems with computing. Computational thinking is the process of abstracting and automating a variety of problems using computational technology. A system that expresses, manages, and processes knowledge such as computational thinking is called a knowledge-based system. This paper proposes to examine students' knowledge about computational thinking when they want to develop a Python project, and the correlation/association between these concepts. To achieve our goal, a field study was designed and data were collected from a computer programming lecture. Through this data analysis, we try to identify the factors through the correlation between data and clustering technique in order to express and discover the knowledge about the learner's computational thinking. For the verification of the factors identified, we analyzed the correlation between computational thinking and the pre- and post-test results of the LightBot. In addition to the regression analysis of the proven factors, the probability of the research model was analyzed through the structural equation to process the knowledge discovered. In this paper, we present various problems in the domain of programming education and analyze the means to diagnose and improve knowledge based on computational thinking by finding various problem-solving methods. To pre-examine the learner; he/she was diagnosed using a test paper and the LightBot execution test. We checked the learner's current knowledge state by analyzing the correlation between the test site and the results of the LightBot. To analyze the level of knowledge improvement of learners, we designed an experiment to analyze the correlation between learning and the actual test results through a system that applied the problem-solving learning method. An analysis of the experimental results demonstrated that there was a correlation between the test results for a learner and the pre-test results of the LightBot. Additionally, the group mean scores of the learners who learned as per the proposed technique were observed to be significant. During this process, we analyzed the effects of problem-solving and system application on academic achievement through factor analysis, regression analysis, and structural equation modeling. The ability to pinpoint various problem scenarios and solve problems more effectively using computational technologies will become more important in future. For this purpose, applying our proposed technique for deriving and improving knowledge based on computational thinking to software education will induce the interest of students and increase the learning effect.";2020
Motivated by the recent explosion of interest around Educational Robotics (ER), this paper attempts to re-approach this area by suggesting new ways of thinking and exploring the related concepts. The contribution of the paper is fourfold. First, future readers can use this paper as a reference point for exploring the expected learning outcomes of educational robotics. From an exhaustive list of potential learning gains, we propose a set of six learning outcomes that can offer a starting point for a viable model for the design of robotic activities. Second, the paper aims to serve as a survey for the most recent ER platforms. Driven by the growing number of available robotics platforms, we have gathered the most recent ER kits. We also propose a new way to categorize the platforms, free from their manufacturers' vague age boundaries. The proposed categories, including No Code, Basic Code, and Advanced Code, are derived from the prior knowledge and the programming skills that a student needs to use them efficiently. Third, as the number of ER competitions, and tournaments increases in parallel with ER platforms' increase, the paper presents and analyses the most popular robotic events. Robotics competitions encourage participants to develop and showcase their skills while promoting specific learning outcomes. The paper aims to provide an overview of those structures and discuss their efficacy. Finally, the paper explores the educational aspects of the presented ER competitions and their correlation with the six proposed learning outcomes. This raises the question of which primary features compose a competition and achieve its' pedagogical goals. This paper is the first study that correlates potential learning gains with ER competitions to the best of our knowledge.;2020
New technological tools, technology-based services and support are being introduced into our daily lives faster than ever. Among these technological advances robotic technology has increased dramatically in recent years, the same as its inclusion in education. The purpose of the paper is offer a compressive review about computational and creative thinking definitions and its measurement, furthermore, its relationship with coding, educational robotics and the maker movement. The review is based in the most cited papers publish in the last 10 years, retrieved from google scholar and other prestigious databases. The review has showed that with the use of coding and robotics kits there is generally no correct way to solve a challenge, and computational and creative thinking are related to find efficient and good solution to problems. Not having a correct answer but multiple ways of addressing a problem is an experience that many teachers are not familiar with. That is why more scientific research is needed in this regard, in terms of successful interventions that show evidence and good practices that serve as training and guides teachers.;2020
One of the most important challenges of education is the formation of proper computational thinking (CT). In line with K-12 Computer Science Framework (k12cs.org) the term of CT refers to the thought processes involved in expressing solutions as computational steps or algorithms that can be carried out by a computer. CT is a problem solving process essential to the development of computer applications, but it is also used in supporting problem solving across many other disciplines. It has gained some grounds in secondary education in the last few years and there are ongoing efforts to introduce it to elementary education as well. Taking into consideration that algorithms play a central role in computational thinking, the aim of our research was to assess the skills of secondary school students and university students in this area, CT, that they faced an apparently computer science free task but with obvious algorithmic background. According to the aims of our research there were two target populations: secondary school students and university students. In order to measure the level of computational thinking we elaborated a worksheet (test with problems to be solved). The tasks contained algorithms that can be applied on computer, and they did not need any IT knowledge, only structured and logical thinking. The results provide a reliable guide regarding those cognitive skills, among secondary school-children and university students, which need improvement, so transfer of knowledge could work in practical, life-like situations. (C) 2020 The Authors. Published by Elsevier B.V.;2020
Over the last years, educational computering and robotics have become a reality in the classroom context. Computational thinking has become a subject worth of study, mainly due to the growing number of papers around its introduction in Early Years Education. In Infant Education, the development of computational thinking contributes to the student's cognitive development and fosters the learning skills. This present research project is based on the resolution of a sequence of mathematical problems set in a context familiar to Infant Education students, which is close to their interests and motivation. By means of a floor robot with advanced remote control, Next 1.0., it is intended to initiate the students in the language of robotics and computational thinking. Through affectivity, experiences which motivate students to search for solutions to the approaches proposed it is intended to be generated.;2020
Owing to the development of multimedia and computer technologies, many scholars have attempted to employ digital learning content to improve students' learning motivation and learning achievement in CS courses. In this pedagogical design, students interact and create their own content related to curricular areas with several advantages, such as motivation, fun, commitment, and enthusiasm, showing improvements related to computational thinking and computational practices. The purpose of the present study is to evaluate the combined use of App Inventor and a game-development approach in school lessons, as an example of constructionist learning in an introductory programming course for novices. This study was conducted in a public secondary school in Greece. It used a quasi-experimental control group design. The results of the study showed that the combined use of App Inventor programming environment and a game development approach has a positive effect on students' basic programming skills achievements and motivation in a CS course.;2020
"Pair programming (PP) is an effective and operable approach to improve Computational Thinking (CT). However, the process of PP is complex to understand for students at the elementary level, which needs to be supported. Collaboration scripts is a promising way to structure the collaborative process through three mechanisms: pp forming mechanism, role-task mechanism, the feedback mechanism. We conducted a pilot study to examine the effectiveness of collaboration in students' use of collaboration scripts and furthermore to evaluate the development of CT and math. Both quantitative and qualitative data about the students' CT skills, mathematical achievements and perceptions of collaboration scripts were collected. The results showed that the PP with collaboration scripts can improve the CT skills, mathematical achievements; facilitate higher collaborative relationship; give students good perceptions by teacher's feedback.";2020
Persistence has proven to be a great challenge in online learning environments. Gaming and interactivity have been suggested as essential features in reducing dropout and increasing persistence in online learning. Yet in interactive game-based learning environments, persistence in moving forward in the game may come at the expense of investing in each of the game's levels. That is, the motivation to complete the game may have a deleterious effect on learning at specific levels and hence on learning from the game in general. Therefore, we have chosen to focus on microlevel persistence (i.e., persistence during each component of the learning process). We study microlevel persistence in the context of acquiring computational thinking-the thought process of solving problems through abstraction-which is a key component of the new literacies needed for tomorrow's citizens. In this study, we analyze data collected from an online, game-based learning environment (CodeMonkey (TM)). The data document the activity of first to sixth graders (N = 2,040). Overall, we find that persistence is positively associated with difficulty and that the most determined learners were highly persistent across topics in achieving the best solution.;2020
Portfolios have recently gained traction within computer science education as a way to assess students' computational thinking and practices. Whereas traditional assessments such as exams tend to capture learning within artificial settings at a single point in time, portfolios provide more authentic opportunities to document a trajectory of students' learning and practices in everyday contexts. Furthermore, because communication itself has been defined as an important computational thinking practice, portfolios give students a place to practice this skill in the classroom. In this study, we report on the implementation of a digital portfolio with a class of 21 high school students used to capture the process of creating of an electronic textile mural project. While students' understanding of computational concepts were only partially captured within the portfolios, their engagements with computational practices - such as debugging and iteration - were better highlighted. Much of this was due to the students' existing communicative strategies themselves, both in terms of how precise they were in describing issues, as well as how they leveraged images and code to explain their process. Recommendations for designing more effective portfolio assessments are discussed, which include greater emphasis on creating shared classroom discourse, and leveraging students' existing experiences with multimedia.;2020
Previous research has established that embodied modeling (role-playing agents in a system) can support learning about complexity. Separately, research has demonstrated that increasing the multimodal resources available to students can support sensemaking, particularly for students classified as English Learners. This study bridges these two bodies of research to consider how embodied models can strengthen an interconnected system of multimodal models created by a classroom. We explore how iteratively refining embodied modeling activities strengthened connections to other models, real-world phenomena, and multimodal representations. Through design-based research in a sixth grade classroom studying ecosystems, we refined embodied modeling activities initially conceived as supports for computational thinking and modeling. Across three iterative cycles, we illustrate how the conceptual and epistemic relationship between the computational and embodied model shifted, and we analyze how these shifts shaped opportunities for learning and participation by: (1) recognizing each student's perspectives as critical for making sense of the model, (2) encouraging students to question and modify the code for the model, and (3) leveraging multimodal resources, including graphs, gestures, and student-generated language, for meaning-making. Through these shifts, the embodied model became a full-fledged component of the classroom's model system and created more equitable opportunities for learning and participation.;2020
Problem solving, analyzing the validity of a solution and spotting patterns in data are all substantial skills needed in the workplace nowadays not only in the programming field. Solving and generating multiple solutions to a problem is quite challenging for children with autism spectrum disorders. As a solution, the work in this paper presents the design, implementation and the evaluation of a serious game that focuses on the sequential programming concepts. The presented game aims to teach problem solving skills to children with autism. A user-study was conducted to evaluate the game with children who have autism. According to the evaluation carried out in this research, the game was proven to be engaging, which indicates that the serious game is promising for teaching sequential programming concepts to children with autism.;2020
Problem-solving and critical thinking are considered important skills to be developed by students, and are supported by the development of Computational Thinking (CT) skills. This study investigated the collaborative development of CT skills in sixth grade students via a six week LEGO robotics program. This robotics program focused on the development of four key CT skills: engineering/building, coding, problem-solving, and collaboration. Students in the program maintained journals of their activities, and these journals were analyzed in order to understand the collaborative development of CT skills in these students. Findings suggest that this process is a gendered one, with the boys focused more on the operational aspects of building and coding their robots while the girls focused more on group dynamics. Implications for research and practice are discussed.;2020
"Programming and computational thinking have emerged as compulsory skills in elementary school education. In 2018, Sweden has integrated programming in mathematics education with the rationale that it fosters problem solving and logical thinking skills and motivates students to learn mathematics. We investigated how teachers introduce programming in mathematics education in a Swedish primary school using an explorative case study. We followed four mathematics teachers during the first semester in which programming was mandatory. They taught second-, sixth- and ninth-grade students. Our contributions are threefold: we provide an account of how programming is taught in mathematics education; we discuss how teachers reflect on the challenge of teaching programming in mathematics; and we report on students' understanding of programming and their view on the relationship between programming and mathematics.";2020
Programming has evolved as an effort to strengthen science, technology, engineering and mathematics (STEM). Programming is a complex process, especially for novices, since it requires problem-solving skills to solve problems of developing algorithms and programme codes. Problem-solving competencies, which are necessary as 21st-century skills, include a set of cognitive skills that are related to problem-solving and programme development or specifically known as computational thinking (CT) skills. In particular, this study quantitatively assessed the computational thinking skills in the context of programming, specifically on the difficulties in learning programming. From the perspectives of the instructors, the survey results highlighted the need to implement CT skills as an approach in teaching and learning programming. A model for teaching and learning programming is necessary as a guide for instructors in the teaching and learning process of programming.;2020
Programming in schools is no longer a novel subject. It is now quite commonly found in our schools either in formal or informal curriculum. Programmers use creative learning tactics to solve problems and communicate ideas. Learning to program is generally considered challenging. Developing and implementing new methodologies in teaching programming is imperative to overcome the current challenges associated with teaching and learning of programming. This case study aims to contribute to the programming education in schools by investigating how students learn in an online programming while involved in peer review of codes. The study subsequently examines students' perceptions of the pedagogical, social and technical design of the online programming learning environment. When students are involved in providing and receiving feedback and creating their own identity in a programming community, they may be better prepared for learning and applying programming in their undergraduate studies and their future career in the field.;2020
Programming is considered a skill to arouse and inspire learner's potential. Learning to program is a complex process that requires students to write grammar and instructions. The structure of a programming language does not cause impose problems to students, the real obstacle is how to apply these learned grammars and present them in a complete and correct program code for problem solving. In this study, a deep learning recommendation system was developed, which includes augmented reality (AR) technology, and learning theory, and is provided for study by students in non-major and also from different learning backgrounds. Those students divided into two groups, the students participating in the experimental group were using the AR system with deep learning recommendation and the students participating in the control group were using the AR system without deep learning recommendation. The results show that students in experimental group perform better than the control group with regards to learning achievement. On the other hand, in the part of computational thinking ability, students using a deep learning recommendation based AR system is significantly better than those using non-deep learning recommendation based AR system. Among the various dimensions of computational thinking, creativity, logical computing, critical thinking, and problem-solving skills are significantly different among the two groups of students. The students in experimental group perform better than the control group with regards to the dimensions of computational thinking, creativity, logical computing, critical thinking, and problem-solving skills.;2020
Programming is one of the most important aspects of a Computing course. Teaching programming is a challenging task due to a number of factors, ranging from lack of student problem solving skills to different teaching methods. This paper focuses on Maltese Computing teachers' perspectives about the difficulties encountered when teaching programming to secondary school students in order to determine whether introducing programming to secondary school students through creating mobile-based games is an effective method to teach programming constructs. A resource pack consisting of various activities using MIT App Inventor 2 was created which incorporated constructivist approaches to teaching. This resource pack was reviewed by the teachers and their feedback was collected by means of a case study. The teachers agreed that developing mobile-based games would be highly stimulating to their students but there were uncertainties how this would affect students with different learning abilities and due to a general lack of computational thinking and problem-solving skills by most students.;2020
Providing humans with quality education is regarded as one of the core pillars supporting the sustainable development of the world. The idea of computational thinking (CT) brings an innovative inspiration for people to adapt to our intelligent, changing society. It has been globally viewed as crucial that 21st-century learners should acquire the necessary skills to solve real-world problems effectively and efficiently. Recent studies have revealed that the nurture of CT should not only focus on thinking skills, but also on dispositions. Fostering students' CT dispositions requires the cultivation of their confidence and persistence in dealing with complex problems. However, most of the existing measurement methods related to CT pivot on gauging thinking skills rather than dispositions. The framework of the CT disposition measurement model proposed in this paper was developed based on three theoretical features of thinking dispositions: Inclination, capability, and sensitivity. A two-phase analysis was conducted in this study. With the participation of 640 Grade 5 students in Hong Kong, a three-dimensional construct of the measurement model was extracted via exploratory factor analysis (16 items). The measurement model was further validated with another group of 904 Grade 5 students by confirmative factor analysis and structural equation modeling. The results align with the theoretical foundation of thinking dispositions. In addition, a CT knowledge test was introduced to explore the influences between students' CT dispositions and their CT knowledge understanding.;2020
Purpose - Many educators currently face challenges when trying to engage students in creative learning experiences online, where it can be particularly difficult to move beyond the transmissive approach typical of video lessons and webinars. The purpose of this paper is to present WeScratch, online workshops designed as welcoming, playful and peer-supported spaces where educators can experience first-hand an alternative approach to learning online, as they actively learn to create projects using the Scratch programming language. Design/methodology/approach - The WeScratch experience is designed as a hands-on, creative online workshop where participants spend most of their time making projects while they share ideas with peers. The authors describe the structure, platform, facilitation and activities of WeScratch workshops, highlighting the main design choices and their underlying motivations. Findings - This study discusses how this environment has engaged educators from around the world to experiment with Scratch in a playful way. The authors give examples of how educators have described the value of the experience, both as learners developing their skills and as designers developing similar learning experiences for their students. Originality/value - WeScratch provides a model for how to design online learning environments to be more inclusive, playful and collaborative. Although WeScratch workshops are designed to support learning to create with code, the authors see the wider potential for applying this approach to other online learning environments to broaden participation, build connection and expand creative expression.;2020
Purpose of this study is determined effects of different teaching approaches on programming skills. Therefore, the effect of three different types of activities prepared with Scratch on 423 sixth grade students' attitudes towards computer technologies, algorithmic thinking skills and reflective thinking skills on problem solving were investigated. Three IT teachers at the three schools, were asked to prepare and teach one of the three activities in their computer classes so that a different type of activity was provided at each school. The practical phase was carried out twice a week for seven weeks. A mixed method design was used with quantitative and qualitative components. Results showed that although the same programming tool and similar code blocks were used in the three applications, selected activities resulted in different effects on students. It was found that animation activities of the three types of activities had a positive effect on students' attitudes towards computer technologies. The mathematical and game preparation activities had positive effects on algorithmic thinking and reflective thinking skills for problem solving. The present study reveals the importance of activity type, which is often neglected as a variable in studies investigating the different effects of block-based visual programming tools.;2020
Purpose The purpose of this study is to analyse and discuss K-12 mathematics and technology teachers' perceptions on integrating programming in their teaching and learning activities, and perceptions on different programming tools. Design/methodology/approach The approach of a case study was used, with data collected from three instances of a professional development programming course for K-12 teachers in mathematics and technology. Findings The findings show that there are perceived challenges and opportunities with learning and integrating programming, and with different programming tools. Many teachers perceive programming as fun, but lack the time to learn and implement it, and view different programming tools as both complementary to each other and with individual opportunities and challenges. Practical implications The practical implication of the research is that it can provide guidance for teachers and other stakeholders that are in the process of integrating programming in K-12 education. Further, the research provides useful information on teachers' experiences on working with different programming tools. Social implications The social implication of the research is that the overall aim of the nation-wide integration process might not succeed if the challenges identified in this study are not addressed, which could have negative effects on the development of students' digital competence. Originality/value The value of the research is that it identifies important challenges and opportunities for the integration of programming. That is, that many teachers perceive the different programming tools available as complimentary to each other, but are hesitating about what is expected of the integration. Findings could also be valuable for future course design of the teacher professional development.;2020
Recent college students have been observed to be motivated and engaged in acquiring science, technology, engineering, and mathematics (STEM) knowledge and skills with robots and IoT objects. A sample of 13 master's students participated in the program. Data collected include the pre- and post- STEM and computational thinking (CT) written tests, and the pre- and post-surveys of learning perceptions toward the robots and IoT objects learning activities. The results show that the learning activities were an effective approach for the master's students' STEM learning outcome and CT as shown in the post- test. The differences between the master's students' STEM learning outcome, CT, and perceptions were also confirmed, particularly between the groups of computer programming-experienced learners and computer programming-novice learners. The results revealed that the learning activities with robots and IoT objects could improve the overall master's students' CT, STEM knowledge, and learning perceptions. Both programming-experienced and programming-novice learners' STEM learning outcome were improved.;2020
Recent years have seen increasing awareness of the need for all students in primary and secondary education to learn computer science (CS) concepts and skills. Educational games hold significant potential to serve as a platform for CS education because they integrate engaging problem solving with effective pedagogical strategies. This potential is especially high for narrative-centered educational games that embed learning activities within rich interactive stories. In this paper, we present an educational game featuring block-based programming challenges contextualized within an engaging narrative, designed to promote CS learning for middle school students (ages 11 to 13). In the game, students undertake problem-solving challenges that are aligned with the K-12 Computer Science Framework. Results from a classroom implementation of the game with middle grade students suggest that their perceived game control ratings are positively correlated with their progress in the game, which suggests the need for adaptively supporting students' game-based learning activities. Building on these findings, we discuss design implications for creating student-adaptive CS learning experiences in educational games that incorporate block-based programming enriched narrative-centered gameplay.;2020
Research and full paper. Digital games are increasingly a part of our daily lives and are already considered teaching and learning tools. However, its production and documentation is a very complicated task that requires programming skills and knowledge from different areas. This has hampered the development of games in the classroom environment. On the other hand, some teachers have proposed this activity to enable their students to learn school content in a more meaningful way and, consequently, improve learning rates. An alternative for the adoption of game-based learning is an unplugged approach for creating games based on natural language, in which students learn the fundamentals of computing in a playful way and without the use of computers. In this context, this article presents an approach that proposes the creation of games in an unplugged way by using texts produced by students, thus favoring the development of computational thinking and reading and writing skills in the classroom. Also, it may support the students' interest in the computing area by motivating them to enter a higher education course or pursue a career in that area. The results of the exploratory study show that the proposed approach can favor the development of computational thinking, as well as motivate the production of texts, developing students' reading and writing skills, therefore contributing to the improvement of learning assessments.;2020
Research reports as a limiting factor the knowledge to recognize a connection between disciplines when students are supported, despite the interest of the teachers in integrating STEM education. In this respect, a STEM education experience was designed. This experience integrated mathematics in contexts of science (physics) and technology, through mathematical modelling. The analysis derives from a qualitative methodology with an interpretive approach. Content analysis is used to study the meanings of mathematics that are expanded in the analysis of the physical phenomenon model integrating thermometers and computational simulations. Results report that the experience allowed pre-service mathematics teachers to reflect on training issues. It evidences a level of preparation and potential that favors the integration of STEM education in their future professional performance. In addition, the scope and limitations of this experience are also reported.;2020
Researchers and educators have advocated computational thinking (CT) should be integrated into K-12 settings as early as elementary schools. However, there has been a lack of knowledge of how pre-service K-8 teachers would be engaged in the learning of CT and its integration in different subject areas. In this study, we taught a flipped learning module in an undergraduate Educational Technology course. Pre-service teachers learned and practiced CT knowledge and skills using a block programming app called Hopscotch. Results of this first iteration of design-based research showed that the orchestration of the technology and instructional methods, such as team-based learning, flipped classroom, and pair programming, supported students' transformative learning experience. It improved their understanding and application of CT concepts. Meanwhile, the mixed-method analysis found some instructional issues that needed to be addressed in future iterations. Suggestions were provided at the end of the paper.;2020
Robotics is now increasingly popular in the education system worldwide as it is one of the core technology enablers for Industry 4.0. Robotics is deemed to be able to promote students' STEM interest and 21st century skills. However, not all the students have the access to robotics, especially in Sibu, East Malaysia. This research presents the implementation of a low-cost Maker Uno educational robotics kit and its associated learning experience of the learners, which were seventy-six Foundation in Science (FIS) students in University College of Technology Sarawak (UCTS). The aim of this study is to investigate the students' empirical STEM robotics learning experience by offering them an opportunity to explore a low-cost self-assembled robotics car. Questionnaire and interviews that constitute a mixed method research were employed to investigate the present situation and derive at a solution to the problem. The findings showed that the proposed robotics activities were beneficial for the students to exercise 21st century skills and cultivate STEM interests. Educators could potentially benefit from applying this robotics pedagogical exemplary to help the students to cultivate STEM interests and 21st century skills. Future research on innovation exemplary, particularly on low-cost robotics applications and robotics education methods can be explored.;2020
Robotics is one of the key learnings in a world where learners will interact with multiple robotic technologies and operating systems throughout their lives. However, school teachers, especially in the elementary and primary education stages, often have difficulties incorporating these tools in the classroom. Four elementary teachers in three schools in Catalonia were trained to introduce robotics in the classroom to seventy-five students. The main actions consisted in classroom accompaniment by a university-trained support teacher, curricular materials' development, and assessment of the students' and teachers' learning. The designed contents and evaluation criteria took into account the potential of educational robotics to improve soft skills and to promote Science, Technology, Engineering, Arts, and Mathematics (STEAM) interdisciplinary learning. Teachers perceived the training to be supportive and useful and ended the school year feeling confident with the used robotic platform (KIBO). The assessment of the students' learning showed an average mark of 7.1-7.7 over 10 in the final evaluation criteria. Moreover, students' learning was higher in the classes where the teachers had higher initial interest in the training. We present and analyse the actions carried out, with a critical and constructive look at extending the experience to other educational centers.;2020
Schools, universities, and other educational entities are increasingly aware of the untapped potential of digital transformation, an essential process for increasing efficiency and collaboration, and reducing costs and errors in the management of at-scale training systems. In this context, the Riconnessioni'' project was promoted by the Compagnia di San Paolo in agreement with the Ministry of Education but planned, started and developed by the Foundation for the School. The digital transformation started with a defined strategy that leveraged opportunities presented by new technology while meeting the objectives of system stakeholders. Through several steps, that strategy was developed for education connecting everything to support tomorrow's digital world and creating strong strategic partnerships able to build an ecosystem connecting people, processes, and things into a powerful, secure, and smart communications network. This paper reports on the three-year Riconnessioni project, which is combining the energies of teachers, managers, administrative staff, students, among others, and experimenting with new learning models, taking advantage of opportunities that emerged from perceptions stemming from concerns and systemic issues. To date, more than 150 schools in Italy have been included in the project, together with 550 teachers selected to scale up the instructional process. Using a methodology called cascade training'', the 550 selected teachers were able to spread the knowledge to more than 2,600 colleagues. The monitoring and evaluation activity performed in Riconnessioni aims at processing information on implementation and results, following three lines. First, it regularly evaluates project activities from a reporting standpoint. Second, it verifies the plan consistency against implementation achievements. Third, it identifies changes produced and focuses on teachers' and students' skills to evaluate the effects of the project. The assessment framework is also discussed in this work, reporting on results regarding feedback, follow-up, and effects gathered from the field. The evaluation highlighted that labs were indeed able to improve teachers' competence and underlined the added value of cascade training which spread digital domain knowledge and awareness into the group of involved schools.;2020
Scientific modeling and coding are critical skills to be integrated into K-12 instruction. Research has shown that preservice teachers are often ill-prepared for teaching scientific modeling, and lack opportunities to learn coding within teacher education programs. The present study reports the implementation of an instructional module and online system, called Coding in Scientific Modeling Lessons (CS-ModeL), which was designed to scaffold preservice science teachers' learning to code simulations and design scientific modeling lessons that feature simulation coding. In this study, we examined preservice teachers' epistemic discourse during simulation coding, perceptions of coding for future teaching, and coding-enhanced scientific modeling lessons. This was a qualitative single case study that involved six participants enrolled in a science teacher education course. Participants worked in pairs during scientific modeling activities, and each pair was considered an embedded unit within the single case. Data sources included transcripts of screen recordings captured during simulation coding, transcripts of individual semi-structured interviews, and lessons in which participants used simulation coding as part of scientific modeling activities. Qualitative thematic analysis was conducted. Findings revealed that participants' epistemic discourse led to correction of science misconceptions. However, lack of debugging and conflict argumentation skills detracted from their epistemic discourse quality. Participants perceived coding as a beneficial skill for K-12 students though they voiced concerns about teaching with coding unassisted. Participants failed to design truly interdisciplinary and authentic scientific modeling activities including simulation coding. Study limitations and future research directions are discussed.;2020
Several investigations state the low participation of women in the world of STEM. This fact implies a lack of feminine perspective in the solution to different problems. The school must provide teaching / learning strategies for the integration, empowerment, and active participation from early ages to work performance in STEM. This paper exposes two unplugged activities taken from a series of activities implemented with elementary students and families in Madrid, Spain. The general objectives are: To introduce and motivate interest from an early age in computer programming and the development of gender dynamics that educate about gender equity to strengthen female empowerment in this context.;2020
STEAM Education is nowadays a key element for our current digital society. Integrating STEAM and developing competences such as Computational Thinking is highly demanded by the industry and higher education institutions. In order to do so new methodological approaches are required. RoboSTEAM project is an Erasmus+ project defined to address these topics by using of physical devices and robotics employing Challenge Based Learning methodology. One of the first steps in the project development is the definition of current landscape in the research field. Which means to carry out a literature mapping that considers previous applications of Challenge Based Learning in STEAM education and use of robots and physical devices to do so. This paper shows the mapping review process and the main results obtained. The mapping analyze 242 candidate works from the most relevant bibliographic sources and selected 54. Form them it was possible to see that there are not many initiatives on STEM Education related to Challenge base learning and the most of them are specially focused on the application of specific tools and in the development of concrete competences.;2020
Students' first experiences with mathematics are based on natural numbers in their school life. The first years of primary school includes addition and subtraction that is based on the first-order relationships between countable objects. In the middle school years, students introduce with rational numbers as well as natural numbers. During these years, students must make several major transitions in their mathematical thinking.;2020
Synergistic learning combining computational thinking (CT) and STEM has proven to be an effective method for advancing learning and understanding in a number of STEM domains and simultaneously helping students develop important CT concepts and practices. We adopt a design-based approach to develop, evaluate, and refine our Collaborative, Computational STEM (C2STEM) learning environment. The system adopts a novel paradigm that combines visual model building with a domain-specific modeling language (DSML) to scaffold learning of high school physics using a computational modeling approach. In this paper, we discuss the design principles that guided the development of our open-ended learning environment (OELE) using a learning-by-modeling and evidence-centered approach for curriculum and assessment design. Students learn by building models that describe the motion of objects, and their learning is supported by scaffolded tasks and embedded formative assessments that introduce them to physics and CT concepts. We have also developed preparation for future learning (PFL) assessments to study students' abilities to generalize and apply CT and science concepts and practices across problem solving tasks and domains. We use mixed quantitative and qualitative analysis methods to analyze student learning during a semester-long study run in a high school physics classroom. We document some of the lessons learned from this study and discuss directions for future work.;2020
Tangible embedded technology kits are increasingly being used in schools, often as a means of providing students a platform for problem solving and computational thinking. When they are incorporated in creative tasks such as open-ended design projects, embedded technologies take on the role of a design material a medium for exploration, iteration and creation. This paper presents some early results of a video analysis of school children's collaborative interactions with tangible, embedded technologies in an open-ended design task. We identify some of the difficulties students encounter and some of the practices they develop with these kits as they work to progress their designs. Our findings detail how children deal with the opacity of the system and how they use it as a springboard for imagination. Our study provides an opportunity to reflect on how technology kits currently resist becoming a design material.;2020
Teachers around the world have started teaching programming at the K-9 level, some due to the formal introduction of programming in the national curriculum, others without such pressure and on their own initiative. In this study, we attempted to understand which skills - both CT-related and general - are developed among pupils in the process of working with programming in schools. To do so, we interviewed 19 Swedish teachers who had been teaching programming for a couple of years on their own initiative. The teachers were selected based on their experience in teaching programming. Our thematic analysis of these interviews shed light on what skills teachers perceive pupils develop when programming. This led us to identify three themes related to CT skills and five themes related to general skills. The CT skills identified corresponded well with and were thus thematically structured according to the dimensions of CT proposed in the framework of Brennan and Resnick, namely computational concepts, computational practices and computational perspectives. In addition to the CT skills, our thematic analysis also resulted in the identification of general skills related to digital competency and 21st century skills, namely cognitive skills and attitudes, language skills, collaborative skills and attitudes and creative problem-solving skills and attitudes.;2020
Technology and computer learning have acquired a great projection in the field of education. Arduino arises from current technological innovations with the intention of promoting a new approach to learning through machines. The objective of this research is to analyze the evolution of the Arduino concept in the scientific literature. To achieve this aim, a bibliometric methodology based on scientific mapping and an analysis of co-words has been used. The scientific production of Arduino indexed in Web of Science has been analyzed. We have worked with an analysis unit of 346 documents. The results of this research show that the scientific production on Arduino in the field of education starts in 2010 until today. The communications in the congresses to present the results of the investigations developed are the most used means of diffusion. The National University of Distance Education and the Lucian Blaga University of Sibiu are particularly noteworthy. The authors with more scientific production in this field of study are Bogdan, M. and Castro, M. It is significant that the collection of studies on this subject is carried out, above all, by EDULEARN Proceedings and INTED Proceedings. It can be concluded that the field of study on Arduino in the educational field is relatively recent, so that today, the basis for scientific research is still being established. However, the most relevant aspects in this field of study are physic experiments, computational thinking and computer-based learning.;2020
Technology has transformed the social scenario by incorporating strategies, techniques and methods to obtain more significant educational processes. The main initiative promoted is the strengthening of skills and competencies in programming and computational thinking. This article evidences the effect of a training program on educational robotics on the acquisition of computational thinking and programming skills in young children. The research design is quasi-experimental, with pretest and post-test measures, with an experimental and control group. The sample of participants consists of 46 students of the first year of Primary Education, with age between 6 and 7 years, belonging to a Spanish educational centre. Computational thinking is measured through the dimensions: algorithmic thinking sequences, abstraction-patterns and debugging. The learning activities used in the intervention sessions were an adaptation of the training actions proposed in the robotics study program TangibleK. The results obtained in this study reveal positive effects concerning the performance achieved by the participants in the activities carried out. This indicates a significant effect on the strengthening of skills linked to computational thinking. The differences found between the pretest and post-test measures of the experimental group are statistically significant and superior to those presented by the control group. In this way, it was concluded that the participants of the training program in robotics and programming obtain a more significant advance in the three dimensions of the computational competence explored.;2020
Technology not only allows us to (co-)create, collect, store, and use knowledge and information, but it also enables us to connect with people and resources all over the world, to collaborate in the creation of knowledge, and to distribute and benefit from knowledge products. In this study, two visual and interactive pedagogies in information technology are used to train non-technical students and evaluate the performance and feedback of students in a programming course in the Department of Beauty Science. Computational thinking was integrated into the design and application of the programming subject. At the end of the semester, data were collected from 40 sophomore students in the Department of Beauty Science who answered the technology acceptance model (TAM) questionnaire and Learning Satisfactory Questionnaire after the training. An analysis was conducted using basic statistical and correlation methods, and the items demonstrated good reliability for Scratch and Tableau. The mean of 14 items in the TAM questionnaire was above 3.5 for Scratch, and that of four items was lower than 3.5 for Tableau. The mean of all the items was above 4.40 for the Learning Satisfactory Questionnaire. In the correlation analysis, the variables of perceived usefulness and perceived ease of use were positively related to the attitude and behavior in Scratch and Tableau. The use of visual and interactive programming pedagogies enhanced the interest of novice and non-technical students in learning technology. The learners were satisfied with the interactive pedagogies on computational and spatial intelligence.;2020
Technology now pervades all areas of our lives, including our home life, education and work. As society becomes increasingly digitalised, digital skills such as computational thinking are becoming more important - this applies to children in school, adults in the workforce and senior citizens alike.;2020
The 21st century is an era of 'Computing Technology' that has influenced every domain of human life. Such a high involvement and usage of Computing Technology have enhanced the need and requirement of computing education. There is a need to develop computational thinking skills of students aiming at students' psychological and behavioral transformation favorably towards 'Computing Technology'. The current research is carried out sampling 150 students from various universities in China. The objectives of this study include finding out how educational institutions and teachers can enhance the computational skills of students and what motivational strategies can significantly help students to undertake training programs and acquire advanced computational skills. This study also analyzes how to develop computing talent and computational thinking among university students. The study recommends that universities should make efforts to improve students' computational capabilities by taking training initiatives that would help students to improve their computational skills and prepare themselves for the need and demands of the world's job market.;2020
The abstract nature of programming makes learning to code a daunting undertaking for many novice learners. In this work, we advocate the use of comics-a medium capable of presenting abstract ideas in a concrete, familiar way-for introducing programming concepts. Particularly, we propose a design process and related tools to help students and teachers create coding strips, a form of comic strips that are associated with a piece of code. We conducted two design workshops with students and high school computer science teachers to evaluate our design process and tools. We find that our design process and tools are effective at supporting the design of coding strips and that both students and teachers are excited about using coding strip as a tool for learning and teaching programming concepts.;2020
The aim of this research is to determine the effects of Scratch and Alice tools and programming teaching practices on student engagement, reflective thinking and problem-solving skills and computational thinking (CT) comparatively. A quasi-experimental design was used in the research and patterns with pretest-posttest control group were chosen for the variables. The study group was compromised of 110 students at 5th grade in 2016 spring semester. 1st and 2nd groups of Computing Technologies Course have been assigned objectively. Alice programming tool was preferred in the learning process of the 1st experimental group, whereas, Scratch programming tool was utilised in the 2nd study group during application process which lasted for 8 weeks. Results of the research show that programming teaching with Scratch has affected engagement and reflective thinking skills of the students for problem solving more positively than Alice. It has been stated that teaching with Alice affects skills related to CT of the students positively. Furthermore, some recommendations have been made for the future researches.;2020
The application and development of educational technologies has influenced current education practices. However, there are few studies discussing how to apply these technologies and devices with appropriate teaching methods to help students achieve satisfactory learning goals, especially for computing classes. Thus, the researchers reconsidered the course design of a computing course with practical teaching methods, activity-based learning (ABL) and meaningful learning (ML), in an online learning environment. The researchers investigated, via quasi-experiments, the effects of web-mediated ABL and ML on developing students' learning effects, learning engagement, and academic motivation in this online computing course. A 2 (ABL vs. non-ABL) x 2 (ML vs. non-ML) design, as well as factorial pretest/posttest design, was employed in this experimental research. The selected course for experiment was titled Applied Information Technology: Office Software, one semester in length and a required course for the four involved classes of students at a comprehensive university. All students in this study came from non-computer departments. According to the results of this study, students who received web-mediated ML had a significant increase in their learning engagement. However, the expected effects of ABL on developing students' skills in using PowerPoint and Word, learning engagement, and academic motivation were not found in this study. Possible explanations for this nonsignificant outcome are included in the paper. The researchers' design of an online course integrating ABL and ML may be used by teachers and schools when conducting online, flipped, or blended courses for their students, particularly for those courses focused on developing students' skills in using PowerPoint and Word.;2020
The article examines the methodological possibilities of digital transformation in actual historical research. In the context of trends in the datafication, the approach to historical sources as data is considered, with due regard to the distinction into human-readable and machine-readable. Standards for creating open linked data are presented as the main direction to integral interconnected data collections that can be reusable. Modern approaches to data analysis (CT, EDA, SNA) are described, which allow to take a new look at working with complex historical data (databases of structured and unstructured data). Thus, combining the technical principles of creating digital repositories and meaningful professional standards will guarantee stable results in the conditions of historical research datafication.;2020
The article is devoted to the challenge of bridging the knowledge gap on computer science in context of the Kazakhstani education. The authors discuss the main reasons of gap in knowledge on computer science at first-year students and suggest suitable teaching to solve the indicated challenge. The considered teaching is based on the principle of continuity to teaching which provides correlation between various levels of education and improving the effectiveness of teaching. The different levels of the students' learning outcomes on computer science are considered as one of the most important cause of the investigated challenge. For this reason, the authors investigate the educational process design and the differentiated learning methodology using the Google Classroom technology aimed to the bridging knowledge gap in computer science.;2020
The article is the product of the study Development of innovative resources to improve logical-mathematical skills in primary school, through educational robotics, developed during the 2019 school year in three public schools in the province of Chiriqui, Republic of Panama. The teaching-learning process in students is influenced by aspects inside and outside the classroom, since not all schools have the necessary resources to deliver content or teaching material. The general objective of the project is to design, develop and implement educational robotics to improve logical-mathematical skills aimed at preschool and first grade students in public schools, using programmable educational robots. For this, a set of resources and activities were developed to improve the logical-mathematical skills of the initial stages, in public schools, obtaining significant results. Playful activities favor the teaching-learning process. Considering the analysis of the results made on the data obtained through the applied collection instruments, it can be argued that in general terms the values indicate that the students obtained a favorable level of performance in the different challenges proposed. The project has allowed the academic community to have an application of great value that allows teaching about the conservation of natural sites. The project only covers the area of mathematics in preschool and first grade.;2020
"The Bebras challenge offers pupils and teachers an engaging opportunity to discover informatics, by solving small tasks that aim at promoting computational thinking Explanations and comments that reveal the computing concepts underlying the tasks are published after the contest, and teachers are encouraged to use this material in their school practice. In this paper we present an exploratory study aimed at investigating how teachers can make use of Bebras material; in particular our interest is understanding whether teachers are able to identify, comprehend, and apply the computing concepts implied by Bebras tasks, and how they can integrate them into their teaching practice. We qualitatively analyzed teaching projects developed by Italian teachers during a workshop on computing education and based on Bebras tasks; the analysis shows that teachers are in general able to build upon the tasks soundly, but it also raises some critical issues.";2020
The book provides a deep account of the use of computational thinking (CT) skills in education, with a focus on individual, social and cultural elements, and dives into issues foregrounding CT skills. Although the chapters of the book provide important educational and practical implications for the reader, methodological choices and the lack of theoretical connections of CT concepts curtail the use of CT skills in education, from a constructionist view.;2020
The Children's Congress at the Johannes Kepler University in Linz is a project that supports and promotes pupils in their research interests, digital competencies, creativity, collaborating abilities and problem solving. For this, the pupils slip into the role of researchers and scientists and try to solve a real-world problem by using strategies from STEM fields. In this process, the pupils are supported by teachers, students of the teacher education program and students of the Honors Program from the STEM department at the Johannes Kepler University Linz. They work together in interdisciplinary projects, where mathematical problem-solving gets combined with different fields of disciplines, and two of the basic concepts of computer science: computational thinking and development of creative (digital) products. The products and results are presented at a final event by the children themselves. The project aims at (1) promoting pupils and young talents for and at our university, (2) increasing interest in computer science as well as (3) fostering computational thinking competencies of teachers and students. The results gained from questionnaires of participating pupils show a very positive feedback for the project including the preparation phase with workshops, the work on the students' projects as well as the final event. Most of the pupils made very positive experiences with the Children's Congress and were proud of their final products. They ascribed the project and the research process itself as being exciting and inspiring. Most of the pupils enjoyed the group work with their peers as well as with the supporting students. Most of them described that they improved their knowledge in the project concerning their academical knowledge as well as their knowledge in computer science. Moreover, the interest of most pupils in computer science could be increased and more than two thirds would like to join the Congress again. The paper describes the process of the Children's Congress and the final event as well as some products developed by the children and evaluation results.;2020
The convergence of big data and geospatial computing has brought challenges and opportunities to GIScience with regards to geospatial data management, processing, analysis, modeling, and visualization. This special issue highlights recent advancements in integrating new computing approaches, spatial methods, and data management strategies to tackle geospatial big data challenges and meanwhile demonstrates the opportunities for using big data for geospatial applications. Crucial to the advancements highlighted here is the integration of computational thinking and spatial thinking and the transformation of abstract ideas and models to concrete data structures and algorithms. This editorial first introduces the background and motivation of this special issue followed by an overview of the ten included articles. Conclusion and future research directions are provided in the last section.;2020
The ever-increasing computational requirements of HPC and service provider applications are becoming a great challenge for hardware and software designers. These requirements are reaching levels where the isolated development on either computational field is not enough to deal with such challenge. A holistic view of the computational thinking is therefore the only way to success in real scenarios. However, this is not a trivial task as it requires, among others, of hardware-software codesign. In the hardware side, most high-throughput computers are designed aiming for heterogeneity, where accelerators (e.g. Graphics Processing Units (GPUs), Field-Programmable Gate Arrays (FPGAs), etc.) are connected through high-bandwidth bus, such as PCI-Express, to the host CPUs. Applications, either via programmers, compilers, or runtime, should orchestrate data movement, synchronization, and so on among devices with different compute and memory capabilities. This increases the programming complexity and it may reduce the overall application performance. This article evaluates different offloading strategies to leverage heterogeneous systems, based on several cards with the first-generation Xeon Phi coprocessors (Knights Corner). We use a 11-point 3-D Stencil kernel that models heat dissipation as a case study. Our results reveal substantial performance improvements when using several accelerator cards. Additionally, we show that computing of an approximate result by reducing the communication overhead can yield 23% performance gains for double-precision data sets.;2020
The fields of robotics and game consoles offer an interesting and broad range of lab platforms with appropriate characteristics for teaching Computer Architecture concepts. This work analyzes the impact of one approach based on game consoles and another one based on robotics from a triple dimension: student motivation, acquired knowledge, and perception of the employed platform. The study has been carried out on a sample of 96 students using the Arduino-based robot and 75 students using the Nintendo-DS console. A mixed methodology is employed encompassing quantitative and qualitative approaches. Five instruments are used to measure the three aforementioned dimensions. Results show that despite both platforms performing similarly in the three considered dimensions (student motivation, acquired knowledge, and perception of the employed platform), the robotics platform does it slightly better than game console, based on the obtained average scores for the considered instruments. Despite this outperforming, motivation and perception decrease for the students using the robotics platform as result of some identified constraint. This suggests that changes are required in the organization of the lab sessions to promote teamwork skills and to overcome the lack of simulators to remove the obstacles hinting motivation and performance. However, a clear correlation between motivation and perception and acquired knowledge has not been identified on computer architecture. Implications of affordances and constraints of both platforms, types of activities, and their impact on results have been discussed.;2020
The Fourth Industrial Revolution has triggered an unprecedented lifestyle and thinking. Consequently, and to challenge this stage, people require new skills and competencies associated with the so-called Computational Thinking (CT). This article considers the incidence of Piaget's constructivist theory and Paper's contributions as background to the proposal developed by Jeannette Wing on the (CT). It also reflects aspects related to CT, as an emerging concept whose definition shows lack of consensus. The CT related skills required in this century are also analyzed, as well as pedagogical approaches that demand changes related to the curriculum. Also, the training and teaching practice are analyzed in order to optimize the opportunities offered by technologies in the educational field. Finally, spaces and advances on the topic proposed in England, Spain, USA, Costa Rica, Ecuador and Argentina are described.;2020
The implementation of effective professional development courses for K-12 teachers on computational thinking (CT) in relation to programming remains a challenge. There is a lack of high-quality empirical research on teacher development in CT in relation to programming. This study addressed that situation by providing empirical evidence of the design and evaluation of such a teacher development program in primary schools. Seventy-six in-service teachers participated in a program comprising two 39-h courses. One course focused on the fundamental subject knowledge of programming for CT development together with pedagogy. The other focused on the development of advanced knowledge while providing opportunities to practice teaching in the classroom and to reflect on the practice. The results indicate that the participants developed a better understanding of CT concepts and practices and improved in three of the four content knowledge related dimensions of technological pedagogical content knowledge (TPACK) across the two courses. The three dimensions were content knowledge of programming for CT development, technological content knowledge of the use of block-based programming environments for programming for CT development, and use of the environment to teach programming for CT development with the appropriate pedagogy in context. Analysis of the participants' self-reported reflections suggested that the two courses and the teaching experience acquired during the prolonged second course were the two main sources of improvement. This study demonstrates the importance of providing an effective teacher development program with a focus on CT concepts and practices. The program offers teachers a sustained period in which to practice in the classroom and reflect on their teaching while developing their capacity to implement CT in relation to programming.;2020
The importance of computational thinking (CT) education in the twenty-first century cannot be understated, as digital computing technologies have become an essential component of practically all human activities. Due to their strength in the ICT industry, countries such as Korea, Taiwan, Hong Kong, and China have launched national curricular reforms to address the current movement of CT education in K-12 education. This special issue, therefore, intends to provide insights into the current curricular reform movement of CT education in the Asian Pacific region. It includes six papers presenting studies which expose the recent evidence-driven research and development of CT education. The findings of the studies shed light on the future policy and implementation of CT education in the Asian Pacific region. Integrating CT into formal education involves far more than learning and teaching of computational concepts and coding skills. We hope that this special issue provides better understandings of the current status of CT education in the Asia-Pacific region and the challenges faced by teachers, school administrators, and policy makers as well as other key stakeholders in the education community.;2020
The inclusion of computational thinking (CT) in the classroom is something that the present and future society is demanding. However, this domain remains largely unexplored, especially in the first years of Primary Education. The purpose of this study is to evaluate whether the inclusion of the so-called unplugged activities favours the development of CT in the students of the early years of Primary Education. To this end, a quasi-experimental study has been carried out to explore the eventual benefit of a mixed approach that combines both unplugged and plugged-in activities. In particular, 84 second-grade students took part in the experiment. Three questions were evaluated: the development of their CT skills, their motivation towards the proposed instruction, and the influence of students' gender in the two previous areas. The intervention was designed on a selection of activities extracted from Code.org courses, and was divided into two phases, one in which one group worked with unplugged activities and the other with plugged-in activities, and a second where both groups worked with plugged-in activities. Analysing the three proposed questions through tests performed before, in between and after the instruction, it is concluded that the inclusion of unplugged activities in the instruction seems beneficial taking into account CT, motivation and gender.;2020
The interest of children in learning to program computers has increased dramatically in recent years with the adaptation of new programming languages such as Scratch or game-based approaches. That being so, it is still unclear how best to teach programming concepts to young children. There is a gap in the literature on how to introduce basic programming concepts to children at the primary school level, while taking factors such as the grade level and approach used into account. This paper explores the best approach for introducing basic programming concepts to school children in the 4th, 5th and 6th grades as well as the effects of the approaches on students' learning gains (per concept). The concepts addressed here are those used in a traditional Introduction to Programming course, such as programs, memory and variables, inputs and outputs, conditionals and loops. The paper presents the resulting improvements achieved by the 4th, 5th and 6th graders in a multigroup pretest-posttest design, with a control group (the use of a blackboard as an unplugged approach) and two experimental groups (the use of a visual execution environment (VEE) with a mouse and the use of the VEE with Makey Makey). We present the results exploring the interaction between the grade and approach factors for the 144 children (9-12 years old) enrolled in primary education. The results provide statistically significant data indicating how the children succeeded in learning basic programming concepts according to their grade, the type of approach used, and the programming concept under study.;2020
The language and concepts used by curriculum designers are not always interpreted by children as designers intended. This can be problematic when researchers use self-reported survey instruments in concert with curricula, which often rely on the implicit belief that students' understanding aligns with their own. We report on our refinement of a validated survey to measure upper elementary students' attitudes and perspectives about computer science (CS), using an iterative, design-based research approach informed by educational and psychological cognitive interview processes. We interviewed six groups of students over three iterations of the instrument on their understanding of CS concepts and attitudes toward coding. Our findings indicated that students could not explain the terms computer programs nor computer science as expected. Furthermore, they struggled to understand how coding may support their learning in other domains. These results may guide the development of appropriate CS-related survey instruments and curricular materials for K-6 students.;2020
The main disadvantage of robotics as a teaching/learning tool is the need to acquire enough amount of equipment that allows the development of classroom activities. In many cases, especially in the case of public centres, the cost of acquiring these platforms is completely out of reach. Another difficulty that teachers find in the use of robotic platforms is the incompatibility they present at different educational levels, making it necessary to acquire specific equipment for each education stage, increasing the number of necessary equipment and the cost to the centre. A possible alternative to the acquisition of this equipment is the use of virtual remote laboratories, which allows teachers to use these tools without having to physically dispose of them. In addition, this approach avoids incompatibilities with different operating systems (OS), lack of drivers in the centre's equipment and eliminates the task of controlling the material. This contribution presents an ongoing virtual remote laboratory, which aims to be a transversal tool for different educational stages, providing different levels of abstraction that adapt to the needs of primary education, secondary education and higher or university education. This is possible by adapting the programming environment to the capacities and needs of each educational level. This laboratory requires a space to establish different sets physically delimited by means of barriers, where each of the robots is housed. Likewise, each of these sets has different elements such as obstacles or tapestries with different brands to create scenarios in which students can program different behaviours in the robot. The tool is accessible through the internet and is mainly composed of a specific block-programming environment for each educational level. For elementary students, blocks with a high level of abstraction and a very limited number of actions are available. In the case of high school students, the number of blocks is increased and they have a lower level of abstraction, giving the student more flexibility in programming and many more options. On the other hand, for higher education students, programming is done directly by uploading the code to the tool. Once the programming phase is finished, the system sends the code to one of the robots that are currently available and it executes the different routines that have been programmed, giving rise to the actions that the student has defined. While the robot executes the actions, the student can visualize the result through the tool via cameras installed in each set. When the execution is finished, the robot becomes available again, waiting to receive a new programming order. In turn, the system is responsible for balancing programming requests among available robots using a First In First Out (FIFO) queue to maximize the use of available resources with a maximum programming time of one minute, the maximum time that a robot can be in use for each program uploaded.;2020
"The mobility of students and the workforce between countries provides a challenge for universities to gain recognition from the global community on the results of their vocational education. This study aims to determine the outputs of the aspects of the quality of Project Base Learning (PjBL) learning outcomes which include: basic electronics and electrical knowledge, products, innovative, and creativity from the employability skills assessment model through PjBL to be better. The results refer to the assessment of employability skills through the PjBL showing that out of 100 students as respondents had a sensitivity of 85%; think newest and think adaptively 79%; 77% social intelligence; transdisciplinarity-literacy 85%; literacy ability 81%; design mindset 78%; cognitive management load 82%; virtual collaboration 84%; computational thinking, 88%. The implication that the implementation of Project Base Learning on students can be applied and validated properly.";2020
The number of computer science (CS) courses has been dramatically expanding in U.S. high schools (HS). In comparisonwithwell-established courses in mathematics and science, little is known about howthe decisions made by HS CS teachers regarding how and what to teach impact student performance later in introductory college CS courses. Drawing on a large sample of 2,871 introductory college CS students at 115 U.S. institutions who had taken a CS course in HS, we examined the topic coverage and prevailing instructional methods in the HS course and investigated how these experiences influenced student performance in college CS. Controlling for differences in student background, we find two predictors of higher grades in college CS: greater frequency of coding-related activities in HS (programming, debugging, studying algorithms) and lower frequency of non-coding computer use (e.g., data analysis, computer security). Interaction models revealed a more complex story. Coding-related activity more heavily benefited students who did not have coding help available at home. In the 28% of college CS courses in which instructors employed innovative pedagogies, students with higher ACT or SAT mathematics scores had a greater advantage than in traditionally taught courses. Finally, in the innovative college courses, students whose HS CS exams had typically included testing on vocabulary did worse than students whose exams had not included such tests.;2020
"The objective of the article is to present the knowledge generated by carrying out an evaluation of specific computational thinking skills from 2016 to 2019. The aforementioned to determine the initial status of new students to the information technology career at the Universidad Tecnologica de Puebla - Mexico and promote academic performance in the Programming Methodology course in higher education. Through the selection of five items corresponding to five computational thinking skills (abstraction, generalization, decomposition, algorithmic design and evaluation) a relationship is established with the thematic contents of the course; therefore, it has been possible to determine what the strengths and weaknesses of students in order to support their academic performance. Two results stand out from the work done. First, the favorable impact on students for the acquisition of skills through surveys requested during each intervention. Second, from the third intervention, obtain a prediction of enrollment retention for at least the first four-month period. Based on the experimental design carried out in Mexico, the design proposal for the Technological University of Chile is also discussed.";2020
The past five or so years have been marked by a proliferation of educational initiatives, programmes, and toys designed to introduce children to coding and to develop their skills and interest in computer science. This article takes a critical approach to this movement, focusing specifically on ways dominant discourse surrounding the coding movement constructs children, girls, and coding and puts pressure on parents to assist their children in becoming valuable to neoliberal economies. The first part of the article reviews research concerning children and coding, the STEM skills gap, and gender divides in computer science. This part concludes with a discussion of neoliberal ideologies which frame these areas of debate. The second part analyzes 71 news articles published in a six-month period in 2018 that report on coding initiatives and related toys, including Robotics Engineer Barbie (TM). This part of the article reveals ways these coding initiatives are framed as being essential to the future labour market, as solutions to gender parities in Computer Science fields, and as a way to create confident girls for the future workforce. The article concludes with connections to neoliberal ideologies which frame the role of parenting in the age of digital technologies.;2020
The potential benefits from the introduction of programming environments such as Scratch for learning mathematics has reactivated research in this area. Nonetheless, there are few studies which attempt to analyse their influence at the stage of Primary Education. We present the results of a quasi-experimental piece of research with sixth-grade students which studies the influence of Scratch both on the acquisition of mathematical concepts, and on the development of computational thinking. The experiment consisted of two different phases, a programming phase linked to the instruction in Scratch and focused on the acquisition of basic concepts of computational thinking (sequences, iterations, conditionals, and events-handling), and a mathematical phase completely oriented towards the resolution of mathematical tasks. In particular, the mathematical phase focused on word problems whose resolution involves the use of the least common multiple and the greatest common divisor. In order to evaluate the aims of the study, results from tests before and after instruction, both in computational thinking and in the mathematical standards, were compared. The results seem to indicate that Scratch can be used to develop both students' mathematical ideas and computational thinking.;2020
The potentiality of computational thinking (CT) in problem solving has gained much attention in academic communities. This study aimed at developing and validating an instrument, called Hi-ACT, to assess CT ability of university undergraduates. The Hi-ACT evaluates both technical and soft skills applicable to CT based problem solving. This paper reports a pilot study conducted to test and refine the initial Hi-ACT. Survey method was employed through which questionnaire comprising of 155 items was piloted among 548 university undergraduates. Structural equation modeling with partial least squares was applied to examine the Hi-ACT's reliability and validity. Composite reliability was used to assess internal consistency reliability, while convergent validity was evaluated using based on items' outer loadings and constructs' average variance extracted. As a result, 41 items were excluded, and an instrument to assess CT ability comprising 114 items and ten constructs (abstraction, algorithmic thinking, decomposition, debugging, generalization, evaluation, problem solving, teamwork, communication, and spiritual intelligence) was developed. The reliability and validity of the Hi-ACT in its pilot form have been verified.;2020
The present article focuses on the role that the artificial teaching and learning of mathematics could play for education in the forthcoming era of a new industrial revolution that will be characterized by the development of an advanced Internet of things and energy, and by the cyber-physical systems controlled through it. Starting with a brief review of the traditional learning theories and methods of teaching mathematics, the article continues by studying the use of computers and of applications of artificial intelligence (AI) in mathematics education. The advantages and disadvantages of artificial with respect to traditional learning in the classroom are also discussed, and the article closes with the general conclusions and a few comments on the perspectives of future research on the subject.;2020
The primary purpose of this study is to investigate CT skills development process in learning environments. It is also aimed to determine the conceptual understanding and measurement approaches in the studies. To achieve these aims, a systematic research review methodology was implemented as the research design. Empirical studies on computational thinking indexed in the Web of Science and ERIC databases were selected without constraint on the publication dates. The studies found were examined and a pre-analysis was conducted by the researchers. Following the pre-analysis, 29 articles were selected to be included in the study. Content analysis was applied in order to determine and evaluate the common codes and themes related to the findings. In conclusion, instead of relying on attractiveness, functionality, market share of educational tools (robotic sets, software packets etc.), availability of qualified learning activities focused on problem solving is the main point practitioners should consider.;2020
The Project JUSThink has a double goal: (i), to help train the Computational Thinking skills of children with a collaborative, robot-mediated activity, (ii), to acquire insights about how children detect and solve misunderstandings, and what keeps them engaged with a task, the partner or a robot. The result? An abstract reasoning task with a few pedagogical tricks and a basic robot CEO that can keep 100 ten-year-olds engaged, and, in turns, frustrated and jubilant!;2020
The purpose of this research is to investigate students' learning experiences in a systematic game development process. The study was conducted at a science and arts center, where gifted students can enroll in after-school activities. Fifteen students and one instructor participated in a 12-week problem-solving implementation. During the last five weeks of the process, the students were engaged in developing educational computer games based on a game design model. Our findings showed that the game design model used in the study allowed the students to become aware of professional game development activities, such as identifying a target audience, prototyping, and evaluation. Furthermore, this game design model enabled a more systematic and faster implementation of the game development activity. The results of the research also showed that game development activity yielded important educational outcomes for the students to become skillful at problem-solving and convey their feelings/thoughts to the artifacts through the experience of the design process.;2020
The purpose of this study was to explore if, what kinds of, how much computational thinking (CT after this) practices could be included in STEAM programs, and what kinds of CT practices could be improved to make STEAM revitalized. The CT analyzing tool with operational definitions and its examples in science education was modified and employed for 5 science-focused and 5 engineering-focused STEAM programs. There was no discerning pattern of CT practices uses between science and engineering STEAM programs but CT practices were displayed depending on their topics. The patterns of CT practices uses from each STEAM program could be used to describe what CT practices were more explored, weakly exposed, or missing. On the basis of these prescription of CT practices from each STEAM program, the researchers could develop the weakly exposed or missing CT practices to be improved for the rich experience in CT practices during STEAM programs.;2020
The rapid, global spread of COVID-19 has led to an unprecedented rise in enrollments in online learning experiences among learners of all ages. In this article, we explore the impact of the global pandemic on a massive open online course, Problem Solving Using Computational Thinking, with a particular focus on the topics learners chose for their final projects. The Computational Thinking MOOC was designed using a project-based learning approach and aims to provide learners with an introduction to the big ideas of computational thinking using a range of case studies that encompass topics such as airport surveillance, epidemiology, and human trafficking. Beyond observing a sharp increase in enrollment and engagement at the time the pandemic began, we discuss ways in which the course's project-based pedagogy allowed learners to bring their present experiences and concerns together with the course's subject matter in order to meet the learning objectives for the course. Many learners chose to address aspects of the pandemic in the course's final project and applied ideas about computational thinking to peer-graded assignments that conveyed an individualized sense of importance and urgency. We assert that this approach, along with the inclusion of a timely epidemiology case study, enabled learners to more deeply internalize the role that computational thinking can play in their own lives and in society as a whole.;2020
The recent shift in compulsory education from ICT-focused computing curricula to informatics, digital literacy and computer science, has resulted in children being taught computing using block-based programming tools such as Scratch, with teaching that is often limited by school resources and teacher expertise. Even without these limitations, Scratch users often produce code with 'code smells' such as duplicate blocks and long scripts which impact how they understand and debug projects. These code smells can be removed using procedural abstraction, an important concept in computer science rarely taught to this age group. This article describes the design of a novel educational block-based programming game, Pirate Plunder, which concentrates on how procedural abstraction is introduced and reinforced. The article then reports an extended evaluation to measure the game's efficacy with children aged 10 and 11, finding that children who played the game were then able to use procedural abstraction in Scratch. The article then uses game analytics to explore why the game was effective and gives three recommendations for educational game design based on this research: using learning trajectories and restrictive success conditions to introduce complex content, increasing learner investment through customisable avatars and suggestions for improving the evaluations of educational games.;2020
The revolution of the fourth industrial has impacted most aspect of our life and demanding a paradigm shift including education. It has become to our attention that there is a need to inculcate complex problem-solving skills among youth to equipped them to face the challenges in the era of digital technology. To fulfill the needs, computational thinking was introduced in school curriculum in Malaysia in 2017. It is still rather new, and this creates opportunity to understand how computational thinking can best be integrated in teaching and learning. In this study, we developed a module for a science topic, Matter and examine its impact on computational thinking skills on 65 students at secondary level. The computational thinking skills integrated in this study were abstraction, decomposition, algorithm, generalization, and evaluation. A quasi-experimental method was employed, and the ANCOVA result showed that there was no significant difference between control and treatment group on computational thinking skills. However, the score means for each of the computational thinking skills for both groups, showed that three skills in the treatment group were higher than the control group. The three computational thinking skills were decomposition, evaluation, and algorithm. This study suggested that CT involved mental process and proper planning is crucial to integrate computational thinking skills as teaching and learning is very contextual in nature.;2020
The role of programming in computing education for children has grown rapidly in recent years with the proliferation of specially designed programming tools, which is grounded on Seymour Papert's theoretical work in Constructionism. Studies show that some children can develop computational thinking skills and practices with programming activities when learning with the tools through a well-design curriculum in elementary education (or primary education). However, existing studies may not completely address whether programming skills and computational thinking can be connected to the development of other generic skills, which are considered important to the learning and cognitive development of children. This study investigates the impact of programming on three learning competencies (creative thinking, critical thinking and problem solving) known as twenty-first century skills. The conceptual mapping between programming, computational thinking and the three learning competencies is presented. In a one-year intervention in a primary school, students were taught how to build interactive games through programming, and thus explored some basic computational thinking concepts in class. Our results show that children perceived a significant impact of programming on their learning competencies. Yet, the transferability of twenty-first century skills developed through computational thinking and programming may require a further study. Our study provides insights from children as primary respondents to help direct future research in the field of programming and computational thinking education and its potential impact on twenty-first century skills.;2020
The role of technology in STEM education remains unclear and needs stronger operational definition. In this paper, we explore the theoretical connection between STEM and emergent technologies, with a focus on learner behaviors and the potential of technology-mediated experiences with computational participation (CP) in shaping STEM learning. In particular, by de-emphasizing what technology is used and bringing renewed focus to how the technology is used, we make a case for CP as an epistemological and pedagogical approach that promotes collaborative STEM practices. Utilizing Ihde's work as a conceptual framework, we explore how technology-mediated relations shape STEM learner experiences and behaviors by empowering learners to develop scientific knowledge through collaborative participation and interactive relationships with technology. In particular, we focus on technology mediated game-based learning and citizen science, and examine how CP creates opportunities for STEM learners to leverage learning with technology in innovative ways. We argue that through computational and collaborative learning experiences, learners participate as members of STEM learning communities in ways that mirror how STEM professionals collaborate, applying interdisciplinary and transdisciplinary approaches to complex real-world problems. Computational participation consequently creates opportunities for learner-technology pairings to (re)shape STEM learning behaviors, empowering learners to engage collaboratively as members of a STEM community of practice.;2020
"The status of computational thinking as one of the most demanded skills explains why suggestions are currently being made to apply it within the educational context. This paper constitutes an attempt to analyze the scientific literature on the implementation of computational thinking in the field of education published in the most important Web of Science database collections. To achieve this, a systemic revision was made where attention was paid to four variables, namely: publication year; countries with more productions; the most productive authors in this field; and documentary sources with a higher number of publications. Added to this, we carried out a classification according to the types of documents and the research methods used, along with the educational stages under study and the programming language adopted. Publications are undoubtedly on an upward trend, Spain standing out as one of the most productive countries in this area. Likewise, evidence demonstrates not only that this field of study has been addressed using the two main research methods -quantitative and qualitative- but also that the emphasis has traditionally been placed on the primary education stage.";2020
The study examined the effects of learning with the Bee-Bot on young boys' and girls' computational thinking within the context of two scaffolding techniques. The study reports statistically significant learning gains between the initial and final assessment of children's computational thinking skills. Also, according to the findings, while both boys and girls benefited from the scaffolding techniques, a statistically significant interaction effect was detected between gender and scaffolding strategy showing that boys benefited more from the individualistic, kinesthetic, spatially-oriented, and manipulative-based activity with the cards, while girls benefited more from the collaborative writing activity. In regards to the children's problem-solving strategies during debugging, the results showed that the majority of them used decomposition as a strategy to deal with the complexity of the task. These results are important, because they show that children at this very young age are able to cope with the complexity of a learning task by decomposing it into a number of subtasks that are easier for them to tackle. The research contributes to the body of knowledge about the teaching of computational thinking. In addition, the study has practical significance for curriculum developers, instructional leaders, and classroom teachers, as they can use the results of this study to design curricula and classroom activities with a focus on the broader set of computational thinking skills, and not only coding.;2020
The teaching-learning of programming fundamentals is increasing in secondary schools, however, it is a very difficult task for the teacher because the student has not yet achieved full development of their computational thinking, so they have difficulty in learning programming fundamentals. In this article, we describe the development of computational thinking activities prior to the teaching of programming fundamentals and we analyze the data obtained from a pre- and post-test of computational thinking applied to a control group and an experimental group. Afterwards, we analyze the results obtained from a test of programming fundamentals to both the control group and the experimental group. The activity has been evaluated during the academic year 2017-2018 by 80 high school students from K-10 (15 and 16 years old), our results indicate that the development of activities of Computational Thinking previous to the teaching of programming fundamentals has allowed the students to assimilate in a better way the learning in the mentioned subject, that is to say, they extended their mathematical logical reasoning to develop the respective flow charts without any difficulty. That is, they expanded their mathematical logical reasoning to develop the respective flow diagrams without any difficulty.;2020
The uniqueness of Augmented Reality (AR) is its affordance to support learning abstract concepts by rich information, visualization and the integration of user-content interaction. Research has shown that abstract idea and invisible phenomena can be learned better with the support of AR. However, high complexity and conceptual Computational Thinking (CT), such as algorithm design and related programming concepts, are rarely studied empirically in the intersection with immersive technology. This study is aimed at addressing this issue and providing a piece of quantitative and empirical evidence to AR-supported Computer Science discipline-based learning. We designed a mobile AR-enabled application based on a CT framework and related AR affordances in the literature. This app can contextualize a programming debugging task and support program editing & CT learning. A controlled laboratory study was designed and conducted. The result of statistical analyses shows that participants with the AR support made better quality of programs with lower errors and less amount of code edits, compared to those without the AR support.;2020
The use of Artificial Intelligence (AI) offers new and thriving opportunities, but introduces also new risks and ethical issues that should be dealt with. We argue that the introduction of AI contents at schools through practical, hands-on, projects is the way to go to educate conscientious and critical citizens of the future, to awaken vocations among youth people, as well as to foster students' computational thinking skills. However, most existing programming platforms for education lack some of the required educational features to develop a complete understanding of AI. In this paper we present LearningML, a new platform aimed at learning supervised Machine Learning (ML), one of the most successful AI techniques that is in the basis of almost every current AI application. This work describes the main functionalities of the tool and discusses some decisions taken during its design. For its conception, we have taken into account lessons learned from the research literature on introducing AI in school and from the analysis of other educational tools built with the aim to allow learners to use ML. We offer as well some promising results obtained after a preliminary testing pilot workshop. Finally, the next steps in the development of LearningML are presented, focused on the face and instructional validation of the tool.;2020
The use of Scratch programming in introducing text-based programming to novices at all levels of education has gained prominence in computer science but is still hardly known among pre-service teachers. With affordances of Scratch in learning text-based programming, we present an experience report on how we supported our first-year pre-service teachers' learning of procedural programming concepts with Scratch for the first time. The study follows an action research strategy conducted over two cycles with 58 pre-service teachers who were purposively sampled. Findings revealed that Scratch supported the learning of procedural programming by our first-year pre-service teachers to some extent. We, therefore, recommend that pre-service teachers be exposed to more exercises while focusing on challenging concepts such as algorithms, use of variables, repetition and control structures.;2020
There has been a growing interest in the use of computer-based models of scientific phenomena as part of classroom curricula, especially models that learners create for themselves. However, while studies show that constructing computational models of phenomena can serve as a powerful foundation for learning science, this approach has struggled to gain widespread adoption in classrooms because it not only requires teachers to learn sophisticated technological tools (such as computer programming), but it also requires precious instructional time to introduce these tools to students. Moreover, many core scientific topics such as the kinetic molecular theory, natural selection, and electricity are difficult to model even with novice-friendly environments. To address these limitations, we present a novel design approach called phenomenological programming that builds on students' intuitive understanding of real-world objects, patterns, and events to support the construction of agent-based computational models. We present preliminary case studies and discuss their implications for STEM content learning and the learnability and expressive power of phenomenological programming.;2020
There is a need for developmentally appropriate Computational Thinking (CT) assessments that can be implemented in early childhood classrooms. We developed a new instrument called TechCheck for assessing CT skills in young children that does not require prior knowledge of computer programming. TechCheck is based on developmentally appropriate CT concepts and uses a multiple-choice unplugged format that allows it to be administered to whole classes or online settings in under 15 min. This design allows assessment of a broad range of abilities and avoids conflating coding with CT skills. We validated the instrument in a cohort of 5-9-year-old students (N = 768) participating in a research study involving a robotics coding curriculum. TechCheck showed good reliability and validity according to measures of classical test theory and item response theory. Discrimination between skill levels was adequate. Difficulty was suitable for first graders and low for second graders. The instrument showed differences in performance related to race/ethnicity. TechCheck scores correlated moderately with a previously validated CT assessment tool (TACTIC-KIBO). Overall, TechCheck has good psychometric properties, is easy to administer and score, and discriminates between children of different CT abilities. Implications, limitations, and directions for future work are discussed.;2020
There is a saying, Everything changes, but nothing changes. We are realizing a rapid technological revolution in the development, deployment, and application of computing technologies within every discipline and every sector of society. Yet, our ability to respond to the well-documented need for a large, diverse, computationally literate workforce remains a challenge. We summarize our 35 years of lessons learned for preparing the workforce that can inform efforts to address this challenge. We have pursued a multiprong approach to reach instructors, researchers, professionals, and students on a national scale. Our efforts in scaling up and sustaining activities range from teaching computational thinking through imparting HPC skills. We have been able to scale up these activities through community efforts to share, cooperate, and collaborate. The potential for providing life-long learning to everyone wishing to expand their computational knowledge and skills is greater than any organization can achieve on its own.;2020
"There is an increasing emphasis on teaching young learners to code; yet, there are few tools designed to measure the effect of learning to code on children. The purpose of this study was to develop and validate a tool to assess changes in young learners' attitudes toward coding: the Elementary Student Coding Attitudes Survey (ESCAS). We validated the scale using Confirmatory Factory Analysis and Structural Equation Modeling with responses from over 6000 4th-6th grade students (aged 9-12 years). Survey validation revealed a scale consisting of five constructs that comprise young learners' attitudes toward coding: social value, coding confidence, coding interest, perception of coders, and coding utility. In our analysis, students' grade level, ethnicity, gender, coding frequency, coding experience, and math interest influenced social value, which in turn influenced coding interest, perception of coders, and coding utility. Students' math confidence, coding frequency, coding experience, ethnicity, and coding interest predicted their coding confidence. Among observable variables, coding frequency and math interest had the greatest influence on social value, which substantially influenced all other factors. We discuss how this tool can help those who teach coding to young children to better measure and understand the variables that may influence young learners' attitudes toward coding over time.";2020
There is considerable debate and ambiguity around what constitutes computational thinking (CT). In contrast to Computer Science which is generally treated as a distinct field of study, CT as a construct highlights the integral relationship between computing and other fields. Many recent efforts seek to map computational thinking by making high-level connections to other school disciplines. We argue that while these efforts may help identify specific curricular areas in which computing is likely to take place, they do not sufficiently capture the specificity and dynamism that is characteristic of meaningful computational integration. Worse, they exclude generative examples of computing integration that exist outside of the traditional STEM context or researcher-led efforts. In this special issue, we offer a counterproposal to one-size-fits-all frameworks of CT by exploring in detail how local, emergent definitions of CT develop across a diversity of spaces of learning. Reflecting on these examples can help researchers and educators alike cultivate an awareness of the ways in which learners and educators leverage computing to think, create, and participate across a variety of spaces.;2020
Thinking steps of computational thinking skills have an essential role in forming creative thinking to find ideas in a structured manner. Not only developing creative thinking, but this stage also helps understand how to implement ideas into computational procedures. This study aims to design worksheets for helping the students understand and improve Computational Thinking Skill (CTS) in the material interpolation with the problem based learning (PBL) strategy. The development of worksheets using step: define, design, development, and disseminate. The development stage includes the evaluation from learning expert. In many studies, the application of PBL shows an increase in various student abilities. This research applied to 39 students of computational physics courses. The result shows there was an increase in CTS, such as abstraction from the complex problem, algorithm automation, data analysis, collection, and representation.;2020
This article builds on prior work that aims to measure computational learning (CL) during middle school. Since game computational sophistication (GCS) has been used as a proxy for a student's engagement in CL we build on their model to more completely describe the relationship between different types of building blocks of computer games and GCS. In doing so, we present a single quantitative measurement for GCS. Our model, called GCS 2.0, has face validity for 39 games, each programmed by a pair of middle school children. We choose four of these games, two with high GCS and two with low GCS, and discuss the computational building blocks found in each game. We do this to help the reader better understand our measurement of GCS and its relationship to CL.;2020
"This article communicates the results of a Danish survey study conducted in 2018 that aimed to examine initiatives relating to computational thinking in primary and lower-secondary schools, as well as the professional development of teachers and the perceptions of school principals in this area. The context is an increasing interest in this field, motivated by a sense that it is important for children to learn computational thinking skills. However, educators struggle with questions regarding what computational thinking in education actually is-and consequently, how they should teach and assess it. In this survey, we wanted to explore existing practices and current situations to find out what school principals regard as important; thus, we designed an electronic questionnaire on this topic. 98 principals started the survey, and 83 completed it. Our analysis suggests that many initiatives connected to computational thinking are currently being implemented, but according to the principals taking part, teachers are not trained to teach this subject. The principals have inclusive views and focus on broad aspects of what computational thinking involves. According to them, computational thinking is not about pushing students into computing careers; rather it is about supporting the well-rounded development of human beings in a free and democratic society. However, the principals do report limited understanding of this subject, which suggests that teachers are not the only ones in need of training-principals also need help to develop a culture and mindset around this subject and implement it efficiently into schools.";2020
This article consists of an analysis of how the mathematical competence in problem solving, using the Polya's technique, can be developed using computational thinking with Scratch as a transversal resource, checking how students use Polya's technique while solving arithmetic problems. To know and internalize learning about this problem-solving heuristic, the student has worked previously this kind of thought process with computational thinking using the educational resource. The work has been put into practice using a mixed methodology, accomplishing a time-series experiment with non-substitutive pretest measures. This information has been completed with a qualitative measurement with the student's own perception about their learning process during the development of the empirical experience. To carry out the implementation of this experimental design, the students have done a series of tasks designed with Scratch and developing a project to create a videogame based on solving arithmetic problems. The outcomes show positive results using this methodology and a useful implementation of the computational thinking as a transversal resource in Mathematics, not only improving the mathematical competence but also the linguistic. An important improvement is observed in the reading and comprehension of the statement of the problem, essential process to carry out good resolution of a problematic situation faced by a student using a problem-solving technique.;2020
This article deals with LEGO robotics textbook developed at the Department of Computer Science and Educational Technology, Faculty of Education, University of West Bohemia in Pilsen. The textbook is focused on the support of developing computational thinking of pupils in the upper primary school with the help of LEGO Mindstorms EV3 kit. The textbook contains eleven educational units including the manuals how to create the constructions of robots as well as the methodical support for teachers. The textbook has been made since 2018 and currently the second version aimed at testing at schools is being published. The first version of the textbook was verified in education and the comments of the teachers were taken into consideration during the last year. Furthermore, the process and outcomes of creating the robotic constructions used in the textbook are described in this article. Also, the models of robots used in the textbook are introduced. The problems which were necessary to be solved during robot constructions and the final form of robots are mentioned. Then the possibilities of making the manuals for building the LEGO robots are introduced and advantages and disadvantages of available applications are described. In the end some chosen comments of teachers and pupils about the robotics constructions which we received in the first phase of testing the textbook are presented.;2020
"This article develops an instruction method for promoting design innovation capability through a design-based program with identification, modeling, simulation, and prototyping (IMSP). The computational thinking and conceptualization of sustainability were incorporated. The interaction between instruction treatment and participants' personality was investigated. Eighty-six engineering undergraduates participated in this experimental study for exploring the effectiveness of the IMSP program. The findings indicate that 1) the IMSP program promoted undergraduates' computational thinking, and further enhanced their design innovation ability; 2) the program that integrated the conceptualization of sustainability has better teaching effects than that without the conceptual integration; 3) the personal characters of innovation proaction and emotional intelligence acted as moderators in the ISMP program. This study presents a practical method for improving design innovation capability, and supports the feasibility and necessity of emphasizing computational thinking and sustainability in the innovation training program for engineering education.";2020
This article positions Andy Warhol as a model for computational thinking and art-making, linking him to concepts in new media art. Warhol's work is analyzed for its variability in form generation and output, both in painting and on the early Amiga computer. His work becomes a simulation of the abstraction of process and methods of production familiar to us in electronic computational art of today. Rather than seen as banal mass production on the modern assembly line, Warhol's work can be seen as inspiration for new media arts practitioners.;2020
This article proposes thinking of media archaeology as an operating table upon which historical, material and technological interconnections between fashion and film are made. By exploring how early cinema and digital film can be coupled to textile as technology, more specifically through the mechanisms of the sewing machine and the Jacquard loom, it extends the historical span from the mid-1890s, with the invention of cinema as projection, to the early 1800s, when computational thinking was successfully implemented as weaving technique. Instead of focusing on film and fashion as means of visual representation, the author relies on the concept of inscription for a better understanding of both cinema (as recording of light and movement) and textile (with its various thread techniques of weaving, stitching, knitting, etc.).;2020
This article provides an introduction for the special issue of the Journal of Science Education and Technology focused on computational thinking (CT) from a disciplinary perspective. The special issue connects earlier research on what K-12 students can learn and be able to do using CT with the CT skills and habits of mind needed to productively participate in professional CT-integrated STEM fields. In this context, the phrase disciplinary perspective simultaneously holds two meanings: it refers to and aims to make connections between established K-12 STEM subject areas (science, technology, engineering, and mathematics) and newer CT-integrated disciplines such as computational sciences. The special issue presents a framework for CT integration and includes articles that illuminate what CT looks like from a disciplinary perspective, the challenges inherent in integrating CT into K-12 STEM education, and new ways of measuring CT aligned more closely with disciplinary practices. The aim of this special issue is to offer research-based and practitioner-grounded insights into recent work in CT integration and provoke new ways of thinking about CT integration from researchers, practitioners, and research-practitioner partnerships.;2020
This case study focused on the robotics learning process of Mark (a pseudonym), a Latino-American second grader diagnosed with autism spectrum disorder. Drawing on Polanyi's (Personal knowledge: towards a post-critical philosophy [Kindle version], 1958/2015) notion of tacit knowing and dwelling in tools, we attempted to understand Mark's unique processes and ways of engaging in learning about a Light Sensor by pursuing two research questions: (a) How does Mark, with his unique behavioral and socio-emotional characteristics, engage in the robotics class? (b) What insights can we gain from his inquiry as we develop responsive robotics education? Findings revealed that Mark used a non-sequential inquiry process filled with repetitive free explorations and unexpected expanded inquiries about the Light Sensor. This non-sequential inquiry process highlighted that dwelling with robotic manipulatives was Mark's distinct ways of exploring the Light Sensor. His non-sequential inquiry process emerged from his tacit engagement and expanded to his sophisticated and holistic understanding of the Light Sensor. We discuss implications for a robotics education program that is responsive to young children with diverse needs and characteristics.;2020
This contribution presents an ongoing project based on an educational robotic platform intended for teaching robotics in different education levels. Educational Robotics is not understood as a single subject but considered as a didactic strategy in which the robot is used as a tool to solve a specific problem. The use of robots makes it possible to carry out dynamics based on creativity and innovation so that students are challenged and they must solve it by programming the robot with the proper behaviour. Educational Robotics has other advantages when used as a teaching tool because it facilitates the acquisition of knowledge playfully, it can improve the motivation of students and it is based on collaborative work. Therefore, a new prototype of a transversal educational robot that can be used in all educational levels because of its structure and implementation is described. Even though mechanics and electronics are two of the main fundamentals of robotics, we consider that they can result in an obstacle when a professor or student tries to use a robot. Consequently, the proposed platform includes the main sensors and actuators connected to the control unit via standard connectors. This kind of connectors eases the introduction of new elements to the robot with the aim of avoiding problems related to the hardware part. Concerning the mechanics, it is provided with a robust 3D printed structure that integrates the electronics at the same time that protects it against collisions. With this approach, we consider that the student can be totally focused on the programming part instead of having to take into account the problems that a wrong connection could generate in the functioning of the robot. Hence, depending on the educational level where the robot is used, the Integrated Development Environment (IDE) is adapted by using programming blocks that represent a certain behaviour in primary levels and code in high school and university levels. With regard to the use of this robot prototype in early ages, it is possible to use it to work skills like the computational thinking through solving challenges based on programming the robot through simple blocks via an APP for a tablet. Consequently, depending on the educational level, the robot can be used as a teaching tool to study different subjects in the lower levels whereas it can be used to work STEM disciplines in higher school levels. In the university levels, it is possible to use this tool to introduce the use of different programming languages through a motivational teaching tool.;2020
"This design case documents the creation of open educational resources for preservice and inservice teachers at Brigham Young University (BYU). The purpose of this interdisciplinary project was to design and develop training, assessments and credentials to help the learners become competent in teaching computational thinking (CT) and coding in developmentally appropriate ways for their students. In accordance with the needs and desires of the stakeholders, the assessments for the project took the form of open badges, and the training consisted of corresponding tutorials to assist individuals earning those badges. The badges, tutorials and some related resources were compiled into the Tech with Kids website () in order to make them accessible for all target learners. Evaluation data suggests, among other findings, that most learners were able to successfully complete badge requirements; that the intervention was effective at helping students improve their understanding of CT; that learners generally perceived the materials as effective; and that the intervention may be implemented in a variety of ways.";2020
This emerging technology report describes computational toys as tools for learning and building computational thinking (CT) skills in young children. We present both a framework to categorize computational toys as well as a separate framework to evaluate the toys' effectiveness for teaching CT skills. We then apply our frameworks to thirty computational toys targeting children ages 5 and 6 years old. By identifying physical and ideational features of computational toys, educators and researchers will be able to apply our findings to practice and expand upon CT pedagogical research in young learners. Our future research goals include to investigate how CT skills can be observed and measured in early childhood education.;2020
This exploratory study attempts to determine problem solving steps in block based programming environments. The study was carried out throughout one term within Code.org. Participants were 15 6th grade secondary school students enrolled in an IT course at a public secondary school. Observations, screenshots and interviews were analyzed together to find out what students do and what they think during problem solving process. As a result, three main steps (focus, fight and finalize) were extracted from students' behavioral patterns. The results suggest that three steps occur in linear or cyclic manner with regard to the programming constructs required for the solution of the problem. Implications for instructors who desire to provide a better learning experience on problem solving through block-based programming are also included.;2020
This full research paper focuses on the design of a Teaching Practices Management System (TPMS) which supports the sharing of teaching practices (TPs) amongst computer science instructors. Many years of valuable TPs can be lost due to academic retirement when no competent knowledge management system is available for recording these TPs. Consequently, novice teachers are currently facing critical challenges when delivering subject knowledge that relates to algorithms, programming and the development of computational thinking skills without the benefit of others' experience. After a study of the relevant literature, it could be seen that far too little attention has been paid to the capturing and sharing of TPs which are not easily expressed or communicated in visual or verbal terms. Thus, we design and then demonstrate a Teaching Practices Management System (TPMS) which supports the capturing of TPs. A quantitative and a qualitative evaluation of users' experiences of employing the system shows that instructors are satisfied with it and are mostly positive about its features. The findings of this study hold considerable promise in relation to developing engaging and effective knowledge sharing systems for use by academic instructors.;2020
This full research-track paper demonstrates growth in computational thinking in a cohort of engineering students completing their first course in engineering at a large Southwestern university in the United States. Computational thinking has been acknowledged as a key aspect of engineering education and an intrinsic part of multiple ABET outcomes. However, computing is an area where some students have more privileges (e.g. access and exposure to meaningful use of computers) than others. Integrating computing into engineering, especially early in the curriculum, may exacerbate existing experiential disadvantages students from excluded social identities experience. Most introductory engineering programs have a component of programming and/or computational thinking. A comprehensive literature review showed that no existing computational thinking framework fully met the needs of students and professors in engineering and computer science. As a result, this team created the Engineering Computational Thinking Diagnostic (ECTD). This diagnostic was assessed and improved during the 2019-2020 academic year. Data was collected from a cohort in a first-year engineering course that included topics in mathematics, engineering problem solving, and computation. Pre- and post-test data analysis with 62 participants documents statistically significant student growth in computational thinking in this course. Significant differences were not found by gender or a limited racially-based analysis. This diagnostic is of interest and relevance to all institutions providing engineering and computing programs. The short-term impact of this research includes an innovative approach to gauge student abilities in computational thinking early in a course in order to add appropriate intervention activities into lesson plans. The long-term impact is the creation of a measurement of student learning of computational thinking in engineering for courses and programs that wish to develop this important skill in their students.;2020
This Innovative Practice of a Full Paper presents new ways of teaching classes. The teaching methodology of the algorithm disciplines of the first years of Computer Engineering courses directly affects student performance throughout the course. The current education system is in transition, taking slow steps in new ways of learning. By promoting self-reflection and critical thinking, students can develop problem-solving skills and observe an application of the tools learned. A proposed methodology includes new structuring of the discipline Algorithms and Data Structures I at the Universidade Federal do Rio Grande (FURG), with the learning of a modern programming language and the transformation of the classic classroom model to new methods and dynamics. Computational thinking is fundamental at the beginning of the course. From this, all students receive a introduction course at the beginning of the college year to immerse in dynamics to practice logic. Classes began, students received an extension to the basic learning of the discipline (the fundamentals of algorithms and Python as a modern programming language) and at the same time they received an assignment, a problem resolution, where they had space and time to develop a game with the theme of their choice. The activity requires teamwork and creativity. As lectures run as workshops, allowing collaboration and project creation, with the help of teachers and older students as tutors. To complete the program, an event made available by the university was used as an environment, for visitors, scholars as well for high school juniors interested in software, to attend and learn about. As a preliminary result of the new implementation methodology, after 4 years, there was an increase in the approval and average grade of learners.;2020
"This meta-analysis examines whether greater computational thinking is linked to greater academic achievement among students from 1st graders in primary school to 4th year seniors at university. Results from 34 studies showed that computational thinking and academic achievement were positively correlated (0.288). Moderator analysis showed that this correlation was (a) stronger among students in Eastern cultures than Western cultures; (b) strongest among primary school students, less strong among secondary school students, and weakest among undergraduates; (c) stronger among females than males; and (d) strongest when assessing assignment scores; less strong with GPA, course grade, or tests; and weakest with quizzes. Neither subject content (e.g., math, science) nor sampling strategy (e.g., randomized, convenience) moderated the link between computational thinking and academic achievement. In sum, the positive link between computational thinking and academic achievement is moderated by culture, grade, achievement indicators, and gender.";2020
This meta-analysis maps the evidence on the effectiveness of instructional approaches and conditions for learning computer programming under three study conditions: (a) Studies focusing on the effectiveness of programming interventions per se, (b) studies focusing on the effectiveness of visualization and physicality, and (c) studies focusing on the effectiveness of dominant instructional approaches. Utilizing the data from 139 interventions and 375 effect sizes, we found (a) a strong effect of learning computer programming per se (Hedges' (g) over bar = 0.81, 95% CI [0.42, 1.21]), (b) moderate to large effect sizes of visualization ((g) over bar = 0.44, 95% CI [0.29, 0.58]) and physicality interventions = 0.72, 95% CI [0.23, 1.21]), and (c) moderate to large effect sizes for studies focusing on dominant instructional approaches ((g) over bars= 0.49-1.02). Moderator analyses indicated that the effect sizes differed only marginally between the instructional approaches and conditions-however, collaboration in metacognition instruction, problem solving instruction outside of regular lessons, short-term interventions focusing on physicality, and interventions focusing on visualization through Scratch were especially effective. Our meta-analysis synthesizes the existing research evidence on the effectiveness of computer programming instruction and, ultimately, provides references with which the effects of future studies could be compared.;2020
This mixed methods study examined how engagement in robotics and game design influenced students' self-efficacy, STEM attitudes, and computational thinking (CT) skills. Predominantly African-American students engaged in engineering and computer science tasks during informal learning environments. Results revealed students' self-efficacy scores on computer gaming increased significantly. Focus group data supported these findings, revealing that computer programing was challenging, but students enjoyed the tasks, added elements of culture in some cases, and valued the agency the tasks provided. Focal students were also able to make connections to STEM-related careers. Observational data demonstrated that focal students exhibited substantive CT during robotics and moderate CT during game design. Results support the idea that robotics and game design may be used to broaden underrepresented students' participation in STEM.;2020
"This paper aims to provide a comprehensive analysis of publication patterns on computational thinking (CT) over two recent periods (period I: 2006-2012; period II: 2013-2018). Based on keyword analysis, a total of 3798 (period I) and 7175 (period II) keywords were found. Derived from the content analysis, a research typology of two-period keywords was consolidated and framed according to its attributes, including background settings, domain-specific factors, and learning outcomes. Main findings show as follows: (1) Regarding the research background, students from secondary and higher education are the main participants; and computer science, mathematics, and engineering are the major subjects. (2) As the domain-specific factors, game and peer collaboration were found to be the main pedagogies, while web-based and face-to-face learning environments were almost equally referred to in CT research settings. However, compared with traditional command-based tools, Scratch, Lego, and Python were identified as the emerging visual-based programming languages. (3) Finally, the keywords related to learning outcomes were classified based on the Bloom's framework of three learning domains. First, knowledge and mental understanding are the main goals in the cognitive domain; motivation and attitude are the main tasks in the affective domain; and social and communication skills are the central outcomes in the training of psychomotor ability. Further discussions and research directions are provided.";2020
"This paper contributes to the contemporary debate on the increasing use of computational thinking (CT) in primary schools. It is based on an empirical study in which 28 Swedish third-grade school children (9-10 years of age) participated in a creative workshop where they were challenged to design a digital game using stop-motion film technique, working in groups. The study applies a designerly approach to game design activities to investigate what aspects of computational skills can be identified when children employ stop motion filmmaking as a means to envision a digital game design idea and how a designerly approach can enable them to enact dimensions of their computational skills? The data included video observations, casual conversations, and stop-motion videos representing the children's game design ideas. The analysis identified three aspects of computational thinking strategies while children produced stop-motion films: step-by-step procedural skills; design and arrangement skills; and computational perspectives.";2020
This paper describes a new programming education method using stickers and a scanner that combine the features of unplugged programming and physical programming. The new materials developed in this study offer superior features compared to commercial materials, such as low cost, use in lower grades class in elementary school, and no need for teacher's ICT skills.;2020
This paper describes analyses of the K-12 computational thinking (CT) integration activities collected at two NSF-funded workshops, Developing an Interdisciplinary Framework for Integrating Computational Thinking in K-12 Science, Mathematics, Technology, and Engineering Education, held in August and November of 2017 at Education Development Center, Inc., in Waltham, Massachusetts. The workshops convened a working group of principal investigators, researchers, and educators from the National Science Foundation (NSF) ITEST (Innovative Technology Experiences for Students and Teachers) and STEM + C (STEM + Computing) funded projects to draft an interdisciplinary framework for integrating CT into K-12 education. The goal of this paper is to share that framework and our findings on promising learning progressions, gaps that exist in the collected set of activities, specific advances in STEM fields that were made possible through CT, and suggested ways that CT integration in K-12 can evolve to reach what the CT integration framework proposes as five computational thinking integration elements or CTIEs. This framework is designed to help educators see ways to engage students in CT within disciplinary learning. The analyses and findings may benefit STEM and computing education fields by elucidating the target of CT as used within CT-integrated STEM fields.;2020
"This paper describes the work done by sixth grade students to achieve and sustain productive and personally meaningful lines of inquiry with computational models. The capacity to frame interactions with tools as dialogic exchanges with co-participants is a productive practice for disciplinary engagement in science and for computational thinking (Chandrasekharan and Nersessian 2015; Dennet 1989; Latour 1993; Pickering 1995). We propose that computational models have unique affordances for dialogic interaction because they are probabilistic and iteratively executable, features that provide an entry point for students to adopt stances that treat computational models as participants. Our analysis reveals that existing patterns in students' social interactions are resources for interacting flexibly with computational tools as participants. In particular, we found that students treated computational models as participants in three ways: (1) as conversational peers, (2) as co-constructors of lines of inquiry, and (3) as projections of students' agency and identity. Our data also demonstrate that students take on flexible, rather than fixed, stances toward computational participants. These stances parallel scientists' interactions with non-human entities, which often involve treating tools as agentive participants in inquiry (Latour 1999; Pickering 1995), affording students a pathway to practices at the intersection of disciplinary engagement and computational thinking.";2020
This paper investigates unplugged computing as a formal pedagogical strategy to teaching computing to a Maltese secondary class of Year 9 students. It aims at identifying the effectiveness of this pedagogy outlining the strengths and weaknesses in its application, taking into consideration the level of attainment for students, as well as the impact on teachers' lesson preparation. This research study is based on the delivery of five unplugged activities. It analyses students' reaction when exposed to such unplugged activities to assess the viability of using this pedagogy when teaching computing concepts in a formal setting. The study concludes that unplugged computing is an effective pedagogical strategy that helps attain a high level of engagement and student involvement, encouraging teamwork and collaboration. Students experience a wide attention span and good retention through the constant link of computing scenarios to reallife examples and the use of tangible non-computing related objects. Notwithstanding, the study also identifies certain limitations of this pedagogy, mainly that it is not sufficient as a standalone pedagogy, but needs to be applied in conjunction with other pedagogies to be able to cover all the expected learning objectives of the curriculum.;2020
This paper is to investigate into the effect of design-based learning (DBL) activities and programing training on computational thinking (CT) skills. In total, 119 from the ninth grade students were recruited for this study conducted within the scope of Computer Science course. A semi-experimental research design was adopted, and DBL activities were included in one group, while the other group attended in the programming training took place. The duration of the study was planned as fourteen weeks and the data were obtained in the 1st and 14th weeks of the experimentation. During the analysis phase, the paired sample t test was employed for in-group comparisons, whereas the independent samples t test analysis was utilized to make comparisons between groups. This study finds evidence to suggest that there was a significant positive development at CT levels after the experimentation in both groups. The most remarkable result to emerge from the data is that DBL activities had also a similar effect on CT skills compared to programming training considered as important in teaching CT and developing it. Further inquiries should be undertaken in the relationship between DBL and programming training with CT skill through qualitative or mixed research designs in depth.;2020
This paper presents a study carried out with a group of students from a robotic club, where they have used CodeCubes, a hybrid interface that combines physical paper cubes with Augmented Reality (AR). CodeCubes, intends to promote computational thinking through exploration and experimentation. The intervention, which we report here aimed at assessing children's interest and motivation for these types of interfaces, as well as identifying possible interaction difficulties with CodeCubes. The results indicate that the children were motivated to work with CodeCubes, and that the physicality of the interface combined with AR can potentially promote hands-on learning.;2020
This paper presents findings from a two-year qualitative study examining integration of computer science (CS) and computational thinking (CT) into elementary mathematics instruction. Integrated units were developed by elementary teachers and CS/CT coaches with support from university faculty with expertise in CS/CT and elementary mathematics. CS/CT instruction primarily relied on the Scratch environment, although some lessons made use of Code.org materials. This research primarily relied on two theories of integration (i.e. Kiray, 2012. A new model for the integration of science and mathematics: The balance model. Energy Education Science and Technology Part B: Social and Educational Studies, 4(3), 1181?1196) that provided insight into the level of interconnection between the disciplines and the relative amount of instructional time spent within each discipline. Findings revealed that cross-grade CS/CT concepts included sequencing, looping, and conditional logic. Within each category: (a) concepts were taught with increasing complexity across the grades, (b) the mathematics was dominant and CS/CT was important but secondary, and (c) three types of lessons emerged: No integration, partial integration, and full integration. Lastly, lessons generally included a transition from less integrated to more integrated activities with an initial focus on discipline-specific conceptual understanding prior to integrated activities.;2020
This paper presents the design of an assessment process and its outcomes to investigate the impact of Educational Robotics activities on students' learning. Through data analytics techniques, the authors will explore the activities' output from a pedagogical and quantitative point of view. Sensors are utilized in the context of an Educational Robotics activity to obtain a more effective robot-environment interaction. Pupils work on specific exercises to make their robot smarter and to carry out more complex and inspirational projects: the integration of sensors on a robotic prototype is crucial, and learners have to comprehend how to use them. In the presented study, the potential of Educational Data Mining is used to investigate how a group of primary and secondary school students, using visual programming (Lego Mindstorms EV3 Education software), design programming sequences while they are solving an exercise related to an ultrasonic sensor mounted on their robotic artifact. For this purpose, a tracking system has been designed so that every programming attempt performed by students' teams is registered on a log file and stored in an SD card installed in the Lego Mindstorms EV3 brick. These log files are then analyzed using machine learning techniques (k-means clustering) in order to extract different patterns in the creation of the sequences and extract various problem-solving pathways performed by students. The difference between problem-solving pathways with respect to an indicator of early achievement is studied.;2020
"This paper presents the results of two different experiences about computational thinking acquisition, gained within a formal subject taught in a multidisciplinary (Digital Humanities) master program of a face-to-face teaching university of Spain, following a blended learning approach and using flipped classroom techniques. These results have been obtained after imparting lecturing this subject for two consecutive academic years, with similar but distinctive methodologies each. In effect, even though both of them can be considered task-based (or, alternatively, learning-by-doing-based), the first one has focused on group learning and has been inspired by the computer engineering technique of evolutionary prototyping; whereas the second one builds upon individual learning and case-based (or example-based) learning. Thus, the paper details the parameters defined for each experience and methodology (that is, the participants, the materials, the procedures and the evaluation criteria), together with the main conclusions drawn from this study like, for instance, that group learning has not helped as much as individual learning (at least in this case) identify and correct the errors that occurred while assimilating the contents of the subject.";2020
This paper situates a critical review of studies that we have conducted within the broader research literature to analyze the affordances of integrating modeling within disciplinarily-integrated games from computational thinking and science as practice perspectives. Across the studies, the analyses pursue two themes: (a) the role of agent-based modeling as a synergistic local practice around which we can integrate computational thinking and scientific modeling within digital games and (b) the role of collaboration in leveraging those synergies. We then present a design of a disciplinarily-integrated game that integrates these themes to demonstrate one such possible instantiation of the themes. Finally, we discuss the implications for design and praxis with a particular focus on learning in classrooms across the curriculum. Specifically, we first explore the implications in terms of connecting to teachers' views of practice by framing computational modeling and computational thinking as mathematization. We then explore the implications of shifting from a focus on single players to communities of practice in terms of computational participation as science as practice. We close by exploring the pragmatic and pedagogical affordances of shifting from stand-alone single-topic games to flexible agent-based environments in terms of student development across the curriculum.;2020
This qualitative study examines the use of artificial intelligence (AI) and robotics in learning designs from the perspective of learning sciences. The literature on the topic indicates that there is not enough research on including diverse learning outcomes in the designs for learning. Therefore, the purpose of this study was to understand how AI and robots impact physical, social-emotional and intellectual learning outcomes through the implementation of learning designs that are guided by selected design principles. In this study, the design-based research (DBR) methodology was employed for investigating learning in naturalistic contexts. The intervention was implemented in a primary school in which learners used educational robots. The main findings reveal that the development of an integrated analytical framework, which considers a broader spectrum of human potential, allows for analyzing students' learning outcomes in a more integral, inclusive and balanced way. This, in turn, promotes students' learning by using AI and robots. Another finding reveals that the impact of using AI and robotics on learning designs is reflected in learners' personal trajectories having different pathways and paces. Finally, the lessons learned and the challenges to be overcome are summarized, and recommendations are made for future research for the enhancement of learning experiences that use AI and robotics.;2020
"This research aims to develop STEM learning activities for promote student's computational thinking skills and the results of this learning activities toward computational thinking of senior school student in the computing classroom. The study groups were 30 secondary school students in Pranakorn Si Ayutthaya who were studying in Semester 1, Academic Year 2019. They were selected by purposive sampling method. The research instruments were; (1) STEM education lesson plans for computational thinking developments; (2) The student's journals; and (3) Computational thinking test. The research was divided into three phases. The first phase focused on design lesson plans and learning activities for developing student's computational thinking skills. The second phase is implement the lesson plans and learning activities with the study group. The third phase is evaluation of the effectiveness of learning activities on develop student's computational thinking skills. The results shown learning activities can develop student's computational thinking skills, because of these activities were challenged students with real everyday life problems that required to used their computational thinking to solve the problems by decompose problems, find pattern recognition, abstraction thinking and develop algorithm for computer programming So, these STEM learning activities could be effectively used in Computing course.";2020
This Research to Innovative Practice Full Paper presents a multidisciplinary, design-based research study that aims to develop and study pedagogical models and tools for integrating machine-learning (ML) topics into education. Although children grow up with ML systems, few theoretical or empirical studies have focused on investigating ML and data-driven design in K-12 education to date. This paper presents the theoretical grounds for a design-oriented pedagogy and the results from exploring and implementing those theoretical ideas in practice through a case study conducted in Finland. We describe the overall process in which middle-schoolers (N= 34) co-designed and made ML applications for solving meaningful, everyday problems. The qualitative content analysis of the pre-and post-tests, student interviews, and the students' own ML design ideas indicated that co-designing real-life applications lowered the barriers for participating in some of the core practices of computer science. It also supported children in exploring abstract ML concepts and workflows in a highly personalized and embodied way. The article concludes with a discussion on pedagogical insights for supporting middle-schoolers in becoming innovators and software designers in the age of ML.;2020
"This Research to Practice Full Paper presents a pedagogical practice for technical high school students for developing Computational Thinking (CT) abilities through Internet of Things technologies. The covered topics in our proposal include (i) the use of temperature and humidity sensors for data collection, treatment and visualization using Arduino and micro-controllers; (ii) Smart and Human Cities (SHC) and Open Data concepts, in order to lead the students to reflect on the problems of their city and on data protection. Our motivation to our proposal is due to the educational processes have to develop criticality and the ability to solve problems among students. In this context, CT has been used for this through the use of robotics, game building or unplugged computing. On the other hand, technologies for implementing Internet of Things (IoT) have been used in several domains of society, including cities transformation. One important aspect in this scenario is data generation, which have to be carefully tackled by government's and who develop solutions to SHC. In this way, using IoT for teaching CT is an important aspect, also considering open data, privacy and SHC context. In our pedagogical practice, students were able to design and develop solutions to problems in their daily lives indirectly applying CT skills, such as decomposition, pattern recognition, abstraction, automation and analysis, as well as self-skills, collaboration, creativity and critically, required nowadays in broad professional training. It was also possible to develop students' interest in raising awareness of the use of computational technologies, as a solution to problems in society considering aspects of SHC and open data; propose a technological solution using IoT; and analyze the use of these data collected for the social well-being. For the evaluation of our proposal, we carried out questionnaires and tasks observation. The experience was considered successful in its planning and application, with a positive evaluation of the participating students.";2020
This Research to Practice Full Paper presents our experience of positive outcomes with increased motivation and retention in teaching an introductory Computer Science course with Python programming. Without reinventing the wheel, we infused few well established pedagogies by integrating and evaluating Computational Thinking (CT) skills in a meaningful way. We integrated CT with existing curriculum alongside programming and teaching general problem-solving techniques with a flowchart-based programming environment and without using specific programming concepts or languages at the beginning. Our aim here is not only to teach a programming language per se, but also to teach, at the beginning, the different ways of problem solving, logical reasoning, algorithm design, and programming constructs with minimal or no emphasis on syntax. A positive learning experience is successfully developed for our students by using appropriate pedagogies and strategies. To evaluate the impact of this infusion, a pre- and post-survey as well as a pre- and post-CT test were conducted on student cohort in different sections. The statistical analysis of the survey and test results show evidence of improvement in student's problem solving and coding skills as well as increase in motivation towards programming.;2020
"This research-to-practice full paper deals with the difficulty that it is possible to teach computational thinking through the teaching of algorithms and programming to a person with ADD. We propose approaches to teach algorithms, knowing that it is a difficult task for many teachers. Likewise, inspiring the student's interest also has its difficulties. The Brazilian Computer Society (SBC) understands that it is fundamental and strategic for Brazil that computer content is taught in basic education. Considering the 4.0 education of a connected generation, the thinking of computer education is relevant to the construction of youth and adult education. When we include people with ADD, this challenge is not trivial. This work presents a case study carried out with a high school student who has ADD and the techniques that were used to teach him to program to maintain his interest in the area. The method used was divided into three stages: Computer Discovery (1); Introduction to computational thinking through programming (2); Learn by Doing, in line with real-world problem solving using pair programming technique and challenge-based learning strategy (3). In order to investigate the effectiveness of the developed strategies, an experimental case study was carried out with a student who has ADD. The student was introduced to the content and approaches for 34 weeks, totaling 204 hours. The student presented a strong indication of learning and will forever have the ability of computational thinking to program and develop their applications.";2020
This Research-to-Practice Full Paper presents a reflective analysis of robotic literacy activities focused on children and teenagers. Robotic literacy is integrated or being integrated into the education system for children at an early age all around the world. Most of the teachers in charge of this education lack skills and are left to fend for themselves. This study proposes to focus on the discourses made by teachers and learners during such activities, and especially the metaphors used spontaneously. It takes shape through two robotic literacy activities. The first activity involved the robots BeeBot, BlueBot and Ozobot in seven classes of children from 3 to 10 years old. The second activity consisted of a five half-days training for 13 participants from 8 to 15 years old. They designed, built and programmed a robot. Young people's representations and interactions with robots involved in educational activities are observed to contribute to the development of questions for critical technology education. Analyses are carried out using the conceptual metaphor theory of Lakoff and Jonhson. Three roles are identified: the metaphor that helps to understand, the metaphor that makes tangible, and the metaphor that serves as a catchphrase. A metaphor can take more than one role and, whatever its role, can be classified as a living or non-living metaphor. Using living metaphors may hide aspects of the machine and raises ethical issues, inter alia. It is then essential to deconstruct young people's representations of the machine. This can be achieved by analyzing robots as social constructions that reflect human intentions.;2020
This study aimed at investigating whether Computational Thinking (CT) Perspectives can foster Computational Identity (CI) among primary school students in programming learning from the perspective of situated learning theory. This study conceptualized CT perspectives as a multidimensional construct that comprises (1) ability to connect, (2) ability to question, and (3) ability to express, and CI with four subcomponents including (1) programming affiliation, (2) programming engagement, (3) programming actualization, and (4) programming goal setting. Students who received at least 6-month programming training for computational thinking development were invited to participate in this study. Results of Confirmatory Factor Analysis (CFA) suggested that the CT perspectives instrument (n = 100) and CI instrument (n = 241) reached good fit and therefore were validated in the pilot study. In the main study, survey answers (N = 215) including CT perspectives and CI were collected. Results of Structural Equation Modeling (SEM) showed positive relationships between CT perspectives and CI formation among primary school students. Mediation results further revealed that ability to question can foster CI formation through ability to express, while ability to connect can directly foster CI formation. Implications were discussed at the end of the study.;2020
This study aimed to investigate the relationships among computational thinking (CT) skills, science, technology, engineering and mathematics (STEM) attitude, and thinking styles with the help of structural equation modeling and to determine to what extent the variables of STEM attitude and thinking styles explained CT skills. The study, conducted with relational screening model, included 703 secondary school students. STEM attitude scale, thinking styles scale, and computational thinking scale were used as data collection tools. The data were analyzed by structural equation modeling. Based on the study results, it was concluded that the proposed model was valid and STEM attitude and thinking styles had a significant effect on CT skills. It was found that STEM attitude and thinking styles together explained 43% of CT skills.;2020
This study aims to analyze how pre-service informatics teachers design learning scenarios with robotics to teach programming fundamentals and to promote computational thinking skills. A descriptive and exploratory case study design was implemented with 26 pre-service informatics teachers. Data were collected from the participants using qualitative and quantitative instruments. The main results pointed out the affordances and possibilities of the use of learning scenarios with robotics to teach programming fundamentals and to promote computational thinking skills as well as a strong path to promote the application of contents of the other Science, Technology, Engineering, Arts and Mathematics (STEAM) areas. Another significant finding was the impact of the didactic experience on the level of interest and self-confidence of the pre-service teachers in using robotics for teaching purposes. The results showed the importance of these didactics experiences to the pre-service teachers preparation and to apply the pedagogic approaches they have learned in theory in practical activities and to transfer this knowledge to new pedagogical situations and problems.;2020
This study aims to investigate problem-solving with dataset (PSWD) as a computational thinking learning implementation as reflected in academic publications. Specifically, the purpose is to specify the scope of PSWD, which overlaps with the data literacy, thinking with data, big data literacy, and data-based thinking concepts in the literature. Subaims of the study are to identify the conceptual structure of PSWD based on definitions in academic publications and to classify the reasons given in the literature to show the need for PSWD. For the purposes to investigate PSWD conceptually, to classify the reasons given for the need for PSWD, the obtained 54 publications were analyzed via content analysis. Moreover, this study investigates the most frequently suggested or used teaching strategies (in terms of instructional methods, instructional tools, and grade level) for PSWD in the literature. The frequencies of used words in selected publications referring instructional methods, instructional tools, and grade levels were shown in the findings of study. The importance of the study stems from its focus on a new approach to computational thinking instructional implementation.;2020
This study attempted to carry out interdisciplinary learning activities which integrate computational thinking into language learning. The participants were 56 5th-grade Chinese as a Second Language (CSL) students in Singapore. The students were required to learn the ability to apply conditional complex sentences in Chinese language and learn the conditional structural logic through coding educational robots to interact with each other in Chinese. The results showed that the students improved significantly in the linguistic knowledge. Furthermore, the computer programming self-efficacy of the students has also promoted significantly in terms of logical thinking, control and debugging. The students had also shown a high level of learning engagement, low anxiety and a high intention in the robot coding activity. This study presented the empirical results of this cross-domain integration of educational robots and language learning, providing a reference and teaching practices for future teachers.;2020
This study compared the pedagogical effects of educational robot development and the block based programming perspectives, which are used in programming education, on middle school students. Its participants were 78 sixth graders. Considering the students' preferences, 38 students were assigned to the experimental group, which studied with robotics (Lego EV3) sets, and 40 students were assigned to the control group, which studied with block-based programming environment (Scratch). All the topics of the programming unit, which are shown in the methods section, were taught to both groups for 10 weeks using the two different approaches. The change created by the implementation between the groups was tested for academic achievement, computational thinking skill efficacy perceptions, and conceptual knowledge levels. The results indicate that educational robotics develop middle school students' academic achievement and computational thinking skill efficacy perceptions more effectively than block-based programming environments. The connections between the concepts of the students who did robotics were also found to be more solid than those who worked with block-based software.;2020
This study evaluates the effectiveness of visual block programming-based instruction and its possibilities in the training of future teachers. In particular, the application Scratch, a visual programming environment, was employed to introduce pre-service teachers to programming. The study followed a mixed-method design with a sample of 79 pre-service teachers. A quantitative approach was used to evaluate the gains in the participants' knowledge of computational concepts and attitudes towards Scratch as a pedagogic tool. A qualitative analysis aimed at evaluating the participants' knowledge concerning programming applications, and their perception about possible difficulties in the implementation of programming in educational contexts. Positive results were obtained for programming in the classroom, with significant improvements in innovation, collaboration, active learning, motivation, and fun for the students. After the experiment, the subjects highlighted Scratch as a fundamental block programming tool and the need for teacher training in this field. The need to improve the implementation of visual block programming in Education Degree curricula is supported.;2020
This study examines group robotics' impacts on elementary students' attitudes toward music, attitudes toward group work, and music composition when they are composing music via a robotics platform in collaborative and cooperative groups. One hundred ninety-one students in fourth and fifth grades completed the music composing project over the course of fourteen weeks for one hour each week. Results indicated that collaborative and cooperative group activities did not result in any significant differences in the Attitude toward Music. In the Attitude toward Group Work, collaboration and cooperation in group activities did not result in any differences while cooperation resulted in a higher score. Lastly, the collaborative group showed a higher score in the Music Composition. The results indicate that student benefits can be supported with different structures of group work, collaboration or cooperation. Further discussions and suggestions were made.;2020
This study explored how educational robotics (ER) was implemented in classrooms to foster creativity among elementary school students and identified challenges associated with its implementation. Twenty-six teachers at different elementary schools were interviewed. In-depth teacher interviews and grounded theory were used to collect and analyze the interviews. We found that the intended creative learning outcome for students was mastery of the developmental process of creativity. The teachers generally reported using a four-phase instructional framework consisting of eight sub-phases and targeted teaching strategies to support students' learning outcomes. Challenges included insufficient appropriate learning materials, a lack of expansive learning activities and tasks and limited opportunities to engage students in the process of design thinking and developing metacognitive abilities. The findings have practical implications for teachers and researchers who are interested in developing pedagogical practices (PP) incorporating ER to support students' creativity. The study also has theoretical value, offering insights into teachers' PP in implementing ER.;2020
This study explores situated practices of game design critique in a Swedish 4th grade classroom. The analyses are based on video recordings of peer feedback activities within the context of a project on computational thinking using the software Scratch. Drawing on ethnomethodology and conversation analysis, the interactional and collaborative accomplishment of design critique is examined, focusing on how the participants make relevant norms and values concerning what constitutes a 'good' game. The results of the study show that the children and their teacher orient to different themes that concern aesthetic, functional, and ethical aspects of the games and the design process, at the same time as a moral order in and for the conduct of critique is accomplished in interaction. The study sheds light on the emergence of a local culture of critique as the children learn to formulate and respond to peer feedback, thus negotiating and developing digital literacy.;2020
"This study extensively reviews the literature on teaching programming to middle schoolers, with a qualitative content analysis method, and intends to put forth a research design framework for researchers that will guide them in the processes of planning and designing their research on teaching programming for middle school learners. For access to the relevant literature; the databases were searched by using the following keywords: computer,programming, and middle school together, limiting the findings to the articles published after 2000. As a result, an upward tendency was noted in studies about the teaching of programming at secondary level considering years, most of which are comprised of empirical ones. Also, the existing studies were mostly carried out with 6th graders predominantly employing data collection tools of questionnaires/scales and achievement tests. As for programming tools, Scratch was seen to be the most commonly used one. Although quite a few articles are investigating the context of the programming teaching lesson, some of the studies were found to use programming as a means of teaching mathematics, natural sciences, languages, writing skills, and social sciences. In conclusion, the present study is expected to pave the way for future research by highlighting the overall situation of programming teaching";2020
This study investigated the outcome of project-based, airplane design activities on promoting computational thinking (CT) in sixth grade students in the context of an integrated STEM learning environment. A curriculum unit of airplane design activities was implemented in a sixth grade classroom over 10 days. The students' CT skills measured by the Bebras Challenges were significantly improved after their completion of the airplane design curriculum unit.;2020
This study investigated the role of using unplugged computing activities on developing computational thinking (CT) skills of 6th-grade students. The unplugged computing classroom activities were based on the Bebras challenge, an international contest that aims to promote CT and informatics among school students of all ages. Participants of the study were fifty-three 6th-grade students from two public middle schools in Istanbul. The unplugged computing activities involved the tasks with three different difficulty levels covering the CT processes found to be common in CT definitions in the literature. To evaluate students' CT skills, two equivalent tests were constructed from Bebras tasks considering the same parameters (difficulty levels and CT processes). The results showed that students' post-test scores were significantly higher than their pre-test scores. There were not any significant differences between students' scores in terms of gender, and there was no interaction effect between students' CT scores and their gender.;2020
This study investigated young children's computational thinking (CT) development by integrating ScratchJr into a programming curriculum. Twelve third graders (six males and six females) voluntarily participated in an experiment-based computer class conducted at a public elementary school in Taiwan. This study adopted a case study methodology to investigate research questions in one specific case (8-week CT educational training). A one-group quasi-experimental pretest and posttest design with the support of qualitative observation was used to examine four research topics: CT competence progress, programming behaviors in a CT framework, factors influencing CT competence, and learning responses to CT training. The quantitative results indicated that students immersing in weekly programming projects significantly improved in terms of their CT competence, which was mostly retained 1 month after completion of the class. The programming behaviors indicated that students' CT concepts (sequence, event, and parallelism) and practice (testing and debugging as well as reusing and remixing) significantly improved. Moreover, parents' active involvement in take-home assignments influenced students' long-term CT competence retention. The qualitative results indicated that students enjoyed using tablet computers to learn ScratchJr programming and demonstrated various leaning behaviors in a three-stage instructional design model.;2020
"This study is a descriptive research conducted with the purpose of identifying the computational thinking abilities of 103 secondary school students at the ages of 13 and 14. The research data were collected using a questionnaire form which consisted of two sections, namely personal information form and Computational Thinking Skills (CTS) scale. Statistical analysis of research data; frequency analysis, definitive statistics, Shapiro-Wilk test, Mann-Whitney U test, Kruskal-Walls test and Spearman correlation analysis were conducted. At the end of the study it was found out that more than half of the students (52.43%) favored mathematics and natural science courses, that the algorithmic thinking abilities of this group were higher, that students without siblings solved problems better and that there is statistically significant and positive correlation between the scores obtained from all dimensions in the computational thinking skills.";2020
This study proposes and tests a model that explains STEM awareness of pre-service teachers by examining computational thinking skills, media and technology use and attitudes, and demographic variables including gender, high school type and parent educational background. A total of 337 participants who enrolled in education faculties at three state universities in different regions of Turkey participated in the study. STEM Awareness Scale, Computational Thinking Skills Scale, Media and Technology Use and Attitudes Scale and demographic information forms were used as data collection instruments. The data were analyzed through statistical tests including structural equation modelling. Fit indices of the established model were within an acceptable range. Analysis demonstrated a positive relation amongst computational thinking and media and technology use and attitudes and STEM awareness. In addition, results of structural equation modeling revealed that these factors were significant predictors of STEM awareness. Similarly, the study found that STEM awareness was significantly predicted by some demographic variables such as majors, age, and mother's educational background. Recommendations for educationalists and policymakers are proposed.;2020
This study utilized unplugged computational thinking learning material named Robot City as the instructional material. The board game corresponds to structural programming, including sequential structure, conditional structure, repetitive structure, and the modeling concept of calling a procedure in programming languages. According to the different task assignment methods, the aim of playing the board game is to help instruct the seventh-grade students in computational thinking, and to explore its impact on students' learning achievements of computational thinking and the behavioral patterns of computational participation. The results revealed that the learning achievements of the students who worked together to solve the clear-ended task objectives were significantly higher than those of the students who cooperated within their groups to solve the open-ended competitive tasks. When the target task is not gained in advance, the students had to compete with other groups and vie for their target task, resulting in students' logical thinking constantly changing and being interrupted. From the behavioral pattern analysis, it was found that the students continued to discuss the problems during the game. The pattern of collaborative analysis was iterative itself, indicating that the board game can deepen students' interaction and enhance their higher level thinking. The results also showed that collaborative creation was observed (RO) by others, proving that the game can increase students' desire to learn, and thus improve their learning achievement.;2020
This thesis study is an evaluation tool that measures the user's Computational Thinking (CT) according to its performance on Block-Based Programming Languages (BBPL) by using Machine Learning Techniques. The evaluation tool makes an evaluation for Machine Learning Model and each of the Computational Thinking seven fields. Via this developed tool, the objective is to product an alternative to the limited evaluation tools on Block-Based Programming Languages. Literature research was brought out in two sides as Machine Learning and Block-Based Programming Languages. In the first stage, on Machine Learning, the data set and the methods used in educational field were researched. In the second stage, the devices which are used to measure the performance on Block- Based Programming Languages were analyzed. On literature, there are various sources for teaching Computational Thinking,but it occurs that measuring instruments that evaluates Computational Thinking are inadequate. To evaluate Computational Thinking a machine learning model was trained. Trained model was turned into online evaluation tool by which both the tutors and the students evaluate Computational Thinking easily. In the final stage, the developed online evaluation tool and the outcome was analyzed.;2020
This work describes and presents the status of a proposal that seeks to enhance the STEM curriculum in engineering students, through the development of a curriculum and course based on the construction of BEAM robots. BEAM robotics is about biomorphic robots, controlled by a simple analog computer that aims for the autonomy and self-preservation of the robot, and which is independent of the human once running. Given these principles, the course is intended to use, as a didactic resource, the construction of these robots with the aim of supporting a teaching-learning process of technical competences, such as: biology, mechanics, electronics, control systems, artificial intelligence, mathematics and sequential or algorithmic processes. In addition, another criterion of BEAM robotics is the use for its construction of elements recovered from discarded electrical and electronic equipment or WEEE (Waste electric and electronic equipment) with the aim of building low-cost robots. The proposal is in its first phase, currently developing the curriculum, the logistics for the course and the tools to evaluate the hypothesis of the proposal. With this proposal, it is expected to have a low-cost and entertaining course for learning robotics that enhances the STEM curriculum, and that can be implemented, not only in higher education institutions, but also in schools in the country.;2020
This work in progress paper in the research-to-practice category focuses on high school students planning to enter a new learning environment for transition. Prospective students benefit from structured programming that considers two factors. First, the college knowledge required to navigate day-to-day logistics including new living arrangements, supporting physical & mental health, and funding the experience. Second, STEM curricula and challenges students from extremely rural communities face in identifying with these rigorous programs. The work of influential researchers in student transition and retention along with contextual findings from a large, rural state in the Rocky Mountain region informed the redesign of an engineering college's outreach program. This paper has two purposes. First, it details how established theories combined with research findings and assessment can create robust models to support keeping recruitment programs relevant. Second, it provides an example of how a model was developed and then used to redesign and assess an outreach program using college peer mentors to support high school-aged students interested in engineering and computing disciplines.;2020
This work presents a free software tool that facilitates the teaching of basic robotics and programming concepts at any educational institution. At the same time, it allows the development of computational thinking skills to be carried out: decomposition, abstraction, pattern recognition and algorithmic thinking This tool allows the design and configuration of a robot through the specification of different types of sensors. After designing the robot, its behaviour can be simulated by means of different challenges proposed to the user. This behaviour is defined through a block-based visual programming language. Blocks allow actions that the robot has to perform based on the information gathered by the different sensors to be defined in order to pass a challenge.;2020
To better understand students' computational thinking skills (CTS) within the context of flipped-classroom instruction, a structural equation modeling analysis is employed to examine the key factors that influence student learning and students' CTS when learning through flipped-classroom instruction. A total of 406 first-year college students responded to the survey. The results of this study show that student-to-student connectedness, learning motivation, and learning strategy have a direct impact on students' CTS. In addition, indirect effects were found between student-to-student connectedness and CTS through learning motivation. Indirect effects were also found between learning motivation and CTS through the learning strategy in a flipped-classroom instruction situation. The findings of this research have practical implications for instructors, in that they should focus on the key factors that predict students' computational thinking skills.;2020
"Today & x2019;s digital society has turned the development of students & x2019; computational thinking capabilities into a critical factor for their future success. As higher education institutions, we need to take responsibility for this development in every degree course we offer, and provide students with the kind of subjects and activities that best contribute to this aim. In this paper, we study the impact of following an introductory programming course on the development of the computational thinking capabilities of university students. In order to achieve this aim, a concurrent cohort observational study was carried out in which we measured both the subjective and objective computational thinking capabilities of 104 participants (50 first year students enrolled on a Bachelor & x2019;s degree course in Psychology at the Catholic University of Murcia (UCAM), and 54 first year students enrolled on a Bachelor & x2019;s degree course in Health Information Systems at the University of Alicante (UA)). The statistical procedures applied to test our hypotheses were a two-way mixed ANOVA, a paired-sample T-test and an independent-sample T-test. The data shows that the group at UA had an initial higher subjective perception of their computational capabilities than the group at UCAM. This perception was supported by their objective scores, which were also significantly higher. However, the subjective assessment of computational capability of the UA group diminished after exposure to the programming course, contrasting with the fact that their objective computational capabilities improved significantly. In the UCAM group, both subjective and objective capabilities remained constant over time. Based on these results, we can conclude that computational thinking capabilities are not developed naturally, but need to be trained. Providing such training to all our students, and not only to those enrolled on undergraduate degrees in engineering, is of paramount importance to allow them to face the challenges of their future professions. This paper empirically demonstrates the extent to which exposing subjects to a programming course may contribute to this aim.";2020
Today's technological development inevitably defies educational approaches in terms of future demand for skills to be imparted. Among other skills, the capacity to operate and communicate effectively within multidisciplinary realms is duly considered as the fundamental one. Educational robotics (ER) and STEM do constitute a suitable framework for the development of these specific skills. Moreover, competences such as computational (CT) and design thinking (DT) have already been nominated as necessary to adapt to the future and relevant for innovation. The years of independent development and evidence of practical implementation justify the maturity of the related methodological approaches and emerging gradual shift towards their combination. In this regard, the actual work presents a pilot experience of the combined application of computational design thinking and educational robotics in the case of a 9-to-11-year-old target audience. The approach utilizes a novel platform developed under the project Coding4Girls combining design thinking and game-based learning and introduces physical computing through consecutive assembling and programming an IR-controlled robot-car. The core of the learning path consists in the development of primary programming skills and their gradual transfer into the physical realm. The method, as the study demonstrates, is capable of helping keep students both motivated and result-oriented throughout the duration of the course.;2020
Treatment planning is the process where the prescription of the radiation oncologist is translated into a deliverable treatment. With the complexity of contemporary radiotherapy, treatment planning cannot be performed without a computerized treatment planning system. Proton therapy (PT) enables highly conformal treatment plans with a minimum of dose to tissues outside the target volume, but to obtain the most optimal plan for the treatment, there are a multitude of parameters that need to be addressed. In this review areas of ongoing improvements and research in the field of PT treatment planning are identified and discussed. The main focus is on issues of immediate clinical and practical relevance to the PT community highlighting the needs for the near future but also in a longer perspective. We anticipate that the manual tasks performed by treatment planners in the future will involve a high degree of computational thinking, as many issues can be solved much better by e.g. scripting. More accurate and faster dose calculation algorithms are needed, automation for contouring and planning is required and practical tools to handle the variable biological efficiency in PT is urgently demanded just to mention a few of the expected improvements over the coming 10 years.;2020
University students enroling in Science, Technology, Engineering and Mathematics (STEM)-related studies such as computer science continue to decline, even though worldwide educational policy reports warn about the need for this type of professionals in the immediate future. Promoting computer science studies among preuniversity students seems the most direct solution to reverse this issue. In this context, we present theSucre4Kidsproject whose main objectives are to engage young people into computational thinking and programming concepts using tangible elements and social interaction. We apply theSucre4Kidsapproach to introductory courses of computational thinking and programming concepts to high-school students. The main results of the 3-year intervention in the classroom with 256 high-school students reached suggest that tangible elements and social interaction in groups are determining factors in increasing students' motivation to learn to code and to raise their interest in STEM disciplines.;2020
Using an example of a grade 3 science unit about population changes during competition for resources, we describe how we integrated computational thinking (CT) into existing curriculum identifying three levels of depth of integration: identifying connections that already exist, enhancing and strengthening connections, and extending units to include activities that more explicitly develop students' CT. We discuss students' understanding of the relationship between a simple model of an ecosystem and the actual phenomenon it represents, their engagement with the unit's data-gathering and data analysis activities, their ability to engage in sense-making regarding data they generated and analyzed, and how collectively the study supports their understanding of the complex system. This example module is part of Broadening Participation of Elementary School Teachers and Students in Computer Science through STEM Integration and Statewide Collaboration, a National Science Foundation-funded collaboration among Massachusetts teacher educators, researchers, teachers, and state-level education administrators that developed and implemented a number of elementary grade, CT-integrated science and mathematics curriculum modules. Collectively, these modules are designed to develop practices related to several key CT topics: abstraction, data, modeling and simulation, and algorithms. These CT topics support the development of core skills related to, but not exclusively the domain of, computer science. The strategy of integrating CT into core elementary STEM subject areas was intended to cultivate CT practices in support of science learning.;2020
Visual block programming environments can be defined as those programming environments that rely on objects rather than words to code the program. These types of environments are characterized by facilitating the task of the people who carry out the programs. This is mainly since they are more visually friendly. In addition, with this type of environment the person who makes the programs will not get the famous syntactic errors that characterize the programming tasks with textual programming languages. Along this paper, a set of tools commonly used in educational robotics are showed. Furthermore, a deep analysis in two of these tools are detailed. Additionally, some educational scenarios are detailed, as long as their relationship to students' competencies and how to drive the scenarios in order to accomplish with the competencies. Finally, a study of the results from experience is included.;2020
We propose computational empowerment as an approach and a Participatory Design (PD) response to challenges related to the emerging need for digital literacy in lower secondary education. Our approach extends the current focus on computational thinking to include a concern for how children and youth are empowered through constructive, analytical and critical engagement with technology. We argue that PD has the potential to drive a computational empowerment agenda in education by connecting political PD with contemporary visions for addressing a future digitised labour market and society. We provide a model for understanding and engaging with computational empowerment and report on the emergence of the computational empowerment agenda in a Danish context and how this agenda is reflected in the newly developed curriculum for a course on technology comprehension running on trial basis in 46 schools across Denmark.;2020
We propose the first steps towards a rigorous analysis of the effectiveness of an emerging pedagogy, Computational Thinking. We found that two aspects of the pedagogy have a positive effect with regard to enhancing two cognitive processes, namely sequential thinking and in abstract thinking. Our data was gathered experimentally with a cohort of mixed-ability undergraduate students enrolled on three distinct courses. The study employed a mixed 2 x 2 factorial design with type of classroom intervention, measurements were taken at baseline and following delivery of computational thinking methodologies designed to focus on specific components of the pedagogy. The dependent variable was percentage improvement from baseline, and the analyses were conducted using 2 x 2 mixed ANOVA, an alpha criterion of p < .05 was adopted for all analyses. The specific components investigated were algorithmic thinking and abstraction, and we found a positive correlation between enhancements of sequentiality and abstract thinking.;2020
"We proposed to investigate whether properly calibrated e-learning environments can efficiently promote computational thinking of both sciences- and humanities-oriented people. We invited two groups of students (sciences- vs. humanities-oriented members) to participate in a six-stage learning session: to watch a folk-dance illustration (s1) and an animation (s2) of the bubble-sort algorithm; to reconstruct the algorithm on the same input (s3); to orchestrate the algorithm on a random input stored in a white(s4)/black(s5) array (visible/invisible sequence) and to watch a parallel simulation of several sorting algorithms as they work side-by-side on different color-scale bars (s6). To assess the current motivation of students we created nine specific questionnaires (Q1-9). The experiment we conducted included the following task sequence: Q1-2, s1, Q3, s2, Q4, s3, Q5, s4, Q6, s5, Q7, s6, Q8-9. We focused on assessing the motivational contributions of the generated (situational factors) emotions, challenge and active involvement during the e-learning experience. Research results revealed that there are no unbridgeable differences in the way these two groups relate to e-learning processes that aim to promote computational thinking. Although sciences-oriented students' motivational-scores were consistently superior to their humanities-oriented colleagues, there was strong correlation between them; furthermore, differences diminished as both groups advanced with their learning tasks.";2020
Which level of computational thinking (CT) skills is required to perform a BBC micro:bit external sensor experiment? The single-board computer BBC micro:bit combined with block-based programming (aka visual coding) is strongly connected to computational thinking and basic digital education in secondary schools. When teaching, each experiment has different goals with different theoretical background and various ways to an acceptable solution. Although the CT tasks involved in solving the experiment are easily categorized in well-agreed areas of CT, a distinction between difficulty levels is still not clearly visible at first sight. Moreover, an experiment can be found on more than one area of CT maybe even all? Where and how can the various levels of difficulty be found that are possibly hidden in every experiment? To answer these questions, the author thoroughly examines some sensor experiments and categorizes the tasks according to the quadrants of computational thinking (decomposition, patterns, abstraction and algorithmic thinking). A detailed description of the individual steps in preparation and solution of the experiments and the underlying task competencies used will lead to a simple classification and scoring system for CT levels. Furthermore, the classification system will try to explain the different levels of proficiency in each quadrant of CT and establish a link to selected examples of the Bebras Challenge for Computer Science (CS) and CT. At the end, the author proposes the outcome as a new and simple way to look at computational thinking tasks in different experiments to determine and compare which levels of CT skills are required for solving its problems.;2020
While Computational thinking (CT) has been adopted in various educational settings, it has not been fully utilized in entrepreneurship education. In particular, technology entrepreneurship education involves project-based learning for creating business value. To help students improve learning outcomes, we propose a new framework of entrepreneurship education that combines business model development and CT. We applied this framework to a capstone course for social innovation, in which undergraduate students were asked to define a social problem, develop a solution, and finally implement the appropriate products and services using Arduino, Raspberry Pi, sensors, and actuators. To evaluate the students' learning outcomes, we conducted a survey and an interview after the course had finished. The results demonstrate that the students acquired various skills, including technical and implementation skills, and that their awareness of the broad applicability of computing increased. It was also determined that students' self-efficacy in terms of their software development abilities increased as a result of the course. We discuss the benefits of the various strategies used in the design and implementation of the course and issues that need to be discussed further. Finally, we provide guidelines for designing and implementing CT-based project courses.;2020
While computational thinking (CT) has been identified as one of the fundamental 21st century skills that can be applied to different domains, school students usually show negative attitude toward learning CT. Educational games have been applied by several researchers to address related issues faced for promoting CT. Even though such games have shown some success in promoting CT, they fall short when it comes to acquisition of CT skills (they rather promote abstract and conceptual knowledge) and offering adaptivity to each player. To address these issues and improve the existing games, we developed an adaptive game called AutoThinking for teaching both CT concepts and skills, engaging students with individually tailored gameplay and learning. We conducted a qualitative study aimed at understanding the cognitive and affective experiences of Estonian primary school children. The findings showed that AutoThinking is making children feel challenged, happy, and confident, while activating their thinking process during the gameplay. All children perceived the game positively and found it to be a good tool for learning.;2020
"While computing has become an important part of the statistics field, course offerings are still influenced by a legacy of mathematically centric thinking. Due to this legacy, Bayesian ideas are not required for undergraduate degrees and have largely been taught at the graduate level; however, with recent advances in software and emphasis on computational thinking, Bayesian ideas are more accessible. Statistics curricula need to continue to evolve and students at all levels should be taught Bayesian thinking. This article advocates for adding Bayesian ideas for three groups of students: intro-statistics students, undergraduate statistics majors, and graduate student scientists; and furthermore, provides guidance and materials for creating Bayesian-themed courses for these audiences. Supplementary files for this article are available on line.";2020
While much has been written about the personal, social, and democratic benefits of networked communities and participatory learning, critics have begun to draw attention to the ubiquitous data collection and computational processes behind mass user platforms. Personal and behavioral data have become valuable material for statistical and machine learning techniques that have the potential to profile, infer, and predict people's needs, values, and behavior. As a response, researchers are calling for data literacies and computational thinking to facilitate people's capacity and volition to make informed actions in their digital world. Yet, efforts and curricula towards a greater understanding of computational mechanisms of new media ecology are sorely missing from K12-education as well as from teacher education. This paper provides an overview of tensions that teachers and educators will face when they attempt to bridge participatory learning with a more robust understanding of machine learning and algorithmic production of social and cultural practices.;2020
Whilst there has been growing interest in the use of social robots in educational settings, the majority of this research focuses on learning outcomes, with less emphasis on the social processes surrounding these interactions. One such understudied factor is children's trust in the robot as a teacher. Trust is a relevant domain in that if and how children trust a robot could influence their subsequent learning outcomes. The extent to which the robot's behaviour (including making errors) influences trust is yet to be fully explored. Consequently, the goal of this research is to determine the role of trust in children's learning from social robots. We report a pilot study investigating the conceptualisation and measurement of children's trust in robots. 33 children aged between 4-9 completed a computational thinking learning task with a NAO robot at a Science Festival. Observations of the interactions in terms of developing tasks and measurements for child robot interaction are discussed. The findings tentatively suggest children's trust in the robot can be divided into two parts: social affiliation towards the robot, and perceived competence/reliability of the robot.;2020
With the aim of fostering innovation culture and entrepreneurship through directed ideation, a co-techno-creative competition was held for 1,000 senior high school students, as part of the 2018 Epicentro Innovation Festival in Jalisco, Mexico. The competition objectives were aligned with the United Nations' Sustainable Development Goals, whose methodology was based on evoking practical and innovative solutions to the local problems of the eight strategic sectors of the state. The prototyping activity was characterized by the inclusion of programmable microcontrollers, sensors, and actuators, which fosters the development of 21st century competencies such as creativity, collaboration, critical thinking, computational thinking, and problem solving. The participant follow-up, using a digital platform, was set for a year. The logistical scheme developed by the Ministry of Innovation, Science and Technology (SICyT) in collaboration with the Universidad de Guadalajara, and the research design jointly proposed by three universities, in Mexico, Canada, and France, are also presented.;2020
With the aim of fostering innovation culture and entrepreneurship through directed ideation, a co-techno-creative competition was held for 1,000 senior high school students, as part of the 2018 Epicentro Innovation Festival in Jalisco, Mexico. The competition objectives were aligned with the United Nations' Sustainable Development Goals, whose methodology was based on evoking practical and innovative solutions to the local problems of the eight strategic sectors of the state. The prototyping activity was characterized by the inclusion of programmable microcontrollers, sensors, and actuators, which fosters the development of 21st century competencies such as creativity, collaboration, critical thinking, computational thinking, and problem solving. The participant follow-up, using a digital platform, was set for a year. The logistical scheme developed by the Ministry of Innovation, Science and Technology (SICyT) in collaboration with the Universidad de Guadalajara, and the research design jointly proposed by three universities, in Mexico, Canada, and France, are also presented.;2020
With the development of digital technologies, teaching computational thinking and relative skills in the K-12 curriculum can benefit students in thinking and create in the digital area. This study designed a programming course to help students develop computational thinking and relative skills, and conducted a practice in a primary school. Results indicated that students were benefited from three stages of the teaching process. Students' computational thinking knowledge, programming knowledge and skills, and problem-solving were developed after the learning of a semester. The programming works of the students also revealed that there was a tendency in the development of creativity.;2020
With the increasing attention to Computational Thinking (CT) in education, there has been a concomitant rise of needs and interest in investigating how to assess CT skills. This study systematically reviewed how CT has been assessed in the literature. We reviewed 96 journal articles to analyze specific CT assessments from four perspectives: educational context, assessment construct, assessment type, and reliability and validity evidence. Our review results indicate that (a) more CT assessments are needed for high school, college students, and teacher professional development programs, (b) most CT assessments focus on students' programming or computing skills, (c) traditional tests and performance assessments are often used to assess CT skills, and surveys are used to measure students' CT dispositions, and (d) more reliability and validity evidence needs to be collected and reported in future studies. This review identifies current research gaps and future directions to conceptualize and assess CT skills, and the findings are expected to be beneficial for researchers, curriculum designers, and instructors.;2020
With the introduction of computer programming in schools around the world, a myriad of guides are being published to support educators who are teaching this subject, often for the first time. Most of these books offer a learning path based on the experience of the experts who author them. In this paper we propose and investigate an alternative way of determining the most suitable learning paths by analyzing projects developed by learners hosted in public repositories. Therefore, we downloaded 250 projects of different types from the Scratch online platform, and identified the differences and clustered them based on a quantitative measure, the computational thinking score provided by Dr. Scratch. We then triangulated the results by qualitatively studying in detail the source code of the prototypical projects to explain the progression required to move from one cluster to the next one. The result is a data-driven itinerary that can support teachers and policy makers in the creation of a curriculum for learning to program. Aiming to generalize this approach, we discuss a potential recommender tool, populated with data from public repositories, to allow educators and learners creating their own learning paths, contributing thus to a personalized learning connected with students' interests.;2020
With the swift development of technology in recent years, entrepreneurs are facing rapid changes in industry. To cope with such changes at home and abroad, The Ministry of Education is actively promoting innovative education with the aim of cultivating students' entrepreneurship. On this basis, this study proposes an innovative curriculum design based on an Internet-of-Things (IoT) programming course. The reason is that it develops computational thinking skills while students are learning programming and also cultivates logical thinking skills and problem-solving skills, which are critical to entrepreneurship. We also design a number of learning activities that enable students to express their opinions and ideas while gaining more knowledge through peer interaction and discussion. Overall, this study explores the impact of maker education on students' attitudes toward computer thinking. The results indicate that maker education has a positive impact on their ability to learn computer skills. In terms of learning motivation, students are not motivated by maker education and reduce their confidence on the curriculum. The reason may be that the curriculum requires the acquisition of software and hardware skills, which will increase the student's learning burden, so they more likely to encounter learning disabilities.;2020
Within the educational change literature and commentaries on the needs and requirements of preparing students for life in the present century, computational thinking has been championed as a new way of studying computing. However, the resulting narratives are neither detailed nor compelling enough in our view to stimulate and inform general educational development and the specific pedagogical innovation required to enact computational thinking across multiple disciplines. The premise of this article is that computational thinking is something people do, not computers. We begin with explanations of computational thinking. We then exemplify the promotion of computational thinking in global educational contexts. For the effective implementation of computational thinking in interdisciplinary learning scenarios, to form linkages between subject-based domains where other ideologies have met with limited success, we discuss the critical complementary requirements of task design and pedagogy.;2020
A common belief among students is that computing is a boring subject that lacks a connection to the real world. The first class (one 80-minute session) in an introductory computer science course may be an appropriate instance to combat such a belief. Previous studies have used coursewide interventions, e.g., games and physical/tangible devices to improve students' motivation. However, although other approaches help motivate students, they may lack real-world context or have a high cost of deployment. This article proposes a novel real-world based approach to introduce programming concepts in the first class of the introductory computer science course. This approach, called Protobject based, is applicable to courses with over 100 students, has a low deployment entry barrier, requires low investment, and may be used creatively to implement different experiences. Furthermore, the Protobject-based approach has an equivalent motivational effect-at least in the short-term-to a Game-based approach even if it is entirely focused on the real world. The low requirements of the approach make it especially suitable for an 80-minute first class in an introductory computer science course. The Protobject-based approach has been preliminarily validated and compared to a pure game-based approach with a study with 376 participants, and we present the analysis of motivation questionnaires, a pre-test and post-test, and a homework assignment given to the students. We posit that more research into initiatives such as this one-that can show students how computer science can impact the real world around them-is warranted.;2021
Although socializing is a powerful driver of youth engagement online, platforms struggle to (leverage) social (engagement) to promote learning. We seek to understand this dynamic using a multi-stage analysis of over 14,000 comments on Scratch, an online platform designed to support learning about programming. First, we inductively develop the concept of participatory debugging-a practice in which users learn through the process of collaborative technical troubleshooting. Second, we use a content analysis to establish how common the practice is on Scratch. Third, we conduct a qualitative analysis of user activity over time and identify three factors that serve as social antecedents of participatory debugging: (1) sustained community, (2) identifiable problems, and (3) what we call topic porousness to describe conversations that are able to span multiple topics. We integrate these findings in a framework that highlights a productive tension between the desire to promote learning and the interest-driven sub-communities that drive user engagement in many new media environments.;2021
Although there are different definitions for computational thinking in the literature, it is possible to define it mainly as problem solving, designing and interpreting new systems by thinking like a computer. According to Wing (2006), computational thinking is a way of designing a system and understanding human behaviors by focusing on the basic concepts of the computer sciences. The recent focus on computational thinking as a key 21 st century skill for all students has led to a number of curriculum initiatives to embed it in K-12 classrooms and to introduce computing ideas to students early during their schooling years. The present study aims to explore the effects of a short, intensive coding and robotics training on the computational thinking skill self-efficacy of middle school students. 24 fifth graders participated in the study and data were collected by means of the Computational Thinking Self-efficacy scale (CTS) and one open-ended question. Analyses of the pre, post and delayed tests revealed significant differences between the pre and post-tests.;2021
Artificial intelligence (AI) is powerful, complex, ubiquitous, often opaque, sometimes invisible, and increasingly consequential in our everyday lives. Navigating the effects of AI as well as utilizing it in a responsible way requires a level of awareness, understanding, and skill that is not provided by current digital literacy or information literacy regimes. Algorithmic literacy addresses these gaps. In arguing for a role for libraries in algorithmic literacy, the authors provide a working definition, a pressing need, a pedagogical strategy, and two specific contributions that are unique to libraries.;2021
As a new era in computing emerges, so too must our fundamental thinking patterns.;2021
As computational thinking (CT) gains more attention in K-16 education, problem-solving has been more emphasized as a core competency that can be found across various domains. To develop an evaluation framework that reveals students' problem-solving competency, this study examined solutions for the Bebras Computing Challenge which requires students to utilize problem-solving skills in a CT domain. A total of 246 solutions of three Bebras tasks were analyzed based on a qualitative content analysis method and four levels of solutions were identified. The solution levels revealed how students (1) failed to understand a problem (No solution), (2) solved the problem but failed to identify the pattern (Premature level), (3) identified principles embedded in the problem but failed to apply them to devise an automized solution (Intermediate level), and (4) identified principles and solved the problem by applying them (Advanced level). This study presented solution levels across Bebras tasks and discussed how task difficulty affected student solutions differently. Implications for teaching problem-solving skills were discussed.;2021
As computational thinking (CT) has gained more attention as a research topic in the recent decade, a paper to identify trends and development in CT research would be timely and critical to understand the current research landscape and to guide future research endeavors. In this context, this study revealed the change in research trends in the field of CT in the last twelve years with the method of bibliometric mapping analysis. The relevant literature was searched in the SCOPUS database and 321 journal articles were identified. The VOSviewer software was used for analysis of the retrieved dataset. The findings of the study showed that (1) the research on computational thinking is an emerging area that has grown exponentially since the 2013s, (2) the literature in this area has been produced as a result of national and international collaboration of researchers in several institutions and countries, mostly in the United States, (3) the CT research is predominantly published in journals specializing in educational technology and feeds from information generated in education, computing, and social sciences, (4) research topics contributing to the CT literature are grouped under three themes: Integrating CT into Science, Technology, Engineering, and Math (STEM) education, experimental studies on assessing CT skills, and discussing on definition of CT and CT skills, and (5) the CT has the general nature of an emerging discipline that is not yet mature, and will continue to evolve in the future. Overall, this work provides the current state of the art in this field and a research direction for future research. It is hoped that this study will accelerate the research in the field, guide new studies and contribute to the development of the field.;2021
As Information and Communication Technology (ICT) literacy education has recently shifted to fostering computing thinking ability as well as ICT use, many countries are conducting research on national curriculum and evaluation. In this study, we measured Korean students' ICT literacy levels by using the national measurement tool that assesses abilities of the IT (Information Technology) area and the CT (Computational Thinking) area. A research team revised an existing ICT literacy assessment tool for the IT test and developed a new CT test environment in which students could perform actual coding through a web-based programming tool such as Scratch. Additionally, after assessing ICT literacy levels, differences in ICT literacy levels by gender and grade were analyzed to provide evidence for national education policies. Approximately 23,000 elementary and middle school students participated in the 2018 national assessment of ICT literacy, accounting for 1% of the national population of students. The findings demonstrated that female students had higher literacy levels in most sub-factors of IT and CT areas. Additionally, in the areas of strengths and weaknesses, the ratio of below-basic achievement among male students was at least two times greater than that of female students. Nonetheless, male students scored higher on CT automation, a coding item that involved problem solving using Scratch. Looking at the difference according to grade level, the level improved as the school year increased in elementary school, but there was no difference in middle school. When analyzing the detailed elements of middle school students, the automation factor of seventh grade students was found to be higher than eighth and ninth grade students. Based on these results, this study discussed some implications for ICT and computing education in elementary and middle schools.;2021
As society increasingly relies on digital technologies in many different aspects, those who lack relevant access and skills are lagging increasingly behind. Among the underserved groups disproportionately affected by the digital divide are women who are transitioning from incarceration and seeking to reenter the workforce outside the carceral system (women-in-transition). Women-in-transition rarely have been exposed to sound technology education, as they have generally been isolated from the digital environment while in incarceration. Furthermore, while women have become the fastest-growing segment of the incarcerated population in the United States in recent decades, prison education and reentry programs are still not well adjusted for them. Most programs are mainly designed for the dominant male population. Consequently, womenin-transition face significant post-incarceration challenges in accessing and using relevant digital technologies and thus have added difficulties in entering or reentering the workforce. Against this backdrop, our multi-disciplinary research team has conducted empirical research as part of technology education offered to women-in-transition in the Midwest. In this article, we report results from our interviews with 75 womenin-transition in the Midwest that were conducted to develop a tailored technology education program for the women. More than half of the participants in our study are women of color and face precarious housing and financial situations. Then, we discuss principles that we adopted in developing our education program for the marginalized women and participants' feedback on the program. Our team launched in-person sessions with women-in-reentry at public libraries in February 2020 and had to move the sessions online in March due to COVID-19. Our research-informed educational program is designed primarily to support the women in enhancing their knowledge and comfort with technology and nurturing computational thinking. Our study shows that low self-efficacy and mental health challenges, as well as lack of resources for technology access and use, are some of the major issues that need to be addressed in supporting technology learning among women-in-transition. This research offers scholarly and practical implications for computing education for women-in-transition and other marginalized populations.;2021
At present, the concept of computational thinking is spreading in education circles around the world. From the point of view of current research and application in China, the research on the cultivation of computational thinking in K-12 education is still in the early stage. Based on the graphic programming design course of app inventor in primary and secondary schools, this study embeds computing thinking into teaching objectives and contents, constructs the teaching model of app inventor course with embedded computing thinking, and discusses how to cultivate students' computing thinking ability in teaching practice. The method provided in this paper is helpful to analyse the changes of students' computational thinking during the teaching process, and it can effectively identify teaching effects.;2021
"Background & Context: We describe the rationale, design, and initial validation of computational thinking (CT) assessments to pair with curricular lessons that integrate fractions and CT. Objective: We used cognitive models of CT (learning trajectories; LTs) to design assessments and obtained evidence to support a validity argument Method: We used the LTs and evidence-centered design to develop assessments that 144 Grade 3 and Grade 4 elementary students completed following the integrated instruction. We analyzed data using multiple psychometric approaches. Findings: The design approach and data analysis suggest that the assessments are well-suited to evaluate students' CT knowledge, skills and abilities across multiple LTs. Implications: We show how to use LTs to design assessments that can yield valid inferences about students' CT competencies; these methods can be adopted and extended by others to create additional assessments that can advance computer science education.";2021
Background and Content Many children's books related to computer science have been published in the last five years, creating opportunities to integrate these texts into the classroom. Objective Determine where the children's books support an inclusive computing culture by representing people with diverse intersectional identities engaging in the computer science practices from the K-12 Computer Science Framework. Method We analyzed 45 picture books and graphic novels published between 2015 and 2019 targeted at K-8 students. We compiled evidence of the seven computer science practices and representation of diverse characters. Findings Three or four practices appear in 64% of the books. The characters that engage in computing in the books are 56% female and 38% people of color. The books offer few examples of nonfictional people of color engaged in computer science, with no representation of adult males of color.;2021
Background and Context: Although context-based teaching and learning has been investigated extensively in science education, little is known regarding the use of contexts for teaching CS in secondary education. Objective: The aim of this study was to examine the characteristics of contexts suitable for teaching algorithms and to investigate teachers' considerations regarding those contexts. Method: This study examines teachers' practices and reasoning concerning the use of contexts and is based on explorative, empirical research. Data were collected through semi-structured interviews with seven CS teachers and analyzed qualitatively. Findings: The results of this study reveal several characteristics of effective contexts for teaching algorithms and show teachers' ambitions to address the variation within the student population when selecting contexts that advance students' algorithmic thinking.;2021
Background and Context: Computational thinking (CT) is an essential skill for all youth to succeed in our technology and information-rich world. While CT has a growing presence within K-12 classrooms, libraries play an essential role in introducing these critical skills to all. Objective: Assessing learning in libraries is difficult given their informal nature. This is especially true when trying to assess a new and ill-defined construct like CT. A first step towards better supporting informal educators is to identify the motivations for bringing CT into informal spaces and to understand the current state of assessing CT in public libraries. Method: Thirty-seven interviews with library staff from across the United States were conducted and analyzed. Findings: This work reveals the variety of motivations justifying the inclusion of CT programming for youth in libraries, the challenges associated with assessing CT in libraries, and identifies the assessments library staff would like to be able to conduct for their own CT-related programming. Implications: This work advances our understanding of the current state of CT assessment in public libraries and lays the groundwork for future work seeking to meet the needs of those tasked with bringing CT to youth beyond the classroom.;2021
Background and Context: Computational thinking (CT) is considered as a valuable literacy for all students, and its inclusion in compulsory schooling could increase the numbers of underrepresented students who pursue computing-related careers. Computer Science Unplugged (CSU) had success in making computer science (CS) accessible to K-12 students in outreach settings. Such unplugged approaches have the potential to do the same in formal education. Objective This review considers how research findings on unplugged pedagogies might advance CS/CT education priorities, while highlighting areas of unknown and tension. Method We conducted a search in academic databases using terms +unplugged computer science and +unplugged CT, and related terms. Findings We synthesized our review with existing ones to inform the priorities of CS-for-all and CT development. We surfaced CSU's limitations to broaden access for underrepresented students and suggested a remedy. We proposed 10 research questions that fill key gaps to support efforts that providejustaccess to quality CS/CT education.;2021
Background and Context: Despite many initiatives to develop Computational Thinking (CT), not much is known about how early programmers develop CT and how we can assess their learning. Objective: Determine if the analysis of students' interactions with an online platform allows understanding the development of CT, how we can convert data collected into valuable insights, and the aspects that should be considered in platforms design. Method: We developed an online platform with a fine-grained log-recording system. We analysed the data collected from 1004 students (ages 8-14) to understand the difficulties they face. We explain our platform and the tools to process and filter the interaction logs. We calculate additional indicators that provide useful information about student's behaviour. Findings: Age and gender have shown to influence on CT learning. Generating additional indicators from basic interaction data provide valuable insights. We provide a list of recommendations for developing more effective programming learning platforms.;2021
Background and Context: In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. When programming is used as a vehicle to foster CT skills, assessment of CT skills needs to measure understanding of programming concepts alongside general problem-solving practices applicable in contexts beyond programming. Objective: In this paper, we discuss the development of and results from separate validated assessments of programming concepts and generic CT practices for 4(th)-6(th) grade students. Method: An Evidence-Centered Design approach was used for the development and validation of the assessments, that were used with 15,000 upper elementary students in Hong Kong. Findings: Results from assessment implementation indicate that the assessments worked as designed and reveal student challenges with CT concepts and practices. Implications: These results point to the utility of our assessment as a curricular tool and the need for emphasizing certain CT concepts and practices in future curricular initiatives and teacher professional development.;2021
Background and Context: There is a need for early childhood assessments of computational thinking (CT). However, there is not consensus on a guiding framework, definition, or set of proxies in which to measure CT. We are addressing this problem by using Evidence Centered Design (ECD) to develop an assessment of kindergarten-aged children's CT. Objective: To present a design case on the development of the assessment, specifically the algorithmic thinking (AT) tasks and to share validity evidence that emerged. Method: We focus on the AT sub-component of CT and present the principled assessment design process using ECD. Findings: Our operationalization of CT includes spatial reasoning as a sub-component. Pilot results showed an acceptable internal consistency reliability for the AT items and critical design decisions that contributed to validity evidence. Implications: An important contribution of this work is the inclusion of spatial reasoning in our definition of early childhood CT.;2021
Background and Context: This study looks at computational thinking (CT) assessment of programming artifacts within the context of CT integrated with science education through computational modeling. Objective: The goal is to explore methodologies for assessment of student-constructed computational models through two lenses: functionality and conceptual fluency. Method: This study uses data from research with EcoMOD, a 3(rd) grade ecosystem science curriculum in which student pairs program computational models of a beaver building a dam. Snapshots of programs for 47 student pairs collected over time are assessed. Findings: A functionality-based rubric provided assessment of student task progress, but was less successful at correctly identifying CT gains in programs that were partially correct. A rubric for conceptual fluency identified development of fluency in CT concepts of sequencing, loops, and conditionals. Implications: This study contributes to the literature by exploring affordances of different rubric-based CT assessments of student programs.;2021
Background and Context: While assessment of computational thinking concepts, practices, and perspectives is at the forefront of K-12 CS education, supporting student communication about computation has received relatively little attention. Objective: To examine the usability of process-based portfolios for capturing students' communication about their computational practices regarding the process of making electronic textile projects. Method: We examined the portfolios of 248 high school students in 15 introductory CS classrooms from largely underserved communities, using a formal rubric (top-down) to code computational communication and an open-coding scheme (bottom-up) to identify computational practices described. Findings: Students demonstrated stronger abilities to communicate about computation using text than visuals. They also reported under-assessed CT practices like debugging, iterating, and collaborating. Students of experienced e-textile teachers performed substantially better than those with novice e-textile teachers. Implications: Portfolios provide a viable addition to traditional performance or survey assessments and meet a need to promote communication skills.;2021
Background Computation and computational thinking are of great interest to both engineering research and teaching communities. Effective learning environments are needed to incorporate computational thinking within the engineering disciplines. Design-based research is uniquely positioned to address this need for designing effective learning environments. Purpose This design-based research study characterizes the different ways in which students used computational thinking when building computational models. The design of the model-building activities was grounded in productive failure and model-eliciting activities. Design The design-based research study implemented the computational modeling activities within an engineering capstone course. The research question was: What types of computational thinking outcomes emerge when engineering students build computational models? Thematic analysis was applied to individual student artifacts to identify key computational thinking outcomes that were elicited as a result of the intervention. Results Throughout the building of the model, students demonstrated the use of computational thinking outcomes, mainly abstraction, algorithmic thinking, evaluation, generalization, and decomposition. However, the diversity and density of use for each outcome were different and unique. Conclusions This study shows how building computational models, when guided by current educational theories, can allow for students to practice the use of computational thinking and for educators to incorporate these key practices into their engineering classrooms.;2021
Background We outline a case for how the Learning Sciences is at a powerful inflection point where the real world needs to be seen as comprised of the political entities and processes in which learning happens. We seek to sharpen the principle that learning is political by elucidating historical and contemporary processes of European and U.S. imperialism that remain foundational to our field and by developing the argument that theories of learning are theories of society. Methods Through a contrapuntal approach, which emphasizes a critical lens to analyze empire, we juxtapose notions of authentic practice in computing education with scholarship in sociology that brings the lives of tech industry immigrant workers to the fore. Findings Our analysis reveals how the social construction of disciplinary and professional expertise in computing is intricately interwoven with historically persistent patterns of the appropriation of the lives and labor ofendarkenedpeople through systems of transnational migration and institutional forms of racial segregation. Contribution A contrapuntal lens in the Learning Sciences prompts our field to embrace the necessary uncertainties and the theoretical and methodological possibilities that emerge when sites of learning and learning itself are recognized as political and as contestations of empire.;2021
"Block-based visual programming tools, such as Scratch, Alice, and MIT App Inventor, provide an intuitive and easy-to-use editing interface through which to promote programming learning for novice students of various ages. However, very little attention has been paid to investigating these tools' overall effects on students' academic achievement and the study features that may moderate the effects of block-based visual programming from a comprehensive perspective. Thus, the present study carried out a meta-analysis to systemically examine 29 empirical studies (extracting 34 effect sizes) using experimental or quasi-experiments involving the programming learning effects of employing block-based visual programming tools to date (until the end of 2019). The results showed a small to medium significant positive overall mean effect size (fixed-effect modelg = 0.37; random-effects modelg =0.47) of the use of these block-based visual programming tools with respect to students' academic achievement. Furthermore, the overall mean effect size was significantly affected by the educational stage, programming tool used, experimental treatment, and school location. Discussions and implications based on the findings are provided.";2021
Coding is increasingly recognized as a new literacy that should be encouraged at a young age. This understanding has recontextualized computer science as a compulsory school subject and has informed several developmentally appropriate approaches to computation, including for preschool children. This study focuses on the introduction of three approaches to computation in preschool (3-6 years), specifically computational thinking, programming, and robotics, from a cross-curricular perspective. This paper presents preliminary findings from one of the case studies currently being developed as part of project KML II-Laboratory of Technologies and Learning of Programming and Robotics for Preschool and Elementary School. The purpose of the KML II project is to characterize how approaches to computation can be integrated into preschool and elementary education, across different knowledge domains. The conclusions point to expression and communication as an initial framework for computational approaches in preschool, but also to multidisciplinary and more creative methodological activities that offer greater scope for the development of digital and computational competences, as well as for personal and social development.;2021
Coding skills be equipped junior high school students to create a simple application. This study aims to improve the management skills of coding through blogs on the internet. The methodology used was action research. Students are trained to make the coding of what she likes and masters. Algorithms and programming introduced in writing. Computational thinking is delivered in the form of text, photos and videos that attract students learn coding. Also made games and quizzes online. The results showed that the coding skills of students increased through management of blogs on the internet. Junior high school students become better able to create a simple application program.;2021
Computational Thinking (CT) allows us to solve complex problems by expressing it in a way that computers, humans, or both, can understand. CT is closely related to problem solving and critical thinking, which are actively used in STEM education. Research on CT has gained steady momentum recently, and many of the institutions around the world have adopted CT into their curriculum. This paper presents a literature review conducted to identify the interventions used to develop CT skills and the methods used to assess CT skills. The review explored various publications on CT and identified that curriculum-based interventions and workshops are the primary interventions used for introducing CT in the educational sector. During the analysis, we have also identified a handful of assessment tools used for measuring CT skills, but they are not standardized assessment tools. Hence, we plan to analyze the existing assessment methods and propose a new sophisticated tool for evaluating CT skills as our future work.;2021
Computational Thinking (CT) and creativity are considered two vital skills for the 21st century that should be incorporated into future curricula around the world. We studied the relationship between these two constructs while focusing on learners' personal characteristics. Two types of creativity were examined: creative thinking and computational creativity. The research was conducted among 174 middle school students from Spain. Data collected using a standardized creativity test (Torrance's TTCT) were triangulated with data drawn from students' log files that documented their activity in a game-based learning environment for CT (Kodetu). We found some interesting associations between CT and the two constructs of creativity. These associations shed light on positive associations between each of the two creativity constructs and CT acquisition, as well as between the two creativity constructs themselves. Additionally, we highlight differences between boys and girls, as girls were found to be more creative on both creativity measures. Other differences associated with school affiliation, prior coding knowledge, and technology affinity are also discussed.;2021
Computational Thinking (CT) can amplify learners' skill sets so that they become excellent problem-solvers. Game-Based Learning and Collaborative Learning are two approaches that may aid in the development of CT skills. This paper describes a framework based on Game and Problem-Based Learning Strategies which aims to enhance the CT teaching and improves students' social skills, considering aspects of fun. The framework stands out for including collaborative learning features defined in the main literature. Also, the strategy was developed specifically to fit the games' dynamics. The approach was evaluated via metacognitive and transactive analysis and by a survey. The results showed evidence that the method is able to stimulate interaction among students to apply problem-solving strategies.;2021
Computational thinking (CT) has been a topic of interest in research, not only in the field of computer science, but also in education, since it allows the development of a set of competencies in the child related to problem-solving and decision-making. However, few studies on CT are focused on children with disabilities. Developing computational thinking skills for children with hearing problems is a challenge, even more so when their language skills are limited. Following a methodology for conception of serious games for children with hearing impairment called MECONESIS (Acronym in Spanish, MEtodologia para CONcepcion de juEgos Serios para nInos con discapacidad auditiva), we designed the serious game Perdi-Dogs for children between 7 and 11 years old with hearing impairment. We considered a set of aspects, such as challenges/learning, control, rules, feedback, interaction, rewards, surprise, communication/language, and fantasy. Perdi-Dogs involves both a physical and a digital interface, specifically a physical board together with digital interaction, by means of a QR (Quick Response) code and vibrotactile feedback system. Perdi-Dogs simulates a real environment, using physical elements able to interact simultaneously with technology. Evaluation was carried out with a group of seven children between 7 and 11 years old from the Institute for Deaf and Blind Children (Colombia). The results showed a high motivation to play for all of the children involved in the experiment.;2021
Computational thinking (CT) has been recognized as a collection of understandings and skills required for new generations of students not only proficient at using tools, but also at creating them and understanding the implication of their capabilities and limitations.The objective of this research was to develop a module of solved problems for the development of CT in first-year computer engineering students at the University of Cienfuegos, Cuba. Students depend on current research to understand the definition, function, and culture of CT and to consider how it can improve their analytical and critical skills. A contextualized definition of the CT method is proposed as a cognitive process executed by humans to solve problems using computational concepts. This method improves CT in terms of decomposition, pattern recognition, algorithm design, abstraction, data representation, problem decomposition, algorithmic thinking, and generalization of patterns, simulation and evaluation. The research carried out is an experimental design with a pretest and a posttest, with a control group and an experimental group to which the intervention was applied, both with 18 students. This article describes a study developing and incorporating CT modules and assessing their effect on the comprehension of CT principles by preservation teachers as well as their computing attitude. The results show that the implementation of analytical thought in education courses will successfully affect the comprehension of CT principles by preservice students.;2021
"Computational thinking (CT) is a fundamental skill and an analytical ability that children in the twenty-first century should develop. Students should begin to work with algorithmic problem-solving and computational methods in K-12. Drawing on a conceptual framework (IGGIA) that combines CT and problem-solving, this study designed and implemented an interdisciplinary Scratch course in a primary school, examined the impact of the new problem-solving instructional approach (the adapted IGGIA) on pupils' CT skills and self-efficacy, and explored the gender differences in these two aspects. A pretest-posttest non-equivalent group design was conducted among 63 fifth-grade students in two computer science classes over 14 weeks. Both quantitative and qualitative data were collected through the administration of CT scales, Scratch artifacts analysis and focus group interviews. The results revealed that the adapted IGGIA (1) significantly improved the CT skills of primary school students; (2) had a significant positive impact on pupils' CT self-efficacy, especially on their critical thinking, algorithmic thinking and problem-solving; and (3) significantly enhanced girls' CT skills and self-efficacy. These findings indicated that problem-solving instructional approaches could promote both cognitive and noncognitive aspects of students' deeper computational learning.";2021
Computational thinking (CT) is a key 21st-century skill. This paper contributes to CT research by investigating CT predictors among upper secondary students in a longitudinal and natural classroom setting. The hypothesized predictors are grouped into three areas: student characteristics, home environment, and learning opportunities. CT is measured with the Computational Thinking Test (CTt), an established performance test. N = 202 high-school students, at three time points over one school year, act as the sample and latent growth curve modeling as the analysis method. CT self-concept, followed by reasoning skills and gender, show the strongest association with the level of CT. Computer literacy, followed by duration of computer use and formal learning opportunities during the school year, have the strongest association with CT growth. Variables from all three areas seem to be important for predicting either CT level or growth. An explained variance of 70.4% for CT level and 61.2% for CT growth might indicate a good trade-off between the comprehensiveness and parsimony of the conceptual framework. The findings contribute to a better understanding of CT as a construct and have implications for CT instruction, e.g., the role of computer science and motivation in CT learning.;2021
Computational thinking (CT) is a thought process composed of computer science ideas and skills that can be applied to solve problems and better understand the world around us. With the increase in technology and computing, STEM disciplines are becoming interwoven with computing. In order to better prepare students for STEM careers, computational literacy needs to be developed in K-12 education. We advocate the introduction of computational literacy through the incorporation of CT in core science courses, such as biology. Additionally, at least some of this integration should be unplugged, or without computers, so that all schools can participate in developing computational literacy. These lessons integrate unplugged CT and science content to help students develop CT competencies and learn natural selection content simultaneously through a series of lessons in which unplugged CT is leveraged for natural selection learning within varying contexts. In these lessons, students engage in the creation of handwritten algorithmic explanations of natural selection. Students build CT skills while making sense of the process, resulting in converged learning about CT and science. This article presents a description of CT, the specifics of the classroom implementation and lessons, student work and outcomes, and conclusions drawn from this work.;2021
Computational thinking (CT) is increasingly being recognized as a fundamental skill, like math, for all students. This need to equip every student with competent CT skills calls for CT education in K-12 schools and teachers with adequate content and pedagogical knowledge to integrate CT. This study elicits and synthesis what top leaders in CT education know and experience about best practices of CT in K-12 schools and educator preparation. It also examines experts' views about distinctive challenges, useful strategies, and practical models related to CT education. Adopting an expert interview approach, the participants are five leaders with diverse background and extensive experience in the field of CT education. The qualitative analysis of the data points to two guidelines to teach CT in K-12 context, namely age level appropriateness and good design. It also indicates three main challenges and specific strategies to establish CT-integrated teacher education programs.;2021
Computational thinking (CT) is useful in the daily problem-solving process while educational robotic (ER) is well known as a pedagogical tool in attracting students to learn more in problem-solving activities. Both subjects are widely used for formal learning and informal learning regardless of the age and gender of the learners. However, there is a lack of studies in integrating CT into ER and both have big dimensions in learning and teaching. Thus, nurturing CT through ER remains a challenge. This study focuses on designing a conceptual model of the integration between CT and ER. Qualitative analysis is done for this research where grounded theory analysis (GTA) is used to analyze CT and ER from various sources such as literature, book, and survey to make the model more relevant and fit to the education. The finding represents a final conceptual model which has been evaluated by the expert. The final conceptual model detailed the relationship between CT and ER besides giving benefits to the community who are planning, designing, or revising a new framework or platform in nurturing CT through ER.;2021
Computational thinking (CT) plays a vital role in the fields of science, technology, engineering and mathematics (STEM). However, whether students' learning attitude towards STEM is related to their CT skills remains unknown. Two studies were conducted to address this knowledge gap. In Study 1, we validated a newly developed STEM learning attitude scale among a sample of Chinese primary school students (N= 489). Exploratory and confirmatory factor analysis results revealed that the scale which consisted of three factors (mathematics, science and information technology) could sufficiently measure primary school students' STEM learning attitude in the current sample. In Study 2, we explored the association between students' STEM learning attitude and their CT skills. Evidence revealed that learning attitude towards STEM significantly predicted CT skills. We also found that girls had a more positive learning attitude towards STEM than boys, and the fourth grade might be the key period for the development of CT skills. Implications for promoting primary school students' STEM learning and CT skills were also discussed.;2021
Computational thinking (CT) practices have gained increasing importance in primary school education. However, there are few tools to measure primary school students' CT practices that are based on rigorous psychometric approaches. This study developed an operational definition for CT practices by exploring the key dimensions of their composition and, more importantly, developed and validated a generic test tool that can effectively assess students' CT practices. Items to measure CT practices were developed using the evidencecentered design (ECD) approach. These items prompted students to exhibit behaviors that demonstrated their skills in the four dimensions of CT practice, namely testing and debugging, algorithmic thinking, reusing and remixing, and abstracting and modularizing. A test consisting of these items was administered to 13,956 Grade 4-6 primary school students from 56 public schools in Hong Kong. The data were analyzed based on the item response theory (IRT) approach, together with other psychometric tests. A bi-factor three-parameter logistic model was ultimately adopted for test validation, as it fitted the data better than the corresponding twoparameter and one-parameter logistic models. The results validated the four-dimensional structure of the CT practices test. The reliability, test item characteristics, and CT practice abilities of students are also discussed.;2021
Computational thinking (CT) skills are becoming essential in all aspects of work and life, and CT has become part of the K-12 curriculum around the world. Yet, more research is needed to better understand how to help elementary school students acquire CT skills effectively. The purpose of this study was to examine the effectiveness of partial pair programming (PPP) on elementary school students' CT skills and self-efficacy (SE). The study included four 4th grade classes, with a total of 171 students, who were taking the course entitled Computational Thinking with Scratch with the same teacher for one semester. Two classes (84 students) were in the Experimental Group (EG, 44 boys and 40 girls) while two other classes (87 students) were in the Control Group (CG, 45 boys and 42 girls). The students in the EG were paired up for the programming assignments while the students in the CG did the assignments on their own. The results showed that the students in the EG improved their CT skills and SE more significantly than those in the CG group. There was a low correlation between CT and SE in the post-test of both groups. The interviews with the teacher and the students afterwards provided insights in understanding the results. The findings suggest that in K-12 programming teachers could use PPP as an effective approach to improve students' CT skills, programming SE, and beyond.;2021
Computational Thinking (CT) through programming attracts increased attention as it is considered an ideal medium for the development of 21st century skills. This intense attention leads to K-12 initiatives around the world and a rapid increase in relevant research studies. However, studies show challenges in CT research and educational practice. In addition, the domain has not been mapped to facilitate comprehensive understanding of the domain challenges and development of CT curricula. The purpose of this study is to develop a conceptual model based on a systematic literature review that maps the CT through programming in K-12 education domain. The proposed Computational Thinking through Programming in K-12 education (CTPK-12) conceptual model emerges from the synthesis of 101 studies and the identification of CT Areas. The proposed model consists of six CT Areas (namely Knowledge Base, Learning Strategies, Assessment, Tools, Factors and Capacity Building) and their relationships. The model could aid domain understanding and serve as a basis for future research studies. In addition, it could support the integration of CT into K-12 educational practices, providing evidence to educational stakeholders and researchers as well as bringing closer research, practice and policy.;2021
"Computational thinking courses can cultivate students' ability to apply logic in the fields of mathematics and information science. The new 12-year Basic Education Curriculum Guidelines were implemented in Fall 2019 in Taiwan. Courses on computational thinking, problem solving, and programming are contained in the technology education field in junior and senior high schools. Swift Playgrounds is an innovative app for the iPad and Mac that makes learning Swift interactive and fun. No programming knowledge is required to use Swift Playgrounds, making it very suitable for beginners. This study was carried out by letting elementary school teachers and students participate in Swift Playgrounds computational thinking courses. By trying this app, teachers of different disciplines attempted to realize more learning situations. Students learned how to cope with functions and loop skills by playing with Byte, which is a character in Swift Playgrounds. There were three purposes for this study: first, designing a computational thinking course for the most basic part, Hello! Byte, in Swift Playgrounds; second, assigning elementary school teachers to assess the qualitative analysis of tasks in Swift Playgrounds; and third, assigning elementary school students to do the tasks and assign a difficulty index in Swift Playgrounds after learning with this app. The results show that most teachers considered this approach to be able to improve logical thinking and inferential capability after assessing, and most students considered functions and loops quite difficult after using the app. According to the students' indices, about 86 percent of students considered that adding commands is easy, and about 37 percent of students considered that functions are easy. On the other hand, about 24 percent of students considered that applying the Slotted Stairways is difficult, and about 34 percent of students considered that using loops is hard. It is suggested that more instructions for the course or extendibility for classes is required.";2021
Computational thinking has been formally incorporated into the educational system of several countries, however, there is no consensus about a theoretical framework for incorporating computational thinking in the curriculum. As an initial stage to the formal incorporation of computational thinking in an introductory programming course at the university level, the objective of this research is to reveal the students' perception about computational thinking to get a reference. This research was carried out with a qualitative approach of descriptive scope through interviews that were based on the metacognitive ladder and applied to some key informants who approved an introductory programming course with different performances: low, medium, and high. The analysis of the interviews allowed us to reveal the students' perception as a theoretical framework that includes a definition, three characteristics, a procedure, and two main application contexts. The definition is related to the resolution of problems and the execution of activities. The features are associated with four concepts, two ways of acquisition, and benefits to the resolution of problems. The procedure has six steps: understanding the situation, identifying the difficulty, decomposition into the constituent parts, pattern recognition, selecting relevant information, and designing and executing an algorithm. The main contexts of application are university and everyday life. Finally, a comparison with other theoretical frameworks allowed us to conclude that students have an accurate perception of computational thinking, but in the basic terms.;2021
Computational thinking has received tremendous attention from computer science educators and educational researchers in the last decade. However, most prior literature defines computational thinking as thinking outcomes rather than thinking processes. Based on Selby and Woodland's framework, this study developed and validated the Computational Thinking Scale (CTS) to assess all students' thought processes of computational thinking for both general and specific problem-solving contexts in five dimensions: abstraction, decomposition, algorithmic thinking, evaluation and generalization. A survey including 25 candidate items for CTS as well as demographic variables was administered to 388 junior high school students in Taiwan. An explorative factor analysis using the principal axis method with the oblimin rotation was used to validate the scale. Finally, 19 items were extracted successfully under the designed five dimensions, with a total explained variance of 64.03% and an overall reliability of 0.91. Results of the demographic comparisons showed that boys had a greater disposition than girls in decomposition thinking when solving problems using computer programming. In addition, programming learning experience, especially self-directed learning and after-school learning, had significant positive effects on all dimensions of CTS. Several future studies are suggested using this tool.;2021
Computational thinking is a means to understand and solve complex problems through using computer science concepts and techniques. While there is an increase in the number of initiatives focusing on coding, whether they (a) address computational thinking and problem-solving skills and (b) use methods of teaching problem solving is yet to be explored. As a preliminary step, this study focuses on examining 3rd grade lesson plans at Code.org. The analysis identified various components of computational thinking and problem solving as well as specific problem-solving teaching methods used to address these skills. Besides such cognitive outcomes, the findings also revealed affective, reflective, and social aspects of learning supported in the lessons.;2021
Computational Thinking is a phrase employed to explain the developing concentration on students' knowledge development regarding designing computational clarifications to problems, algorithmic Thinking, and coding. The difficulty of learning computer programming is a challenge for students and teachers. Students' ability in programming is closely related to their problem-solving skills and their cognitive abilities. Even though computational thinking is a problem-solving skill in the 21st century, its use for programming needs to be planned systematically taken into account the appropriate components and elements. Therefore, this study aims to validate the main components and elements of computational thinking for solving problems in programming. At the beginning of the study, researchers conducted a literature review to determine the components and the elements of computational thinking that could be used in teaching and learning programming. This validation involved the consensus of a group of experts using the Fuzzy Delphi method. The data were analysed using the Fuzzy Delphi technique, where the experts individually evaluated the components and elements agreed upon prior discussion. A group of experts consisting of 15 people validated 14 components and 35 elements. The results showed that all components and elements reached a threshold (d) value of less than 0.2, a percentage of agreement exceeded 75%, and the Fuzzy score (A) exceeded 0.5. The finding indicates that the main components and elements of the proposed computational thinking are suitable for problem-solving approaches in programming.;2021
Computational thinking is an essential skill in the modern global workforce. The current public health crisis has highlighted the need for students and educators to have a deeper understanding of epidemiology. While existing STEM curricula has addressed these topics in the past, current events present an opportunity for new curricula that can be designed to present epidemiology, the science of public health, as a modern topic for students that embeds the problem-solving and mathematics skills of computational thinking practices authentically. Using the Computational Thinking Taxonomy within the informal education setting of a STEM outreach program, a curriculum was developed to introduce middle school students to epidemiological concepts while developing their problem-solving skills, a subset of their computational thinking and mathematical thinking practices, in a contextually rich environment. The informal education setting at a Research I Institution provides avenues to connect diverse learners to visually engaging computational thinking and data science curricula to understand emerging teaching and learning approaches. This paper documents the theory and design approach used by researchers and practitioners to create a Pandemic Awareness STEM Curriculum and future implications for teaching and learning computational thinking practices through engaging with data science.;2021
Computational thinking is the capacity of undertaking a problem-solving process in various disciplines (including STEM, i.e. science, technology, engineering and mathematics) using distinctive techniques that are typical of computer science. It is nowadays considered a fundamental skill for students and citizens, that has the potential to affect future generations. At the roots of computational-thinking abilities stands the knowledge of computer programming, i.e. coding. With the goal of fostering computational thinking in young students, we address the challenging and open problem of using methods, tools and techniques to support teaching and learning of computer-programming skills in school curricula of the secondary grade and university courses. This problem is made complex by several factors. In fact, coding requires abstraction capabilities and complex cognitive skills such as procedural and conditional reasoning, planning, and analogical reasoning. In this paper, we introduce a new paradigm called ACME (Code Animation by Evolved Metaphors) that stands at the foundation of the Diogene-CT code visualization environment and methodology. We develop consistent visual metaphors for both procedural and object-oriented programming. Based on the metaphors, we introduce a playground architecture to support teaching and learning of the principles of coding. To the best of our knowledge, this is the first scalable code visualization tool using consistent metaphors in the field of the Computing Education Research (CER). It might be considered as a new kind of tools named as code visualization environments.;2021
Computational thinking, commonly associated with engineering and computer science disciplines, can be analyzed in other areas, since this process exceeds the fostering of computing skills and encompasses critical, lateral and creative thinking processes. This article was based on the question: What are the differences in the dimensions of computational thinking among disciplinary areas of undergraduate students? We worked with a cross-sectional study design and convenience sampling, with a 29-item scale to evaluate computational thinking in 95 undergraduate students studying various disciplines in two Mexican universities. The results showed that there were differences with engineering students who have greater critical, algorithmic and problem-solving thinking. In cooperativity and creativity, no significant differences were found between psychology, administrative informatics and engineering students. This article is intended to be of value to researchers, academics, students and decision makers interested in creating scenarios that promote problem solving.;2021
Computer programming is being introduced in educational curricula, even at the primary school level. One goal of this implementation is to teach computational thinking (CT), which is potentially applicable in various computational problem-solving situations. However, the educational objective of CT in primary schools is somewhat unclear: curricula in various countries define learning objectives for topics, such as computer science, computing, programming or digital literacy but not for CT specifically. Additionally, there has been confusion in concretely and comprehensively defining and operationalising what to teach, learn and assess about CT in primary education even with popular programming akin to Scratch. In response to the growing demands of CT, by conducting a literature review on studies utilising Scratch in K-9, this study investigates what kind of CT has been assessed in Scratch at the primary education level. As a theoretical background for the review, we define a tangible educational objective for introducing CT comprehensively in primary education and concretise the fundamental skills and areas of understanding involved in CT as its core educational principles. The results of the review summarise Scratch programming contents that students can manipulate and activities in which they can engage that foster CT. Moreover, methods for formatively assessing CT via students' Scratch projects and programming processes are explored. The results underpin that the summarised CT-fostering programming contents and activities in Scratch are vast and multidimensional. The next steps for this study are to refine pedagogically meaningful ways to assess CT in students' Scratch projects and programming processes.;2021
Computer science and computational thinking (CT) education in K-12 schools have been escalating in recent years. A couple of CT instructional models have been proposed to depict the roles of CT in K-16 education. Yet, neither of them discussed CT infusion into a subject course. In this article, we proposed a CT-integration model called (TPCT)-T-2. In this model, we suggested considering CT as a second subject and using an appropriate technological pedagogical approach to make students' learning of two subjects meaningful and engaging. We implemented this model in a CT-integrated lesson in two sections of a high-school Spanish course. Students worked in small groups and coded three small and one comprehensive digital Spanish-culture stories in Scratch. Results showed that students taking the CT-integrated lesson had the same degree of improvement in their Spanish culture knowledge as their peers who did not take the CT-integrated lesson. Besides, students taking the CT-integrated lesson had a significant improvement in their CT knowledge. At the same time, their CT self-efficacy outperformed those who did not take the CT-integrated lesson. We discussed the results and offered suggestions for researchers and educators at the end of the article.;2021
Constructionism has different meanings for what the learner is constructing, a concrete object or an idea, and whether this construction is done through the use of digital technology. In the embodied-based environment created in this study, children carry out or construct a series of actions, a performance, which allows them to solve the task of directing an already programmed robot to a particular target. The activity was based on an adaptation of the Little Red Riding Hood narrative. Children played the role of rangers (instead of hunters) who had to coordinate their actions in order to help a robot (an mBot characterized as a Robot-Wolf) find Grandma's laboratory, so she could fix its GPS. The children wore boots, which were used to interact with the Robot-Wolf. The main question we addressed was how to create this embodied-based environment for kindergarten children, and how to identify the actions children performed and the concepts they used in this construction. The research was based on the Socially-Aware Design, and the study was conducted in a school setting for kindergarten students. 26 children (11F, 15 M), between 4 and 5 years old, participated in this study. The children's activities were recorded and analysed using the Grounded Theory methodology. The results show that the children's performative sequence of actions is distinct from the hands-on, heads-in processes that are part of classical constructionist environments. For the children, the process and the product of their (body) dance were underlying their movement (perceiving and acting), working together so as to accomplish the given task in the environment. Practitioner notes What is already known about this topic Constructionism has shown as a way for learning via materialization of tangible objects or construction of ideas. There are very few examples of constructionist learning environments for kindergarten children to interact with digital technology. What this paper adds The creation of the constructionist embodied-based environment for supporting kindergarten children interacting with digital technologies. The constructionist embodied-based environment created was effective in supporting kindergarten children interacting with an already programmed robot. Children's performative sequence of actions reveals no separation of the hands-on, heads-in processes as in classical constructionist environments. The creation of a constructionist environment in which children can act and collaborate to construct a series of actions which allow them to solve a specific challenge. Implications for practice and/or policy Concepts like leadership and anticipation which were embodied are expressed by the children help to understand how the robot-based activity can help children to construct knowledge related to, for example, computational thinking.;2021
Contemporary education has been experiencing difficulties because of the fast changing content, especially in the field of Information Technology. In this regard, education institutions have seen an increasing emphasis on the role of computational thinking. Forming Computational Thinking in IT training would help to use fewer efforts and less time to update knowledge and skills in this area after a long period of time - no matter what new technologies, company developed software systems and interface tools have appeared. This article aims to propose an approach to form computational thinking when presenting learning content in order to overcome one of the basic challenges of contemporary IT training - the frequency and high change scales of the studied technologies and tools, which is all a result of high speed of technological advance. The article suggests an invariant framework, which could be used to form computational thinking skills in IT training. The framework allows trainers to formulate skills for pattern recognition, abstraction and focusing on the important information. As a proof for the efficiency of the offered invariant framework for IT knowledge in terms of the discussed problem, part of the learning content related to spreadsheet training has been presented.;2021
Content area K-12 teachers are increasingly asked to integrate computing and computational thinking into their classrooms, yet they often have little experience with computing. The purpose of this study was to understand how science teachers, new to computing and integrating computational thinking into their classrooms, supported students as computational problem solvers. In the project from which this research was drawn, 8th grade science teachers in three US school districts integrated computer game design into their study of climate systems and climate change. We conducted participant observation, collected teacher implementation logs and interviewed 15 teachers engaged in the three-year design research project, Building Systems from Scratch. Analysis through grounded theory yielded several results related to teachers' orientations, strategies, and use of resources to create systems of distributed expertise. We identified five major themes: a) releasing responsibility to students, b) co-learning with students, c) encouraging students' independent problem solving, d) building interdependence among students, and e) providing multiple other resources. Findings are discussed in relation to the literature on integrating computational thinking into content area classrooms.;2021
Contribution: A systematic literature review on the empirical evidence regarding the usage of programming languages for learning purposes is presented. The review analyzes different methods and tools at different educational levels and with different objectives. Background: Learning programming has gained relevance in the last decade. This is due to the massive presence of programmable elements ranging from computers to toys. Because of this, the interest of researchers on this topic has increased. Questions, such as what to use, in what educational stages to use it, the effectiveness of the method, and the focal objectives for learning programming are questions that do not have obvious answers. Research Questions: 1) What empirical evidence exists on the use of educational programming languages (EPLs)? 2) In what context is the research performed? 3) How is effectiveness reported in the literature after applying EPLs? 4) What pedagogical goals are achieved by using EPLs? Methodology: Following a formal protocol, automated searches were performed for primary studies from 2007 to 2018. A total of 62 studies were identified, of which 29 were selected and analyzed since they include some type of empirical evidence. Findings: After performing the evaluation, the results support the need for better approaches with empirical evidence when reporting research on the usage of EPLs. Some research opportunities are identified which concerns the used programming languages, the areas or stages of their application, or the need to have more empirical evidence in general and more studies in non-WEIRD (Western, educated, industrialized, rich, and democratic) contexts.;2021
Contribution: A technical course in a multidisciplinary university program has to provide high-level skills, with limited lecturing hours and student background. This article investigates the principles for its design and reports about a study case. Background: The overall course organization needs to address specific learning targets and teaching techniques, different from those used in traditional courses on the topic. Research Question: A stepwise strategy assists a principled design that allows dynamic, long-term improvements. Methodology: The evaluation of its applicability requires a years-long record of historical data. The article studies the evolution of a course over six years using simple monitoring techniques: surveys and rubric-based examinations. Findings: Monitoring emerges as an essential feature for course evolution: a focused examination provides the best results, while institutional, wide-spectrum surveys appear to be of little help.;2021
"Creativity and Computational Thinking (CT) have been both extensively researched in recent years. However, the associations between them are still not fully understood despite their recognition as essential competencies for the digital age. This study looks to bridge this gap by examining the association between CT and two types of creativity, i.e., Creative Thinking and Computational Creativity. The research was conducted among 124 middle school students from Spain, who were divided into control and experimental groups; the intervention included an explicit encouragement to be as creative as possible (i.e., to submit multiple correct solutions) in a given learning task. Data were analyzed from a standardized creativity test (Torrance's TTCT) and cross-referenced with log files that documented the students' activities in the Kodetu game-based learning environment. Our research findings indicate some interesting associations between CT and Creativity. First, we found that creativity contributes to CT. Second, we found that CT is transferable across different domains. Finally, we found that Computational Creativity can develop and improve over time.";2021
Creativity has emerged as an important 21st-century competency. Although it is traditionally associated with arts and literature, it can also be developed as part of computing education. Therefore, this article -presents a systematic mapping of approaches for assessing creativity based on the analysis of computer programs created by the students. As result, only ten approaches reported in eleven articles have been encountered. These reveal the absence of a commonly accepted definition of product creativity customized to computer education, confirming only originality as one of the well-established characteristics. Several approaches seem to lack clearly defined criteria for effective, efficient and useful creativity assessment. Diverse techniques are used including rubrics, mathematical models and machine learning, supporting manual and automated approaches. Few performed a comprehensive evaluation of the proposed approach regarding their reliability and validity. These results can help instructors to choose and adopt assessment approaches and guide researchers by pointing out shortcomings.;2021
Currently the need to provide quality education to future generations has led to the development of new teaching methodologies, within this fact the tools provided by information technologies have been positioned as the future of learning, in this sense, the learning to program is no longer considered a selective skill in the field of computing, being today a necessity for any student who wants to be competent in this globalized and dynamic world. Within this context, the present research aims to analyze to what extent the use of the Scratch programming language allows the development of computational thinking skills and mathematical logic. The methodology consisted of the application of programming fundamentals through Scratch 3.0 to an experimental group composed of 25 students who were randomly selected from a population of 100 students, the data collection was carried out through a test of logical reasoning standardized by Acevedo and Oliva and a test of levels of computational thinking standardized by Gonzalez. According to the results, a significant difference is postulated in the performance of the students in both tests, having a more considerable improvement in the criteria: Loops, Control of Variables (CV), Probability (PB) and Combinatorial Operations (CB). Therefore, it is concluded by highlighting the importance of teaching basic concepts of Computer Science such as computational thinking and mathematical logic, since it contributes to the internalization of concepts when developing algorithms in problem-solving.;2021
"Currently, flipped learning requires a framework that will give novices and students the ability to face the complex problems encountered in programming courses. It is necessary to design a design thinking learning framework that addresses independent learning and specific processes that will improve students' 21st-century skills. The existing literature has not implemented flipped programming courses from a design thinking perspective (Cook & Bush, 2018), which would thus be an innovative approach to designing teaching methods and investigating the effects of this framework. The purpose of this study was to develop analyze, observe, reflect, conceive, design, implement, and operate (Crawley et al., 2007) a DT-CDIO model and to investigate the relationship of the flow experience to computational thinking and cognitive load in order to understand the impact of the flow experience on a flipped programming course. The participants in this study comprised 40 pre-service education students (Male = 17; Female = 23). The partial least squares (PLS) method was used for the data analysis to test the model. This study was intended to obtain and evaluate significant differences between the students' flow experience and their computational thinking ability and cognitive load. The results indicated that the DT-CDIO pedagogy filled a long-standing gap related to a lack of reflective pedagogy and design thinking problems. The flow experience negatively impacted creativity and problem solving ability. Meanwhile, intrinsic cognitive load negatively impacted the flow experience. Germane cognitive load positively impacted the flow experience. In particular, the flow experience is a crucial factor that can be used to predict various computational thinking skills in a programming curriculum. More importantly, this study provides important insights into the implications of the DT-CDIO approach and other related factors.";2021
Currently, many countries actively cultivate students to develop computational thinking ability. Many visual programming environments (VPEs) and physical robot courses have been integrated into computational thinking learning in the elementary education stage. This study explores the relationship between the programming learning environment (including VPE, physical robots, and no experience) and the computational thinking ability of higher-grade elementary school students of different genders. The results show that learning through VPE or physical robots can help students improve their computational thinking ability and that students learn better via physical robots. In addition, among the four dimensions of computational thinking ability, most students are weak in algorithm design. In terms of gender, no differences exist in computational thinking ability. Further analysis reveals that female students have better decomposition performance in VPE learning, while male students have better algorithm design performance.;2021
Currently, there is a big gap between industry and the instructions provided by engineers at the University. Manufacturing companies need engineers with specific profiles and skills in machining. Teachers, who face both worlds, must play an active role in shortening the transition times of students. Recently, barrel-end mills have been the focus of attention of toolmakers and manufacturers due to their excellent production times and surface accuracies. They are outstanding competitors to more traditional ball-end mills in some applications. This study raises the challenge of translating the developed work for this kind of tool from the research domain into the classroom at the University. For this, a software tool proBARR (c) was developed and used for learning of the subject of manufacturing. This educational software is capable of predicting cutting forces and surface topography in milling with barrel-end mills and was successfully introduced as part of the students' learning process. A software tool was created for the analysis and prediction of cutting forces and surface quality in milling processes with barrel-end mills. This specific problem was addressed from past experience in research projects but was then adapted for academic use. The teachers believe that, if suitably presented to students, the tool provides an excellent opportunity to approach real problems in industry, thus boosting instructions for future engineers. In this way, a pragmatic methodology to computational thinking is presented that transforms traditional difficulties associated with process modeling into more comprehensive tasks, more oriented toward solving specific problems.;2021
Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government's rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children's learning of CT and CF. The main conclusion is that all apps positively affect the development of children's CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a sandbox approach, can better help students express themselves.;2021
Despite a growing recognition that K-12 teachers should be prepared to teach students computational thinking (CT) skills across disciplines, there is a lack of valid instrumentation that measures teachers' efficacy beliefs to do so. This study addresses this problem by developing and validating an instrument that measures in-service teachers' self-efficacy beliefs for teaching CT. In parallel, we conducted a regression analysis to predict teachers' self-efficacy and outcome expectancy beliefs for teaching CT based on demographic traits of the respondents. We surveyed a total of 330 K-12 in-service teachers. A combination of classical test theory and item response theory Rasch was used to validate the instrument. Our results yielded a valid and reliable tool measuring teaching efficacy beliefs for CT. Based on the differential item functioning analysis, the instrument did not reflect bias with gender, race, or teaching experience. Additionally, a regression analysis did not reveal significant predictors using teachers' demographic characteristics. This suggests a need for looking at other factors that may significantly predict K-12 teachers' teaching efficacy beliefs for CT to inform theory and practice around successful CT teaching and learning. Furthermore, we provide implications for the instrument we have developed.;2021
Digital competence and programming are actively highlighted areas in education worldwide. They are becoming part of curricula all over the world, including the Swedish elementary school curriculum, Children are expected to develop computational thinking through programming activities, mainly in mathematics-which are supposed to be based on both proven experience and scientific grounds. Both are lacking in the lower grades of elementary school. This article gives unique insight into pupils' learning during the first programming lessons based on a group of Swedish pupils' experiences when entering school. The goal of the article is to inform education policy and practice. The large interdisciplinary, longitudinal research project studies approximately 1500 students aged 6-16 and their teachers over three years, using video documentation, questionnaires, and focus group interviews. This article reports on empirical data collected during the first year in one class with 30 pupils aged 6-7 years. The social semiotic, multimodal theoretical framework Design for Learning is used to investigate potential signs of learning in pupils' multimodal representations when they, for example, use block programming in the primary and secondary transformation unit. We show that young pupils have positive attitudes to programming and high self-efficacy, and that pupils' signs of learning in programming are multimodal and often visible in social interactions.;2021
"Digital technology has become increasingly central in curriculum plans during the last decade, but there is hardly any research about the curriculum in the digital age, nor about 'digital competence' as a newdidactic area that has entered the educational field. In this article, we discuss and analyse two interrelated issues: first, on recent trends in curriculum developments in Norway, Sweden and Finland concerning digital competence; and, second, on related research initiatives of relevance for digital competence as an educational field. The article is based on a theoretically informed review of policy documents during the last decade and research initiatives in this field. The outcome of our study show that digital competence has become an increasingly complex concept, with a key emphasis in recent curricula, and is strongly linked to 21st century education. The article contributes to the ongoing debate about digital competence as part of contemporary educational strategies.";2021
Due to the dynamic nature of the agricultural industry, educators and their institutions face difficult challenges as they try to keep pace with future demands for knowledge and skilled workers. On the other hand, computational thinking (CT) has drawn increasing attention in the field of science, technology, engineering, and mathematics (STEM) education at present and, as advanced technologies and tools emerge, it is imperative for such innovations to be sustained with knowledge and skill among STEM educators and practitioners. The present case study aims to explore the relation between CT, STEM and agricultural education training (AET) in a Greek vocational training institute (IEK), the Agriculture IEK of Metamorfosis city (IEKMC), which is active in agriculture education. The research methodology is utilized according the positivist philosophical approach through data acquisition employing a questionnaire and the quantitative (statistical) analysis of data collected. The sample consists of IEKMC educators and students selected based on simple random sampling. Based on the participants belief that CT and STEM philosophy add value in the learning process, it focuses on the application of knowledge in the real world (students) and problem solving using new technologies (educators). Educators consider experiments as the most significant educational tool for problem solving in teaching practice. Students rate Greek Agriculture Education and Training (GAET) higher than educators. However, the participants evaluate GAET very low due to the lack of new innovative teaching methods being introduced. Finally, there is great interest in the implementation of CT and STEM in the European Union (EU) by students and educators.;2021
Due to their applications on varied and complex issues, Artificial Intelligence (AI) and Internet of Things (IoT) (collectively, AIoT) have become popular new-generation courses, but the learning of such courses needs to consider actual situations and to analyze complicated problems, making it difficult for students to improve their academic performance. The concept of computational thinking education is to allow students to find solutions to problems in different fields by understanding the problems and analyzing solution steps. In this study, we integrate the concept of computational thinking education into a course on plot image-based virtual reality (VR). It combined shooting of the actual field, instructions on the movie required to be shot, and VR in order to enable students to get immersed in thinking about problems and understanding the actual field through plot image-based VR, further plan to learn the essence of problems, and develop possible solutions. Through experimental results of experimental and control groups, we found that plot image-based VR can effectively improve students' interests in learning and computational thinking.;2021
"Education has the task of preparing individuals for challenges, needs and opportunities in a globalized world; now with technology permeating human activities, traditional learning theories without recognizing elements of digital literacy (behaviorism, cognitivism and constructivism). Education requires changes of thought and even more so with the presence of COVID-19, a pandemic that prompted social physical isolation; increasing the need to master digital scenarios in educational communities. The previous situation consolidates computational thinking (CT), as an effective strategy applied in the model presented by MIT-Harvard, with a defined theoretical framework and applied since 2012. The objective of the research is to diagnose the level of training of competencies of the computational thinking to solve problems; and establish from a quantitative study with a non-experimental transectional design the correlation between: the conceptual, practical and computational perspective dimensions, with the development of skills to solve problems, showed a positive correlation greater than 0.462 and significance of 0.000 between the theoretical foundation, the practice to consolidate learning and the development of capacities to make optimal decisions in the search for solutions; implemented in a public school in Colombia with 133 high school students, under training characterized by isolation and social distancing, from totally virtual settings. The diagnostic instrument, validated and categorized by 32 problems, measures the skills to generate competencies, with similarities to the Colombian educational system that promotes learning with: knowing, knowing how to do and knowing how to be; The above is consolidated as inputs for the generation of a virtual learning ecosystem.";2021
Educational games have been increasingly used to improve students' computational thinking. However, most existing games have focused on the theoretical knowledge of computational thinking, ignoring the development of computational thinking skills. Moreover, there is a lack of integration of adaptivity into educational computer games for computational thinking, which is crucial to addressing individual needs in developing computational thinking skills. In this study, we present an adaptive educational computer game, called AutoThinking, for developing students' computational thinking skills in addition to their conceptual knowledge. To evaluate the effects of the game, we conducted an experimental study with 79 elementary school students in Estonia, where the experimental group learned with AutoThinking, while the control group used a traditional technology-enhanced learning approach. Our findings show that learning with the adaptive educational computer game significantly improved students' computational thinking related to both conceptual knowledge and skills. Moreover, students using the adaptive educational computer game showed a significantly higher level of interest, satisfaction, flow state, and technology acceptance in learning computational thinking. Implications of the findings are also discussed.;2021
Educational research on predicting learners? computer programming performance has yielded practical implications that guide task designs in computer education. There have been attempts to investigate learners? computer programming patterns using high-frequency and automated data collection. This approach can be considered as process-based analysis as opposed to outcome-based analysis (i.e., the use of test or exam scores). In this process-based approach to investigate learners? computer programming process, we included two critical constructs in our research, self-regulated learning and computational thinking skills. We aimed to identify learners? computer programming patterns in the context that novice students learn a computer programming language, Python, in an online coding environment. We examined the relationships between the learners? coding patterns, self-regulated learning, and computational thinking skills. Initially, we adopted a traditional approach with the aggregate data of learners? computer programming behaviors. We then utilized a computational analytics approach to learner performance, self-regulated learning, and computational thinking skills, with everchanging computer programming patterns. In our initial approach, the indicators of aggregate computer programming data were not associated with learners? learning performance and computational thinking skills. In the computational analysis approach, many indicators revealed significant differences between the identified patterns regarding computational thinking skills and self-regulated learning. Recommendations about the use of programming log data analysis methods and future scaffolding for computer programming learners are addressed.;2021
Educational Robotics (ER) has the potential to provide significant benefits to education, provided an increase in outreach by transitioning from the extra-curricular initiatives in which ER has thrived to formal education. As Computer Science (CS) Education is undergoing curricular reforms worldwide, the present study addresses the case of a Digital Education reform that included ER as a means to teach core CS concepts. Approximately 350 teachers from the first four grades of primary school participated in a mandatory two-year continuing professional development (CPD) program. The first year of the program was dedicated to CS and introduced teachers to CS Unplugged (CSU) and Robotics Unplugged (RU) activities. As such, we analyse the interplay between these activities and focus on teachers' voluntary adoption of the proposed content in classrooms. This is complemented by an analysis of their perception and recommendation of ER. The findings highlight three main points. Firstly, ER benefits from the integration in the CS CPD, as this provides the necessary traction to introduce ER into teacher practices (the teachers freely devoted 2275 h to ER activities in their classrooms, over two years). Secondly, the presence of ER activities in the CS-CPD allows a higher proportion of teachers to adopt the CS content, as there are teachers that favour one type of activity over the other. Finally, the globally positive perception of ER registered in this study is relevant for two reasons: teachers were not voluntarily participating in the CPD, and results did not differ between pioneers and novices.;2021
Educational robotics is increasingly present in our educational system. And the stage of Early Childhood Education in particular is no stranger to it. Increasingly, teachers are turning to easy-to-use, low-cost resources such as floor robots to introduce robotics to the classroom. In order to carry out a planned and coherent implementation, it is necessary to analyze and reasonably choose the resource that best suits the educational needs of the students. With the intention of providing an instrument that allows this, a FAREI file was designed and validated by 50 experts in educational robotics, the result of this research, which allows each individual to enter the world of floor robotics and its educational potential in the development of skills and competences of Early Childhood students. With the contributions of the experts, it was possible to cover all the possibilities that this world of robotics can offer to education and put them at the service of the teachers who are going to make a planned use of it.;2021
"Educational technology designs in developing countries mostly focus on making knowledge resources widely available, through MOOCs, repositories and computer-based tutoring. The use of digital media for cognitive augmentation, particularly interactive designs that help learners understand modelling topics in STEM, is underexplored. We report a 3-year design study examining this potential in the Indian context, testing two iterations of an interactive system, Touchy-Feely Vectors (TFV). The design supports learning vectors, a modelling topic pre-university students struggle with. Virtual lesson-plans were co-designed with teachers to augment - but not replace - their existing practices, and to address classroom and resource constraints. Pre-post testing of TFV-1 (a computer-based prototype) showed that it helped students develop a more integrated vector concept, and improved their reasoning. Field-implementation of TFV-2 (a textbook-linked touch-screen based design) in 6-classrooms (3-Control, N=135; 3-Experimental, N=131) showed that it fostered cognitive engagement in average-students and geometry-algebra integration (model-based reasoning) in good-students. These results, along with a requirements analysis based on textbooks, indicate that the interaction possibilities supported by different representational media critically shape student reasoning. The study also illustrates a systematic approach to design and test digital media systems that support cognitive augmentation in developing countries.";2021
Evidence-centered design (ECD) is an assessment framework tailored to provide structure and rigor to the assessment development process, and also to generate evidence of assessment validity by tightly coupling assessment tasks with focal knowledge, skills, and abilities (FKSAs). This framework is particularly well-suited to FKSAs that are complex and multi-part (Mislevy and Haertel, 2006), as is the case with much of the focal content within the computer science (CS) domain. This paper presents an applied case of ECD used to guide assessment development in the context of a redesigned introductory CS curriculum. In order to measure student learning of CS skills and content taught through the curriculum, knowledge assessments were written and piloted. The use of ECD provided an organizational framework for assessment development efforts, offering assessment developers a clear set of steps with accompanying documentation and decision points, as well as providing robust validity evidence for the assessment. The description of an application of ECD for assessment development within the context of an introductory CS course illustrates its utility and effectiveness, and also provides a guide for researchers carrying out related work.;2021
Fostering of computational thinking (CT) skills has become an essential goal for engineering courses. This paper provides and discusses a teaching approach based on model-eliciting activity (MEA) for enhancing students' CT in existing engineering courses. To verify the proposed approach, experimental studies were performed with students in the practicum unit of a computer-aided engineering course. First, we investigated the feasibility of integrating CT training into the engineering courses through guiding students to perform a topic-specific design task. Second, we compared the influences of the MEA-based approach and conventional lecture-based approach on students' learning effect with respect to course objectives and CT skills. Results show the CT-integrated teaching did not at least weaken the teaching effect of the engineering course, and the MEA-based approach seems to be more conducive to strengthening students' skills of identifying and solving problems, as well as team cooperation. Results also show the learning effect of the MEA group has apparent advantages for enhancing CT skills. These findings suggest that using MEA in engineering courses is beneficial to promote students' CT skills in terms of simplification, embedding, transformation, and simulation.;2021
Given the widespread acceptance of computational thinking (CT) in educational systems around the world, primary and higher education has begun thinking about how to cultivate students' CT competences. The artificial intelligence of things (AIoT) combines artificial intelligence (AI) and the Internet of things (IoT) and involves integrating sensing technologies at the lowest level with relevant algorithms in order to solve real-world problems. Thus, it has now become a popular technological application for CT training. In this study, a novel AIoT learning with Augmented Reality (AR) technology was proposed and explored the effect of CT skills. The students used AR applications to understand AIoT applications in practice, attempted the placement of different AR sensors in actual scenarios, and further generalized and designed algorithms. Based on the results of the experimental course, we explored the influence of prior knowledge and usage intention on students' CT competence training. The results show that proposed AIoT learning can increase students' learning intention and that they had a positive impact on problem solving and comprehension with AR technology, as well as application planning and design.;2021
How you think about a phenomenon certainly influences how you create a program to model it. The main point of this essay is that the influence goes both ways: creating programs influences how you think. The programs we are talking about are not just the ones we write for a computer. Programs can be implemented on a computer or with physical devices or in your mind. The implementation can bring your ideas to life. Often, though, the implementation and the ideas develop in tandem, each acting as a mirror on the other. We describe an example of how programming and mathematics come together to inform and shape our interpretation of a classical result in mathematics: Euclid's algorithm that finds the greatest common divisor of two integers.;2021
In 2010, Nolan and Temple Lang proposed integration of computing concepts into statistics curricula at all levels. The unprecedented growth in data and emphasis on data science has provided an impetus to finally realizing full implementations of this in new statistics and data science programs and courses. We discuss a proposal for the stealth development of computational skills in students' exposure to introductory data science through careful, scaffolded exposure to computation and its power. Our intent is to support students, regardless of interest and self-efficacy in coding, in becoming data-driven learners, who are capable of asking complex questions about the world around them, and then answering those questions through the use of data-driven inquiry. Reference is made to the computer science and statistics consensus curriculum frameworks the International Data Science in Schools Project (IDSSP) recently published for secondary school data science or introductory tertiary programs, designed to optimize data-science accessibility.;2021
In a world where algorithms are ubiquitous, the development of computational thinking competencies is becoming progressively important among students, technology professionals, and 21st-century citizens in general. Educational games as a means of promoting computational thinking skills have gained popularity in recent years. Offering efficient educational games that promote computational thinking competencies requires personalized learning paths through adaptive difficulty. The research presented herein is a first attempt to define a difficulty function for maze-based programming challenges using log data obtained from Kodetu, which is a block-based maze game. Specifically, we conducted three studies with 9- to 16-year-old students who were asked to solve sequences of maze-based programming challenges. Using log data from these studies, we investigated the maze characteristics and the coding limitations that affect performance in the challenges and calculated the performance obtained by the participants using a fuzzy rule-based system. The results showed that the turns in a maze, the number of total steps of a maze, and the blocks provided affect student performance. Using regression analysis, we defined a difficulty function for maze-based programming challenges that considers the weights of these factors and provides a first step towards the design of adaptive learning paths for computational thinking-related educational games.;2021
In accordance with the progressive knowledge-to-ability transformation laws, a hierarchical learning model composed of cognitive layer, application layer, and design layer was created and applied to college computer teaching. This model was used to facilitate the deep learning among students through the association establishment, step-by-step understanding, and comprehensive application of new and old knowledge. In the teaching design process, the 5-problem teaching, which centered on student-problem-activity-resource, was conducted and applied to the Small Private Online Course (SPOC) + flipped classroom. The teaching result was assessed using the proposed hierarchical classification method. Results demonstrate that the improved teaching model remarkably enhances the ability of noncomputer major students to solve the practical problems encountered in their specialties by virtue of computational thinking through the data analysis of evaluation results and students' survey feedback. The students obviously speak more highly of the improved teaching model than the traditional blended teaching in the aspects of teaching content organization, learning effect, integration degree with the specialty and satisfaction. The degree of their participation in the flipped classroom reached as high as 90%.;2021
"In Hungary, K-12 informatics/computer science education focuses on mostly surface-based methods. This approach can be observed in the teaching of several topics in the subject, of which we focus on spreadsheet management. This is further emphasized by regulatory documents - the Hungarian National Core Curriculum and Hungarian Curriculum Frameworks -, where handling algorithms, calling schemata, and problem-solving in general are only assigned to the programming topic. In the process of fulfilling the requirements of the school curricula and the various tool-centered exams, students become familiar with the software interfaces and how to navigate them, instead of developing computational thinking skills and learning how to approach and solve real-world problems. Our educational system is based on a spiral teaching approach; therefore, spreadsheet management is taught throughout several grades in a small number of lessons. Prior research shows that students learning spreadsheet management with surface-approach methods do not build up a reliable knowledge structure. These students cannot solve problems in contexts differing to the ones in which they learned the topic and cannot use their surface navigation abilities in different software environments. Our research group focuses on spreadsheeting with an algorithm-building and problem-solving method at the center of the teaching-learning process. For this purpose, we have developed and introduced the Sprego (Spreadsheet Lego) methodology. Sprego is based on Polya's four-step concept-based problem-solving approach, and its efficiency has already been proved compared to traditional low-mathability surface-approach methods. In the comparison of the low- and high-mathability approaches, several further questions arise, and amongst them one crucial aspect is how the different methods support the schema-construction and knowledge built up in long-term memory. In this paper we discuss this question using a delayed post-test that was carried out one year after the treatment period. We focused on the students' achievement both in the experimental (Sprego) and control (traditional surface-approaches) groups based on the methods used one year prior to the administration of the delayed post-test. The results show that students who learned the spreadsheet management topic with Sprego achieved significantly better scores on the delayed tests than those students who used low-mathability approaches.";2021
In recent years, computational thinking (CT) skills have been globally recognized as a 21st-century skill that must be developed for future generations. However, the lack of validated CT assessments would be a major impediment in the efforts to incorporate CT into the school curriculum. This study is intended to validate the Computational Thinking Test (CTt) using the Rasch model by identifying whether the data fit the Rasch model measurement, determining the CT abilities among a small sample of Singapore secondary students through the test, and examining the presence of test items that functioned differently for gender and grade level of the students. In this study, 153 upper secondary school students from Grade 9 and Grade 10 were involved in a test that required them to do the CTt which comprises 28 test items. The performance of the students in CTt was utilized as quantitative data in this study and was analyzed using the Rasch model. The findings revealed that the data fit the Rasch model measurement. The majority of the male students and ninth-graders had a high level of CT abilities, while most of the female students and tenth-graders had a moderate level of CT abilities. Hence, the male students and ninth-graders performed better than the female students and tenth-graders. Four items functioned differently between male and female students where one gender had a better chance to get the correct answer in these four items compared to the other gender. Only one test item was functioning differently for Grade 9 and Grade 10. This means that the students of one grade level were more likely to obtain the correct answer in this item than the students in the other grade level. This study hopes to contribute to the literature in the area of CT assessments by providing a reference case for scholars and researchers in assessing CT abilities among the students.;2021
In recent years, mathematics classrooms in the U.S. and around the world have seen an increasing integration of educational robotics with interest from both students and teachers. Through their robotics coding activities, students in the present study discovered the concepts of special angle pairs in geometry-namely, complementary and supplementary angles-as they learned to navigate the immediate feedback from the robot Sphero SPRK+ into a trial- and-error mathematics problem-solving process. Students' experiences in these three coding activities revealed, to a certain extent, that engaging in reflective play could be shaped into meaningful teachable moments where students could participate in a doing with learning. pedagogical method using educational robotics. These activities had transferability implications that might afford STEM learning access and opportunities for students to develop not only mathematical reasoning skills, but also problem solving and critical thinking skills operable to a coding environment. This paper presents students' use of educational robotics in a school geometry curriculum setting to demonstrate the possibility that mathematics concepts could be gathered and mastered in a playful and informal manner, and that robotics games and computer coding could be performed and framed in a thoughtful and challenging manner.;2021
In Taiwan, the Ministry of Education started promoting computational thinking (CT) and design skills in the programming curriculum in 2018 at all universities. CT, which has been widely discussed in the field of education, is the ability to solve problems that use computer science concepts. For students in non-information technology fields, such as nursing students, a curriculum that integrates nursing education and information literacy can bolster evidence-based practice, enhance professional development, and encourage lifelong learning. However, the programming courses were difficult for non-information learners to apprehend, given their lack of knowledge in programming, and had a low attrition rate. Therefore, it is necessary to establish a sustainable management system in the learning process. It is also important to support the interest and confidence of the nursing learner in the programming curriculum. In this study, a programming course for nursing students was completed. A talent quality-management system (TTQS) for this programming course was built and implemented. A technology acceptance model and learning attitude questionnaires were administered to investigate learners' learning motivation and information literacy. Two nursing classes with 74 freshmen participated in the curriculum in the second semester of the 2020 academic year. The results showed that TTQS, which supports teachers in adjusting pedagogy in a timely manner, can enhance learners' motivation and performance. In this programming course, nursing students can learn CT and information concepts and improve their learning motivation through the design of learner-centred and collaborative learning.;2021
"In the last few years, programming, computational thinking, and robotics are more frequently integrated into elementary education. This integration can be done in many different ways. However, it is still unclear which teaching methods work in which situations. To provide some clarity in this area, we compared two methods of integrating programming into a primary robotics workshop for learners aged ten to twelve. In one method, students create programs from scratch; in the other, they start with a faulty program they have to fix. These teaching methods were evaluated using the framework of learning ecology, which provides a holistic framework for assessing complex learning environments. We identified different indicators of learning ecology and assessed our workshops using a mixed-methods approach. Our results showed no difference between the groups on the intrinsic dimension of a learning ecology. However, on the experiential dimension, the learners in the create group scored better on all tests. Our results show the value of a multidimensional assessment of learning ecology to understand different teaching techniques. Additionally, the results provide us with important insights on how to integrate programming into a primary robotics curriculum enabling teachers to select better methods for teaching computing in their classroom.";2021
In the modern education system, new technological teaching aids are used to support learning, to increase motivation and adaptation of students. Game-based Learning (GBL) is one of such aids that it can be successfully integrated to improve teaching and learning in diverse courses. In computer science courses, the concept of programming is found confusing and difficult to understand by students. This study is conducted to investigate and analyze the disposition of 5th grade primary school students on programming through a digital game-play. Sixty-three 5th grade primary school students, with little or no programming knowledge, performed various activities through a digital game framework. The study is based on a descriptive survey model and was carried out by using convergent mixed method design for data collection process. The data were collected through quantitative and qualitative approaches consecutively after the students were experimenting on the given digital game-based activity. The findings indicated that digital game-play helped the students to understand the concept of programming and it is observed that students have developed positive disposition towards programming through game-based activities even if they can have preconceptions.;2021
"In the modern era, talent cultivation plays an essential role in the transition process to sustainable development. The emerging direction of talent cultivation is intended to achieve global competence in computational thinking and digital literacy; however, there is still a gap in Taiwan. Scholars and educators have identified the contents of digital literacy, which include statistical concepts, data analysis skills, and critical thinking. To fill this gap, this study proposed an innovative educational teaching method that integrates data visualization techniques and critical thinking training to improve students' decision-making literacy. An experiment on the curriculum with a one-group pre-test and post-test design was conducted for 79 participants. The data consisted of a geographical data map, visualized data diagrams, and a statistical test; the scores for critical thinking, academic self-confidence, and academic performance were separated into high, middle, and low achievement groups. For data analysis, the bootstrapping method (resampled 1000 times), paired sample t-test, and ANCOVA were applied for data analysis to compare the difference between each independent group. The results showed that the post-test scores (statistic test M = 9.59, infographic test M = 6.09, map test M = 5.02) were higher than the pre-test scores (statistic test M = 7.15, infographic test M = 3.46, map test M = 3.13). The most significant implication is the innovative teaching approach based on integrated data visualization and critical thinking. It plays a very significant role in enhancing decision-making abilities.";2021
In this contribution, we try to show that traditional Aristotelian logic can be useful (in a non-trivial way) for computational thinking. To achieve this objective, we argue in favor of two statements: (i) that traditional logic is not classical and (ii) that logic programming emanating from traditional logic is not classical logic programming.;2021
"In this paper the challenge of promoting computational thinking for all by contextualized computing education is addressed. The two phases learning session we designed was implemented in the AlgoRythmics environment which includes ten algorithmic dance choreographies (and attached interactive computer animations). In addition to previous studies that had focused only on supporting students in assimilating the strategy of the studied algorithms, this study examined whether they are able to build on this knowledge by extracting from visualizations some algorithm efficiency related concepts too. To this end, the learning environment was complemented/supplemented with targeted questioning (with and without teacher guidance). Participants (first year undergraduate students) were grouped based on the number of years they had learned programming in high school (0, 1/2 or 4 years). We performed two analyses: (1) group-0 vs. group-1/2 and group-4 (N=181; self-paced setting: algorithm visualization complemented with teacher prepared questions); (2) group-0 (one-group pretest-posttest design, N=46; supplementary Socratic questioning). Research results revealed that the AlgoRythmics environment, if complemented/supplemented with tutorial question-asking, could be an effective instrument in introducing students with no prior knowledge in computing (group-0), even with deeper Computer Science concepts such as algorithm efficiency.";2021
In this paper, we discuss the need for new approaches to research regarding coding to support students in developing practices in computational thinking, such as abstraction and decomposition, in multidisciplinary contexts. We explore students' activities with a tool integrating constructionist textual programming activity with game-based learning and specifically game modding. In this context, we designed a programmable 'design-to-play' game developed with the computational environment MaLT2. MaLT2 offers the affordances of textual programming, dynamic manipulation, and 3D navigation for the design of 3D animated models aiming to give children access to, otherwise, complex, computational and mathematical ideas. To develop an understanding of children's learning activity regarding computational practices, we organised an empirical study with middle-school students, who played a game called 'Code-the-Mime'. It is a charades-based game in which the players manipulate, programme, and modify a digital human model to describe a word to their teammates. The preliminary findings indicate that the affordances of MaLT2 in conjunction with the game context enabled students to express and develop key computational practices, including decomposition, pattern recognition, analysis and abstraction, in a meaningful and multidisciplinary context. Practitioner notes What is already known about this topic Computational Thinking is considered a key 21(st)-century skill in preparing the young to become digital citizens. It involves concepts and practices that can be used to solve problems computationally across multiple fields. However, there is still limited knowledge of how students develop computational practices, such as abstraction, pattern recognition, decomposition, and how they may express and apply them in diverse contexts. Students' engagement with computational practices is unlikely to be supported either by closed, simplified coding tasks or higher-level advanced programming exercises. There is a need to clarify the manifestation of these practices and how they can be realised and expressed and used by learners in meaningful and transdisciplinary contexts. What this paper adds It suggests the design of constructionist computational games that integrate design and programming into the gameplay, aiming to engage students with computational practices in a multidisciplinary, authentic context. It provides an example of a 'design-to-play' charades-like game, developed in a 3D modelling programming environment, that embeds real-life representations into computational design, to enable 'syntonic learning' of computational practices. Furthermore, it analyses student learning activity to elaborate on arguments and issues related to this approach. Implications for practice and/or policy There is added value in disconnecting computational thinking from positivist diagnostic approaches related to respective concepts and studying it in ways more related to realistic problem-solving situations and multidisciplinary contexts. The study contributes to the scientific clarification of computational practices concerning how they are being realised and expressed by the students in different contexts through an original example of educational practice. The discussed approach and tools can contribute to the design and development of innovative digital media, embedding affordances for concepts and practices while maintaining relevance and interest for their users.;2021
In this paper, we explore the challenges experienced by a group of Primary 5 to 6 (age 12-14) students as they engaged in a series of problem-solving tasks through block-based programming. The challenges were analysed according to a taxonomy focusing on the presence of computational thinking (CT) elements in mathematics contexts: preparing problems, programming, create computational abstractions, as well as troubleshooting and debugging. Our results suggested that the challenges experienced by students were compounded by both having to learn the CT-based environment as well as to apply mathematical concepts and problem solving in that environment. Possible explanations for the observed challenges stemming from differences between CT and mathematical thinking are discussed in detail, along with suggestions towards improving the effectiveness of integrating CT into mathematics learning. This study provides evidence-based directions towards enriching mathematics education with computation.;2021
In this paper, we share our approach and the process for qualitative analysis of online video data recorded during an after-school robotics program that emphasized computational thinking (CT). Online research strategies may be necessary for various reasons such as when working with a geographically distributed research team, when conducting research with students in an online program, or when resources are inaccessible due to campus closures like those experienced during the COVID-19 pandemic. We followed a three-stage process during qualitative analysis of the videos that included planning and setup, online analysis of videos, and structural coding of memos to explore patterns across the data. Analysis was conducted with a combination of technologies including Google Drive for collaborative coding online and NVivo to collate and summarize findings. The methods and process we describe are readily applicable to other research studies that include video as part of the data set.;2021
In this personal essay, I explain how my use of visual modelling has the capacity to broaden constructionism in five important ways. (1) It introduces new techniques for students to describe and document, in a personal way, what they are actually doing in modelling. (2) It introduces the big ideas of mathematical modelling and computational thinking in a way that is far more inclusive than many other constructionist-oriented courses that are labelled as math, science or computer science. (3) It favours the modelling of student-selected objects in the physical world over the modelling of concepts and problems drawn more directly from traditional math and science. (4) It introduces the core ideas of design and colour theories in context. (5) It demonstrates the benefits of using narratives and personal journaling to explore the thought processes that help us make sense of the world. Practitioner notes What is already known about this topic We know a great deal about the successes of STEM-centred constructionism. Constructionist-inspired Scratch, FabLabs and Maker Fairs attract millions in and out of schools all over the world. The worldwide teaching of coding, beginning in the earliest years, is now informed by constructionist ideas. UCL ScratchMaths is a good example of this. What this paper adds It expands constructionist teaching and research beyond math and computer science, into the fine arts, social sciences, literature and the humanities. It describes a multidisciplinary teaching project, begun in 1981, that mixes mathematical modelling, computer programming, drawing, narrative psychology, art history, design theory, intellectual history, writing and theatre-within a constructivist/constructionist framework. It recommends that the history of successful interdisciplinary courses, like the one described in this paper, should be better known and documented so that lessons can be shared. Implications for practice and/or policy For constructionism to become a theory of learning, constructionists must first explore learning in many different disciplines and contexts. Interdisciplinarity can provide a useful opening for doing so. For constructionists to play an important role in creating interdisciplinary courses, they must not just learn to work openly with colleagues from other disciplines, but they must also be eager to read and study approaches different from their own. Finally, interdisciplinary activity occurs most felicitously when the actors involved commit to respectful exchanges, attentive listening and a willingness to create a common enterprise.;2021
In this research, a scale was developed to determine the programming-oriented computational thinking skills of university students. The participants were 360 students studying in various departments at different universities in Turkey for computer programming. The scale consists of 33 items under conceptual knowledge, algorithmic thinking, and evaluation subscale. While there was no significant difference between the students' conceptual knowledge and algorithmic thinking skills, the evaluation skills of male students differed significantly compared to females. Programming experience has a significant effect on conceptual knowledge, algorithmic thinking, and evaluation. The algorithmic thinking skills of the students who have low, middle, and high-level programming experience differed significantly. In terms of the development of conceptual knowledge and evaluation skills, it was observed that students should have at least one year of programming experience, but this experience will not make a significant difference if it is four years or more. It is thought that this scale, which is structured for different applications (e.g., web, game, robot) and learning environments (e.g., text, block) within the framework of its programming capabilities (conceptual, semantic, strategic knowledge), will contribute significantly to the evaluation of computational thinking as programming oriented.;2021
In this study, a learning-data collection system to acquire the data regarding developmental stages and learning activities has been developed for the purpose of self-directed choosing of learning tasks by children. The skills necessary for the children to choose their own learning tasks are categorized into three segments-computational thinking, ICT literacy, and social perspective-that correspond to learning the various activities that the authors promote. These learning activities are programming classroom, IT advisement session, and children's city. This study proposes a system design of the learning-data collection system. The learning-data are collected in the programming classrooms. The research question of this study is to find out how the learning frequency in programming education for children affects the depth of reflection and the differences in the quality of learning. As a result of analyzed learning-data, it was confirmed that the more frequent the learning, the deeper reflection was possible to promote more self-directed learning.;2021
In this study, the authors analyzed data from a sample of thirty-two middle school students from an urban school district in the southeastern United States who used MIT's App Inventor to design, create, and remix mobile apps during an afterschool program for one school year. This paper focuses on computer science learning outcomes as measured by an assessment created by the authors. Findings indicated a linear relation between the number of apps a participant created during the given afterschool program and their level of accuracy on the assessment. Findings and discussion should be of interest to both researchers and practitioners.;2021
In this work we examine youth learning in an informal computing program implemented through a library-university partnership. In particular, we introduce and illustrate a culturally responsive computing framework which served as a foundation for the design of the program. Subsequently, we examine youth collaboration as well as affective and cognitive learning outcomes. Data were collected from university program facilitators and 30 youth over one semester. Data were collected through observations, lesson plans, computational artifacts and interviews with two case study youth. Results indicated that youth formed a variety of learning communities during the collaborative development of computing artifacts. Frequent participants were found to work with a greater number of peers compared to less frequent participants. Results from case study participants also indicated improvements in their computational competencies. Findings from this work have implications for the design of informal learning environments that help broaden participation in computing.;2021
In university computer course, character encoding and its processing involves multiple hardware, and the process is relatively complex and mostly invisible, which makes it difficult for students to understand. In this paper, a virtual experiment is proposed to this process. By using Blockly and other tools, students can independently design character encoding and write Blockly code to describe the whole process of character processing. Relying on virtual reality and human-computer interaction technology, the whole process of character processing can be visually demonstrated. It enables students to deeply understand the functions of various character encodings and deepens the understanding of binary coding methods.;2021
"Incorporating computer science (CS) into K-12 education has been highlighted in recent years as an important way to promote computational thinking skills. The aim of this study was to investigate teachers' experiences with a new CS curriculum and address challenges to teachers during implementation. This study was designed to evaluate CS curriculum implementation in order to inform CS practices. Interview and survey data were collected and analyzed. Findings showed that teachers had high confidence in teaching CS; however, they sought professional development to acquire content knowledge and instructional strategies to effectively engage students in learning. As for the curriculum and students, the scope of the curriculum needed to be adjusted along with students' prerequisite skills and knowledge. As for the context, some schools did not have appropriate facilities. Recommendations for implementing CS curricula and implications are discussed.";2021
Increasingly in K-12 schools, students are gaining access to computational thinking (CT) and computer science (CS). This access, however, is not always extended to students with disabilities. One way to increase CT and CS (CT/CS) exposure for students with disabilities is through preparing special education teachers to do so. In this study, researchers explore exposing special education preservice teachers to the ideas of CT/CS in the context of a mathematics methods course for students with disabilities or those at risk of disability. Through analyzing lesson plans and reflections from 31 preservice special education teachers, the researchers learned that overall emerging promise exists with regard to the limited exposure of preservice special education teachers to CT/CS in mathematics. Specifically, preservice teachers demonstrated the ability to include CT/CS in math lesson plans and showed understanding of how CT/CS might enhance instruction with students with disabilities via reflections on these lessons. The researchers, however, also found a need for increased experiences and opportunities for preservice special education teachers with CT/CS to more positively impact access for students with disabilities.;2021
Integrating computer science (CS) into school curricula has become a worldwide preoccupation. Therefore, we present a CS and Robotics integration model and its validation through a large-scale pilot study in the administrative region of the Canton Vaud in Switzerland. Approximately 350 primary school teachers followed a mandatory CS continuing professional development program (CPD) of adapted format with a curriculum scaffolded by instruction modality. This included CS Unplugged activities that aim to teach CS concepts without the use of screens, and Robotics Unplugged activities that employed physical robots, without screens, to learn about robotics and CS concepts. Teachers evaluated positively the CPD and their representation of CS improved. Voluntary adoption rates reached 97% during the CPD and 80% the following year. These results combined with the underpinning literature support the generalisability of the model to other contexts.;2021
Interest in coding education has exploded in the past five years, especially in elementary and early secondary education. Teachers who are largely new to coding are expected to guide entire student bodies through the fundamentals of coding and computational thinking. But little is known about which coding and computational thinking (CT) concepts teachers feel most comfortable with and which concepts they struggle with. This study describes 127 elementary coding teachers' changes in their beliefs about teaching coding and CT as they participated in year-long continuous professional development. Novice elementary coding teachers demonstrated most growth in their self-efficacy for teaching sequences, algorithms and loops. They were less secure in their knowledge of conditionals, variables, and functions. For computational thinking, teachers were most confident in their ability to identify patterns, think algorithmically, understand logic, and evaluate outcomes, showing less growth with decomposition and abstraction.;2021
Introduction Programming can be an intellectually satisfying skill and is definitely considered useful. However, problem-solving with a computer involves much more than just learning programming language syntax. The theory and practice are interrelated in fascinating ways. Whether one thinks that the purpose of college or higher education is to prepare students for an occupation or to develop foundational knowledge with lifetime benefits (or both), computer science (CS) has become a fundamental part of 21st-century life. Even students studying in areas other than CS are likely to have significant encounters with computational thinking (CT) later on in life. Motivation and Objectives Colleges and universities offer the opportunity for students to take as many courses as they desire in coding, programming, and CS taught by faculty members from that discipline area. However, this approach alone is deemed insufficient for computer-based problem-solving and computer programming. Effective programming teaching pedagogy also requires organizational principles that can guide us in formulating the overall design of a programming science curriculum (CS). In particular, we need strategies that help us structure multiple paradigm-based teaching curricula into manageable modules. This study aims to develop a framework for programming pedagogy. Research Methodology and Methods A systematic literature review was conducted for identifying, evaluating, and interpreting relevant research to explore programming paradigms that could be incorporated for novice programmers, possible implementation strategies, and instructional methods for teaching text-based programming, CT concepts, and practices. Results and Findings This paper's focus was on the pedagogical phenomenon of teaching programming considering the evolving paradigms, implementation strategies, and instructional methods and techniques through the lens of CT. Hence, a framework to design a learning path for pedagogical approaches that consist of CT concepts and practices within text-based programming were proposed. The proposed framework is based on the assumption that any ongoing research on computing pedagogy requires a review of what CT is, how it impacts on teaching and learning and its role within the pedagogy advocated. The programming pedagogy framework consists of four fundamental components: programming paradigm, implementation strategy, instructional methods, and instructional techniques.;2021
Introduction Science, Technology, Engineering, and Mathematics (STEM) and STEAM (with A for Arts) have evolved to symbolize the renewal of science education. STEAM education offers a number of benefits, such as improved problem analysis and solving skills, as well as the development of creative abilities. Many researchers reiterate the importance of STEAM-related activities and programs, especially the integration of maker education. Despite much interest in STEAM, it is often challenging for many educators to incorporate integrated activities into their teaching practice. This paper deals with the value of STEAM integration in a methodological sense, with a focus on the maker's laboratory and physical computing, as well as the application of design thinking and computational thinking approaches. Motivation and Objectives The goal of this study is to develop a comprehensive conceptual framework for integrated STEM curricula focusing on the following research questions: (a) how to improve daily activities of STEM education by combining the activities of different laboratories and using a design thinking approach? and (b) how to combine FabLab activities and physical computing related to teaching different aspects of computational thinking in the context of STEM? Research Methodology and Methods As a research methodology, we implement a mixed methods strategy to combine theoretical study and empirical research based on a synthesized literature survey and the process of iterative model development based on an observational case study. We conduct a detailed case study of two applications of integrated activities based on FabLab and physical computing integration, and illustrate how design thinking can guide teachers to open up for interdisciplinary, creative, and project-based opportunities. Results and Findings The paper provides a conceptual framework for STEM integration activities and step-by-step guidelines on how design thinking methods could could interact in practice. The implications of the results may be useful for educators seeking recommendations for the integration process, which enable educators to design hands-on activities and incorporate integrated aspect of students' STEAM learning into teaching practice. Inconclusions, the authors suggest that as interdisciplinary crossroads, design thinking provides a natural bridge between subjects, and fits especially to integrate activities of the maker's labs and physical computing, focusing on the integration of computational thinking and computational making approaches within STEM education environment. The absence of a statistical evaluation, which is positioned as a further research step, may be mentioned as alimitationof the study.;2021
It is likely to observe that the increase in data and the interrelated challenges in digital age complicates the problems to be encountered. Therefore, unprecedented problem-solving skills have become inevitable. Though dating back to old times, computational thinking skill is defined as a recent skill area that is required by everybody, that can be used to solve the aforementioned complex problems, and that is included in international standards and training programs. In this study, it was aimed to improve computational thinking skills of prospective teachers. In order to do this, a program design which includes contents that prospective theachers can use in daily life and professional life has been developed. This program, which consists mostly of unplugged activities, also includes computer aided and robotic activities. A total of 11 voluntary prospective teachers (7 women and 4 men), who were in their 3rd year of the 4 year education in the 2017-2018 fall semester and did not attend to any programming or computational thinking education training before, participated in the study. In the first application, a 40-h program was carried out with five prospective teachers, while in the second application, an updated 52-h program was carried out with six prospective teachers. A skill test was developed, and applied to measure prospective teachers' computational thinking skills before and after the prepared program. Moreover, at the end of the training, they were asked to preapare graduation projects and their perspectives on education were examined. It has been observed that the program applied to prospective primary education teachers, who did not take any lessons like programming etc. before, was effective according to the computational thinking related skill tests and their graduation projects. It has been also observed in prospective primary education teachers that their thinking skills such as problem solving and questioning were improved and they could reflect their acquired knowledge and skills to their daily and professional life.;2021
Just as engineering and computational thinking have recently gained increased attention in pre-college school-based education, many museums and science centers have also designed exhibits and experiences to promote computational thinking and engineering learning. Recent reports suggest that computational and engineering thinking can empower each other, and engineering design can be an appropriate context for children's engagement in computational thinking. Previous studies have documented young children's abilities to engage in engineering thinking and other studies have collected evidence of young children's abilities to engage in computational thinking. However, there is little research that explores how children's engagement in both engineering and computational thinking can support each other. Hence, in this qualitative case study, we aimed to examine how 5 to 7-year-old children engage in computational thinking competencies in the context of a family based engineering design activity. This activity was conducted at a small science center exhibit. In our presented findings we map children's enactment of at least one CT competency to children's engagement in engineering design actions.;2021
"Leading architectural firms in professional practice are expanding their range of design possibilities using digital design strategies. A digital design strategy enables architects to make informed decisions and better handle the interdisciplinary nature of the discipline, while dealing with various complexities, uncertainties and an infinite number of the potential solutions. One of the main responsibilities of architectural education is to educate students on the breadth of professional opportunities and career paths. Therefore, it is highly important to examine the sufficiency of available digital design courses in the architectural education curriculum. To achieve this, the study examines the curriculum of two architectural programs in the Middle East and compares the findings with award-winning architectural firms in international professional practice from a digital design perspective. In the first step, various cutting-edge technology-driven firms were investigated, then three award-winning firms were subsequently selected and studied using a deliberate review. Secondly, the curriculum of each architecture school was reviewed and the responsible instructors were interviewed through a qualitative method of in-depth interviews; the perceptions and suggestions of eight academic staff members from both schools (four each) were recorded to facilitate an assessment of the status of the integrated digital design methodologies in the architecture education of the intended schools. The findings indicate that the current structures of architecture education curricula cannot match the innovative challenges and social demands of architecture in the digital age. The importance of curriculum review, as well as different incorporation alternatives of the digital design applications, are also suggested.";2021
Many countries have been actively promoting computational thinking since it was put forward, and visual programming language, robots and educational tabletop games are commonly used in its promotion. To understand the relationship between students' learning of coding principles in educational tabletop games and players' cognitive processing at key points in time, students' behavior while playing the Interstellar Explorer tabletop game was observed by a brainwave EEG (electroencephalography) instrument and video and analyzed with cognitive processing. The results showed that a continuous increase in attention and meditation reflected a low level of knowledge and understanding as well as high-level application, analysis and evaluation of cognitive processing. This study explores the relationship between the state of students playing tabletop games and their behavior during play and then derives the relationship between their behavior and cognitive processing. It is recommended that the design of tabletop games consider how the learning content matches the game mechanics and examine whether cognitive processing is present according to Bloom's taxonomy. In addition, to enhance players' cognitive ability, it is recommended that tabletop games provide the ability to use contextual content and multiple strategies.;2021
Modernization of the educational content in the field of Computer science, or TT subjects, in the conditions of Czech primary schools is a relatively widely discussed topic today, as the educational content as well as the teaching methods of IT subjects at primary schools often remain more or less unchanged for many years. However, a completely different situation can be observed abroad, where, for many years, prominent experts have been making proposals to change the concept of teaching so that pupils are not only educated to become active technology users, but are also encouraged to try to devise their own procedures, propose tools for solving specific problems and develop the so-called computational thinking. So, what does the specific educational content of TT subjects at the 1st and 2nd stage of Czech primary schools look like? Which IT topics are actually taught? Are there any topics in teaching that are not embedded or accentuated in the curriculum documents? We will try to answer these questions in the submitted paper, which presents some partial outputs of the conducted research focused primarily on the issue of the acceptance of educational content of IT subjects taught at primary schools.;2021
"Natural language helps express mathematical thinking and contexts. Conventional mathematical notation (CMN) best suits expressions and equations. Each is essential; each also has limitations, especially for learners. Our research studies how programming can be a advantageous third language that can also help restore mathematical connections that are hidden by topic-centred curricula. Restoring opportunities for surprise and delight reclaims mathematics' creative nature. Studies of children's use of language in mathematics and their programming behaviours guide our iterative design/redesign of mathematical microworlds in which students, ages 7-11, use programming in their regular school lessons as a language for learning mathematics. Though driven by mathematics, not coding, the microworlds develop the programming over time so that it continues to support children's developing mathematical ideas. This paper briefly describes microworlds EDC has tested with well over 400 7-to-8-year-olds in school, and others tested (or about to be tested) with over 200 8-to-11-year-olds. Our challenge was to satisfy schools' topical orientation and fit easily within regular classroom study but use and foreshadow other mathematical learning to remove the siloes. The design/redesign research and evaluation is exploratory, without formal methodology. We are also more formally studying effects on children's learning. That ongoing study is not reported here. Practitioner notes What is already known Active learning-doing-supports learning. Collaborative learning-doing together-supports learning. Classroom discourse-focused, relevant discussion, not just listening-supports learning. Clear articulation of one's thinking, even just to oneself, helps develop that thinking. What this paper adds The common languages we use for classroom mathematics-natural language for conveying the meaning and context of mathematical situations and for explaining our reasoning; and the formal (written) language of conventional mathematical notation, the symbols we use in mathematical expressions and equations-are both essential but each presents hurdles that necessitate the other. Yet, even together, they are insufficient especially for young learners. Programming, appropriately designed and used, can be the third language that both reduces barriers and provides the missing expressive and creative capabilities children need. Appropriate design for use in regular mathematics classrooms requires making key mathematical content obvious, strong and the 'driver' of the activities, and requires reducing tech 'overhead' to near zero. Continued usefulness across the grades requires developing children's sophistication and knowledge with the language; the powerful ways that children rapidly acquire facility with (natural) language provides guidance for ways they can learn a formal language as well. Implications for policy and/or practice Mathematics teaching can take advantage of the ways children learn through experimentation and attention to the results, and of the ways children use their language brain even for mathematics. In particular, programming-in microworlds driven by the mathematical content, designed to minimise distraction and overhead, open to exploration and discovery en route to focused aims, and in which children self-evaluate-can allow clear articulation of thought, experimentation with immediate feedback. As it aids the mathematics, it also builds computational thinking and satisfies schools' increasing concerns to broaden access to ideas of computer science.";2021
Nolan and Temple Lang argued for the fundamental role of computing in the statistics curriculum. In the intervening decade, the statistics education community has acknowledged that computational skills are as important to statistics and data science practice as mathematics. There remains a notable gap, however, between our intentions and our actions. In this special issue of the Journal of Statistics and Data Science Education, we have assembled a collection of articles that (1) suggest creative structures to integrate computing, (2) describe novel data science skills and habits, and (3) propose ways to teach computational thinking. We believe that it is critical for the community to redouble our efforts to embrace sophisticated computing in the statistics and data science curriculum. We hope that these articles provide useful guidance for the community to move these efforts forward.;2021
"Over the last decade, continuous efforts have been made to bring computational thinking (CT) closer to K-12 education. These focused endeavors implicitly suggest that the current curricula do not sufficiently contribute to the development of learners' CT. On the other hand, since CT is a combined skill with cross-disciplinary implications, one might conclude that even without an explicit focus on CS education, students' CT might develop latently as they advance with the current curriculum. We have proposed to test whether differences exist in how 3rd-, 5th-, 7th- and 9th-grade learners from two Romanian educational institutions (girls vs. boys from Art vs. Theoretical school; 214 subjects with no prior experience in CT) relate to learning tasks that require a certain level of CT. The testing tool was inspired by the AlgoRythmics dance choreography illustration of the linear search algorithm and has the potential to reveal different levels of abstracting. Findings emphasize the need for a purposeful and coordinated CS infusion into K-9 education in order to accelerate students' CT development.";2021
Over the last years, mobile robot platforms are having a key role in education worldwide. Among others, LEGO Robots and MATLAB/Simulink are being used mainly in universities to improve the teaching experience. Most LEGO systems used in the literature are based on NXT, as the EV3 version is relatively recent. In contrast to the previous versions, the EV3 allows the development of real-time applications for teaching a wide variety of subjects as well as conducting research experiments. The goal of the research presented in this paper was to develop and validate a novel real-time educational platform based on the MATLAB/Simulink package and the LEGO EV3 brick for academic use in the fields of robotics and computer science. The proposed framework is tested here in different university teaching situations and several case studies are presented in the form of interactive projects developed by students. Without loss of generality, the platform is used for testing different robot path planning algorithms. Classical algorithms like rapidly-exploring random trees or artificial potential fields, developed by robotics researchers, are tested by bachelor students, since the code is freely available on the Internet. Furthermore, recent path planning algorithms developed by the authors are also tested in the platform with the aim of detecting the limits of its applicability. The restrictions and advantages of the proposed platform are discussed in order to enlighten future educational applications.;2021
"Over the past 7 years, we pioneered the development of a program blending dance choreography, computer programming, and a virtual environment to teach computational thinking, broadening pathways for more diverse students. We investigated the ways in which upper elementary and middle school students creating dance performances for virtual characters utilize embodied ways of thinking to engage with computational concepts, practices, and perspectives. Through quantitative and qualitative data analysis from five research contexts, we found that (a) students' computational thinking abilities improved; (b) distinct relationships formed between social, embodied interactions and student engagement with the virtual platform; and (c) students shifted their mental models of who computer scientists are and what they do after our interventions.";2021
Over the past decades, numerous practical applications of machine learning techniques have shown the potential of AI-driven and data-driven approaches in a large number of computing fields. Machine learning is increasingly included in computing curricula in higher education, and a quickly growing number of initiatives are expanding it in K-12 computing education, too. As machine learning enters K-12 computing education, understanding how intuition and agency in the context of such systems is developed becomes a key research area. But as schools and teachers are already struggling with integrating traditional computational thinking and traditional artificial intelligence into school curricula, understanding the challenges behind teaching machine learning in K-12 is an even more daunting challenge for computing education research. Despite the central position of machine learning and AI in the field of modern computing, the computing education research body of literature contains remarkably few studies of how people learn to train, test, improve, and deploy machine learning systems. This is especially true of the K-12 curriculum space. This article charts the emerging trajectories in educational practice, theory, and technology related to teaching machine learning in K-12 education. The article situates the existing work in the context of computing education in general, and describes some differences that K-12 computing educators should take into account when facing this challenge. The article focuses on key aspects of the paradigm shift that will be required in order to successfully integrate machine learning into the broader K-12 computing curricula. A crucial step is abandoning the belief that rule-based traditional programming is a central aspect and building block in developing next generation computational thinking.;2021
Over the past two decades, the integration of computational thinking, as well as information and communications technology within educational programs, has gained importance. A primary obstacle to integrating computational thinking into teaching and learning is the level of teachers' knowledge, skills, and perceptions related to this topic. This study aimed to determine the views of science, technology, engineering, and math (STEM) teachers regarding using information and communications technology within their teaching, emphasizing computational thinking within lessons, and conceptually developing levels of computational thinking skills. Another aim was to examine whether these variables differed according to educational discipline, teaching experience, and graduation factors. Data collection was conducted via an online questionnaire completed by participating teachers. One hundred twenty-one (121) teachers from 38 middle schools (34 public and 4 private) in seven different cities in the Republic of Turkey participated. An F test was used to determine whether selected scales, translated from an ICILS 2018 Teacher Questionnaire, differentiated according to educational discipline, teaching experience, and/or graduation factors. Pearson correlation coefficients were calculated to determine relationships between variables used in data collection. Results indicated that teachers need a sufficient level of education and guidance regarding incorporating information and communications technology into their lessons as well as how to consistently use these tools within their classrooms.;2021
"Pair programming is a collaborative learning mode to foster novice learners' computer programming. Previous empirical research has reported contrasting conclusions about the effect of pair programming on student learning. To further understand students' pair programming, this study uses a mixed method to analyze three contrasting pairs' collaborative behaviors, discourses, and perceptions from a multi-dimensional perspective. The analysis results show that the high-ranked student pair is characterized as the interactive, socially-supportive, and goal-oriented pair; the middle-ranked student pair is characterized as the highly-interactive, socially-supportive, and process-oriented pair; and the low-ranked student pair is characterized as the lowly-interactive, socially-unsupportive, and programming-distracted pair. The research reveals complex relations between collaborative behaviors, discourses, and performances, which have critical influences on students' pair programming quality. Based on the results, this research proposes pedagogical, analytical, and theoretical implications for future instructional design, learning analytics, and empirical research of collaborative programming.";2021
Performance in and perceptions of computational thinking (CT) are considered vital dimensions for comprehensively assessing CT skills of students. In this study, secondary school students' CT performance and their perceptions were examined in terms of certain variables including gender, grade level, achievement and self-efficacy. Casual-comparative and correlational methods were used. The sample of the study consisted of a total of 328 fifth- and sixth-grade (10-12 years old) secondary school students taking visual programming lessons. CT performance and perception tests were employed as data collection tools. The results show that CT performance of boys was higher than that of girls. A significant difference was found in both CT performance and perception depending on grades. The results show that achievement in math positively affected CT performance and perception. However, achievement in IT affected CT performance less than achievement in math. Implications are discussed in terms of theoretical insights, practices for improving CT skills in secondary schools and directions for further research. Practitioner notes What is already known about this topic Due to the complex structure of computational thinking (CT) in association with computers, cognition, learning and psychology, CT skills should be evaluated from a variety of perspectives. CT performance and perception are considered vital dimensions for comprehensively assessing students' CT skills. What this paper adds This paper proposes a CT performance test and a CT perception scale for secondary school students to explore their skills in terms of certain variables including gender, grade level and achievements in math and information technology (IT) courses. This paper provides some evidence that CT performance of boys is better than that of girls. A significant difference was found in both CT performance and perception depending on grades. The results of the study show that math course achievement positively affected CT performance and perception. However, IT course achievement affected CT performance less than math course achievement. Implications for practice and/or policy CT performance is affected by different variables. Therefore, it may be beneficial to include specific topics in the curriculum that involve the use of more CT skills. Girls' interest and participation in practices such as programming can be encouraged. Teachers should provide students with cognitive scaffolding to help them and to have them collaborate with each other during CT activities, especially at higher grades. IT course content should include systematic and comprehensive CT activities to improve students' CT skills. We suggest developing and implementing a holistic curriculum combined with IT and math lessons to improve students' CT performance.;2021
Persistence has been identified as a crucial quality of learning. However, it is hard to attain in online game-based environments as the drive to progress in the game may influence the ability to achieve the learning goals. This study aimed to examine the associations between micro-persistence, that is, the tendency to complete an individual task successfully, and task difficulty while acquiring computational thinking (CT). We further explored whether contextual or personal attributes better explain micro-persistence. We analysed data of 111 school students who used the CodeMonkey platform. We took a learning analytics approach for analysing the platform's log files. We found that micro-persistence is associated with task difficulty and that students who demonstrated an aptitude to learn new material are motivated to achieve the best solution. We also found that contextual variables better-explained micro-persistence than personal attributes. Encouraging micro-persistence can improve CT acquisition and the learning processes involved.;2021
Previous research has invested much effort in understanding how programming can contribute to the development of young learners' computational thinking (CT) in traditional K-12 classroom settings. Relatively few studies have examined programming for CT in informal online communities, especially for large scale quantitative research. With the repurposing and appropriation of code becoming standard practice for youth programmers in new and networked communities, this study proposes a model to investigate and explain how such remixing practices influence CT in learners. In particular, we use social cognitive theory to transform log data from more than 100,000 students and 200,000 programs in the Scratch online community into cognitive, environmental and behavioral factors. Then path modeling was used to show how the community environment can affect learners' remixing and further impact CT skills. The results demonstrate the intertwined relationships among the factors, generally showing that remixing can lead to CT improvement, but that over exposure to the community and excessive remixing can actually hinder CT development. Results and implications are further discussed.;2021
Programming is perceived to be an indispensable type of literacy in the digital era. To effectively promote and implement programming in K-12 education, it is necessary to understand school principals' perception of programming education. This study adopted a mixed methods design to explain principals' understanding, expectations, and support for programming education in primary schools using Theory of Reasoned Action (TRA). In study 1, survey questionnaires were distributed to all principals from public primary schools in Hong Kong. Two hundred and sixty-six principals responded to the survey (response rate = 55.6%). In study 2, a follow-up interview study with 13 principals was conducted to further explore their perception of programming education. The results of study 1 indicated that principals with a better understanding of programming education tend to have clearer expectations of how to implement programming education in their schools, which consequently leads to greater support for the implementation of programming education. In study 2, the thematic analysis further supported the results obtained in study 1. Specifically, the results of study 2 demonstrated that most principals show understanding, expectation, and support for the implementation of programming education, which in turn results in various positive student and teacher outcomes. The results also showed that challenges are inevitable during implementation, principals show capabilities and willingness to adjust their expectation and support to better integrate programming education into their school curricula.;2021
Promoting the cultivation of computational thinking (CT) skills in programming activities has become a key issue in the K-12 curriculum, however, there is no unified conclusion on how to design programming activities to promote the acquisition of CT skills more effectively. The purpose of this study is to determine the effectiveness of using programming to enhance K-12 students' CT skills and explore the influence of various programming instructional design factors on the acquisition of CT skills. This study presents a quantitative meta-analysis. A systematic search of randomized controlled studies on the influence of programming on CT skills. A total of 86 empirical studies with 114 effect sizes met the study selection criterion. The results showed that programming improved K-12 students' CT skills in general (Hedges' g = 0.601, 95% CI [0.505, 0.697], p < 0.001). No publication bias was detected. Besides, we found that the interdisciplinary integration of programming, the duration of programming intervention within 1 week to 1 month, the class size of less than 50 students, and a reasonable selection of programming instruments and CT assessment types may be more conducive to promoting students' CT skills. Based on these findings, we suggest that programming instructional design should be planned reasonably to make the best use of technology towards developing students' CT skills. This will be of great significance to programming teaching and CT education in K-12.;2021
"Public libraries around the world have been re-configuring their sites to include 'makerspaces'-as a dedicated area where learners engage in creating, inventing, designing, discovering, coding, building and exploring. Makerspace activity often involves learning-by-doing and problem-solving, in a variety of topics in Science, Technology, Engineering and Mathematics (STEM). This paper discusses the use of a public makerspace as an innovative learning environment, which has been specially set-up for exploring computational thinking (CT) in alignment with STEM activities. Interviews with primary school teachers explored their perceptions of the use of a makerspace for CT teaching and learning. Findings suggest that whilst teachers considered problem-solving important for developing CT skills, workshop sessions with tools/robotics seemed to hold higher value for them. Results also reveal teachers' uncertainties on how to design CT learning tasks and assessments; and discuss the role of makerspaces in offering opportunities for experimentation, collaboration, and shared inquiry in CT teaching and learning.";2021
Purpose - Governments and organizations worldwide are concerned over the declining number of young people choosing to study Science, Technology, Engineering and Mathematics (STEM), especially after the age of 16. Research has foregrounded that students with positive attitudes toward science are more likely to find it relevant and aspire to a science career. This study aims to understand the factors shaping students' attitudes as these are pivotal in promoting science learning. Design/methodology/approach - This study uses the framework of science capital to understand what shapes young people's engagement with or resistance to science. The authors conducted four Computational Thinking making-based workshops with 106 children aged 15-16 years, of which 58 filled in a questionnaire and 22 were interviewed. Statistical and content analyses were performed respectively. Findings - The results indicate that children who are more exposed to science-related activities and contexts are more likely to have higher self-efficacy, and that those with higher prior coding experience scored higher in their self-efficacy and science capital. Six themes emerged from the content analysis, highlighting the diverse factors shaping students' attitudes, such as teaching methods, stereotypes and the degree of difficulty encountered while engaging with science in and out of school. Originality/value - By combining qualitative and quantitative methods with the use of science capital, the authors found a number of aspects of the school experience that shape students' attitudes to science learning in and out of school, as well as their science career aspirations.;2021
"Purpose: Digital literacy and related fields have received interests from scholars and practitioners for more than 20 years; nonetheless, academic communities need to systematically review how the fields have developed. This study aims to investigate the research trends of digital literacy and related concepts since the year of 2000, especially in education. Design/methodology/approach: The current study analyzes keywords, co-authorship, and cited publications in digital literacy through the scientometric method. The journal articles have been retrieved from the WoS (Web of Science) using four keywords: Digital literacy, ICT literacy, information literacy, and media literacy. Further, keywords, publications, and co-authorship are examined and further classified into clusters for more in-depth investigation. Findings: Digital literacy is a multidisciplinary field that widely embraces literacy, ICT, the Internet, computer skill proficiency, science, nursing, health, and language education. The participants, or study subjects, in digital literacy research range from primary students to professionals, and the co-authorship clusters are distinctive by countries in America and Europe. Research limitations: This paper analyzes one fixed chunk of a dataset obtained by searching for all four keywords at once. Further studies will retrieve the data from diverse disciplines and will trace the change of the leading research themes by time spans. Practical implications: To shed light on the findings, using customized digital literacy curriculums and technology is critical for learners at different ages to nurture digital literacy according to their learning aims. They need to cultivate their understanding of the social impact of exploiting technology and computational thinking. To increase the originality of digital literacy-related studies, researchers from different countries and cultures may collaborate to investigate a broader range of digital literacy environments. Originality/value: The present study reviews research trends in digital literacy and related areas by performing a scientometric study to analyze multidimensional aspects in the fields, including keywords, journal titles, co-authorship, and cited publications.";2021
Purpose: This study explores pre-service preschool teachers' acceptance and self-efficacy towards Educational Robotics (ER) during a university course, and also examines their perceptions of the course. Methodology: This is a one-group intervention study with an associational research design that includes both quantitative and qualitative research methods: two pre-questionnaires and two post-questionnaires on pre-service teachers' acceptance and self-efficacy towards ER, and participants' training journals. Findings: The results show that pre-service teachers' acceptance and self-efficacy towards ER improved after they completed the ER teacher training course. There was a significant difference between the start and the end of the ER training in the pre-service teachers' acceptance of ER in the areas of perceived ease of use, enjoyment and attitudes, and in their self-efficacy. The findings based on the training journals show that participants positively evaluated the course. The participants also provided suggestions for improving it, such as additional training sessions, resources and time for experimentation. Value: Our study reveals the impact of an ER training program and showcases the importance of integrating ER in pre-service teachers' education.;2021
Recently educational robotics has expanded into curriculum beyond traditional STEM fields, and which can also be used to foster computational thinking (CT) skills. Prior research has shown numerous interdisciplinary benefits related to CT, however, these influential factors have often been investigated with relatively few variables. This study investigated factors that may lead to 4th and 5th grade elementary school students' development of computational thinking skills in collaborative robotics activities by hypothesizing a model which proposed that a problem solving inventory, intrinsic motivation, and enjoyment were the main predictors of computational thinking skills. The model was then tested by surveying students with several psychometric inventories where a revised model was then constructed. The study found significant relationships between perceived competence and enjoyment, and learning motivation, and intrinsic motivation. Another important finding was that problem solving was a significant predictor of computational thinking skills. Results were interpreted with reference to implications for possible means of improving learning outcomes when using collaborative robotics in an educational setting.;2021
Research Findings: Computational thinking (CT), which is defined as the systematic analysis, exploration, and testing of solutions to open-ended and often complex problems, is an important skill to foster in early childhood. However, little is known about teachers' role in fostering CT in early childhood classrooms. To address this gap, we conducted an exploratory case study to investigate how an exemplary teacher supported preschoolers' CT learning in developmentally appropriate ways using an interactive programmable toy. We video recorded 12 weekly sessions of a small group of children and employed a hybrid approach-combining open coding and a priori coding based on standard definitions of CT-to analyze the data. Using one telling session to illustrate the findings, we discuss how the teacher employed a range of scaffolding strategies to support CT practices (e.g., problem reformation/decomposition, systematic testing, and debugging) and CT perspectives including communication, collaboration, and perseverance. Practice or Policy: Findings underscore the importance of providing professional support for teachers to engage preschoolers in CT learning.;2021
Research on educational games in STEM area have proliferated over the past decade. Various topics on educational games in STEM settings have emerged, showing the complex, dynamic and multi-disciplinary nature of the field. In this context, there is a need for an extensive, thematic overview of related studies for a better understanding of this STEM domain. Using co-word analysis and text analysis methods, this study presents a bibliometric analysis of 260 articles on educational games in STEM area published in academic journals and conference proceedings from 2010 to 2020. The results identify some research themes in the field, which are further categorized into computational thinking, game design, simulation and projects. By incorporating the analysis results with relevant reviews, this study offers a comprehensive picture and a holistic view of educational games in STEM area, and suggests directions for further work.;2021
Research on the role of mobile learning in computational thinking is limited, and even more so in its use in initial teacher education. Aligned to this there is a need to consider how to introduce and expose pre-service teachers to computational thinking constructs within the context of the subject area they will teach in their future classrooms. This paper outlines a quasi-experimental study to examine the role of mobile learning in facilitating computational thinking development amongst pre-service teachers in initial teacher education. The study enquires if there are significant differences in grades achieved in computational thinking and programming learning when mobile learning is introduced. Findings showed and reaffirmed the positive influence of the mobile applications on the development of computational thinking amongst the pre-service teachers who participated.;2021
Research relating to the development of computational thinking (CT) at primary school level is still in its infancy despite indications that it is most effective when introduced in primary/early secondary education. Teachers are pivotal to ensuring children develop CT, so it is essential they are effectively prepared, starting at preservice level, to incorporate CT into pedagogical practices. Grounded in constructionist principles and adopting the stance that CT be developed as part of subject areas other than computer science, this qualitative study presents findings focused on the understandings of CT of 51 preservice teachers who engaged in a digital learning specialism. Carried out over a 2-year period, the research investigated preservice teachers' understandings of CT and how the design of the specialism helped to develop their understanding. Findings highlight deep understandings of CT among the preservice teachers who were able to make connections between constructionism and the development of CT. They also demonstrated a high level of pedagogical knowledge, indicating they understood why they designed particular challenges for children as part of their classroom experience. Findings are relevant for the design of teacher preparation programmes illustrating how CT can be effectively embedded to combine theory and practice. Practitioner notes What is already known about this topic Existing research base in relation to preservice teacher education and computational thinking is limited. When computational thinking is introduced as part of initial teacher education, preservice teachers: develop more accurate and increased understandings of computational thinking demonstrate more positive attitudes towards the implementation of computational thinking in the classroom. Duration of module seems to be a significant factor. A 1-week module might be enough to develop preservice teachers' surface-level understanding of computational thinking, but it would not provide them with enough knowledge to embed computational thinking in meaningful ways in the classroom (Yadav et al., 2014). What this paper adds Adopting the stance that computational thinking should be developed as part of subject areas other than computer science. This paper presents and discusses findings from the implementation of a model for preservice teacher education grounded in constructionism, that supports preservice primary teachers in building an understanding of CT as well as the pedagogical knowledge necessary for embedding CT into their classroom practice. Implications for practice and/or policy The insights gained from this study are particularly relevant for the design of teacher preparation programmes indicating how CT can be effectively embedded to combine theory and practice. This will ensure that CT concepts are not developed in a decontexualised manner but are embedded within the prescribed curriculum in a relevant and meaningful manner.;2021
Research shows that though some students can easily find the correct solutions to the problem(s) at hand, the algorithms that these students create are not always ones that would, when implemented, produce the correct solution(s). Towards shedding light on this phenomenon, the present study explicates a mechanism-accounting for features of the solution-by which students create algorithms. Via this mechanism, students notice particular features of the solution they found, then create specific rules (instructions) within their algorithm, which guarantee that the algorithm outputs an object that possesses the noticed features. Thus, an algorithm can produce the solution only if the object it outputs has all the features of the solution. In this paper, I explicate theaccounting formechanism within the collaborative work of two groups of students on a contextualised graph theory task, which invited the groups to create an algorithm for finding an optimal seating arrangement. Both groups found an optimal seating arrangement and seemingly employed the accounting for mechanism to create their respective algorithms. However, only one group's algorithm could actually produce the optimal arrangement. The questions explored in this study are: (1) What sorts of features of their solutions did the two groups account for? and (2) What differences (if any) between the features accounted for by the respective groups, might explain why only one group's algorithm could produce the optimal arrangement?;2021
"Researchers have found that computer modeling fosters the learning of causal mechanisms in systems, an important crosscutting concept in science that many novice learners find challenging. Despite the research that highlights the role of teacher's instructional practices in enacting computer tools, few studies have considered teachers' use of computer modeling and its implications for student learning in classroom interactions, compared to interactions without computer tools. In this study, we examine (a) the impact of computer modeling on students' understanding of causal links in decomposition and (b) classroom interactions with use of computer modeling. We employed a quasi-experimental design with eight middle school science classes that served predominately Latinx students. The random treatment was at the class level (computer modeling; n = 60, four classes) and control (paper modeling; n = 59, four classes). Analyses incorporated student preassessment and postassessment, classroom observations, and audio-recorded modeling instruction. Results indicate that compared to paper modeling, computer modeling enriched systems thinking, particularly students' ability to provide causally coherent statements in explaining scientific ideas and evidence. Enactment of computer modeling may be associated with a shift in classroom interactions to include more invitation for students' elaboration of causal systems. We discuss aspects of computer modeling that may foster systems thinking, with implications for the future design of tools and curricula.";2021
Set in English Language Arts, this article takes up recent trends in literacy toward investigating ontological notions of digital texts. Two teacher educators recently implemented a series of readings and activities in their methods courses designed to help preservice teachers sophisticate their conceptions of texts beyond autonomous, neutral collections of information by considering digital age ideas such as software theory, textual ideology, and the algorithmic bias of the Internet. The authors review recent scholarship surrounding the integration of computational thinking and the humanities before illustrating a theoretical framework that combines software-driven interpretation and critical media literacy. Descriptions and applications of course texts and exercises precede a discussion on typological methodology. Through the analysis of semester-long writing reflections and course interactions, a typology of preservice teachers is then presented, illustrating three archetypes: Strategists, Hawkeyes, and Improvers. These archetypes are taken up to analyze the ways in which a range of teacher candidates considered ontological notions of digital texts to analyze instructional techniques, to sharpen their critical lenses, or to gain greater understanding of ELA as a discipline (or some combination of all three). This work demonstrates that as teacher educators and teacher candidates increasingly consider software-powered literacies, interrogations of who we are, who we are becoming, and what it all means requires attention to, and explicit practice with, the dark side of digital texts.;2021
"Several gaps exist in the literature on coding. First, little exploration has focused on early elementary school students. In addition, close description of the overall context of coding tasks at this level is rare. Further, there is a need for both teacher and student voices around coding experiences to be heard. Moreover, a task engagement framework has not been used to evaluate the process or outcomes of early elementary coding tasks. Therefore, an exploratory holistic case study design was used to investigate student and teacher processes and outcomes of coding lessons in order to fill gaps in the literature. In this study, forty-six 2nd grade students, two teachers, and four researchers completed two one-week units on basic coding. Multiple descriptive and numeric data sources were employed to describe the process and outcomes of learning coding. Conclusions include: (1) teachers should start learning about coding first with short awareness sessions and then move to their own classrooms with knowledge brokers and other forms of assistance; (2) a focus on content and process, including problem-solving, is effective for coding with young children; (3) there can be a high level of engagement for teachers and students with the use of robots and welldesigned, age-appropriate coding tasks, and; (4) multiple data sources and the inclusion of both teacher and student data are essential in exploring coding in classrooms.";2021
Several studies have reported that adaptivity and personalization in educational computer games facilitate reaching their full educational potential. However, there is little effort to develop adaptive educational computer games for promoting students' computational thinking (CT). In this study, an adaptive computer game is introduced, called AutoThinking, that not only promotes both CT skills and conceptual knowledge, but also provides adaptivity in both game-play and learning processes. To evaluate the possible effects of the game, an experimental study was carried out with 79 students in an elementary school in Estonia. AutoThinking and a conventional technology-enhanced learning approach were used for teaching CT to the experimental and control group, respectively. Our results reveal that AutoThinking improved students' CT skills and conceptual knowledge better than the conventional approach. It was also found that students with a low and high level of prior knowledge made higher improvement in knowledge gain using the adaptive game compared to the traditional approach, especially those students with lower prior knowledge. Finally, our findings show that the adaptive game could also improve students' learning attitude toward CT better than the conventional approach, especially those students with higher prior learning attitudes.;2021
Simple Summary The rapid increase in technology in recent years has created the need to apply different methods in education. Teaching lessons with technology-based activities rather than the traditional teaching method is an obligation for teachers. For this reason, teachers need resources whose validity and reliability are tested that they can use in their lessons. In this study, a part of the technology content resource that teachers need for a biology lesson is presented. While preparing the course contents, a STEM approach including science, engineering, mathematics and technology disciplines was used. A significant increase was found in the ability of the students to whom the developed activities were applied to establish cause and effect relationships. According to this result, it can be said that Arduino-supported STEM education improves students' abilities to establish cause and effect relationships. Considering that generations that have grown up in the 21st-century have grown alongside technology, it is thought that integrating technology into lessons helps students learn the subject. This study aims to develop five STEM activities for the lesson of the human body systems by integrating the coding-based Arduino into STEM education. The activities were implemented to 6th-grade students for seven weeks and the effects on students' skills of establishing a cause-effect relationship. The study method was pre-test-post-test quasi-experimental design, and the cause-effect relationship scale and semi-structured view form were used as data collection tools. As a result of the study, a significant difference was found between the Arduino-supported STEM activities developed and the students' skills of establishing a cause-effect relationship. The students who received the Arduino-supported STEM education found the course to be entertaining and educational, and the future goals of these students were affected. In order to bring individuals who love their profession into the future, Arduino-supported STEM education should be applied and expanded in other branches and class levels.;2021
Since Curriculum Guidelines of 12-Year Basic Education implemented by the Ministry of Education in 2018, the program learning courses have been added to junior high school education. However, there are no programming course in the elementary school. This study is proposed to explore the continuity and intentions of the rural area students in the programming course with mBot robot and mBlock programming tool through the Post-Acceptance Model of IS Continuance. It is indicated that enlightenment education of computational thinking should be implemented during the elementary school by means of graphical programming software and robot practice. Through the graphical software and teaching robots, we can cultivate problem solving skills for students' logic, creative thinking and communication, as well as through the task-guided way to train the students' concentration and perseverance.;2021
Since the arrival of the Internet in Spain in the 1990s, digital technologies have demonstrated their multitude and diversity of applications in various fields, including education. We use the concept of advanced technologies to refer to the latest technological developments within the field of digital technologies, including both software and hardware developments. In this paper, we review some relevant and interesting works related to this topic of advanced technologies. We have utilized an analytical review method and have carried out the selection of didactic experiences around four categories which we have considered of relevance: computation (robotics, computational thinking and artificial intelligence), extended reality (augmented reality and virtual reality), games (video games, serious games) and educational tools (LMS, apps). With these descriptors, we have searched educational experiences that can serve as examples of good educational practices with advanced technologies. The references, which we collect, may be of interest and use to researchers or to educational professionals who are searching specific information on these topics. The main conclusion we reach is that the bibliography is extensive, and this shows the interest that these themes generate within the scientific field. Furthermore, it shows the wide range of possibilities of application of these technologies, both in formal and non-formal contexts, as well as informal experiences.;2021
Since the end of the 20th century, the digitalization of society, including the educational systems, has been growing exponentially. At the same time, education systems have been evolving towards competency-based assessment. Likewise, at the beginning of this century, the idea of Computational Thinking was resurrected by J. Wing, for solving problems and designing systems using concepts of computer science. Today, we can see how all these questions are taking shape in a new competence, called Computational Thinking, related to others that already exist. In this paper, we have studied the skills of Computational Thinking in university students, focusing on abstraction and its possible relationship with other factors. Results conclude that the students fail in relation to abstraction and in algorithmic thinking. Although the ability of abstraction is not easy to measure, a linear regression analysis has been carried out in order to determine its possible study.;2021
Software programming is one of the key abilities for the development of Computational Thinking (CT) skills in Science, Technology, Engineering and Mathematics (STEM). However, specific software tools to emulate realistic scenarios are required for effective teaching. Unfortunately, these tools have some limitations in educational environments due to the need of an adequate configuration and orchestration, which usually assumes an unaffordable work overload for teachers and is inaccessible for students outside the laboratories. To mitigate the aforementioned limitations, we rely on cloud solutions that automate the process of orchestration and configuration of software tools on top of cloud computing infrastructures. This way, the paper presents ACTaaS as a cloud-based educational resource that deploys and orchestrates a whole realistic software programming environment. ACTaaS provides a simple, fast and automatic way to set up a professional integrated environment without involving an overload to the teacher, and it provides an ubiquitous access to the environment. The solution has been tested in a pilot group of 28 students. Currently, there is no tool like ACTaaS that allows such a high grade of automation for the deployment of software production environments focused on educational activities supporting a wide range of cloud providers. Preliminary results through a pilot group predict its effectiveness due to the efficiency to set up a class environment in minutes without overloading the teachers, and providing ubiquitous access to students. In addition, the first student opinions about the experience were greatly positive.;2021
Statistical modeling continues to gain prominence in the secondary curriculum, and recent recommendations to emphasize data science and computational thinking may soon position algorithmic models into the school curriculum. Many teachers' preparation for and experiences teaching statistical modeling have focused on probabilistic models. Subsequently, much of the research literature related to the teachers' understanding has focused on probabilistic models. This study explores the extent to which secondary statistics teachers appear to understand ideas of statistical modeling, specifically the processes of model building and evaluation, when introduced using classification trees, a type of algorithmic model. Results of this study suggest that while teachers were able to read and build classification tree models, they experienced more difficulty when evaluating models. Further research could continue to explore possible learning trajectories, technology tools, and pedagogical approaches for using classification trees to introduce ideas of statistical modeling.;2021
STEM major students often enter colleges with a need to strengthen their foundational mathematics, such as trigonometry. We designed an innovative undergraduate course that aims to strengthen students' trigonometry knowledge application through programming mobile apps. We explored how students applied trigonometry concepts in developing their mobile apps and their overall experiences in this course. We found that the student-developed mobile apps included some combination of the following categories: quiz, game, and review guide for trigonometry learning, while trigonometry was applied in the mobile apps' codes and/or in the apps' content. Overall, students were very positive about their experiences of reviewing, revisiting, and utilizing trigonometry through programming mobile apps. The results suggest that the innovative curricular approach is promising in motivating students to apply foundational mathematics while solving design problems.;2021
"Success in an introductory college computer science (CS) course encourages students to major and pursue careers in computer science and many other STEM fields, whereas weak performance is often a powerful deterrent. This article examines the role of high school course taking (AP, regular, or none) in mathematics and in CS as predictors of later success in college introductory computer science courses, measured by students' final grades. Using a sample of 9,418 students from a stratified random sample of 118 U.S. colleges and universities, we found that the observed advantage of taking AP calculus over taking AP CS, seen in an uncontrolled model, was largely confounded by students' background characteristics. After applying multinomial propensity score weighting, we estimated that the effects of taking AP calculus and AP CS on college CS grades were similar. Interestingly, enrollment in both AP calculus and AP CS did not have any additional positive effect, suggesting that both AP calculus and AP CS strengthened similar skills that are important for long-term CS achievement. Taking regular CS did not have a significant effect; taking regular calculus had a positive effect, about half the size of taking AP calculus or AP CS. Thus, the study showed that simply exposing students to any kind of CS course before college does not appear to be sufficient for improving college CS performance; and that advanced CS and advanced calculus in high school may substitute for each other in the preparation of college CS.";2021
Teaching computer programming is an important topic. Due to Science and Technology initiatives, these topics are considered in different training cycles. For higher education, students must cultivate fundamental concepts for the development of software applications, which not only contribute to the knowledge of programming languages but also to opening guidelines for computational thinking However, selecting a proper tool can be complex. Especially for the diversity of alternatives on the web. Further, not all of them meet basic usability requirements. In this study, we present a set of platforms that seek to develop programming skills based on video games. The search consisted of 4 stages: (i) definition of the research questions, (ii) scope review, (iii) execution of search and (iv) platform selection. Finally, we employ a usability heuristic evaluation for a novice programming system to determine best practices. (C) 2021 The Authors. Published by Elsevier B.V.;2021
The aim of the study is to investigate the relationship between the mind types of mathematics teachers which will shape the future and their computational thinking skills. The study was designed according to quantitative-relational survey model. This study was carried out with 481 volunteer mathematics teachers determined according to the random sampling method. Computational Thinking Skills Scale and Mind Types Scale were used as data collection tools in the study. In the analysis of the data, descriptive statistics, correlation and regression analyses were benefited. According to the perceptions of the mathematics teachers, the level of their ethical mind and computational thinking skills are very high while their disciplined mind, synthesizing mind, creating mind, respectful mind and quinary mind levels are high. Also, according to the perceptions of mathematics teachers, there is a high level significant positive relationship between their quinary minds and computational thinking skills, and their quinary minds (both in sub-dimesnions and as a whole) are a significant predictor of their computational thinking.;2021
The aim of this research revolves around a term that has become popular over the years and whose origins took place from the technical perspective of computer science in order to automate information or the production of systems. However, nowadays it is widely used by many professionals from several areas and groups that are interested in understanding and adopting a different way of thinking and assuming life situations. This concept is called Computational Thinking. This research pursues the objective of contributing to the construction of a definition on computational thinking, as well as to the use of this term for educational purposes. The research is descriptive with a documentary design, based on the review of literature related to the subject, in order to properly specify how computational thinking is seen as an option for the representation, acquisition of knowledge and attention to problems, from the viewpoint of experts as ISTE & CSTA (2011), Papert (1980), Garcia-Pefialvo (2016), Wing (2006), among others. It was found that a definition by consensus of computational thinking has been the subject of constant debate within the scientific community, and one of the best options surrounding this kind of thinking is its incorporation into the mandatory school curriculum, from early stages or levels of the educational system, in order to enhance the children's analytical skills through the application of computer principles.;2021
The booming computational thinking and deep learning make it possible to construct agile, efficient, and robust deep learning-driven decision-making support engine for the operation of container terminal handling systems (CTHSs). Within the conceptual framework of computational logistics, an attention mechanism oriented hybrid convolutional neural network and recurrent neural network deep learning architecture (AMO-HCR-DLA) is proposed technically to predict the container terminal liner handling conditions that mainly include liner handling time (LHT) and total working time of quay crane farm (TWT-QCF) for a calling liner. Consequently, the container terminal oriented logistics generalized computation (CTO-LGC) automation and intelligence are established tentatively by AMO-HCR-DLA. A typical regional container terminal hub of China is selected to design, implement, execute, and evaluate the AMO-HCR-DLA with the actual production data. In the case of severe vibration of LHT and TWT-QCF, while forecasting the handling conditions of 210 ships based on the CTO-LGC running log of four years, the forecasting error of LHT within one hour is more than 97% and that of TWT-QCF within six hours accounts for 89.405%. When predicting the operating conditions of 300 liners by the log of five years, the forecasting deviation of LHT within one hour is more than striking 99% and that of TWT-QCF within six hours reaches up to 94.010% as well. All are far superior to the predicting outcomes by the classical algorithms of machine learning and deep learning. Hence, the AMO-HCR-DLA shows excellent performance for the prediction of CTHS with the low and stable computational consuming. It also demonstrates the feasibility, credibility, and realizability of the computing architecture and design paradigm of AMO-HCR-DLA preliminarily.;2021
The Coronavirus Disease 2019 (COVID-19) outbreaks have caused universities all across the globe to close their campuses and forced them to initiate online teaching. This article reviews the pedagogical foundations for developing effective distance education practices, starting from the assumption that promoting autonomous thinking is an essential element to guarantee full citizenship in a democracy and for moral decision-making in situations of rapid change, which has become a pressing need in the context of a pandemic. In addition, the main obstacles related to this new context are identified, and solutions are proposed according to the existing bibliography in learning sciences.;2021
The COVID 19 pandemic has affected global education. In Thailand, all educational institutions temporarily closed to prevent the spread of COVID-19. However, teaching and learning still need to be continued. It is necessary to switch the learning activities to online learning. In this study, we designed online learning activities for developing computational thinking (CT) of students and carried out an experiment with 90 participants (first-year students enrolled in a Bachelor of Education Program in educational technology and communications at King Mongkut's University of Technology Thonburi). At the beginning of the experiment, all participants were asked to take a CT test to measure their CT. The test is consistent with other CT tests under validation. During the sessions, all participants were taught by Thunkable. After the experiment, they took the CT test again. The results show that by improving CT through block-based programming projects, students' performance improved significantly. In conclusion, block-based programming and working in pairs are combinations that can potentially help students to perform better, in turn affecting their performance in projects.;2021
The effective teaching of the concept of programming, where critical thinking is an important factor, is not so easy in secondary education. New teaching approaches, including, game-based learning, may provide a solution due to their inclusion of more fun and diverse activities but they still lack the active participation of the students in the creation of the material. In this context, we develop new teaching and learning materials to teach programming principles, like conditionals, loops and variables, to secondary education students based mainly on the constructivistic philosophy. The aim is to help students learn the basics of programming though creating games using a block-type programming environment and not only through the use and the playing of games. This approach combines the use of game design and creation with learning and results to the developing of basic programming skills. In order to evaluate the produced material quantitative and qualitative methods, such as questionnaires, classroom observations and discussions have been used. The results depict an improvement of the students' knowledge and skills in programming through this game creation process.;2021
The emerging trend technologies imply the increase in the new role of the future of jobs. Most of them required Computer Science-related skills a lot, especially programming. However, there is a skill gap for it. Some previous studies showed that many students feel difficulties in learning programming. In the last decades, there are many approaches to improve student's learning achievement through active learning methods. One of those approaches is the Flipped Classroom (FC) method. This study presents a systematic literature review of the FC approach in the programming course. The aim of this study is to explore the strategy of FC implementation in the programming class. A total of 32 papers from ACM Digital Library and IEEE Xplore Digital Library are selected for this review. We found four types of implementation of FC in programming, with the variations of the in-class or out-class activities.;2021
The essay aims to find elements and characteristics of a new design science based on theories, methods and inter and trans-disciplinaty research processes, and on holistic and generative approaches that develop in the convergence of natural and artificial sciences. It particularly focuses on ecology, as the science of systemic and generative relations between agents and the environment, and cybernetics, as the science of information and self-regulating systems.;2021
The explosion in availability and variety of data requires learning experiences that reveal more of the data world faster and develop practical skills with digital technologies. Key high-level goals of the International Data Science in Schools Project (IDSSP) include having students continually immersed in the cycle of learning from data, and data science being fun to teach and fun to learn. We advocate curiosity-driven, exploratory learning for pursuing these goals. Our illustrations use tasks embedded in contexts that teenagers can relate to, provide visual rewards for computational actions, use rich data-contexts, and integrate statistical and computational thinking. They provide engaging introductions to modern data sourced from databases via Application Programming Interfaces (APIs) that are accessible to a broad range of students and facilitate student personalization for investigation. We provide in-depth discussion of teaching strategies that heavily involve questioning and student tinkering supported by graphical-user interfaces that enable students to interact with the data sources rapidly in multiple ways.;2021
The fundamental rights of hospitalized minors include the need to offer educational care, including emotional aspects during the situation of illness and convalescence. The guarantee of these rights from a perspective of hospital pedagogy accompanied by specialized professionals facilitates good practices. Currently the teaching of computational thinking and programming constitutes a new literacy that must be carried to all classrooms, including hospital classrooms. Literacy should involve learning about emotional regulation. This paper presents a case study on an educational intervention that is inclusive and adaptable to the characteristics of hospital classrooms for the teaching of computational thinking in a transversal way and programming without screens and robots, having the development of emotional competence as one of the important elements. The results indicate that the intervention improves the emotional state of the children, as well as their knowledge regarding computational thinking.;2021
The growth of the data culture has led to calls for improving data literacy among primary and secondary students and their teachers. One approach to improving data literacy is to teach a course devoted to data science but, given the lack of consensus over the term data science, just what should an introductory data science course include? The author argues that at the secondary level, an introductory data science course should strive to teach data-scientific thinking, which has statistical thinking at its core, blended with some computational thinking, and with a dash of mathematics.;2021
The Internet Archive's Wayback Machine holds over 424 billion webpages, making it the largest publicly accessible archive in the world. Thus far, much of the research on the Machine has approached the technology using computational thinking. This type of thinking treats technology operationally, as something that we can use to do jobs for us. This article takes a different approach. It steps back from computational thinking to consider the language we use to apprehend technology. It argues that the metaphors we use actually obfuscate, rather than merely describe, the operations of the Machine. By making explicit the workings of these metaphors, the article draws attention to, and thus counteracts, this obfuscation. In so doing, these notes on the Wayback Machine point more widely towards the usefulness of a language-oriented approach to other technologies.;2021
The importance of computational thinking (CT) development has increased during the last decade. There is a need to understand what to teach from computational thinking perspectives, as well as what types of activities and learning content topics to use in the classroom. Current students' generation is looking for engaging, motivating learning activities with immediate results and feedback. The paper presents the design process of the strategy for CT abilities development. The proposed strategy has been implemented in practice to identify its suitability for successful CT development within Science, Technology, Engineering, Arts, and Mathematics (STEAM) education. The strategy is accompanied by teaching materials for computational making activities with Arduino. The proposed strategy contributes to Engineering education as an essential part of STEAM and usually not included in the basic and secondary school curriculum as a separate subject. Pre- and postsurvey were conducted with basic school students to identify the effect of the strategy implementation on the development of CT abilities. The findings of this study showed a statistically significant increase in CT literacy in 14 abilities from seven dimensions: computing artifact, decomposition, abstraction, algorithm, communication and collaboration, computing and society, and evaluation. The implications of this study include the practical usage of the strategy in plan class activities for STEAM subjects in basic school to develop particular CT abilities.;2021
The increase and technological advance that society is currently experiencing is driving the development of educational initiatives that integrate teaching-learning activities to foster digital skills associated with programming and computational thinking such as movement sequencing. In this paper, we show some of the results that were obtained with the realization of a learning experience on computational thinking oriented to children in early education. The activities included programming challenges using the Bee-Bot (R) robot. The study included pre-test/post-test evaluations using a control group. The sample of participants was 40 students from an educational centre, located in Salamanca, Spain. The activities were developed in the academic year 2018-2019. The collection of data on the mastery reached by the students, in the developed evaluations, was carried out using an evaluation rubric. The collected data allowed us to know the existence of significant differences in the capacity of the sequencing of actions in favour of the students who participated in the learning activities with robots. On the other hand, it was possible to affirm that no differences were found associated with the sex of the participants in relation to the programming and construction of sequences.;2021
The integration of computational modelling in science classrooms provides a unique opportunity to promote key 21st century skills including computational thinking (CT) and collaboration. The open-ended, problem-solving nature of the task requires groups to grapple with the combination of two domains (science and computing) as they collaboratively construct computational models. While this approach has produced significant learning gains for students in both science and CT in K-12 settings, the collaborative learning processes students use, including learner regulation, are not well understood. In this paper, we present a systematic analysis framework that combines natural language processing (NLP) of collaborative dialogue, log file analyses of students' model-building actions, and final model scores. This analysis is used to better understand students' regulation of collaborative problem solving (CPS) processes over a series of computational modelling tasks of varying complexity. The results suggest that the computational modelling challenges afford opportunities for students to a) explore resource-intensive processes, such as trial and error, to more systematic processes, such as debugging model errors by leveraging data tools, and b) learn from each other using socially shared regulation (SSR) and productive collaboration. The use of such SSR processes correlated positively with their model-building scores. Our paper aims to advance our understanding of collaborative, computational modelling in K-12 science to better inform classroom applications.;2021
The momentum around computational thinking (CT) has kindled a rising wave of research initiatives and scholarly contributions seeking to capitalize on the opportunities that CT could bring. A number of literature reviews have showed a vibrant community of practitioners and a growing number of publications. However, the history and evolution of the emerging research topic, the milestone publications that have shaped its directions, and the timeline of the important developments may be better told through a quantitative, scientometric narrative. This article presents a bibliometric analysis of the drivers of the CT topic, as well as its main themes of research, international collaborations, influential authors, and seminal publications, and how authors and publications have influenced one another. The metadata of 1,874 documents were retrieved from the Scopus database using the keyword computational thinking. The results show that CT research has been US-centric from the start, and continues to be dominated by US researchers both in volume and impact. International collaboration is relatively low, but clusters of joint research are found between, for example, a number of Nordic countries, lusophone- and hispanophone countries, and central European countries. The results show that CT features the computing's traditional tripartite disciplinary structure (design, modeling, and theory), a distinct emphasis on programming, and a strong pedagogical and educational backdrop including constructionism, self-efficacy, motivation, and teacher training.;2021
The Next Generation Science Standards (NGSS) emphasize engaging students in science practices through which students can develop content, procedural, and epistemic knowledge of science. To accomplish this goal, science teachers must embed science content in authentic science practice. Successfully integrating content and practice will require significant epistemological and pedagogical shifts on the part of teachers. However, teachers cannot meaningfully achieve this integration if they, themselves, do not understand the epistemic underpinnings of the science practices. Given the lack of literature specifically addressing teachers' epistemic understanding of science practices, we conducted a qualitative study to fill this gap in the literature. Data were collected using an open-ended online survey, and responses from 128 science teachers were analyzed using the constant comparative method. Our results indicate that relatively few teachers exhibited more nuanced epistemic understandings of scientific practice that extend beyond the rigid, linear scientific method presented in science textbooks. Teachers broadly believed that scientific inquiry must begin with a question, seldom cite methodological differences when comparing two experiments, frequently viewed models as teaching tools for representations and explanation, and hardly discussed computational thinking in terms beyond data analysis. More importantly, teachers viewed that scientific conclusions are heavily influenced by researchers' perceptions and biases. To enhance science teachers' sophisticated epistemic understanding of science, we highlight the need not only to engage teachers in authentic scientific inquiry experiences, but also to provide opportunities to learn how to effectively integrate science practices as a coherent system, especially computational thinking and models, into science lessons.;2021
The objective of the article is to determine which dimensions of computational thinking are related to the dimensions of creative thinking. The methodology is quantitative with a descriptive non-experimental cross-sectional design. Two instruments are used: one that measures computational thinking through the Directions, Loops, Conditionals, and Functions dimensions, and another that measures creative thinking through the Originality, Fluency, Elaboration, and Flexibility dimensions. The sample was made up of N = 275 students from 7 educational institutions in the Diguillin province, Nuble Region, Chile. The results show that computational and creative thinking are related to each other. The loops and conditional dimensions are significantly related to all the creative thinking dimensions. The creative thinking dimension elaboration is the most influenced by loops and conditionals, followed by fluidity, originality and flexibility. In conclusion, loops and conditionals are the essential dimensions for stimulating the creative thinking dimensions.;2021
The objective of this work was to know the benefits that computational thinking brings to education and the proposals for its application in Secondary Education in the different Spanish regions and other European countries. For this, a narrative review of the scientific literature has been carried out, extracting articles in both languages Spanish and English from the following databases: Dialnet, Scopus, Google Scholar, Researchgate and Microsoft Academic. Among the main results found, in many countries the current trend is to introduce it into the curriculum, as well as a series of skills, characteristics and attitudes associated with it, including abstraction, problem decomposition, algorithmic thinking, automation, debugging and generalization. Among the main benefits that computational thinking brings is the improvement of digital competence, development and strengthening of socio-emotional skills, skills related to language and communication, and empowerment of collective work. As a conclusion, it is important to highlight that most of the European countries have implemented or are in the process of implementing more actions to strengthen the use of computational thinking among students.;2021
The pervasiveness of Computer Science (CS) in today's digital society and the extensive use of computational methods in other sciences call for its introduction in the school curriculum. Hence, Computer Science Education is becoming more and more relevant. In CS K-12 education, computational thinking (CT) is one of the abused buzzwords: different stakeholders (media, educators, politicians) give it different meanings, some more oriented to CS, others more linked to its interdisciplinary value. The expression was introduced by two leading researchers, Jeannette Wing (in 2006) and Seymour Papert (much early, in 1980), each of them stressing different aspects of a common theme. This paper will use a historical approach to review, discuss, and put in context these first two educational and epistemological approaches to CT. We will relate them to today's context and evaluate what aspects are still relevant for CS K-12 education. Of the two, particular interest is devoted to Papert's CT, which is the lesser-known and the lesser-studied. We will conclude that Wing's CT and Papert's CT, when correctly understood, are both relevant to today's computer science education. From Wing, we should retain computer science's centrality, CT being the (scientific and cultural) substratum of the technical competencies. Under this interpretation, CT is a lens and a set of categories for understanding the algorithmic fabric of today's world. From Papert, we should retain the constructionist idea that only a social and affective involvement of students into the technical content will make programming an interdisciplinary tool for learning (also) other disciplines. We will also discuss the often quoted (and often unverified) claim that CT automatically transfers to other broad 21st century skills. Our analysis will be relevant for educators and scholars to recognize and avoid misconceptions and build on the two core roots of CT.;2021
The present research is part of the government funded project called Young Engineer's Workshop (YEW), a 2-week-long summer camp for youngsters to stimulate their interest in coding, electronics and robotics subjects in particular and STEAM fields in general. The YEW curriculum included basic electronics, block-based programming and robotics through Scratch and Arduino, and student projects on building robotics systems. This experimental study aimed to investigate the cognitive and affective consequences of YEW on the development of middle and high school students' computational thinking (CT) competences. The research methodology was based on a one-group pretest-posttest model within a quasi-experimental design. Participants were 17 students from grades 5-6 and 15 students from grades 9-10 in a southwestern city of Turkey. Both quantitative and qualitative data were collected through the YEW application form, a scale for CT, a satisfaction questionnaire, and student diaries. The results showed a significant increase on algorithmic and critical thinking factors of CT whereas no significant changes in creativity, cooperation, and problem-solving factors of CT. Students reported affective gains including high satisfaction and enjoyment of YEW activities, increased interest, and career planning in programming and robotics fields, and improved self-confidence in robotics project development. In conclusion, the study suggests that teaching programming can be an effective way to foster CT to some extent but not an adequate or complete solution. Educators need to seek more suitable teaching methods for a more comprehensive learning of CT that can be transferable to noncomputing contexts.;2021
The present study is based on a teaching-module designed to introduce computational thinking (CT) to pre-service teachers pursuing MA degrees at a large-scale university in Ankara, Turkey. It aims to explore Turkish pre-service teachers' perceptions and integration of CT in different disciplines through CT-based tasks. Pre- and post-attitude questionnaires were administered before and after the presentation of a CT module to find out about their self-efficacy of computer use in class, perceptions of computing and CT, and integration of CT into their classrooms and in other disciplines. Student lesson plans were analysed in order to explore the challenges they faced while integrating CT into their teaching. According to the results, the pre-service teachers in this study 1) gained an awareness that computing, and CT are more than using computers and technology but relate to the process of problem-solving, 2) developed a better understanding of how to integrate CT into their teaching, and 3) agreed that CT could and should be integrated into the teaching of other disciplines, and 4) integrated different CT vocabulary in lesson plans based on their specific subject area.;2021
The present work presents an intervention proposal for the development of computational thinking in early childhood education, through the use of a ground robot with programmed directional controls. Within the use of observational methodology, an observation system has been designed that allows the analysis and interpretation of the behavior displayed in the performance of the intervention proposal. The reliability of the observation system has been guaranteed in the form of inter-observer agreement, calculated using Cohen's (1960) Kappa coefficient. Within the theory of generalizability, the measurement plan [Categories] [ Steps] / [Participants] has allowed to verify a high precision reliability of the generalization of the results. The operability of the observation system has been reflected in the regular behavior structures (T-patterns) detected-through the THEME software-, which have allowed characterizing difficulties in the assimilation of an incipient computational language related to the ability of spatial orientation and the sequencing capacity of children -situations involving turning and number of commands used in the sequence-. (C) 2021 Universidad de Pais Vasco. Published by Elsevier Espana, S.L.U. All rights reserved.;2021
The problem that the given paper aims to solve is associated with the need to resolve the contradiction between the requirements of the digital economy for a high level of computational thinking of specialists of the future and an insufficiently developed methodological base for training graduates that meets these requirements. The purpose of the research is to theoretically prove and experimentally verify the need for the use of gamification technology in training of specialists of the future to form computational thinking skills which are most in demand in the digital society. The research methodology includes the analysis and generalization of scientific works on the problem of determining the phenomenon of computational thinking, the use of digital gamification resources in training, and clarifying the requirements for training of highly qualified specialists of the future. The HTML 5 language was used as a software tool. The pedagogical experiment is presented on the example of the assessment of changes in the levels of skills that make up the essence of computational thinking. Results. The paper clarifies the concept of computational thinking and describes the directions of educational and cognitive activity based on the gamification principles which most effectively form computational thinking. The authors formulate didactic principles for the inclusion of computer games to foster students' cognitive activity, support professional self-determination, and develop systematic and critical thinking. Specific materials are proposed to improve the methods, tools, and organizational forms of the training focused on the formation of computational thinking as the basis for the supra-professional skills of specialists of the future. In the end, conclusions are made which confirm that the included educational and cognitive activities on game designing in the training of highly qualified specialists of the future fosters the formation of computational thinking skills.;2021
The purpose of this study was to investigate the technology acceptance, self-development, and computational thinking skills of teachers who participated in basic robotic coding in-service training from different branches in primary and secondary schools. The research was designed according to the causal comparative research method. The study group consisted of 217 teachers, 106 male and 111 female teachers from different branches working in Amasya and Samsun. Research scales Self-Improvement in Technology Use in Education, Technology Acceptance, and Computational Thinking Skills were used to collect data. Self-improvement scale in technology use in education was developed by ozturk [Evaluation of social studies teacher nominees? Competency regarding their use of technology in education (Balikesir sample). Unpublished Master Thesis, Gazi University, Ankara, 2006]. There were 14 items in the scale, and internal consistency coefficient was 0.88. Technology acceptance scale for teachers was developed by Ursavas et al. (J Theory Pract Educ 10(4):885-917, 2014). The scale in total consists of 11 factors and 38 items. The Cronbach's alpha coefficient for the factors in the scale was between 0.798 and 0.909. The computational thinking skills scale was developed by Korkmaz cakir and ozden (2017). The scale consists of 5 factors and 29 items. Cronbach alpha internal consistency coefficient of the scale was 0.822. When the collected data were analyzed, it was seen that the teachers' self-improvement in technology use (x-= 3.99) and technology acceptance (x-= 3.96) were higher. There was statistical significance difference between attending in-service training and not attending in-service training in favor of attending in-service training in self-improvement in technology use in education. Furthermore, it is noteworthy that as teachers' time in the profession increases, the levels of self-improvement and technology acceptance in technology use decrease in non-attending in-service training group. It is seen that teachers get closer to new developments as they get older and their desire to use technological innovations decreases.;2021
The steepest descent (or ascent) algorithm is one of the most widely used algorithms in Science, Technology, Engineering, and Mathematics (STEM). However, this powerful mathematical tool is neither taught nor even mentioned in K12 education. We study whether it is feasible for elementary school students to learn this algorithm, while also aligning with the standard school curriculum. We also look at whether it can be used to create enriching activities connected to children's real-life experiences, thus enhancing the integration of STEM and fostering Computational Thinking. To address these questions, we conducted an empirical study in two phases. In the first phase, we tested the feasibility with teachers. In a face-to-face professional development workshop with 457 mathematics teachers actively participating using an online platform, we found that after a 10-min introduction they could successfully apply the algorithm and use it in a couple of models. They were also able to complete two complex and novel tasks: selecting models and adjusting the parameters of a model that uses the steepest descent algorithm. In a second phase, we tested the feasibility with 90 fourth graders from 3 low Socioeconomic Status (SES) schools. Using the same introduction and posing the same questions, we found that they were able to understand the algorithm and successfully complete the tasks on the online platform. Additionally, we found that close to 75% of the students completed the two complex modeling tasks and performed similarly to the teachers.;2021
"The study explored how two elementary school teachers perceived computational thinking, reflected them into curriculum revision, and taught them in the classroom during longitudinal professional developed program (PDP) for nine months. Computational thinking is a new direction in educational policy-making including science education; therefore we planned to investigate participating teachers' perception of computational thinking to provide their fundamental understandings. Nine meetings, lasting about two hours each, were held with the participating teachers and they developed 11 lesson plans for one unit each, as they formed new understandings about computational thinking. Data were collected through PDP program while two teachers started perceiving computational thinking, revising their curriculum, and implementing it into their class for nine months. The results were as follows; first, elementary school teachers' perception of computational thinking was that the definition of scientific literacy as the purpose of science education was extended, i.e., it refers to scientific literacy to prepare students to be creative problem solvers. Second, STEAM (science, technology, engineering, arts, and mathematics) lessons were divided into two stages; concept formation stage where scientific thinking is emphasized, and concept application, where computational thinking is emphasized. Thirdly, computational thinking is a cognitive thinking process, and ICT (informational and communications technology) is a functional tool. Fourth, computational thinking components appear repeatedly and may not be sequential. Finally, STEAM education can be improved by utilizing computational thinking. Based on this study, we imply that STEAM education can be activated by computational thinking when teachers are equipped with competencies of understanding and implementing computational thinking within the systematic PDPs, which is very essential for newly policies.";2021
The study is relevant since it proposes the design of Basic Learning Rights in the area of Technology and Informatics for fifth grade, based on the basic standards of competence, quality references and curricular references. that allows teachers of educational institutions in the municipality of Ipiales from both the public and private sectors to train their students in the necessary digital skills according to their context, also allowing them to develop skills in problem solving, computational thinking and searching for information, with a standardized teaching route that strengthen processes already conceived within the classroom, for this, the investigation of the curricular meshes used among teachers will be carried out in order to establish curricular comparisons that allow establishing theoretical and methodological characteristics according to the guidelines of the basic standards of competence in the area of technology and informatics for fifth grade of elementary school.;2021
"The use of information and communications technologies (ICTs) has emerged as an educational response amidst the COVID-19 pandemic, providing students the technological tools that enable them to acquire or strengthen the necessary digital skills to develop computational knowledge. The purpose of this study was to analyze Scratch, a programming language used to foster the teaching of computational thinking, particularly in K-12 education. A systematic literature review (SLR) was conducted, identifying 30 articles on the topic of Scratch and computational thinking in the database ProQuest Central from January 2010 to May 2020. These articles were analyzed to identify the use of Scratch worldwide and the educational impact it has on computational thinking, specifically in K-12 education. The results highlight the following: (1) countries which incorporated Scratch into their teachers' study plans (curricula); (2) the transformation of learning environments that Scratch promotes; and (3) the importance of incorporating tools like Scratch in the current curricula and, more importantly, developing the framework for innovative ICTs capable of transforming education.";2021
There are areas where the competencies obtained through computer coding activities substantially overlap with life skills components. Studies of these common competencies have suggested the possibility of including these contents in a life skills program. Therefore, the purpose of this study was to develop a program through the Entry program that elementary school students could use online to improve their life skills, given the need to increase contactless online classes due to COVID-19. Eight elementary school teachers with 20 years of experience and two curriculum experts participated in the program's development. For data collection, 360 data points were collected from eight elementary schools located in each Korean province, including urban and rural areas. SPSS 21.0 was used to analyze the data. Upon completing the 8-week program, the difference in life skills between groups was confirmed using variance analysis based on the number of implementation times, and post-hoc testing was conducted. The study's results confirmed the difference between the groups conducted for two weeks (M = 3.22), four weeks (M = 3.25), and six weeks (M = 3.67), and the group conducted for eight weeks (M = 3.83). In other words, as the number of weeks of participation in the life skills program increased, there was a difference between groups. These findings suggest a life skills program could be included as part of Entry based computer coding activities for elementary school students through a backward curriculum. In conclusion, this study showed the possibility of using contactless online classes with free Entry-based websites to improve the life skills of elementary school students struggling at home due to COVID-19. It also showed that each elementary school teacher could operate the life skills programs as a contactless learning method using a free coding platform and manual.;2021
There has been growing interest in assessing computational thinking (CT) across diverse learners beyond the traditional forms of tests and assignments. Learning games offer the potential for innovative, stealth assessments of students? implicit learning from gameplay behaviors. This paper reports on the measurement of implicit CT practices demonstrated by upper elementary- and middle-school students as they play the CT learning game Zoombinis. The process of using the gameplay log data to build valid automated detectors of students? implicit CT practices is discussed. Findings from this study provide implications for analyzing gameplay behaviors at scale, leading to the development of models for the assessment of implicit STEM learning.;2021
This article attempts to identify the kind of arguments that lower secondary school-level pupils use when they apply programming to solve a mathematical problem. By analyzing the data from one group of three pupils working together with Processing (Processing is a Java based tool primarily to learn programme visual effects supported and distributed by The Processing Foundation, ), the aim is to contribute to research and conceptualization surrounding how programming can be integrated in mathematics. The analysis provides examples of pupils' different arguments when they use Processing to solve a mathematical problem. An important finding is that the pupils revealed a clear progression in the argumentation categories, where they went from arguing very fundamentally to presenting more elaborated arguments. On the other hand, the trial-and-error method often used by pupils may also have had a negative impact on their mathematical arguments.;2021
This article investigates how the recent implementation of programming in school mathematics interacts with algebraic thinking and learning. Based on Duval's theory of semiotic representations, we analyze in what ways syntax and semantics of programming languages are aligned with or divert from corresponding algebraic symbolism. Three examples of programming activities suggested for school mathematics are discussed in detail. We argue that although the semiotic representations of programming languages are similar to algebraic notation the meanings of several concepts in these two domains differ. In a learning perspective these differences must be taken into account, especially considering that students have to convert between registers with both overlapping and specific meanings.;2021
This article presents an overview of the various educational research and learning interventions referred to educational robotics and STEAM learning. For this, qualitative interpretive documentary research was carried out in specialized databases. Descriptors: educational robotics, learning-robotics, STEAM-robotics, STEAM skills, and computational thinking. As a result, the analysis of 105 documents published from 2005 to 2019 was obtained, they were organized according to language, geographic location, educational level, temporality, kind of investigation, and technology used. The educational experiences are mainly recorded in elementary and middle school levels. The benefits in terms of developing communication skills, teamwork, creativity, and problem-solving are highlighted. The didactic methodologies employed are problem-based learning, projects, and collaborative learning, experiential and playful learning, associated with constructionist theories.;2021
This article reports the development of reasoning and logic using Computational Thinking skills about content in Ecology, using as active strategy, contextualized practical activities for the Forest Engineering, Biology, Agronomic Engineering and Geography courses at the Regional University of Blumenau during the pandemic period of COVID-19. Computational thinking has been increasingly encouraged, not only for those who wish to become computer scientists, but also to develop other important skills that are used to solve problems, using a combination of critical thinking and fundamentals of computing. The research used was qualitative of the phenomenological type. In the analysis, the teachers involved concluded that to solve a problem, even if it is Ecology, it is not necessary to use a computer to process the algorithm to find the solution, a student can create an algorithm and process it and find the answer.;2021
This exploratory work developed requirements to build games to increase female middle school students' interest in Science, Technology, Engineering, and Mathematics (STEM). In middle school, students typically begin to determine career interests. Female students have many barriers to full participation in STEM, including stereotypes, role socialization, interests, and attitudes which can influence confidence in areas such as mathematics. Game-Based approaches are designed to overcome barriers, allow experimentation with difficult concepts, and engage students. However, many games are designed for the default male user, leaving female preferences unaddressed or as secondary issue. Six requirements (Protagonist, Mechanics, Socialization, Fun, Uncertainty, and Story) were developed from relevant literature, surveys, and consultation with STEM outreach organizations. The requirements were developed to identify factors which may make a game engaging to a wider audience that include female middle school students. The requirements were used to develop SORCERESS OF SEASONS, a game designed to develop computational literacy in middle school students. An evaluation with 15 middle school students provided feedback on requirements, learning, and STEM interest. Both female and male middle school students showed an increase of basic computational knowledge comprehension, and increased interest in STEM careers, with females reporting a larger gain. The results suggest that the requirements may be helpful when developing games to increase student interest in STEM.;2021
This longitudinal study examined changes in Computational Thinking (CT) skills in first and second grade students exposed to a developmentally appropriate coding curriculum. The Coding as Another Language (CAL) curriculum spans seven weeks and uses the KIBO robot to engage students in learning that integrates programming and literacy concepts. We compared children receiving CAL (N = 667) to a control group (N = 181) who participated in typical classroom activities without coding (No-CAL). TechCheck, a validated unplugged CT assessment suitable for young children regardless of their coding experience, was used to measure CT. Over the course of the study, children who received CAL-KIBO improved on TechCheck (Mchange = 0.94, p < .001) whereas the No-CAL group did not change significantly (Mchange = 0.27, p = .07). Accounting for demographic factors, baseline performance and classroom (teacher) effects, CAL exposure was a significant predictor of post-test CT scores (p < .01). Improvements in CT measured by TechCheck over seven weeks of the CAL-KIBO curriculum were consistent with approximately six months of development without coding instruction. Secondary analysis stratified by grade revealed decisive evidence that CAL exposure improved scores in first grade and anecdotal evidence that second grade scores improved. The CT domains that showed improvement in children who received CALKIBO included algorithms, modularity, and representation. Young children who learned to code improved in solving unplugged problems that were not explicitly taught in the coding curriculum. This provides evidence that a developmentally appropriate curriculum for teaching young children to code can accelerate their acquisition of CT skills.;2021
This paper analyzes Christopher Alexander's combined use of mathematical graphs and hand-made diagrams, and argues that such affinities marked the insertion ofroughnessinto architectural computational thinking. Within the techno-scientific context of American postwar architecture, the techniques of transcription and calculation used by Alexander at the Center for Environmental Structure reveal the progressive erasure of determinacy that took place within an architecture practice with empiricist, mathematic and computational preferences. Rather than establishing an optimized and quantified standard to which architecture had to conform, Alexander's rough diagrams and mathematical graphs serialized variation and provided room for indeterminacy and contingency within a clearly defined set of rules.;2021
This paper examines a method which can be used by instructors pursuing innovative methods for language teaching, which expands learners' motivation in second language learning. Computational thinking (CT) is a problem-solving skill which can motivate students' English language learning. Designing a learning activity which integrates CT into English language learning has been considered in only a few academic studies. This study aimed to explore whether integrating CT into English language learning can be useful for improving learners' motivation and performance. The method of present, practice, and produce was applied as a method of presenting computational thinking in the English language learning classroom. Fifty-two elementary school students (52) participated in the experimental study. Following an experimental design, data were collected and analyzed from a combination of knowledge test scores, storytelling, motivation, and anxiety surveys. The experimental results indicate that the CT strategy improves students' language learning and raises their motivation in the two dimensions of extrinsic and intrinsic goal orientation. These results imply the positive effect of CT strategy on strengthening problem-solving skills of students participating in digital storytelling and increases their motivation and performance in English language learning.;2021
This paper presents a study that aims to analyze the interest, knowledge, problem-solving skills, and self-confidence of the pre-service and in-service teachers in using educational robotics for teaching purposes, in particular, to teach programming and computational thinking in primary and secondary education. In the Portuguese context, it is mandatory to attend a masters in teaching in order to become a teacher in primary and secondary education. Computational Thinking, programming, and robotics have been integrated into the schools' curriculum in many countries. Accordingly, it is essential to analyze the teachers' preparation to teach these thematic trends. A descriptive and exploratory quantitative approach was implemented with 49 participants. The results pointed out a positive level of interest, educational robotics knowledge, problem-solving, self-confidence of both pre-service and in-service teachers. It was possible to identify significant correlations in all dimensions, in particular, between Self-confidence and Educational Robotics Knowledge, and Problem-solving and Interest. Therefore, it is necessary to promote these dimensions, in an integrated way, in the pre-service and in-service training programs through learning activities with robotics.;2021
This paper presents an innovative educational approach to organizing the out-of-school teaching of programming in middle childhood. The proposed DGBL model includes three distinct educational phases, i.e. learning visual programming, programming and robotics, and programming and electronics. The research was carried out during the school years of 2017-2019. The study sample consists of 329 primary school students from K4 to K10 from the Lodzkie Voivodeship in Poland. The results were obtained from anonymous questionnaires completed by course participants. The answers confirm that the proposed approach helps children to learn the main concepts of computational thinking and programming. The described approach reinforces the essential idea in children that programming, engineering, mathematics and technology are intertwined in the modern world. Moreover, the approach combines and balances practical, methodological and pedagogical issues and is suitably integrated with out-of-school programming education to facilitate the teaching and learning process.;2021
This paper proposes a relationship between design thinking and computational thinking. It describes design thinking and computational thinking as two prominent ways of understanding how people address design problems. It suggests that, currently, each of design thinking and computational thinking is defined and theorized in isolation from the other. A two-dimensional ontological space of the ways that people think in addressing problems is proposed, based on the orientation of the thinker towards problem and solution generality/specificity. Placement of design thinking and computational thinking within this space and discussion of their relationship leads to the suggestion of a dual process model for addressing design problems. It suggests that, in this model, design thinking and computational thinking are processes that are ontological mirror images of each other, and are the two processes by which thinkers address problems. Thinkers can move fluently between the two. The paper makes a contribution towards the theoretical foundations of design thinking and proposes questions about how design thinking and computational thinking might be both investigated and taught as constituent parts of a dual process.;2021
This paper reports a case study, developed in K-12 Portuguese Education, that aimed to analyze the computer science teachers' knowledge, interest, and self-confidence to use educational robotics and other programable objects in classroom activities to teach computer science concepts and to promote students' computational thinking skills. The research design was organized into a descriptive and exploratory quantitative approach. The participants were 174 in-service computer science teachers of Portuguese public education. The data was gathered from the participants, through the online application of the Robotics Interest Questionnaire scale (RIQ). Very positive levels of teacher's knowledge, interest, and self-efficacy to use educational robotics for teaching purposes were reported in the study outcomes. These constructs were underlined in several studies as relevant factors to promote the use of educational robotics and other similar technologies by the teachers. Despite the study limitations and the small context, a set of relevant results was highlighted on computer science in-service teachers' interest and preparation to use robotics and to support their students in learning activities with these artifacts.;2021
"This paper reports on a design-based study within the context of a 3-day digital making (DM) summer camp attended by a group of students (aged 11-13) in grades 5 and 6. During the camp, students were presented with a set of mathematical problems to solve in a block-based programming environment, which was connected to various physical input sensors and output devices (e.g., push buttons, LED lights, number displays, etc.). Students' code files, and screen captures of their computer work, were analyzed in terms of their developed computational problem-solving practices and any computational concepts that emerged during the problem-based DM. The results suggested that the designed tasks consistently supported the students' modeling and algorithmic thinking, while also occasioning their testing and debugging practices; moreover, the students utilized computational abstractions in the form of variables, and employed different approaches, to formulate mathematical models in a programming context. This study contributes to the 'big picture' of how using computers might fundamentally change mathematics learning, with an emphasis on mathematical problem-solving. It also provides empirically grounded evidence to enhance the potential of computational thinking as a new literacy, and problem-solving as a global competence, in formal school settings.";2021
This paper reports on a research study of 45 classes in US schools (grades 3-8) using Zoombinis, a popular Computational Thinking (CT) learning game for ages 8 to adult. The study examined the relationship among student gameplay, related classroom activity, and the development of students' CT practices in Zoombinis classes. A combination of research methods, including educational data-mining on game data logs, cluster analysis on teacher logs of classroom activity, and multilevel modeling, was used to determine the impact of the duration and nature of student gameplay, as well as the extent and nature of classroom activity, on student CT practices. Automated detectors of gameplay CT practices built for this research were significant predictors of external post assessment scores, and thus show promise as implicit assessments of CT practices within gameplay. Students with high duration of gameplay and high gameplay CT practices scored highest on external post-assessment of CT practices, when accounting for pre-assessment scores. This research suggests that Zoombinis is an effective CT learning tool and CT assessment tool for elementaryand middle-school students.;2021
This paper reports on the first iteration of the Computational Thinking Summer Institute, a month-long programme in which high school teachers co-designed computationally enhanced mathematics and science curricula with researchers. The co-design process itself was a constructionist learning experience for teachers resulting in constructionist curricula to be used in their own classrooms. We present three case studies to illustrate different ways teachers and researchers divided the labour of co-design and the implications of these different co-design styles for teacher learning and classroom enactment. Specifically, some teachers programmed their own computational tools, while others helped to conceptualise them but left the construction to their co-design partners. Results indicate that constructionist co-design is a promising dual approach to curriculum and professional development but that sometimes these two goals are in tension. Most teachers gained considerable confidence and skills in computational thinking, but sometimes the pressure to finish curriculum development during the institute led teachers to leave construction of computational tools to their co-design partners, limiting their own opportunities for computational learning. Practitioner notes What is already known about this topic? Computational tools can support constructionist science and math learning by making powerful ideas tangible. Supporting teachers to learn computational thinking and to use constructionist pedagogies is challenging. What this paper adds? Constructionist co-design is a promising approach to simultaneously support curriculum development and professional development, but there are tensions to navigate in trying to accomplish both goals simultaneously. Implications for practice and/or policy Designers of professional development should consider constructionist co-design as an approach but should be aware of potential tensions and prepare for them.;2021
This publication provides an editorial introduction to a special issue of Computer Applications in Engineering Education journal entitled Computational Thinking for STEM and Engineering Education. It provides introductory remarks to the issue and a commentary on the published material, as well as presents the views of the special issue editors in the field of science, technology, engineering and mathematics (STEM) education and research. This special issue is structured as follows. It contains articles related to the topics of computational thinking (CT), STEM, and engineering education. It starts with three overview articles based on systematic reviews, giving a structured overview of CT concepts in terms of practical educational approaches in introductory science, technology, engineering, arts and mathematics (STEAM) education. Subsequent articles present practical approaches to CT and STEAM education in such educational areas as general engineering, programming and software engineering, physical computing, robotics, electronics, mechanical, and power engineering.;2021
This study aims to share an educational model experiment for teaching computational thinking with hands-on activities. There is a gap between today's architectural education system and computational thinking. The exercises aim to fill this gap. In this study, conventional and computational design processes are not considered as two opposing poles, but as integrated processes and as a bridge between these processes. Starting from Gagne's model, the learning process classification is reinterpreted, and the exercise processes are discussed in the titles of reception, expectancy, computation and semantic encoding, responding and creating alternatives. The outcome of this study will be a discussion on the first results, observations, and feedback from the students about the educational model attempted to be created.;2021
This study assessed the extent to which an adapted robotics programme fostered interest in science, technology, engineering and mathematics (STEM) among children with disabilities. This study included pre- and post-programme surveys. The sample involved 57 children with disabilities who participated in an adapted robotics programme held in a pediatric hospital. There were two main forms of the programme: junior group (aged 6-9) and intermediate group (aged 10-14). Statistical analyses showed that although both groups of children perceived they gained at least some knowledge about computing/robotics from the programme, juniors were significantly more likely to report learning a lot from the programme than intermediates. Further, the junior group showed a significant increased desire to pursue future careers in computing/robotics after the programme. However, the intentions of either group to actually study computing/robotics at school did not significantly increase. A thematic analysis of open-ended survey responses revealed that the intent of both groups of children for participating in the programme along with what they enjoyed the most during the programme was linked to STEM, socialisation and teamwork. Additionally, while the majority of the intermediate group liked everything about the programme, the majority of the junior group reported on some things they disliked.;2021
This study compares the effects of object-oriented and robot programming activities on programming achievement, abstraction, problem solving, and motivation. In the study, two consecutive experimental cases were conducted to examine the consistency of findings. The research sample comprises 81 tenth-grade students undergoing vocational secondary education. A total of 41 students participated in the first case that spanned 12 weeks, and 40 students participated in the second that spanned 8 weeks. After computational activities, the programming achievement scores significantly increased in all test groups. However, the achievement scores did not differ significantly between the groups. For the comparison groups, there was no statistically significant difference in the pre- and posttest scores of the formal and descriptive abstraction in both cases. However, a statistically significant increase was found in the formal (only Case 2) and descriptive abstraction scores of the students in the experimental groups. The abstraction results revealed a significant difference in the descriptive abstraction scores of Case 2 in favour of the experimental group. No statistically significant difference was found in the problem-solving scores within or between groups. In both cases, the motivation scores of the experimental groups were found to be statistically higher than those of the comparison groups.;2021
This study explored (1) pedagogical strategies in Educational Coding and Robotics (ECR) learning which can develop computational thinking of students and (2) the degree of teacher centrality in the ECR classroom. In addition, we investigated (3) the added value of the Small Private Online Course (SPOC) to teacher professional development (TPD). We analyzed reflections of 80 in-service teachers on TPD through the SPOC (1,091 statements) and conducted semi-structured interviews with 13 of them one year after completing the course and teaching ECR in the classroom (328 statements). The most prominent strategies immediately after the TPD were constructing learning experiences, tinkering & debugging, and interdisciplinary learning, while one year later, experiential learning and collaborative learning were more common. Regarding the degree of teacher centrality, a year after teaching ECR curriculum the teachers had a significantly higher percentage of statements reflecting their role as a guide-on-the-side and as a partner of students in the learning process. Regarding the contribution of the SPOC for TPD, teacher statements revealed significantly more benefits than challenges in both points of time. Interestingly, the same categories emerged bottom-up as benefits and challenges: a variety of control dimensions, independent learning, learning and knowledge management and collaboration. Implications for educational theory and ECR practice are discussed.;2021
"This study implements a design-based research approach to design and evaluate different scaffolding strategies for supporting student learning as well as promoting student agency within a computational science course. The course introduces computational methods and tools in the context of disciplinary problems for materials science and engineering students. Initial course offerings suggested that students were overwhelmed by the interdisciplinary nature of the course. Therefore, the research team evaluated different scaffolding strategies for supporting students' learning, and how those may have provided students with agency to self-scaffold when needed. Three rounds of data collection included 17 students who participated in individual semi-structured interviews to explore how they used (or not) different scaffolds. Five of the participants were recruited for the first iteration; six of them were recruited in the second iteration, and six more in the third one. The iterative process allowed us to adapt the scaffolding procedures for the third iteration from the data collected in iterations 1 and 2. The purpose of this study is to understand how students used different scaffolds, and what implementation strategies were effective according to student uses of these scaffolds in the context of computational science. The results suggest that students developed agency to self-scaffold when needed, as they benefited from multiple scaffolds at different steps of the problem-solving process. Moreover, providing worked examples without engaging students in their active exploration can be ineffective, but this engagement can be achieved using written explanations. Additional support may be needed at an early stage of skill development, so students have an idea of how to validate their model.";2021
This study investigated the relationship between middle school students' computational thinking skills and their STEM career interest and attitudes toward inquiry. A total of 289 students (146 female, 143 male) enrolled in four different middle schools in one province of Turkey participated in this study. Three different data collection tools were used in the study: Science Technology Engineering Mathematics-Career Interest Survey, computational thinking scale, and the scale of attitude towards inquiry. The data were analyzed using the structural regression model, which is one of the structural equation models. A significant correlation was found between the middle school students' computational thinking skills and their STEM career interest and attitudes toward inquiry. In this context, efforts can be made to develop computational thinking skills, such as creativity, algorithmic thinking, cooperative thinking, and critical thinking to increase middle school students' STEM career interest and attitudes toward inquiry.;2021
This study investigates the development of algorithmic thinking as a part of computational thinking skills and self-efficacy of primary school pupils using programmable robots in different instruction variants. Computational thinking is defined in the context of twenty-first century skills and describes processes involved in (re)formulating a problem in a way that a computer can process it. Programming robots offers specific affordances as it can be used to develop programs following a Sense-Reason-Act (SRA) cycle. The literature provides evidence that programming robots has the potential to enhance algorithmic thinking as a component of computational thinking. Specifically there are indications that pupils who use SRA-programming learn algorithmic skills better and achieve a higher level of self-efficacy in an open, scaffold learning environment than through direct instruction. In order to determine the influence of the instruction variant used, an experimental research design was made in which pupils solved algorithm-based mathematical problems (grid diagrams) in a preliminary measurement and their self-efficacy determined via a questionnaire. As an intervention, pupils learn to solve programming issues in pairs using Lego NXT robots and Mindstorms software in two instruction variants. The post-measurement consists of a Lego challenge, solving mathematical problems (grid diagrams), and a repeated self-efficacy questionnaire. This research shows an increase of our measures on algorithmic thinking dependent on the amount of SRA usage (though not significant). Programming using the SRA-cycle can be considered as the cause of the measured effect. The instruction variant used during the robotic intervention seems to play only a marginal role.;2021
This study investigates the relationship between two related computational thinking practices: data practices and computational problem-solving practices in acquiring related computational thinking practices during a first-year undergraduate engineering course. While computational thinking theory is still developing, empirical studies can help further understand how students demonstrate this knowledge and their progression in attaining the practices. Therefore, with this empirical study, the following questions are addressed. RQ1: What are the differences in students' computational thinking practices at the beginning of an undergraduate introductory programming course? RQ 2: How do these differences correspond to the acquisition of more advanced computational thinking practices? The use of a descriptive non-experimental design that aims to understand the correlation between practices related to data and computational problem-solving is presented. A machine learning technique is employed, utilizing historical data from introductory programming for a problem-solving course with more than 1000 first-year engineering students. After identifying groups of students defining different profiles, data from posterior performance in more advanced programming topics were descriptively analyzed. This study supports the characterization of four different student profiles demonstrating differences in their performance at the beginning of the semester. From these four profiles, two of them show a subsequent differential progression besides their similarity at the beginning of the semester. In this particular case, troubleshooting and debugging appear as a relevant competency when distinguishing these two learners' groups. These findings suggest that previous knowledge or exposure to different practices can result in different progressions of more complex computational practices, emphasizing the relevance of troubleshooting and debugging as a practice required for a successful and timely progression on the acquisition of other computational thinking practices.;2021
This study proposed plugged and unplugged approaches for young students to simultaneously improve their interdisciplinary learning performance in English and Computational Thinking (CT). The plugged approach involved adopting educational robots to enhance CT and to provide English vocabulary and sentence practice via a board game. The unplugged version of the educational board game involved using a conventional board game without a computer, although it was designed for practicing CT as well as some foreign language vocabulary and conversational sentences. The results show that both approaches were helpful for simultaneously improving the students' English proficiency of the target vocabulary and sentences, and their CT competence. The students' foreign language learning anxiety during the English conversation in the plugged game was significantly lower than that of the students playing the unplugged game. On one hand, the cooperation tendency of the CT scale improved significantly for the students playing the unplugged game. On the other hand, the critical thinking of the CT scale improved significantly for those using the plugged approach. This research provides an innovation development and evaluation for plugged and unplugged approaches.;2021
This study proposes design science research (DSR) as a relevant framework for computational thinking, software engineering, and science, technology, engineering, arts and mathematics integration in higher education. We present four concrete case examples, where DSR has been applied in projects that consist of interdisciplinary teams, which learn by designing solutions for pressing real-world problems. Our results show that DSR is a potent framework for learning to tackle pressing and wicked problems, and connecting technology projects with research methodology and knowledge from other fields. Our results also show multiple learning gains, including creativity, communication, critical thinking and collaboration. Based on our case analysis, we recommend more extensive use of DSR in future technology curricula.;2021
This study reports the design and implementation of modelling-based programming instruction for science majors and its effectiveness on programming and science learning. A modelling approach was proposed to provide guidance to students in implementing solutions for scientific problems in computer programming. This modelling approach includes five stages: (a) phenomenon description, (b) data modelling, (c) algorithmic modelling, (d) coding and (e) verification and debugging. Authentic scenarios for science learning were adopted in teaching materials and problems to inspire students to learning both the scientific and programming aspects underneath the phenomena. An empirical experiment to examine the effectiveness of the proposed instruction was conducted in a general education course at a university, and the results showed that students who engaged more in the modelling approach performed better in both the program implementation test and their final projecbenefits of the modelling-based instructionts. In addition, students' feedback agreed with what we had expected, the modelling approach would benefit students: they could connect abstract, real-world phenomena to programming variables and logic by visualizing the phenomena in simulation and animation. Data modelling and algorithmic modelling also helped them analyse the variables in problem space and propose a solution before coding. As the proposed instruction provided opportunities to experience the capability of programming in solving scientific problems, high-programming-performance students also showed a greater interest in exploring science after the class.;2021
This study shows the relevance of introducing visual block programming and robotics in primary education. The study describes how robotics are effectively implemented in schools, based on computational concepts and the classroom activities. We describe, apply and present specific resources teachers, who may think of introducing programming and robotics in education must consider. These resources can be adapted to their students' levels and education stages. It is essential to be aware of the resources available and adapt them to students' needs. The analysis involves 107 fifth-grade students in primary education at three schools. The sample of the study was non-probabilistic and intentional. The study is bidimensional. The first dimension is a quasi-experimental design obtaining data from a test. Construct validity was tested by an exploratory factor analysis. The second dimension details the results for four scales previously described: active learning, computational concepts, perceived usefulness and enjoyment. This dimension examines the results of the aforementioned scale, which analyses the pedagogical interactions. Statistically significant improvements were achieved in the understanding of basic computational concepts such as sequences, loops, conditional statements, parallel execution, event handling and use of robotics. Improvements were also noted in didactic interaction, and in greater enjoyment, enthusiasm, efficiency and active participation of students. They also showed stronger motivation, commitment and interest in the process.;2021
This study sought to identify factors that affect teachers' beliefs about teaching computing in their classrooms. By reviewing existing scales and research on computing, we created the Teacher Beliefs about Coding and Computational Thinking (TBaCCT) scale. Through confirmatory factor analysis and structural equation modeling we validated the scale with data from 245 elementary teachers from eight U.S. school districts who participated in computing teacher development and taught coding to elementary students over one school year. Teachers' self-efficacy for coding and computational thinking increased significantly as they taught coding, while their teaching efficacy for computing increased the most. The resulting 33-item TBaCCT provides a validated scale that can be used to measure elementary teacher beliefs about computing education as they engage in teacher professional development.;2021
Traditional in-app virtual reality (VR)/augmented reality (AR) applications pose a challenge of reaching users due to their dependency on operating systems (Android, iOS). Besides, it is difficult for general users to create their own VR/AR applications and foster their creative ideas without advanced programming skills. This paper addresses these issues by proposing an interactive extended reality toolkit, named BlocklyXR. The objective of this research is to provide general users with a visual programming environment to build an extended reality application for digital storytelling. The contextual design was generated from real-world map data retrieved from Mapbox GL. ThreeJS was used for setting up, rendering 3D environments, and controlling animations. A block-based programming approach was adapted to let users design their own story. The capability of BlocklyXR was illustrated with a use case where users were able to replicate the existing PalmitoAR utilizing the block-based authoring toolkit with fewer efforts in programming. The technology acceptance model was used to evaluate the adoption and use of the interactive extended reality toolkit. The findings showed that visual design and task technology fit had significantly positive effects on user motivation factors (perceived ease of use and perceived usefulness). In turn, perceived usefulness had statistically significant and positive effects on intention to use, while there was no significant impact of perceived ease of use on intention to use. Study implications and future research directions are discussed.;2021
Traditionally, cognitive skills in mathematics and language have been described as key indicators for success. However, the social, technological, and economic changes that have occurred in the 21st century have made critical thinking, creativity, communication, and collaboration, key competences to face the challenges of a rapidly changing world. In this study, we developed a Computational Thinking (CT) curriculum based on student-centred pedagogical strategies to enhance these four competences. This curriculum was designed under the socio-cultural vision of learning, in which individuals interact in communities to build significant knowledge. An embedded mixed-method approach was implemented to evaluate improvements in competence development both in quantitative and qualitative ways in a sample of 42 students. The results indicate an encouraging increase in skills related to the competences of interest thanks to the implementation of a student-centred pedagogical curriculum based on CT. Additionally, by designing the curriculum under socio-cultural ideas of education the results show that the students and the teacher were able to form a community to facilitate teaching and learning.;2021
Troubleshooting is a particular problem-solving process comprising error detection, fault diagnosis, and system restoration. Since automation of systems has become increasingly complex and ubiquitous, troubleshooting skills are crucial to maintain safety and security in a variety of contexts. The planned study aims at examining troubleshooting strategies and how to induce them by means of simple visual aids and concise instructions. To this end, a computerized task consisting of network troubleshooting problems will be employed in an experimental study with repeated measures. Indicators of strategy use and performance will be tested for their relation to availability and differential use of visual aids, to cognitive styles that affect how individuals deal with challenges or system information, and to cognitive processes that are involved in metacognition and executive function. The planned research is expected to help gain insights into the cognitive determinants of troubleshooting, reverse engineering, and their links to computational thinking.;2021
Understanding the principles of computational thinking (CT), e.g., problem abstraction, decomposition, and recursion, is vital for computer science (CS) students. Unfortunately, these concepts can be difficult for novice students to understand. One way students can develop CT skills is to involve them in the design of an application to teach CT. This study focuses on co-designing mini games to support teaching and learning CT principles and concepts in an online environment. Online co-design (OCD) of mini games enhances students' understanding of problem-solving through a rigorous process of designing contextual educational games to aid their own learning. Given the current COVID-19 pandemic, where face-to-face co-designing between researchers and stakeholders could be difficult, OCD is a suitable option. CS students in a Nigerian higher education institution were recruited to co-design mini games with researchers. Mixed research methods comprising qualitative and quantitative strategies were employed in this study. Findings show that the participants gained relevant knowledge, for example, how to (i) create game scenarios and game elements related to CT, (ii) connect contextual storyline to mini games, (iii) collaborate in a group to create contextual low-fidelity mini game prototypes, and (iv) peer review each other's mini game concepts. In addition, students were motivated toward designing educational mini games in their future studies. This study also demonstrates how to conduct OCD with students, presents lesson learned, and provides recommendations based on the authors' experience.;2021
Visual programming environments are popular instruments in teaching Computational Thinking (CT) in schools today. Applying Sense-Reason-Act (SRA) programming can influence the development of computational thinking when forcing pupils to anticipate the unforeseen in their computer programs. SRA-programming originates from the programming of tangible robots, but can also be of equal value in visual programming with on-screen output. The underlying rationale is that programming in a visual programming environment using SRA leads to more understanding of the computational concepts addressed, resulting in a higher level of computational skill compared to visual programming without the application of SRA. Furthermore, it has been hypothesised that if pupils in a visual programming environment can anticipate unforeseen events and solve programming tasks by applying SRA, they will be better able to solve complex computational thinking tasks. To establish if characteristic differences in the development of computational thinking can be measured when SRA-programming is applied in a visual programming environment with an on-screen output, we assessed the applicability of SRA-programming with visual output as the main component of the execution of developed code. This research uses a pre-test post-test design that reveals significant differences in the development of computational thinking in two treatment conditions. To assess CT, the Computational Thinking Test (CTt) was used. Results show that when using SRA-programming in a visual programming environment it leads to an increased understanding of complex computational concepts, which results in a significant increase in the development of computational thinking.;2021
We adopt the concerns-based adoption model as an analytical lens to explore how Korean teachers perceive the mandated changes brought about by the policy to teach software (SW) education. The research questions are (a) How can teachers be grouped according to their perceived SW knowledge/skills and pedagogical beliefs? (b) What are the overall trends in teachers' stages of concern about SW education? and (c) How are the stages of concern about SW education distributed according to the different teacher types? The participants were 207 teachers who completed the online survey. Data were collected about their perceived SW knowledge/skills, pedagogical beliefs, and the seven stages of concern related to SW education. First, K-means clustering was performed to categorize teachers into four types based on their SW knowledge/skills and pedagogical beliefs. Overall, our findings indicate that 40% of the participants belonged to Type I, who have high SW knowledge/skills and pedagogical beliefs. Second, the concerns profile in Type I showed an M pattern in which they hold both self and impact concerns. Types II-IV showed a similar trend, such that the trends peak at Stage 0 (Awareness) and the intense concerns at the self-level (Stage 1,Informationaland Stage 2,Personal). All types demonstrated a tailing up phenomenon at Stage 6 (Refocusing). This study has implications for the design of concern-based interventions and makes suggestions to enable teachers to move toward more advanced levels to adopt computational thinking-based pedagogy in SW education.;2021
We describe the use of think alouds to examine substantive processes involved in performance on a formative assessment of computational thinking (CT) designed to support self-regulated learning (SRL). Our task design model included three phases of work on a computational thinking problem: forethought, performance, and reflection. The cognitive processes of seven students who reported their thinking during all three phases were analyzed. Ratings of artifacts of code indicated the computational thinking problem was moderately difficult to solve (M = 15, SD = 5) on a scale of 0 to 21 points. Profiles were created to illustrate length and sequence of different types of cognitive processes during the think-aloud. Results provide construct validity evidence for the tasks as formative assessments of CT, elucidate the way learners at different levels of skill use SRL, shed light on the nature of computational thinking, and point out areas for improvement in assessment design.;2021
We examine elementary and middle school students social interactions while engaged in making activities designed to promote computational thinking (CT). Participants include 52 students in grades five, six, seven and eight working in 17 different groups in three different schools in the Northeast. Students solved CT challenges introduced by their teachers during a series of lessons in their classroom or school makerspace. Prior to the CT challenges, teachers participated in summer professional development focused on developing lessons aligning disciplinary content with CT competencies and practices. Co-ACT, an observation rubric that measures CT during collaborative problem solving, and semi-structured interviews were used to investigate students proficiency with and perspectives toward peer interactions and communication. The majority of participants interacted and communicated with peers at an acceptable or proficient level and students perceived their social interactions as positive. Findings also implied educators might find ways to increase self-monitoring and equitable participation.;2021
We investigated six preservice secondary science teachers' implementation of reform-based science, in particular, their teaching of theNext Generation Science Standards'(NGSS) science and engineering practice ofusing mathematics and computational thinking. A modified version of the Task Analysis Guide in Science served as our conceptual framework: It assesses both theintegrationof practices and content (i.e., the kind of thinking required), and thecognitive demandof tasks (i.e., the level of thinking required) in teachers' lessons. We used this framework to qualitatively analyze our preservice teacher participants' edTPA (teacher performance assessment) lessons-including their written commentaries, video-recorded lesson excerpts, and student work samples-for their implementation of theNGSS using mathematics and computational thinkingpractice. We examined (1) the integration of the mathematical content and practices outlined in theCommon Core State Standards for Mathematicswithin the targetNGSSpractice, and (2) the cognitive demand of the mathematics in relation to science and mathematical practices. We found that four of our six preservice teachers implemented lessons that were integrated and cognitively demanding: These participants used the mathematics to move students' understanding of the science phenomena forward. However, the other two participants implemented lessons that integrated mathematical content and practices but were low in cognitive demand. We conclude with implications for how teacher education programs can better support preservice teachers' implementation of lessons that are both integratedandcognitively demanding so as to promote students' mathematical reasoning and scientific sensemaking.;2021
"We, teachers in Latin America, live between the potential of digital school and, at the same time, the actual situation of school socioeconomic segregation of our students. Therefore, we ask: how to build digital learning despite the situation of socioeconomic school segregation? When defining itself, what learning can boys and girls build? Both, a teacher researcher and 71 girls and boys between 9-13 years old, built an action research that consisted of the use of a digital strategy in computational thinking, in addition, the execution of class workshops, focus groups and a family recovery of the lived experience to capitalize built learning. We used a qualitative analysis assisted by the Atlas ti software -version 8-. We grounded on data eight learnings built by girls and boys: spontaneous learning; to censor content; to teach the family; to identify their own learning; to belong to online communities; to know how to play; feelings about learning; and, school usefulness of technology. Finally, we discuss the findings within the research background, its methodological and practical implications.";2021
"When middle school students encounter computer models of science phenomena in science class, how do they think those computer models work? Computer models operationalize real-world behaviors of selected variables, and can simulate interactions between the modeled elements through programmed instructions. This study explores how middle school students think about the high-level semantic meaning of those instructions, which we term rules. To investigate this aspect of students' computational thinking, we developed the Computational Modeling Inventory and administered it to 253 7th grade students. The Inventory included three computer models that students interacted with during the assessment. In our sample, 99% of students identified at least one key rule underlying a model, but only 14% identified all key rules; 65% believed that model rules can contradict; and 98% could not distinguish between emergent patterns and behaviors that directly resulted from model rules. Despite these misconceptions, compared to the typical questions about the science content alone, questions about model rules elicited deeper science thinking, with 2-10 times more responses including reasoning about scientific mechanisms. These results suggest that incorporating computational thinking instruction into middle school science courses might yield deeper learning and more precise assessments around scientific models.";2021
With predictions of robotics and efficient machine learning being the building blocks of the Fourth Industrial Revolution, countries need to adopt a long-term strategy to deal with potential challenges of automation and education must be at the center of this long-term strategy. Education must provide students with a grounding in certain skills, such as computational thinking and an understanding of robotics, which are likely to be required in many future roles. Targeting an acknowledged gap in existing humanoid robot research in the school learning environment, we present a multidisciplinary framework that integrates the following four perspectives: technological, pedagogical, efficacy of humanoid robots and a consideration of the ethical implications of using humanoid robots. Further, this paper presents a proposed application, evaluation and a case study of how the framework can be used.;2021
"With the development and growth of information technology computational thinking has become a crucial skill. Therefore, using programming courses is a common way of training students in computational skills; however, students usually have poor academic performance when it comes to programming courses. The main reason is that they do not have enough background knowledge to recognize compiler messages, which makes it difficult for them to learn these courses. Therefore, this study developed a Real-Time Feedback Learning System (RTFLS) to help students learn programming. The proposed system integrates a real-time module, a search module, and a push technology module. Therefore, when students practice programming, the RTFLS can monitor their compiler messages, filter and parse them while searching for reference resources and their instant response messages on the Internet. Although the RTFLS has a positive impact on the students' learning performances there are some problems with low relevance in the response messages of the RTFLS. This is because certain compiler messages do not appear in the programming syntax, but can cause errors. Therefore, in some cases, the RTFLS cannot effectively provide highly-relevant response messages.";2021
